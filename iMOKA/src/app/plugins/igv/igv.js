(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.igv = factory());
}(this, (function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var check = function (it) {
	  return it && it.Math == Math && it;
	}; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028


	var global_1 = // eslint-disable-next-line no-undef
	check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || check(typeof self == 'object' && self) || check(typeof commonjsGlobal == 'object' && commonjsGlobal) || // eslint-disable-next-line no-new-func
	function () {
	  return this;
	}() || Function('return this')();

	var fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	var descriptors = !fails(function () {
	  return Object.defineProperty({}, 1, {
	    get: function () {
	      return 7;
	    }
	  })[1] != 7;
	});

	var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug

	var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({
	  1: 2
	}, 1); // `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable

	var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : nativePropertyIsEnumerable;
	var objectPropertyIsEnumerable = {
	  f: f
	};

	var createPropertyDescriptor = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var toString = {}.toString;

	var classofRaw = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	var split = ''.split; // fallback for non-array-like ES3 and non-enumerable old V8 strings

	var indexedObject = fails(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins
	  return !Object('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
	} : Object;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on " + it);
	  return it;
	};

	var toIndexedObject = function (it) {
	  return indexedObject(requireObjectCoercible(it));
	};

	var isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	// https://tc39.github.io/ecma262/#sec-toprimitive
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string

	var toPrimitive = function (input, PREFERRED_STRING) {
	  if (!isObject(input)) return input;
	  var fn, val;
	  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var hasOwnProperty = {}.hasOwnProperty;

	var has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var document$1 = global_1.document; // typeof document.createElement is 'object' in old IE

	var EXISTS = isObject(document$1) && isObject(document$1.createElement);

	var documentCreateElement = function (it) {
	  return EXISTS ? document$1.createElement(it) : {};
	};

	var ie8DomDefine = !descriptors && !fails(function () {
	  return Object.defineProperty(documentCreateElement('div'), 'a', {
	    get: function () {
	      return 7;
	    }
	  }).a != 7;
	});

	var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor

	var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject(O);
	  P = toPrimitive(P, true);
	  if (ie8DomDefine) try {
	    return nativeGetOwnPropertyDescriptor(O, P);
	  } catch (error) {
	    /* empty */
	  }
	  if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
	};
	var objectGetOwnPropertyDescriptor = {
	  f: f$1
	};

	var anObject = function (it) {
	  if (!isObject(it)) {
	    throw TypeError(String(it) + ' is not an object');
	  }

	  return it;
	};

	var nativeDefineProperty = Object.defineProperty; // `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty

	var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (ie8DomDefine) try {
	    return nativeDefineProperty(O, P, Attributes);
	  } catch (error) {
	    /* empty */
	  }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};
	var objectDefineProperty = {
	  f: f$2
	};

	var createNonEnumerableProperty = descriptors ? function (object, key, value) {
	  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var setGlobal = function (key, value) {
	  try {
	    createNonEnumerableProperty(global_1, key, value);
	  } catch (error) {
	    global_1[key] = value;
	  }

	  return value;
	};

	var SHARED = '__core-js_shared__';
	var store = global_1[SHARED] || setGlobal(SHARED, {});
	var sharedStore = store;

	var functionToString = Function.toString; // this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper

	if (typeof sharedStore.inspectSource != 'function') {
	  sharedStore.inspectSource = function (it) {
	    return functionToString.call(it);
	  };
	}

	var inspectSource = sharedStore.inspectSource;

	var WeakMap = global_1.WeakMap;
	var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));

	var isPure = false;

	var shared = createCommonjsModule(function (module) {
	  (module.exports = function (key, value) {
	    return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
	  })('versions', []).push({
	    version: '3.7.0',
	    mode:  'global',
	    copyright: 'Â© 2020 Denis Pushkarev (zloirock.ru)'
	  });
	});

	var id = 0;
	var postfix = Math.random();

	var uid = function (key) {
	  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
	};

	var keys = shared('keys');

	var sharedKey = function (key) {
	  return keys[key] || (keys[key] = uid(key));
	};

	var hiddenKeys = {};

	var WeakMap$1 = global_1.WeakMap;
	var set, get, has$1;

	var enforce = function (it) {
	  return has$1(it) ? get(it) : set(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;

	    if (!isObject(it) || (state = get(it)).type !== TYPE) {
	      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
	    }

	    return state;
	  };
	};

	if (nativeWeakMap) {
	  var store$1 = sharedStore.state || (sharedStore.state = new WeakMap$1());
	  var wmget = store$1.get;
	  var wmhas = store$1.has;
	  var wmset = store$1.set;

	  set = function (it, metadata) {
	    metadata.facade = it;
	    wmset.call(store$1, it, metadata);
	    return metadata;
	  };

	  get = function (it) {
	    return wmget.call(store$1, it) || {};
	  };

	  has$1 = function (it) {
	    return wmhas.call(store$1, it);
	  };
	} else {
	  var STATE = sharedKey('state');
	  hiddenKeys[STATE] = true;

	  set = function (it, metadata) {
	    metadata.facade = it;
	    createNonEnumerableProperty(it, STATE, metadata);
	    return metadata;
	  };

	  get = function (it) {
	    return has(it, STATE) ? it[STATE] : {};
	  };

	  has$1 = function (it) {
	    return has(it, STATE);
	  };
	}

	var internalState = {
	  set: set,
	  get: get,
	  has: has$1,
	  enforce: enforce,
	  getterFor: getterFor
	};

	var redefine = createCommonjsModule(function (module) {
	  var getInternalState = internalState.get;
	  var enforceInternalState = internalState.enforce;
	  var TEMPLATE = String(String).split('String');
	  (module.exports = function (O, key, value, options) {
	    var unsafe = options ? !!options.unsafe : false;
	    var simple = options ? !!options.enumerable : false;
	    var noTargetGet = options ? !!options.noTargetGet : false;
	    var state;

	    if (typeof value == 'function') {
	      if (typeof key == 'string' && !has(value, 'name')) {
	        createNonEnumerableProperty(value, 'name', key);
	      }

	      state = enforceInternalState(value);

	      if (!state.source) {
	        state.source = TEMPLATE.join(typeof key == 'string' ? key : '');
	      }
	    }

	    if (O === global_1) {
	      if (simple) O[key] = value;else setGlobal(key, value);
	      return;
	    } else if (!unsafe) {
	      delete O[key];
	    } else if (!noTargetGet && O[key]) {
	      simple = true;
	    }

	    if (simple) O[key] = value;else createNonEnumerableProperty(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	  })(Function.prototype, 'toString', function toString() {
	    return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
	  });
	});

	var path = global_1;

	var aFunction = function (variable) {
	  return typeof variable == 'function' ? variable : undefined;
	};

	var getBuiltIn = function (namespace, method) {
	  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace]) : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
	};

	var ceil = Math.ceil;
	var floor = Math.floor; // `ToInteger` abstract operation
	// https://tc39.github.io/ecma262/#sec-tointeger

	var toInteger = function (argument) {
	  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
	};

	var min = Math.min; // `ToLength` abstract operation
	// https://tc39.github.io/ecma262/#sec-tolength

	var toLength = function (argument) {
	  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min; // Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).

	var toAbsoluteIndex = function (index, length) {
	  var integer = toInteger(index);
	  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};

	var createMethod = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value; // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare

	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++]; // eslint-disable-next-line no-self-compare

	      if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
	    } else for (; length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    }
	    return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
	  includes: createMethod(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod(false)
	};

	var indexOf = arrayIncludes.indexOf;

	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject(object);
	  var i = 0;
	  var result = [];
	  var key;

	  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key); // Don't enum bug & hidden keys


	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~indexOf(result, key) || result.push(key);
	  }

	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];

	var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames

	var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return objectKeysInternal(O, hiddenKeys$1);
	};

	var objectGetOwnPropertyNames = {
	  f: f$3
	};

	var f$4 = Object.getOwnPropertySymbols;
	var objectGetOwnPropertySymbols = {
	  f: f$4
	};

	var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = objectGetOwnPropertyNames.f(anObject(it));
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
	};

	var copyConstructorProperties = function (target, source) {
	  var keys = ownKeys(source);
	  var defineProperty = objectDefineProperty.f;
	  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;

	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	  }
	};

	var replacement = /#|\.prototype\./;

	var isForced = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;
	};

	var normalize = isForced.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced.data = {};
	var NATIVE = isForced.NATIVE = 'N';
	var POLYFILL = isForced.POLYFILL = 'P';
	var isForced_1 = isForced;

	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	*/

	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;

	  if (GLOBAL) {
	    target = global_1;
	  } else if (STATIC) {
	    target = global_1[TARGET] || setGlobal(TARGET, {});
	  } else {
	    target = (global_1[TARGET] || {}).prototype;
	  }

	  if (target) for (key in source) {
	    sourceProperty = source[key];

	    if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$1(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];

	    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target

	    if (!FORCED && targetProperty !== undefined) {
	      if (typeof sourceProperty === typeof targetProperty) continue;
	      copyConstructorProperties(sourceProperty, targetProperty);
	    } // add a flag to not completely full polyfills


	    if (options.sham || targetProperty && targetProperty.sham) {
	      createNonEnumerableProperty(sourceProperty, 'sham', true);
	    } // extend global


	    redefine(target, key, sourceProperty, options);
	  }
	};

	var aFunction$1 = function (it) {
	  if (typeof it != 'function') {
	    throw TypeError(String(it) + ' is not a function');
	  }

	  return it;
	};

	var functionBindContext = function (fn, that, length) {
	  aFunction$1(fn);
	  if (that === undefined) return fn;

	  switch (length) {
	    case 0:
	      return function () {
	        return fn.call(that);
	      };

	    case 1:
	      return function (a) {
	        return fn.call(that, a);
	      };

	    case 2:
	      return function (a, b) {
	        return fn.call(that, a, b);
	      };

	    case 3:
	      return function (a, b, c) {
	        return fn.call(that, a, b, c);
	      };
	  }

	  return function ()
	  /* ...args */
	  {
	    return fn.apply(that, arguments);
	  };
	};

	// https://tc39.github.io/ecma262/#sec-toobject

	var toObject = function (argument) {
	  return Object(requireObjectCoercible(argument));
	};

	// https://tc39.github.io/ecma262/#sec-isarray

	var isArray = Array.isArray || function isArray(arg) {
	  return classofRaw(arg) == 'Array';
	};

	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
	  // Chrome 38 Symbol has incorrect toString conversion
	  // eslint-disable-next-line no-undef
	  return !String(Symbol());
	});

	var useSymbolAsUid = nativeSymbol // eslint-disable-next-line no-undef
	&& !Symbol.sham // eslint-disable-next-line no-undef
	&& typeof Symbol.iterator == 'symbol';

	var WellKnownSymbolsStore = shared('wks');
	var Symbol$1 = global_1.Symbol;
	var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

	var wellKnownSymbol = function (name) {
	  if (!has(WellKnownSymbolsStore, name)) {
	    if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
	  }

	  return WellKnownSymbolsStore[name];
	};

	var SPECIES = wellKnownSymbol('species'); // `ArraySpeciesCreate` abstract operation
	// https://tc39.github.io/ecma262/#sec-arrayspeciescreate

	var arraySpeciesCreate = function (originalArray, length) {
	  var C;

	  if (isArray(originalArray)) {
	    C = originalArray.constructor; // cross-realm fallback

	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;else if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  }

	  return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
	};

	var push = [].push; // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation

	var createMethod$1 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject($this);
	    var self = indexedObject(O);
	    var boundFunction = functionBindContext(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate;
	    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var value, result;

	    for (; length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);

	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	            case 3:
	              return true;
	            // some

	            case 5:
	              return value;
	            // find

	            case 6:
	              return index;
	            // findIndex

	            case 2:
	              push.call(target, value);
	            // filter
	          } else if (IS_EVERY) return false; // every
	      }
	    }

	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$1(0),
	  // `Array.prototype.map` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.map
	  map: createMethod$1(1),
	  // `Array.prototype.filter` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
	  filter: createMethod$1(2),
	  // `Array.prototype.some` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.some
	  some: createMethod$1(3),
	  // `Array.prototype.every` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.every
	  every: createMethod$1(4),
	  // `Array.prototype.find` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.find
	  find: createMethod$1(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$1(6)
	};

	var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

	var process$1 = global_1.process;
	var versions = process$1 && process$1.versions;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.');
	  version = match[0] + match[1];
	} else if (engineUserAgent) {
	  match = engineUserAgent.match(/Edge\/(\d+)/);

	  if (!match || match[1] >= 74) {
	    match = engineUserAgent.match(/Chrome\/(\d+)/);
	    if (match) version = match[1];
	  }
	}

	var engineV8Version = version && +version;

	var SPECIES$1 = wellKnownSymbol('species');

	var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return engineV8Version >= 51 || !fails(function () {
	    var array = [];
	    var constructor = array.constructor = {};

	    constructor[SPECIES$1] = function () {
	      return {
	        foo: 1
	      };
	    };

	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var defineProperty = Object.defineProperty;
	var cache = {};

	var thrower = function (it) {
	  throw it;
	};

	var arrayMethodUsesToLength = function (METHOD_NAME, options) {
	  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
	  if (!options) options = {};
	  var method = [][METHOD_NAME];
	  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
	  var argument0 = has(options, 0) ? options[0] : thrower;
	  var argument1 = has(options, 1) ? options[1] : undefined;
	  return cache[METHOD_NAME] = !!method && !fails(function () {
	    if (ACCESSORS && !descriptors) return true;
	    var O = {
	      length: -1
	    };
	    if (ACCESSORS) defineProperty(O, 1, {
	      enumerable: true,
	      get: thrower
	    });else O[1] = 1;
	    method.call(O, argument0, argument1);
	  });
	};

	var $filter = arrayIteration.filter;
	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter'); // Edge 14- issue

	var USES_TO_LENGTH = arrayMethodUsesToLength('filter'); // `Array.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.filter
	// with adding support of @@species

	_export({
	  target: 'Array',
	  proto: true,
	  forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
	}, {
	  filter: function filter(callbackfn
	  /* , thisArg */
	  ) {
	    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var arrayMethodIsStrict = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call,no-throw-literal
	    method.call(null, argument || function () {
	      throw 1;
	    }, 1);
	  });
	};

	var $forEach = arrayIteration.forEach;
	var STRICT_METHOD = arrayMethodIsStrict('forEach');
	var USES_TO_LENGTH$1 = arrayMethodUsesToLength('forEach'); // `Array.prototype.forEach` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach

	var arrayForEach = !STRICT_METHOD || !USES_TO_LENGTH$1 ? function forEach(callbackfn
	/* , thisArg */
	) {
	  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	} : [].forEach;

	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach


	_export({
	  target: 'Array',
	  proto: true,
	  forced: [].forEach != arrayForEach
	}, {
	  forEach: arrayForEach
	});

	var $indexOf = arrayIncludes.indexOf;
	var nativeIndexOf = [].indexOf;
	var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
	var STRICT_METHOD$1 = arrayMethodIsStrict('indexOf');
	var USES_TO_LENGTH$2 = arrayMethodUsesToLength('indexOf', {
	  ACCESSORS: true,
	  1: 0
	}); // `Array.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.indexof

	_export({
	  target: 'Array',
	  proto: true,
	  forced: NEGATIVE_ZERO || !STRICT_METHOD$1 || !USES_TO_LENGTH$2
	}, {
	  indexOf: function indexOf(searchElement
	  /* , fromIndex = 0 */
	  ) {
	    return NEGATIVE_ZERO // convert -0 to +0
	    ? nativeIndexOf.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var min$2 = Math.min;
	var nativeLastIndexOf = [].lastIndexOf;
	var NEGATIVE_ZERO$1 = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
	var STRICT_METHOD$2 = arrayMethodIsStrict('lastIndexOf'); // For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method

	var USES_TO_LENGTH$3 = arrayMethodUsesToLength('indexOf', {
	  ACCESSORS: true,
	  1: 0
	});
	var FORCED = NEGATIVE_ZERO$1 || !STRICT_METHOD$2 || !USES_TO_LENGTH$3; // `Array.prototype.lastIndexOf` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof

	var arrayLastIndexOf = FORCED ? function lastIndexOf(searchElement
	/* , fromIndex = @[*-1] */
	) {
	  // convert -0 to +0
	  if (NEGATIVE_ZERO$1) return nativeLastIndexOf.apply(this, arguments) || 0;
	  var O = toIndexedObject(this);
	  var length = toLength(O.length);
	  var index = length - 1;
	  if (arguments.length > 1) index = min$2(index, toInteger(arguments[1]));
	  if (index < 0) index = length + index;

	  for (; index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;

	  return -1;
	} : nativeLastIndexOf;

	// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof

	_export({
	  target: 'Array',
	  proto: true,
	  forced: arrayLastIndexOf !== [].lastIndexOf
	}, {
	  lastIndexOf: arrayLastIndexOf
	});

	// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags


	var regexpFlags = function () {
	  var that = anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.dotAll) result += 's';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

	// so we use an intermediate function.


	function RE(s, f) {
	  return RegExp(s, f);
	}

	var UNSUPPORTED_Y = fails(function () {
	  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
	  var re = RE('a', 'y');
	  re.lastIndex = 2;
	  return re.exec('abcd') != null;
	});
	var BROKEN_CARET = fails(function () {
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
	  var re = RE('^r', 'gy');
	  re.lastIndex = 2;
	  return re.exec('str') != null;
	});
	var regexpStickyHelpers = {
	  UNSUPPORTED_Y: UNSUPPORTED_Y,
	  BROKEN_CARET: BROKEN_CARET
	};

	var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the
	// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
	// which loads this file before patching the method.

	var nativeReplace = String.prototype.replace;
	var patchedExec = nativeExec;

	var UPDATES_LAST_INDEX_WRONG = function () {
	  var re1 = /a/;
	  var re2 = /b*/g;
	  nativeExec.call(re1, 'a');
	  nativeExec.call(re2, 'a');
	  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
	}();

	var UNSUPPORTED_Y$1 = regexpStickyHelpers.UNSUPPORTED_Y || regexpStickyHelpers.BROKEN_CARET; // nonparticipating capturing group, copied from es5-shim's String#split patch.

	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1;

	if (PATCH) {
	  patchedExec = function exec(str) {
	    var re = this;
	    var lastIndex, reCopy, match, i;
	    var sticky = UNSUPPORTED_Y$1 && re.sticky;
	    var flags = regexpFlags.call(re);
	    var source = re.source;
	    var charsAdded = 0;
	    var strCopy = str;

	    if (sticky) {
	      flags = flags.replace('y', '');

	      if (flags.indexOf('g') === -1) {
	        flags += 'g';
	      }

	      strCopy = String(str).slice(re.lastIndex); // Support anchored sticky behavior.

	      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
	        source = '(?: ' + source + ')';
	        strCopy = ' ' + strCopy;
	        charsAdded++;
	      } // ^(? + rx + ) is needed, in combination with some str slicing, to
	      // simulate the 'y' flag.


	      reCopy = new RegExp('^(?:' + source + ')', flags);
	    }

	    if (NPCG_INCLUDED) {
	      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
	    }

	    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;
	    match = nativeExec.call(sticky ? reCopy : re, strCopy);

	    if (sticky) {
	      if (match) {
	        match.input = match.input.slice(charsAdded);
	        match[0] = match[0].slice(charsAdded);
	        match.index = re.lastIndex;
	        re.lastIndex += match[0].length;
	      } else re.lastIndex = 0;
	    } else if (UPDATES_LAST_INDEX_WRONG && match) {
	      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
	    }

	    if (NPCG_INCLUDED && match && match.length > 1) {
	      // Fix browsers whose `exec` methods don't consistently return `undefined`
	      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
	      nativeReplace.call(match[0], reCopy, function () {
	        for (i = 1; i < arguments.length - 2; i++) {
	          if (arguments[i] === undefined) match[i] = undefined;
	        }
	      });
	    }

	    return match;
	  };
	}

	var regexpExec = patchedExec;

	_export({
	  target: 'RegExp',
	  proto: true,
	  forced: /./.exec !== regexpExec
	}, {
	  exec: regexpExec
	});

	var MATCH = wellKnownSymbol('match'); // `IsRegExp` abstract operation
	// https://tc39.github.io/ecma262/#sec-isregexp

	var isRegexp = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
	};

	var notARegexp = function (it) {
	  if (isRegexp(it)) {
	    throw TypeError("The method doesn't accept regular expressions");
	  }

	  return it;
	};

	var MATCH$1 = wellKnownSymbol('match');

	var correctIsRegexpLogic = function (METHOD_NAME) {
	  var regexp = /./;

	  try {
	    '/./'[METHOD_NAME](regexp);
	  } catch (error1) {
	    try {
	      regexp[MATCH$1] = false;
	      return '/./'[METHOD_NAME](regexp);
	    } catch (error2) {
	      /* empty */
	    }
	  }

	  return false;
	};

	var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;
	var nativeEndsWith = ''.endsWith;
	var min$3 = Math.min;
	var CORRECT_IS_REGEXP_LOGIC = correctIsRegexpLogic('endsWith'); // https://github.com/zloirock/core-js/pull/702

	var MDN_POLYFILL_BUG =  !CORRECT_IS_REGEXP_LOGIC && !!function () {
	  var descriptor = getOwnPropertyDescriptor$2(String.prototype, 'endsWith');
	  return descriptor && !descriptor.writable;
	}(); // `String.prototype.endsWith` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.endswith

	_export({
	  target: 'String',
	  proto: true,
	  forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
	}, {
	  endsWith: function endsWith(searchString
	  /* , endPosition = @length */
	  ) {
	    var that = String(requireObjectCoercible(this));
	    notARegexp(searchString);
	    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
	    var len = toLength(that.length);
	    var end = endPosition === undefined ? len : min$3(toLength(endPosition), len);
	    var search = String(searchString);
	    return nativeEndsWith ? nativeEndsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
	  }
	});

	var SPECIES$2 = wellKnownSymbol('species');
	var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
	  // #replace needs built-in support for named groups.
	  // #match works fine because it just return the exec results, even if it has
	  // a "grops" property.
	  var re = /./;

	  re.exec = function () {
	    var result = [];
	    result.groups = {
	      a: '7'
	    };
	    return result;
	  };

	  return ''.replace(re, '$<a>') !== '7';
	}); // IE <= 11 replaces $0 with the whole match, as if it was $&
	// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0

	var REPLACE_KEEPS_$0 = function () {
	  return 'a'.replace(/./, '$0') === '$0';
	}();

	var REPLACE = wellKnownSymbol('replace'); // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string

	var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function () {
	  if (/./[REPLACE]) {
	    return /./[REPLACE]('a', '$0') === '';
	  }

	  return false;
	}(); // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
	// Weex JS has frozen built-in prototypes, so use try / catch wrapper


	var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
	  var re = /(?:)/;
	  var originalExec = re.exec;

	  re.exec = function () {
	    return originalExec.apply(this, arguments);
	  };

	  var result = 'ab'.split(re);
	  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
	});

	var fixRegexpWellKnownSymbolLogic = function (KEY, length, exec, sham) {
	  var SYMBOL = wellKnownSymbol(KEY);
	  var DELEGATES_TO_SYMBOL = !fails(function () {
	    // String methods call symbol-named RegEp methods
	    var O = {};

	    O[SYMBOL] = function () {
	      return 7;
	    };

	    return ''[KEY](O) != 7;
	  });
	  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
	    // Symbol-named RegExp methods call .exec
	    var execCalled = false;
	    var re = /a/;

	    if (KEY === 'split') {
	      // We can't use real regex here since it causes deoptimization
	      // and serious performance degradation in V8
	      // https://github.com/zloirock/core-js/issues/306
	      re = {}; // RegExp[@@split] doesn't call the regex's exec method, but first creates
	      // a new one. We need to return the patched regex when creating the new one.

	      re.constructor = {};

	      re.constructor[SPECIES$2] = function () {
	        return re;
	      };

	      re.flags = '';
	      re[SYMBOL] = /./[SYMBOL];
	    }

	    re.exec = function () {
	      execCalled = true;
	      return null;
	    };

	    re[SYMBOL]('');
	    return !execCalled;
	  });

	  if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !(REPLACE_SUPPORTS_NAMED_GROUPS && REPLACE_KEEPS_$0 && !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE) || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
	    var nativeRegExpMethod = /./[SYMBOL];
	    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
	      if (regexp.exec === regexpExec) {
	        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
	          // The native String method already delegates to @@method (this
	          // polyfilled function), leasing to infinite recursion.
	          // We avoid it by directly calling the native @@method method.
	          return {
	            done: true,
	            value: nativeRegExpMethod.call(regexp, str, arg2)
	          };
	        }

	        return {
	          done: true,
	          value: nativeMethod.call(str, regexp, arg2)
	        };
	      }

	      return {
	        done: false
	      };
	    }, {
	      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
	      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
	    });
	    var stringMethod = methods[0];
	    var regexMethod = methods[1];
	    redefine(String.prototype, KEY, stringMethod);
	    redefine(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	    // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	    ? function (string, arg) {
	      return regexMethod.call(string, this, arg);
	    } // 21.2.5.6 RegExp.prototype[@@match](string)
	    // 21.2.5.9 RegExp.prototype[@@search](string)
	    : function (string) {
	      return regexMethod.call(string, this);
	    });
	  }

	  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
	};

	// `SameValue` abstract operation
	// https://tc39.github.io/ecma262/#sec-samevalue
	var sameValue = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

	// https://tc39.github.io/ecma262/#sec-regexpexec

	var regexpExecAbstract = function (R, S) {
	  var exec = R.exec;

	  if (typeof exec === 'function') {
	    var result = exec.call(R, S);

	    if (typeof result !== 'object') {
	      throw TypeError('RegExp exec method returned something other than an Object or null');
	    }

	    return result;
	  }

	  if (classofRaw(R) !== 'RegExp') {
	    throw TypeError('RegExp#exec called on incompatible receiver');
	  }

	  return regexpExec.call(R, S);
	};

	fixRegexpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {
	  return [// `String.prototype.search` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.search
	  function search(regexp) {
	    var O = requireObjectCoercible(this);
	    var searcher = regexp == undefined ? undefined : regexp[SEARCH];
	    return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	  }, // `RegExp.prototype[@@search]` method
	  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
	  function (regexp) {
	    var res = maybeCallNative(nativeSearch, regexp, this);
	    if (res.done) return res.value;
	    var rx = anObject(regexp);
	    var S = String(this);
	    var previousLastIndex = rx.lastIndex;
	    if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
	    var result = regexpExecAbstract(rx, S);
	    if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
	    return result === null ? -1 : result.index;
	  }];
	});

	var SPECIES$3 = wellKnownSymbol('species'); // `SpeciesConstructor` abstract operation
	// https://tc39.github.io/ecma262/#sec-speciesconstructor

	var speciesConstructor = function (O, defaultConstructor) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES$3]) == undefined ? defaultConstructor : aFunction$1(S);
	};

	var createMethod$2 = function (CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = String(requireObjectCoercible($this));
	    var position = toInteger(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = S.charCodeAt(position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod$2(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod$2(true)
	};

	var charAt = stringMultibyte.charAt; // `AdvanceStringIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-advancestringindex

	var advanceStringIndex = function (S, index, unicode) {
	  return index + (unicode ? charAt(S, index).length : 1);
	};

	var arrayPush = [].push;
	var min$4 = Math.min;
	var MAX_UINT32 = 0xFFFFFFFF; // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError

	var SUPPORTS_Y = !fails(function () {
	  return !RegExp(MAX_UINT32, 'y');
	}); // @@split logic

	fixRegexpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
	  var internalSplit;

	  if ('abbc'.split(/(b)*/)[1] == 'c' || 'test'.split(/(?:)/, -1).length != 4 || 'ab'.split(/(?:ab)*/).length != 2 || '.'.split(/(.?)(.?)/).length != 4 || '.'.split(/()()/).length > 1 || ''.split(/.?/).length) {
	    // based on es5-shim implementation, need to rework it
	    internalSplit = function (separator, limit) {
	      var string = String(requireObjectCoercible(this));
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (separator === undefined) return [string]; // If `separator` is not a regex, use native split

	      if (!isRegexp(separator)) {
	        return nativeSplit.call(string, separator, lim);
	      }

	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0; // Make `global` and avoid `lastIndex` issues by working with a copy

	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var match, lastIndex, lastLength;

	      while (match = regexpExec.call(separatorCopy, string)) {
	        lastIndex = separatorCopy.lastIndex;

	        if (lastIndex > lastLastIndex) {
	          output.push(string.slice(lastLastIndex, match.index));
	          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
	          lastLength = match[0].length;
	          lastLastIndex = lastIndex;
	          if (output.length >= lim) break;
	        }

	        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
	      }

	      if (lastLastIndex === string.length) {
	        if (lastLength || !separatorCopy.test('')) output.push('');
	      } else output.push(string.slice(lastLastIndex));

	      return output.length > lim ? output.slice(0, lim) : output;
	    }; // Chakra, V8

	  } else if ('0'.split(undefined, 0).length) {
	    internalSplit = function (separator, limit) {
	      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
	    };
	  } else internalSplit = nativeSplit;

	  return [// `String.prototype.split` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.split
	  function split(separator, limit) {
	    var O = requireObjectCoercible(this);
	    var splitter = separator == undefined ? undefined : separator[SPLIT];
	    return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
	  }, // `RegExp.prototype[@@split]` method
	  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
	  //
	  // NOTE: This cannot be properly polyfilled in engines that don't support
	  // the 'y' flag.
	  function (regexp, limit) {
	    var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
	    if (res.done) return res.value;
	    var rx = anObject(regexp);
	    var S = String(this);
	    var C = speciesConstructor(rx, RegExp);
	    var unicodeMatching = rx.unicode;
	    var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g'); // ^(? + rx + ) is needed, in combination with some S slicing, to
	    // simulate the 'y' flag.

	    var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
	    var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	    if (lim === 0) return [];
	    if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];
	    var p = 0;
	    var q = 0;
	    var A = [];

	    while (q < S.length) {
	      splitter.lastIndex = SUPPORTS_Y ? q : 0;
	      var z = regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
	      var e;

	      if (z === null || (e = min$4(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
	        q = advanceStringIndex(S, q, unicodeMatching);
	      } else {
	        A.push(S.slice(p, q));
	        if (A.length === lim) return A;

	        for (var i = 1; i <= z.length - 1; i++) {
	          A.push(z[i]);
	          if (A.length === lim) return A;
	        }

	        q = p = e;
	      }
	    }

	    A.push(S.slice(p));
	    return A;
	  }];
	}, !SUPPORTS_Y);

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	for (var COLLECTION_NAME in domIterables) {
	  var Collection = global_1[COLLECTION_NAME];
	  var CollectionPrototype = Collection && Collection.prototype; // some Chrome versions have non-configurable methods on DOMTokenList

	  if (CollectionPrototype && CollectionPrototype.forEach !== arrayForEach) try {
	    createNonEnumerableProperty(CollectionPrototype, 'forEach', arrayForEach);
	  } catch (error) {
	    CollectionPrototype.forEach = arrayForEach;
	  }
	}

	var runtime_1 = createCommonjsModule(function (module) {
	  /**
	   * Copyright (c) 2014-present, Facebook, Inc.
	   *
	   * This source code is licensed under the MIT license found in the
	   * LICENSE file in the root directory of this source tree.
	   */
	  var runtime = function (exports) {

	    var Op = Object.prototype;
	    var hasOwn = Op.hasOwnProperty;
	    var undefined$1; // More compressible than void 0.

	    var $Symbol = typeof Symbol === "function" ? Symbol : {};
	    var iteratorSymbol = $Symbol.iterator || "@@iterator";
	    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	    function define(obj, key, value) {
	      Object.defineProperty(obj, key, {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	      return obj[key];
	    }

	    try {
	      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	      define({}, "");
	    } catch (err) {
	      define = function (obj, key, value) {
	        return obj[key] = value;
	      };
	    }

	    function wrap(innerFn, outerFn, self, tryLocsList) {
	      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	      var generator = Object.create(protoGenerator.prototype);
	      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
	      // .throw, and .return methods.

	      generator._invoke = makeInvokeMethod(innerFn, self, context);
	      return generator;
	    }

	    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
	    // record like context.tryEntries[i].completion. This interface could
	    // have been (and was previously) designed to take a closure to be
	    // invoked without arguments, but in all the cases we care about we
	    // already have an existing method we want to call, so there's no need
	    // to create a new function object. We can even get away with assuming
	    // the method takes exactly one argument, since that happens to be true
	    // in every case, so we don't have to touch the arguments object. The
	    // only additional allocation required is the completion record, which
	    // has a stable shape and so hopefully should be cheap to allocate.

	    function tryCatch(fn, obj, arg) {
	      try {
	        return {
	          type: "normal",
	          arg: fn.call(obj, arg)
	        };
	      } catch (err) {
	        return {
	          type: "throw",
	          arg: err
	        };
	      }
	    }

	    var GenStateSuspendedStart = "suspendedStart";
	    var GenStateSuspendedYield = "suspendedYield";
	    var GenStateExecuting = "executing";
	    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
	    // breaking out of the dispatch switch statement.

	    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
	    // .constructor.prototype properties for functions that return Generator
	    // objects. For full spec compliance, you may wish to configure your
	    // minifier not to mangle the names of these two functions.

	    function Generator() {}

	    function GeneratorFunction() {}

	    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
	    // don't natively support it.


	    var IteratorPrototype = {};

	    IteratorPrototype[iteratorSymbol] = function () {
	      return this;
	    };

	    var getProto = Object.getPrototypeOf;
	    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

	    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	      // This environment has a native %IteratorPrototype%; use it instead
	      // of the polyfill.
	      IteratorPrototype = NativeIteratorPrototype;
	    }

	    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
	    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	    GeneratorFunctionPrototype.constructor = GeneratorFunction;
	    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
	    // Iterator interface in terms of a single ._invoke method.

	    function defineIteratorMethods(prototype) {
	      ["next", "throw", "return"].forEach(function (method) {
	        define(prototype, method, function (arg) {
	          return this._invoke(method, arg);
	        });
	      });
	    }

	    exports.isGeneratorFunction = function (genFun) {
	      var ctor = typeof genFun === "function" && genFun.constructor;
	      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
	      // do is to check its .name property.
	      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
	    };

	    exports.mark = function (genFun) {
	      if (Object.setPrototypeOf) {
	        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	      } else {
	        genFun.__proto__ = GeneratorFunctionPrototype;
	        define(genFun, toStringTagSymbol, "GeneratorFunction");
	      }

	      genFun.prototype = Object.create(Gp);
	      return genFun;
	    }; // Within the body of any async function, `await x` is transformed to
	    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	    // `hasOwn.call(value, "__await")` to determine if the yielded value is
	    // meant to be awaited.


	    exports.awrap = function (arg) {
	      return {
	        __await: arg
	      };
	    };

	    function AsyncIterator(generator, PromiseImpl) {
	      function invoke(method, arg, resolve, reject) {
	        var record = tryCatch(generator[method], generator, arg);

	        if (record.type === "throw") {
	          reject(record.arg);
	        } else {
	          var result = record.arg;
	          var value = result.value;

	          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
	            return PromiseImpl.resolve(value.__await).then(function (value) {
	              invoke("next", value, resolve, reject);
	            }, function (err) {
	              invoke("throw", err, resolve, reject);
	            });
	          }

	          return PromiseImpl.resolve(value).then(function (unwrapped) {
	            // When a yielded Promise is resolved, its final value becomes
	            // the .value of the Promise<{value,done}> result for the
	            // current iteration.
	            result.value = unwrapped;
	            resolve(result);
	          }, function (error) {
	            // If a rejected Promise was yielded, throw the rejection back
	            // into the async generator function so it can be handled there.
	            return invoke("throw", error, resolve, reject);
	          });
	        }
	      }

	      var previousPromise;

	      function enqueue(method, arg) {
	        function callInvokeWithMethodAndArg() {
	          return new PromiseImpl(function (resolve, reject) {
	            invoke(method, arg, resolve, reject);
	          });
	        }

	        return previousPromise = // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
	        // invocations of the iterator.
	        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	      } // Define the unified helper method that is used to implement .next,
	      // .throw, and .return (see defineIteratorMethods).


	      this._invoke = enqueue;
	    }

	    defineIteratorMethods(AsyncIterator.prototype);

	    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	      return this;
	    };

	    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
	    // AsyncIterator objects; they just return a Promise for the value of
	    // the final result produced by the iterator.

	    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	      if (PromiseImpl === void 0) PromiseImpl = Promise;
	      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
	      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function (result) {
	        return result.done ? result.value : iter.next();
	      });
	    };

	    function makeInvokeMethod(innerFn, self, context) {
	      var state = GenStateSuspendedStart;
	      return function invoke(method, arg) {
	        if (state === GenStateExecuting) {
	          throw new Error("Generator is already running");
	        }

	        if (state === GenStateCompleted) {
	          if (method === "throw") {
	            throw arg;
	          } // Be forgiving, per 25.3.3.3.3 of the spec:
	          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


	          return doneResult();
	        }

	        context.method = method;
	        context.arg = arg;

	        while (true) {
	          var delegate = context.delegate;

	          if (delegate) {
	            var delegateResult = maybeInvokeDelegate(delegate, context);

	            if (delegateResult) {
	              if (delegateResult === ContinueSentinel) continue;
	              return delegateResult;
	            }
	          }

	          if (context.method === "next") {
	            // Setting context._sent for legacy support of Babel's
	            // function.sent implementation.
	            context.sent = context._sent = context.arg;
	          } else if (context.method === "throw") {
	            if (state === GenStateSuspendedStart) {
	              state = GenStateCompleted;
	              throw context.arg;
	            }

	            context.dispatchException(context.arg);
	          } else if (context.method === "return") {
	            context.abrupt("return", context.arg);
	          }

	          state = GenStateExecuting;
	          var record = tryCatch(innerFn, self, context);

	          if (record.type === "normal") {
	            // If an exception is thrown from innerFn, we leave state ===
	            // GenStateExecuting and loop back for another invocation.
	            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

	            if (record.arg === ContinueSentinel) {
	              continue;
	            }

	            return {
	              value: record.arg,
	              done: context.done
	            };
	          } else if (record.type === "throw") {
	            state = GenStateCompleted; // Dispatch the exception by looping back around to the
	            // context.dispatchException(context.arg) call above.

	            context.method = "throw";
	            context.arg = record.arg;
	          }
	        }
	      };
	    } // Call delegate.iterator[context.method](context.arg) and handle the
	    // result, either by returning a { value, done } result from the
	    // delegate iterator, or by modifying context.method and context.arg,
	    // setting context.delegate to null, and returning the ContinueSentinel.


	    function maybeInvokeDelegate(delegate, context) {
	      var method = delegate.iterator[context.method];

	      if (method === undefined$1) {
	        // A .throw or .return when the delegate iterator has no .throw
	        // method always terminates the yield* loop.
	        context.delegate = null;

	        if (context.method === "throw") {
	          // Note: ["return"] must be used for ES3 parsing compatibility.
	          if (delegate.iterator["return"]) {
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            context.method = "return";
	            context.arg = undefined$1;
	            maybeInvokeDelegate(delegate, context);

	            if (context.method === "throw") {
	              // If maybeInvokeDelegate(context) changed context.method from
	              // "return" to "throw", let that override the TypeError below.
	              return ContinueSentinel;
	            }
	          }

	          context.method = "throw";
	          context.arg = new TypeError("The iterator does not provide a 'throw' method");
	        }

	        return ContinueSentinel;
	      }

	      var record = tryCatch(method, delegate.iterator, context.arg);

	      if (record.type === "throw") {
	        context.method = "throw";
	        context.arg = record.arg;
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      var info = record.arg;

	      if (!info) {
	        context.method = "throw";
	        context.arg = new TypeError("iterator result is not an object");
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      if (info.done) {
	        // Assign the result of the finished delegate to the temporary
	        // variable specified by delegate.resultName (see delegateYield).
	        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

	        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
	        // exception, let the outer generator proceed normally. If
	        // context.method was "next", forget context.arg since it has been
	        // "consumed" by the delegate iterator. If context.method was
	        // "return", allow the original .return call to continue in the
	        // outer generator.

	        if (context.method !== "return") {
	          context.method = "next";
	          context.arg = undefined$1;
	        }
	      } else {
	        // Re-yield the result returned by the delegate method.
	        return info;
	      } // The delegate iterator is finished, so forget it and continue with
	      // the outer generator.


	      context.delegate = null;
	      return ContinueSentinel;
	    } // Define Generator.prototype.{next,throw,return} in terms of the
	    // unified ._invoke helper method.


	    defineIteratorMethods(Gp);
	    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
	    // @@iterator function is called on it. Some browsers' implementations of the
	    // iterator prototype chain incorrectly implement this, causing the Generator
	    // object to not be returned from this call. This ensures that doesn't happen.
	    // See https://github.com/facebook/regenerator/issues/274 for more details.

	    Gp[iteratorSymbol] = function () {
	      return this;
	    };

	    Gp.toString = function () {
	      return "[object Generator]";
	    };

	    function pushTryEntry(locs) {
	      var entry = {
	        tryLoc: locs[0]
	      };

	      if (1 in locs) {
	        entry.catchLoc = locs[1];
	      }

	      if (2 in locs) {
	        entry.finallyLoc = locs[2];
	        entry.afterLoc = locs[3];
	      }

	      this.tryEntries.push(entry);
	    }

	    function resetTryEntry(entry) {
	      var record = entry.completion || {};
	      record.type = "normal";
	      delete record.arg;
	      entry.completion = record;
	    }

	    function Context(tryLocsList) {
	      // The root entry object (effectively a try statement without a catch
	      // or a finally block) gives us a place to store values thrown from
	      // locations where there is no enclosing try statement.
	      this.tryEntries = [{
	        tryLoc: "root"
	      }];
	      tryLocsList.forEach(pushTryEntry, this);
	      this.reset(true);
	    }

	    exports.keys = function (object) {
	      var keys = [];

	      for (var key in object) {
	        keys.push(key);
	      }

	      keys.reverse(); // Rather than returning an object with a next method, we keep
	      // things simple and return the next function itself.

	      return function next() {
	        while (keys.length) {
	          var key = keys.pop();

	          if (key in object) {
	            next.value = key;
	            next.done = false;
	            return next;
	          }
	        } // To avoid creating an additional object, we just hang the .value
	        // and .done properties off the next function object itself. This
	        // also ensures that the minifier will not anonymize the function.


	        next.done = true;
	        return next;
	      };
	    };

	    function values(iterable) {
	      if (iterable) {
	        var iteratorMethod = iterable[iteratorSymbol];

	        if (iteratorMethod) {
	          return iteratorMethod.call(iterable);
	        }

	        if (typeof iterable.next === "function") {
	          return iterable;
	        }

	        if (!isNaN(iterable.length)) {
	          var i = -1,
	              next = function next() {
	            while (++i < iterable.length) {
	              if (hasOwn.call(iterable, i)) {
	                next.value = iterable[i];
	                next.done = false;
	                return next;
	              }
	            }

	            next.value = undefined$1;
	            next.done = true;
	            return next;
	          };

	          return next.next = next;
	        }
	      } // Return an iterator with no values.


	      return {
	        next: doneResult
	      };
	    }

	    exports.values = values;

	    function doneResult() {
	      return {
	        value: undefined$1,
	        done: true
	      };
	    }

	    Context.prototype = {
	      constructor: Context,
	      reset: function (skipTempReset) {
	        this.prev = 0;
	        this.next = 0; // Resetting context._sent for legacy support of Babel's
	        // function.sent implementation.

	        this.sent = this._sent = undefined$1;
	        this.done = false;
	        this.delegate = null;
	        this.method = "next";
	        this.arg = undefined$1;
	        this.tryEntries.forEach(resetTryEntry);

	        if (!skipTempReset) {
	          for (var name in this) {
	            // Not sure about the optimal order of these conditions:
	            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
	              this[name] = undefined$1;
	            }
	          }
	        }
	      },
	      stop: function () {
	        this.done = true;
	        var rootEntry = this.tryEntries[0];
	        var rootRecord = rootEntry.completion;

	        if (rootRecord.type === "throw") {
	          throw rootRecord.arg;
	        }

	        return this.rval;
	      },
	      dispatchException: function (exception) {
	        if (this.done) {
	          throw exception;
	        }

	        var context = this;

	        function handle(loc, caught) {
	          record.type = "throw";
	          record.arg = exception;
	          context.next = loc;

	          if (caught) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            context.method = "next";
	            context.arg = undefined$1;
	          }

	          return !!caught;
	        }

	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          var record = entry.completion;

	          if (entry.tryLoc === "root") {
	            // Exception thrown outside of any try block that could handle
	            // it, so set the completion value of the entire function to
	            // throw the exception.
	            return handle("end");
	          }

	          if (entry.tryLoc <= this.prev) {
	            var hasCatch = hasOwn.call(entry, "catchLoc");
	            var hasFinally = hasOwn.call(entry, "finallyLoc");

	            if (hasCatch && hasFinally) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              } else if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else if (hasCatch) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              }
	            } else if (hasFinally) {
	              if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else {
	              throw new Error("try statement without catch or finally");
	            }
	          }
	        }
	      },
	      abrupt: function (type, arg) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
	            var finallyEntry = entry;
	            break;
	          }
	        }

	        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
	          // Ignore the finally entry if control is not jumping to a
	          // location outside the try/catch block.
	          finallyEntry = null;
	        }

	        var record = finallyEntry ? finallyEntry.completion : {};
	        record.type = type;
	        record.arg = arg;

	        if (finallyEntry) {
	          this.method = "next";
	          this.next = finallyEntry.finallyLoc;
	          return ContinueSentinel;
	        }

	        return this.complete(record);
	      },
	      complete: function (record, afterLoc) {
	        if (record.type === "throw") {
	          throw record.arg;
	        }

	        if (record.type === "break" || record.type === "continue") {
	          this.next = record.arg;
	        } else if (record.type === "return") {
	          this.rval = this.arg = record.arg;
	          this.method = "return";
	          this.next = "end";
	        } else if (record.type === "normal" && afterLoc) {
	          this.next = afterLoc;
	        }

	        return ContinueSentinel;
	      },
	      finish: function (finallyLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.finallyLoc === finallyLoc) {
	            this.complete(entry.completion, entry.afterLoc);
	            resetTryEntry(entry);
	            return ContinueSentinel;
	          }
	        }
	      },
	      "catch": function (tryLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc === tryLoc) {
	            var record = entry.completion;

	            if (record.type === "throw") {
	              var thrown = record.arg;
	              resetTryEntry(entry);
	            }

	            return thrown;
	          }
	        } // The context.catch method must only be called with a location
	        // argument that corresponds to a known catch block.


	        throw new Error("illegal catch attempt");
	      },
	      delegateYield: function (iterable, resultName, nextLoc) {
	        this.delegate = {
	          iterator: values(iterable),
	          resultName: resultName,
	          nextLoc: nextLoc
	        };

	        if (this.method === "next") {
	          // Deliberately forget the last sent value so that we don't
	          // accidentally pass it on to the delegate.
	          this.arg = undefined$1;
	        }

	        return ContinueSentinel;
	      }
	    }; // Regardless of whether this script is executing as a CommonJS module
	    // or not, return the runtime object so that we can declare the variable
	    // regeneratorRuntime in the outer scope, which allows this module to be
	    // injected easily by `bin/regenerator --include-runtime script.js`.

	    return exports;
	  }( // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports );

	  try {
	    regeneratorRuntime = runtime;
	  } catch (accidentalStrictMode) {
	    // This module should not be running in strict mode, so the above
	    // assignment should always work unless something is misconfigured. Just
	    // in case runtime.js accidentally runs in strict mode, we can escape
	    // strict mode using a global Function call. This could conceivably fail
	    // if a Content Security Policy forbids using Function, but in that case
	    // the proper solution is to fix the accidental strict mode problem. If
	    // you've misconfigured your bundler to force strict mode and applied a
	    // CSP to forbid Function, and you're not willing to fix either of those
	    // problems, please detail your unique predicament in a GitHub issue.
	    Function("r", "regeneratorRuntime = r")(runtime);
	  }
	});

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof = function (obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof = function (obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof(obj);
	}

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _construct(Parent, args, Class) {
	  if (_isNativeReflectConstruct()) {
	    _construct = Reflect.construct;
	  } else {
	    _construct = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);
	      var Constructor = Function.bind.apply(Parent, a);
	      var instance = new Constructor();
	      if (Class) _setPrototypeOf(instance, Class.prototype);
	      return instance;
	    };
	  }

	  return _construct.apply(null, arguments);
	}

	function _isNativeFunction(fn) {
	  return Function.toString.call(fn).indexOf("[native code]") !== -1;
	}

	function _wrapNativeSuper(Class) {
	  var _cache = typeof Map === "function" ? new Map() : undefined;

	  _wrapNativeSuper = function _wrapNativeSuper(Class) {
	    if (Class === null || !_isNativeFunction(Class)) return Class;

	    if (typeof Class !== "function") {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    if (typeof _cache !== "undefined") {
	      if (_cache.has(Class)) return _cache.get(Class);

	      _cache.set(Class, Wrapper);
	    }

	    function Wrapper() {
	      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
	    }

	    Wrapper.prototype = Object.create(Class.prototype, {
	      constructor: {
	        value: Wrapper,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    return _setPrototypeOf(Wrapper, Class);
	  };

	  return _wrapNativeSuper(Class);
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _possibleConstructorReturn(self, call) {
	  if (call && (typeof call === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized(self);
	}

	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf(this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn(this, result);
	  };
	}

	function _superPropBase(object, property) {
	  while (!Object.prototype.hasOwnProperty.call(object, property)) {
	    object = _getPrototypeOf(object);
	    if (object === null) break;
	  }

	  return object;
	}

	function _get(target, property, receiver) {
	  if (typeof Reflect !== "undefined" && Reflect.get) {
	    _get = Reflect.get;
	  } else {
	    _get = function _get(target, property, receiver) {
	      var base = _superPropBase(target, property);

	      if (!base) return;
	      var desc = Object.getOwnPropertyDescriptor(base, property);

	      if (desc.get) {
	        return desc.get.call(receiver);
	      }

	      return desc.value;
	    };
	  }

	  return _get(target, property, receiver || target);
	}

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
	}

	function _toArray(arr) {
	  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
	}

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
	}

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArray(iter) {
	  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
	}

	function _iterableToArrayLimit(arr, i) {
	  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

	  return arr2;
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _createForOfIteratorHelper(o, allowArrayLike) {
	  var it;

	  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
	    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;

	      var F = function () {};

	      return {
	        s: F,
	        n: function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function (e) {
	          throw e;
	        },
	        f: F
	      };
	    }

	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  var normalCompletion = true,
	      didErr = false,
	      err;
	  return {
	    s: function () {
	      it = o[Symbol.iterator]();
	    },
	    n: function () {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function (e) {
	      didErr = true;
	      err = e;
	    },
	    f: function () {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	var btoa$1 = createCommonjsModule(function (module) {
	  (function () {

	    function btoa(str) {
	      var buffer;

	      if (str instanceof Buffer) {
	        buffer = str;
	      } else {
	        buffer = Buffer.from(str.toString(), 'binary');
	      }

	      return buffer.toString('base64');
	    }

	    module.exports = btoa;
	  })();
	});

	function div(options) {
	  return create("div", options);
	}

	function create(tag, options) {
	  const elem = document.createElement(tag);

	  if (options) {
	    if (options.class) {
	      elem.classList.add(options.class);
	    }

	    if (options.id) {
	      elem.id = options.id;
	    }

	    if (options.style) {
	      applyStyle(elem, options.style);
	    }
	  }

	  return elem;
	}

	function hide(elem) {
	  const cssStyle = getComputedStyle(elem);

	  if (cssStyle.display !== "none") {
	    elem._initialDisplay = cssStyle.display;
	  }

	  elem.style.display = "none";
	}

	function show(elem) {
	  const currentDisplay = getComputedStyle(elem).display;

	  if (currentDisplay === "none") {
	    const d = elem._initialDisplay || "block";
	    elem.style.display = d;
	  }
	}

	function offset(elem) {
	  // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
	  // Support: IE <=11 only
	  // Running getBoundingClientRect on a
	  // disconnected node in IE throws an error
	  if (!elem.getClientRects().length) {
	    return {
	      top: 0,
	      left: 0
	    };
	  } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


	  const rect = elem.getBoundingClientRect();
	  const win = elem.ownerDocument.defaultView;
	  return {
	    top: rect.top + win.pageYOffset,
	    left: rect.left + win.pageXOffset
	  };
	}

	function pageCoordinates(e) {
	  if (e.type.startsWith("touch")) {
	    const touch = e.touches[0];
	    return {
	      x: touch.pageX,
	      y: touch.pageY
	    };
	  } else {
	    return {
	      x: e.pageX,
	      y: e.pageY
	    };
	  }
	}

	function applyStyle(elem, style) {
	  for (let key of Object.keys(style)) {
	    elem.style[key] = style[key];
	  }
	}

	let getMouseXY = (domElement, {
	  clientX,
	  clientY
	}) => {
	  // DOMRect object with eight properties: left, top, right, bottom, x, y, width, height
	  const {
	    left,
	    top,
	    width,
	    height
	  } = domElement.getBoundingClientRect();
	  const x = clientX - left;
	  const y = clientY - top;
	  return {
	    x,
	    y,
	    xNormalized: x / width,
	    yNormalized: y / height,
	    width,
	    height
	  };
	};
	/**
	 * Translate the mouse coordinates for the event to the coordinates for the given target element
	 * @param event
	 * @param domElement
	 * @returns {{x: number, y: number}}
	 */


	function translateMouseCoordinates(event, domElement) {
	  const {
	    clientX,
	    clientY
	  } = event;
	  return getMouseXY(domElement, {
	    clientX,
	    clientY
	  });
	}

	function createCheckbox(name, initialState) {
	  const container = div({
	    class: 'igv-ui-trackgear-popover-check-container'
	  });
	  const svg = iconMarkup('check', true === initialState ? '#444' : 'transparent');
	  svg.style.borderColor = 'gray';
	  svg.style.borderWidth = '1px';
	  svg.style.borderStyle = 'solid';
	  container.appendChild(svg);
	  let label = div(); //{ class: 'igv-some-label-class' });

	  label.textContent = name;
	  container.appendChild(label);
	  return container;
	}

	function createIcon(name, color) {
	  return iconMarkup(name, color);
	}

	function iconMarkup(name, color) {
	  color = color || "currentColor";
	  let icon = icons[name];

	  if (!icon) {
	    console.error(`No icon named: ${name}`);
	    icon = icons["question"];
	  }

	  const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
	  svg.setAttributeNS(null, 'viewBox', '0 0 ' + icon[0] + ' ' + icon[1]);
	  const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
	  path.setAttributeNS(null, 'fill', color);
	  path.setAttributeNS(null, 'd', icon[4]);
	  svg.appendChild(path);
	  return svg;
	}

	const icons = {
	  "check": [512, 512, [], "f00c", "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"],
	  "cog": [512, 512, [], "f013", "M444.788 291.1l42.616 24.599c4.867 2.809 7.126 8.618 5.459 13.985-11.07 35.642-29.97 67.842-54.689 94.586a12.016 12.016 0 0 1-14.832 2.254l-42.584-24.595a191.577 191.577 0 0 1-60.759 35.13v49.182a12.01 12.01 0 0 1-9.377 11.718c-34.956 7.85-72.499 8.256-109.219.007-5.49-1.233-9.403-6.096-9.403-11.723v-49.184a191.555 191.555 0 0 1-60.759-35.13l-42.584 24.595a12.016 12.016 0 0 1-14.832-2.254c-24.718-26.744-43.619-58.944-54.689-94.586-1.667-5.366.592-11.175 5.459-13.985L67.212 291.1a193.48 193.48 0 0 1 0-70.199l-42.616-24.599c-4.867-2.809-7.126-8.618-5.459-13.985 11.07-35.642 29.97-67.842 54.689-94.586a12.016 12.016 0 0 1 14.832-2.254l42.584 24.595a191.577 191.577 0 0 1 60.759-35.13V25.759a12.01 12.01 0 0 1 9.377-11.718c34.956-7.85 72.499-8.256 109.219-.007 5.49 1.233 9.403 6.096 9.403 11.723v49.184a191.555 191.555 0 0 1 60.759 35.13l42.584-24.595a12.016 12.016 0 0 1 14.832 2.254c24.718 26.744 43.619 58.944 54.689 94.586 1.667 5.366-.592 11.175-5.459 13.985L444.788 220.9a193.485 193.485 0 0 1 0 70.2zM336 256c0-44.112-35.888-80-80-80s-80 35.888-80 80 35.888 80 80 80 80-35.888 80-80z"],
	  "exclamation": [192, 512, [], "f12a", "M176 432c0 44.112-35.888 80-80 80s-80-35.888-80-80 35.888-80 80-80 80 35.888 80 80zM25.26 25.199l13.6 272C39.499 309.972 50.041 320 62.83 320h66.34c12.789 0 23.331-10.028 23.97-22.801l13.6-272C167.425 11.49 156.496 0 142.77 0H49.23C35.504 0 24.575 11.49 25.26 25.199z"],
	  "exclamation-circle": [512, 512, [], "f06a", "M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"],
	  "exclamation-triangle": [576, 512, [], "f071", "M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"],
	  "minus": [448, 512, [], "f068", "M424 318.2c13.3 0 24-10.7 24-24v-76.4c0-13.3-10.7-24-24-24H24c-13.3 0-24 10.7-24 24v76.4c0 13.3 10.7 24 24 24h400z"],
	  "minus-circle": [512, 512, [], "f056", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zM124 296c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h264c6.6 0 12 5.4 12 12v56c0 6.6-5.4 12-12 12H124z"],
	  "minus-square": [448, 512, [], "f146", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zM92 296c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h264c6.6 0 12 5.4 12 12v56c0 6.6-5.4 12-12 12H92z"],
	  "plus": [448, 512, [], "f067", "M448 294.2v-76.4c0-13.3-10.7-24-24-24H286.2V56c0-13.3-10.7-24-24-24h-76.4c-13.3 0-24 10.7-24 24v137.8H24c-13.3 0-24 10.7-24 24v76.4c0 13.3 10.7 24 24 24h137.8V456c0 13.3 10.7 24 24 24h76.4c13.3 0 24-10.7 24-24V318.2H424c13.3 0 24-10.7 24-24z"],
	  "plus-circle": [512, 512, [], "f055", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"],
	  "plus-square": [448, 512, [], "f0fe", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-32 252c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92H92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"],
	  "question": [384, 512, [], "f128", "M202.021 0C122.202 0 70.503 32.703 29.914 91.026c-7.363 10.58-5.093 25.086 5.178 32.874l43.138 32.709c10.373 7.865 25.132 6.026 33.253-4.148 25.049-31.381 43.63-49.449 82.757-49.449 30.764 0 68.816 19.799 68.816 49.631 0 22.552-18.617 34.134-48.993 51.164-35.423 19.86-82.299 44.576-82.299 106.405V320c0 13.255 10.745 24 24 24h72.471c13.255 0 24-10.745 24-24v-5.773c0-42.86 125.268-44.645 125.268-160.627C377.504 66.256 286.902 0 202.021 0zM192 373.459c-38.196 0-69.271 31.075-69.271 69.271 0 38.195 31.075 69.27 69.271 69.27s69.271-31.075 69.271-69.271-31.075-69.27-69.271-69.27z"],
	  "save": [448, 512, [], "f0c7", "M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z"],
	  "search": [512, 512, [], "f002", "M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"],
	  "share": [512, 512, [], "f064", "M503.691 189.836L327.687 37.851C312.281 24.546 288 35.347 288 56.015v80.053C127.371 137.907 0 170.1 0 322.326c0 61.441 39.581 122.309 83.333 154.132 13.653 9.931 33.111-2.533 28.077-18.631C66.066 312.814 132.917 274.316 288 272.085V360c0 20.7 24.3 31.453 39.687 18.164l176.004-152c11.071-9.562 11.086-26.753 0-36.328z"],
	  "spinner": [512, 512, [], "f110", "M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z"],
	  "square": [448, 512, [], "f0c8", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"],
	  "square-full": [512, 512, [], "f45c", "M512 512H0V0h512v512z"],
	  "times": [384, 512, [], "f00d", "M323.1 441l53.9-53.9c9.4-9.4 9.4-24.5 0-33.9L279.8 256l97.2-97.2c9.4-9.4 9.4-24.5 0-33.9L323.1 71c-9.4-9.4-24.5-9.4-33.9 0L192 168.2 94.8 71c-9.4-9.4-24.5-9.4-33.9 0L7 124.9c-9.4 9.4-9.4 24.5 0 33.9l97.2 97.2L7 353.2c-9.4 9.4-9.4 24.5 0 33.9L60.9 441c9.4 9.4 24.5 9.4 33.9 0l97.2-97.2 97.2 97.2c9.3 9.3 24.5 9.3 33.9 0z"],
	  "times-circle": [512, 512, [], "f057", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"],
	  "wrench": [512, 512, [], "f0ad", "M481.156 200c9.3 0 15.12 10.155 10.325 18.124C466.295 259.992 420.419 288 368 288c-79.222 0-143.501-63.974-143.997-143.079C223.505 65.469 288.548-.001 368.002 0c52.362.001 98.196 27.949 123.4 69.743C496.24 77.766 490.523 88 481.154 88H376l-40 56 40 56h105.156zm-171.649 93.003L109.255 493.255c-24.994 24.993-65.515 24.994-90.51 0-24.993-24.994-24.993-65.516 0-90.51L218.991 202.5c16.16 41.197 49.303 74.335 90.516 90.503zM104 432c0-13.255-10.745-24-24-24s-24 10.745-24 24 10.745 24 24 24 24-10.745 24-24z"]
	};

	function attachDialogCloseHandlerWithParent(parent, closeHandler) {
	  var container = document.createElement("div");
	  parent.appendChild(container);
	  container.appendChild(createIcon("times"));
	  container.addEventListener('click', function (e) {
	    e.preventDefault();
	    e.stopPropagation();
	    closeHandler();
	  });
	}
	/**
	 * @fileoverview Zlib namespace. Zlib ã®ä»æ§ã«æºæ ããå§ç¸®ã¯ Zlib.Deflate ã§å®è£
	 * ããã¦ãã. ããã¯ Inflate ã¨ã®å±å­ãèæ®ãã¦ããçº.
	 */


	const ZLIB_STREAM_RAW_INFLATE_BUFFER_SIZE = 65000;
	var Zlib = {
	  Huffman: {},
	  Util: {},
	  CRC32: {}
	};
	/**
	 * Compression Method
	 * @enum {number}
	 */

	Zlib.CompressionMethod = {
	  DEFLATE: 8,
	  RESERVED: 15
	};
	/**
	 * @param {Object=} opt_params options.
	 * @constructor
	 */

	Zlib.Zip = function (opt_params) {
	  opt_params = opt_params || {};
	  /** @type {Array.<{
	   *   buffer: !(Array.<number>|Uint8Array),
	   *   option: Object,
	   *   compressed: boolean,
	   *   encrypted: boolean,
	   *   size: number,
	   *   crc32: number
	   * }>} */

	  this.files = [];
	  /** @type {(Array.<number>|Uint8Array)} */

	  this.comment = opt_params['comment'];
	  /** @type {(Array.<number>|Uint8Array)} */

	  this.password;
	};
	/**
	 * @enum {number}
	 */


	Zlib.Zip.CompressionMethod = {
	  STORE: 0,
	  DEFLATE: 8
	};
	/**
	 * @enum {number}
	 */

	Zlib.Zip.OperatingSystem = {
	  MSDOS: 0,
	  UNIX: 3,
	  MACINTOSH: 7
	};
	/**
	 * @enum {number}
	 */

	Zlib.Zip.Flags = {
	  ENCRYPT: 0x0001,
	  DESCRIPTOR: 0x0008,
	  UTF8: 0x0800
	};
	/**
	 * @type {Array.<number>}
	 * @const
	 */

	Zlib.Zip.FileHeaderSignature = [0x50, 0x4b, 0x01, 0x02];
	/**
	 * @type {Array.<number>}
	 * @const
	 */

	Zlib.Zip.LocalFileHeaderSignature = [0x50, 0x4b, 0x03, 0x04];
	/**
	 * @type {Array.<number>}
	 * @const
	 */

	Zlib.Zip.CentralDirectorySignature = [0x50, 0x4b, 0x05, 0x06];
	/**
	 * @param {Array.<number>|Uint8Array} input
	 * @param {Object=} opt_params options.
	 */

	Zlib.Zip.prototype.addFile = function (input, opt_params) {
	  opt_params = opt_params || {};
	  /** @type {string} */

	  var filename = opt_params['filename'];
	  /** @type {boolean} */

	  var compressed;
	  /** @type {number} */

	  var size = input.length;
	  /** @type {number} */

	  var crc32 = 0;

	  if (input instanceof Array) {
	    input = new Uint8Array(input);
	  } // default


	  if (typeof opt_params['compressionMethod'] !== 'number') {
	    opt_params['compressionMethod'] = Zlib.Zip.CompressionMethod.DEFLATE;
	  } // ãã®å ´ã§å§ç¸®ããå ´å


	  if (opt_params['compress']) {
	    switch (opt_params['compressionMethod']) {
	      case Zlib.Zip.CompressionMethod.STORE:
	        break;

	      case Zlib.Zip.CompressionMethod.DEFLATE:
	        crc32 = Zlib.CRC32.calc(input);
	        input = this.deflateWithOption(input, opt_params);
	        compressed = true;
	        break;

	      default:
	        throw new Error('unknown compression method:' + opt_params['compressionMethod']);
	    }
	  }

	  this.files.push({
	    buffer: input,
	    option: opt_params,
	    compressed: compressed,
	    encrypted: false,
	    size: size,
	    crc32: crc32
	  });
	};
	/**
	 * @param {(Array.<number>|Uint8Array)} password
	 */


	Zlib.Zip.prototype.setPassword = function (password) {
	  this.password = password;
	};

	Zlib.Zip.prototype.compress = function () {
	  /** @type {Array.<{
	   *   buffer: !(Array.<number>|Uint8Array),
	   *   option: Object,
	   *   compressed: boolean,
	   *   encrypted: boolean,
	   *   size: number,
	   *   crc32: number
	   * }>} */
	  var files = this.files;
	  /** @type {{
	   *   buffer: !(Array.<number>|Uint8Array),
	   *   option: Object,
	   *   compressed: boolean,
	   *   encrypted: boolean,
	   *   size: number,
	   *   crc32: number
	   * }} */

	  var file;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var output;
	  /** @type {number} */

	  var op1;
	  /** @type {number} */

	  var op2;
	  /** @type {number} */

	  var op3;
	  /** @type {number} */

	  var localFileSize = 0;
	  /** @type {number} */

	  var centralDirectorySize = 0;
	  /** @type {number} */

	  var endOfCentralDirectorySize;
	  /** @type {number} */

	  var offset;
	  /** @type {number} */

	  var needVersion;
	  /** @type {number} */

	  var flags;
	  /** @type {Zlib.Zip.CompressionMethod} */

	  var compressionMethod;
	  /** @type {Date} */

	  var date;
	  /** @type {number} */

	  var crc32;
	  /** @type {number} */

	  var size;
	  /** @type {number} */

	  var plainSize;
	  /** @type {number} */

	  var filenameLength;
	  /** @type {number} */

	  var extraFieldLength;
	  /** @type {number} */

	  var commentLength;
	  /** @type {(Array.<number>|Uint8Array)} */

	  var filename;
	  /** @type {(Array.<number>|Uint8Array)} */

	  var extraField;
	  /** @type {(Array.<number>|Uint8Array)} */

	  var comment;
	  /** @type {(Array.<number>|Uint8Array)} */

	  var buffer;
	  /** @type {*} */

	  var tmp;
	  /** @type {Array.<number>|Uint32Array|Object} */

	  var key;
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il;
	  /** @type {number} */

	  var j;
	  /** @type {number} */

	  var jl; // ãã¡ã¤ã«ã®å§ç¸®

	  for (i = 0, il = files.length; i < il; ++i) {
	    file = files[i];
	    filenameLength = file.option['filename'] ? file.option['filename'].length : 0;
	    extraFieldLength = file.option['extraField'] ? file.option['extraField'].length : 0;
	    commentLength = file.option['comment'] ? file.option['comment'].length : 0; // å§ç¸®ããã¦ããªãã£ããå§ç¸®

	    if (!file.compressed) {
	      // å§ç¸®åã« CRC32 ã®è¨ç®ããã¦ãã
	      file.crc32 = Zlib.CRC32.calc(file.buffer);

	      switch (file.option['compressionMethod']) {
	        case Zlib.Zip.CompressionMethod.STORE:
	          break;

	        case Zlib.Zip.CompressionMethod.DEFLATE:
	          file.buffer = this.deflateWithOption(file.buffer, file.option);
	          file.compressed = true;
	          break;

	        default:
	          throw new Error('unknown compression method:' + file.option['compressionMethod']);
	      }
	    } // encryption


	    if (file.option['password'] !== void 0 || this.password !== void 0) {
	      // init encryption
	      key = this.createEncryptionKey(file.option['password'] || this.password); // add header

	      buffer = file.buffer;
	      {
	        tmp = new Uint8Array(buffer.length + 12);
	        tmp.set(buffer, 12);
	        buffer = tmp;
	      }

	      for (j = 0; j < 12; ++j) {
	        buffer[j] = this.encode(key, i === 11 ? file.crc32 & 0xff : Math.random() * 256 | 0);
	      } // data encryption


	      for (jl = buffer.length; j < jl; ++j) {
	        buffer[j] = this.encode(key, buffer[j]);
	      }

	      file.buffer = buffer;
	    } // å¿è¦ãããã¡ãµã¤ãºã®è¨ç®


	    localFileSize += // local file header
	    30 + filenameLength + // file data
	    file.buffer.length;
	    centralDirectorySize += // file header
	    46 + filenameLength + commentLength;
	  } // end of central directory


	  endOfCentralDirectorySize = 22 + (this.comment ? this.comment.length : 0);
	  output = new Uint8Array(localFileSize + centralDirectorySize + endOfCentralDirectorySize);
	  op1 = 0;
	  op2 = localFileSize;
	  op3 = op2 + centralDirectorySize; // ãã¡ã¤ã«ã®å§ç¸®

	  for (i = 0, il = files.length; i < il; ++i) {
	    file = files[i];
	    filenameLength = file.option['filename'] ? file.option['filename'].length : 0;
	    extraFieldLength = 0; // TODO

	    commentLength = file.option['comment'] ? file.option['comment'].length : 0; //-------------------------------------------------------------------------
	    // local file header & file header
	    //-------------------------------------------------------------------------

	    offset = op1; // signature
	    // local file header

	    output[op1++] = Zlib.Zip.LocalFileHeaderSignature[0];
	    output[op1++] = Zlib.Zip.LocalFileHeaderSignature[1];
	    output[op1++] = Zlib.Zip.LocalFileHeaderSignature[2];
	    output[op1++] = Zlib.Zip.LocalFileHeaderSignature[3]; // file header

	    output[op2++] = Zlib.Zip.FileHeaderSignature[0];
	    output[op2++] = Zlib.Zip.FileHeaderSignature[1];
	    output[op2++] = Zlib.Zip.FileHeaderSignature[2];
	    output[op2++] = Zlib.Zip.FileHeaderSignature[3]; // compressor info

	    needVersion = 20;
	    output[op2++] = needVersion & 0xff;
	    output[op2++] =
	    /** @type {Zlib.Zip.OperatingSystem} */
	    file.option['os'] || Zlib.Zip.OperatingSystem.MSDOS; // need version

	    output[op1++] = output[op2++] = needVersion & 0xff;
	    output[op1++] = output[op2++] = needVersion >> 8 & 0xff; // general purpose bit flag

	    flags = 0;

	    if (file.option['password'] || this.password) {
	      flags |= Zlib.Zip.Flags.ENCRYPT;
	    }

	    output[op1++] = output[op2++] = flags & 0xff;
	    output[op1++] = output[op2++] = flags >> 8 & 0xff; // compression method

	    compressionMethod =
	    /** @type {Zlib.Zip.CompressionMethod} */
	    file.option['compressionMethod'];
	    output[op1++] = output[op2++] = compressionMethod & 0xff;
	    output[op1++] = output[op2++] = compressionMethod >> 8 & 0xff; // date

	    date =
	    /** @type {(Date|undefined)} */
	    file.option['date'] || new Date();
	    output[op1++] = output[op2++] = (date.getMinutes() & 0x7) << 5 | (date.getSeconds() / 2 | 0);
	    output[op1++] = output[op2++] = date.getHours() << 3 | date.getMinutes() >> 3; //

	    output[op1++] = output[op2++] = (date.getMonth() + 1 & 0x7) << 5 | date.getDate();
	    output[op1++] = output[op2++] = (date.getFullYear() - 1980 & 0x7f) << 1 | date.getMonth() + 1 >> 3; // CRC-32

	    crc32 = file.crc32;
	    output[op1++] = output[op2++] = crc32 & 0xff;
	    output[op1++] = output[op2++] = crc32 >> 8 & 0xff;
	    output[op1++] = output[op2++] = crc32 >> 16 & 0xff;
	    output[op1++] = output[op2++] = crc32 >> 24 & 0xff; // compressed size

	    size = file.buffer.length;
	    output[op1++] = output[op2++] = size & 0xff;
	    output[op1++] = output[op2++] = size >> 8 & 0xff;
	    output[op1++] = output[op2++] = size >> 16 & 0xff;
	    output[op1++] = output[op2++] = size >> 24 & 0xff; // uncompressed size

	    plainSize = file.size;
	    output[op1++] = output[op2++] = plainSize & 0xff;
	    output[op1++] = output[op2++] = plainSize >> 8 & 0xff;
	    output[op1++] = output[op2++] = plainSize >> 16 & 0xff;
	    output[op1++] = output[op2++] = plainSize >> 24 & 0xff; // filename length

	    output[op1++] = output[op2++] = filenameLength & 0xff;
	    output[op1++] = output[op2++] = filenameLength >> 8 & 0xff; // extra field length

	    output[op1++] = output[op2++] = extraFieldLength & 0xff;
	    output[op1++] = output[op2++] = extraFieldLength >> 8 & 0xff; // file comment length

	    output[op2++] = commentLength & 0xff;
	    output[op2++] = commentLength >> 8 & 0xff; // disk number start

	    output[op2++] = 0;
	    output[op2++] = 0; // internal file attributes

	    output[op2++] = 0;
	    output[op2++] = 0; // external file attributes

	    output[op2++] = 0;
	    output[op2++] = 0;
	    output[op2++] = 0;
	    output[op2++] = 0; // relative offset of local header

	    output[op2++] = offset & 0xff;
	    output[op2++] = offset >> 8 & 0xff;
	    output[op2++] = offset >> 16 & 0xff;
	    output[op2++] = offset >> 24 & 0xff; // filename

	    filename = file.option['filename'];

	    if (filename) {
	      {
	        output.set(filename, op1);
	        output.set(filename, op2);
	        op1 += filenameLength;
	        op2 += filenameLength;
	      }
	    } // extra field


	    extraField = file.option['extraField'];

	    if (extraField) {
	      {
	        output.set(extraField, op1);
	        output.set(extraField, op2);
	        op1 += extraFieldLength;
	        op2 += extraFieldLength;
	      }
	    } // comment


	    comment = file.option['comment'];

	    if (comment) {
	      {
	        output.set(comment, op2);
	        op2 += commentLength;
	      }
	    } //-------------------------------------------------------------------------
	    // file data
	    //-------------------------------------------------------------------------


	    {
	      output.set(file.buffer, op1);
	      op1 += file.buffer.length;
	    }
	  } //-------------------------------------------------------------------------
	  // end of central directory
	  //-------------------------------------------------------------------------
	  // signature


	  output[op3++] = Zlib.Zip.CentralDirectorySignature[0];
	  output[op3++] = Zlib.Zip.CentralDirectorySignature[1];
	  output[op3++] = Zlib.Zip.CentralDirectorySignature[2];
	  output[op3++] = Zlib.Zip.CentralDirectorySignature[3]; // number of this disk

	  output[op3++] = 0;
	  output[op3++] = 0; // number of the disk with the start of the central directory

	  output[op3++] = 0;
	  output[op3++] = 0; // total number of entries in the central directory on this disk

	  output[op3++] = il & 0xff;
	  output[op3++] = il >> 8 & 0xff; // total number of entries in the central directory

	  output[op3++] = il & 0xff;
	  output[op3++] = il >> 8 & 0xff; // size of the central directory

	  output[op3++] = centralDirectorySize & 0xff;
	  output[op3++] = centralDirectorySize >> 8 & 0xff;
	  output[op3++] = centralDirectorySize >> 16 & 0xff;
	  output[op3++] = centralDirectorySize >> 24 & 0xff; // offset of start of central directory with respect to the starting disk number

	  output[op3++] = localFileSize & 0xff;
	  output[op3++] = localFileSize >> 8 & 0xff;
	  output[op3++] = localFileSize >> 16 & 0xff;
	  output[op3++] = localFileSize >> 24 & 0xff; // .ZIP file comment length

	  commentLength = this.comment ? this.comment.length : 0;
	  output[op3++] = commentLength & 0xff;
	  output[op3++] = commentLength >> 8 & 0xff; // .ZIP file comment

	  if (this.comment) {
	    {
	      output.set(this.comment, op3);
	      op3 += commentLength;
	    }
	  }

	  return output;
	};
	/**
	 * @param {!(Array.<number>|Uint8Array)} input
	 * @param {Object=} opt_params options.
	 * @return {!(Array.<number>|Uint8Array)}
	 */


	Zlib.Zip.prototype.deflateWithOption = function (input, opt_params) {
	  /** @type {Zlib.RawDeflate} */
	  var deflator = new Zlib.RawDeflate(input, opt_params['deflateOption']);
	  return deflator.compress();
	};
	/**
	 * @param {(Array.<number>|Uint32Array)} key
	 * @return {number}
	 */


	Zlib.Zip.prototype.getByte = function (key) {
	  /** @type {number} */
	  var tmp = key[2] & 0xffff | 2;
	  return tmp * (tmp ^ 1) >> 8 & 0xff;
	};
	/**
	 * @param {(Array.<number>|Uint32Array|Object)} key
	 * @param {number} n
	 * @return {number}
	 */


	Zlib.Zip.prototype.encode = function (key, n) {
	  /** @type {number} */
	  var tmp = this.getByte(
	  /** @type {(Array.<number>|Uint32Array)} */
	  key);
	  this.updateKeys(
	  /** @type {(Array.<number>|Uint32Array)} */
	  key, n);
	  return tmp ^ n;
	};
	/**
	 * @param {(Array.<number>|Uint32Array)} key
	 * @param {number} n
	 */


	Zlib.Zip.prototype.updateKeys = function (key, n) {
	  key[0] = Zlib.CRC32.single(key[0], n);
	  key[1] = (((key[1] + (key[0] & 0xff)) * 20173 >>> 0) * 6681 >>> 0) + 1 >>> 0;
	  key[2] = Zlib.CRC32.single(key[2], key[1] >>> 24);
	};
	/**
	 * @param {(Array.<number>|Uint8Array)} password
	 * @return {!(Array.<number>|Uint32Array|Object)}
	 */


	Zlib.Zip.prototype.createEncryptionKey = function (password) {
	  /** @type {!(Array.<number>|Uint32Array)} */
	  var key = [305419896, 591751049, 878082192];
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il;
	  {
	    key = new Uint32Array(key);
	  }

	  for (i = 0, il = password.length; i < il; ++i) {
	    this.updateKeys(key, password[i] & 0xff);
	  }

	  return key;
	};
	/**
	 * build huffman table from length list.
	 * @param {!(Array.<number>|Uint8Array)} lengths length list.
	 * @return {!Array} huffman table.
	 */


	Zlib.Huffman.buildHuffmanTable = function (lengths) {
	  /** @type {number} length list size. */
	  var listSize = lengths.length;
	  /** @type {number} max code length for table size. */

	  var maxCodeLength = 0;
	  /** @type {number} min code length for table size. */

	  var minCodeLength = Number.POSITIVE_INFINITY;
	  /** @type {number} table size. */

	  var size;
	  /** @type {!(Array|Uint8Array)} huffman code table. */

	  var table;
	  /** @type {number} bit length. */

	  var bitLength;
	  /** @type {number} huffman code. */

	  var code;
	  /**
	   * ãµã¤ãºã 2^maxlength åã®ãã¼ãã«ãåããããã®ã¹ã­ããé·.
	   * @type {number} skip length for table filling.
	   */

	  var skip;
	  /** @type {number} reversed code. */

	  var reversed;
	  /** @type {number} reverse temp. */

	  var rtemp;
	  /** @type {number} loop counter. */

	  var i;
	  /** @type {number} loop limit. */

	  var il;
	  /** @type {number} loop counter. */

	  var j;
	  /** @type {number} table value. */

	  var value; // Math.max ã¯éãã®ã§æé·ã®å¤ã¯ for-loop ã§åå¾ãã

	  for (i = 0, il = listSize; i < il; ++i) {
	    if (lengths[i] > maxCodeLength) {
	      maxCodeLength = lengths[i];
	    }

	    if (lengths[i] < minCodeLength) {
	      minCodeLength = lengths[i];
	    }
	  }

	  size = 1 << maxCodeLength;
	  table = new Uint32Array(size); // ãããé·ã®ç­ãé ãããããã³ç¬¦å·ãå²ãå½ã¦ã

	  for (bitLength = 1, code = 0, skip = 2; bitLength <= maxCodeLength;) {
	    for (i = 0; i < listSize; ++i) {
	      if (lengths[i] === bitLength) {
	        // ããããªã¼ãã¼ãéã«ãªããããããé·åä¸¦ã³ãåè»¢ãã
	        for (reversed = 0, rtemp = code, j = 0; j < bitLength; ++j) {
	          reversed = reversed << 1 | rtemp & 1;
	          rtemp >>= 1;
	        } // æå¤§ãããé·ããã¨ã«ãã¼ãã«ãä½ãããã
	        // æå¤§ãããé·ä»¥å¤ã§ã¯ 0 / 1 ã©ã¡ãã§ãè¯ãç®æãã§ãã
	        // ãã®ã©ã¡ãã§ãè¯ãå ´æã¯åãå¤ã§åãããã¨ã§
	        // æ¬æ¥ã®ãããé·ä»¥ä¸ã®ãããæ°åå¾ãã¦ãåé¡ãèµ·ãããªãããã«ãã


	        value = bitLength << 16 | i;

	        for (j = reversed; j < size; j += skip) {
	          table[j] = value;
	        }

	        ++code;
	      }
	    } // æ¬¡ã®ãããé·ã¸


	    ++bitLength;
	    code <<= 1;
	    skip <<= 1;
	  }

	  return [table, maxCodeLength, minCodeLength];
	}; //-----------------------------------------------------------------------------

	/** @define {number} buffer block size. */


	var ZLIB_RAW_INFLATE_BUFFER_SIZE = 0x8000; // [ 0x8000 >= ZLIB_BUFFER_BLOCK_SIZE ]
	//-----------------------------------------------------------------------------

	var buildHuffmanTable = Zlib.Huffman.buildHuffmanTable;
	/**
	 * @constructor
	 * @param {!(Uint8Array|Array.<number>)} input input buffer.
	 * @param {Object} opt_params option parameter.
	 *
	 * opt_params ã¯ä»¥ä¸ã®ãã­ããã£ãæå®ããäºãã§ãã¾ãã
	 *   - index: input buffer ã® deflate ã³ã³ããã®éå§ä½ç½®.
	 *   - blockSize: ãããã¡ã®ãã­ãã¯ãµã¤ãº.
	 *   - bufferType: Zlib.RawInflate.BufferType ã®å¤ã«ãã£ã¦ãããã¡ã®ç®¡çæ¹æ³ãæå®ãã.
	 *   - resize: ç¢ºä¿ãããããã¡ãå®éã®å¤§ããããå¤§ããã£ãå ´åã«åãè©°ãã.
	 */

	Zlib.RawInflate = function (input, opt_params) {
	  /** @type {!(Array.<number>|Uint8Array)} inflated buffer */
	  this.buffer;
	  /** @type {!Array.<(Array.<number>|Uint8Array)>} */

	  this.blocks = [];
	  /** @type {number} block size. */

	  this.bufferSize = ZLIB_RAW_INFLATE_BUFFER_SIZE;
	  /** @type {!number} total output buffer pointer. */

	  this.totalpos = 0;
	  /** @type {!number} input buffer pointer. */

	  this.ip = 0;
	  /** @type {!number} bit stream reader buffer. */

	  this.bitsbuf = 0;
	  /** @type {!number} bit stream reader buffer size. */

	  this.bitsbuflen = 0;
	  /** @type {!(Array.<number>|Uint8Array)} input buffer. */

	  this.input = new Uint8Array(input);
	  /** @type {!(Uint8Array|Array.<number>)} output buffer. */

	  this.output;
	  /** @type {!number} output buffer pointer. */

	  this.op;
	  /** @type {boolean} is final block flag. */

	  this.bfinal = false;
	  /** @type {Zlib.RawInflate.BufferType} buffer management. */

	  this.bufferType = Zlib.RawInflate.BufferType.ADAPTIVE;
	  /** @type {boolean} resize flag for memory size optimization. */

	  this.resize = false; // option parameters

	  if (opt_params || !(opt_params = {})) {
	    if (opt_params['index']) {
	      this.ip = opt_params['index'];
	    }

	    if (opt_params['bufferSize']) {
	      this.bufferSize = opt_params['bufferSize'];
	    }

	    if (opt_params['bufferType']) {
	      this.bufferType = opt_params['bufferType'];
	    }

	    if (opt_params['resize']) {
	      this.resize = opt_params['resize'];
	    }
	  } // initialize


	  switch (this.bufferType) {
	    case Zlib.RawInflate.BufferType.BLOCK:
	      this.op = Zlib.RawInflate.MaxBackwardLength;
	      this.output = new Uint8Array(Zlib.RawInflate.MaxBackwardLength + this.bufferSize + Zlib.RawInflate.MaxCopyLength);
	      break;

	    case Zlib.RawInflate.BufferType.ADAPTIVE:
	      this.op = 0;
	      this.output = new Uint8Array(this.bufferSize);
	      break;

	    default:
	      throw new Error('invalid inflate mode');
	  }
	};
	/**
	 * @enum {number}
	 */


	Zlib.RawInflate.BufferType = {
	  BLOCK: 0,
	  ADAPTIVE: 1
	};
	/**
	 * decompress.
	 * @return {!(Uint8Array|Array.<number>)} inflated buffer.
	 */

	Zlib.RawInflate.prototype.decompress = function () {
	  while (!this.bfinal) {
	    this.parseBlock();
	  }

	  switch (this.bufferType) {
	    case Zlib.RawInflate.BufferType.BLOCK:
	      return this.concatBufferBlock();

	    case Zlib.RawInflate.BufferType.ADAPTIVE:
	      return this.concatBufferDynamic();

	    default:
	      throw new Error('invalid inflate mode');
	  }
	};
	/**
	 * @const
	 * @type {number} max backward length for LZ77.
	 */


	Zlib.RawInflate.MaxBackwardLength = 32768;
	/**
	 * @const
	 * @type {number} max copy length for LZ77.
	 */

	Zlib.RawInflate.MaxCopyLength = 258;
	/**
	 * huffman order
	 * @const
	 * @type {!(Array.<number>|Uint8Array)}
	 */

	Zlib.RawInflate.Order = function (table) {
	  return new Uint16Array(table);
	}([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
	/**
	 * huffman length code table.
	 * @const
	 * @type {!(Array.<number>|Uint16Array)}
	 */


	Zlib.RawInflate.LengthCodeTable = function (table) {
	  return new Uint16Array(table);
	}([0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b, 0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3, 0x00e3, 0x0102, 0x0102, 0x0102]);
	/**
	 * huffman length extra-bits table.
	 * @const
	 * @type {!(Array.<number>|Uint8Array)}
	 */


	Zlib.RawInflate.LengthExtraTable = function (table) {
	  return new Uint8Array(table);
	}([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);
	/**
	 * huffman dist code table.
	 * @const
	 * @type {!(Array.<number>|Uint16Array)}
	 */


	Zlib.RawInflate.DistCodeTable = function (table) {
	  return new Uint16Array(table);
	}([0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011, 0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181, 0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001, 0x3001, 0x4001, 0x6001]);
	/**
	 * huffman dist extra-bits table.
	 * @const
	 * @type {!(Array.<number>|Uint8Array)}
	 */


	Zlib.RawInflate.DistExtraTable = function (table) {
	  return new Uint8Array(table);
	}([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
	/**
	 * fixed huffman length code table
	 * @const
	 * @type {!Array}
	 */


	Zlib.RawInflate.FixedLiteralLengthTable = function (table) {
	  return table;
	}(function () {
	  var lengths = new Uint8Array(288);
	  var i, il;

	  for (i = 0, il = lengths.length; i < il; ++i) {
	    lengths[i] = i <= 143 ? 8 : i <= 255 ? 9 : i <= 279 ? 7 : 8;
	  }

	  return buildHuffmanTable(lengths);
	}());
	/**
	 * fixed huffman distance code table
	 * @const
	 * @type {!Array}
	 */


	Zlib.RawInflate.FixedDistanceTable = function (table) {
	  return table;
	}(function () {
	  var lengths = new Uint8Array(30);
	  var i, il;

	  for (i = 0, il = lengths.length; i < il; ++i) {
	    lengths[i] = 5;
	  }

	  return buildHuffmanTable(lengths);
	}());
	/**
	 * parse deflated block.
	 */


	Zlib.RawInflate.prototype.parseBlock = function () {
	  /** @type {number} header */
	  var hdr = this.readBits(3); // BFINAL

	  if (hdr & 0x1) {
	    this.bfinal = true;
	  } // BTYPE


	  hdr >>>= 1;

	  switch (hdr) {
	    // uncompressed
	    case 0:
	      this.parseUncompressedBlock();
	      break;
	    // fixed huffman

	    case 1:
	      this.parseFixedHuffmanBlock();
	      break;
	    // dynamic huffman

	    case 2:
	      this.parseDynamicHuffmanBlock();
	      break;
	    // reserved or other

	    default:
	      throw new Error('unknown BTYPE: ' + hdr);
	  }
	};
	/**
	 * read inflate bits
	 * @param {number} length bits length.
	 * @return {number} read bits.
	 */


	Zlib.RawInflate.prototype.readBits = function (length) {
	  var bitsbuf = this.bitsbuf;
	  var bitsbuflen = this.bitsbuflen;
	  var input = this.input;
	  var ip = this.ip;
	  /** @type {number} */

	  var inputLength = input.length;
	  /** @type {number} input and output byte. */

	  var octet; // input byte

	  if (ip + (length - bitsbuflen + 7 >> 3) >= inputLength) {
	    throw new Error('input buffer is broken');
	  } // not enough buffer


	  while (bitsbuflen < length) {
	    bitsbuf |= input[ip++] << bitsbuflen;
	    bitsbuflen += 8;
	  } // output byte


	  octet = bitsbuf &
	  /* MASK */
	  (1 << length) - 1;
	  bitsbuf >>>= length;
	  bitsbuflen -= length;
	  this.bitsbuf = bitsbuf;
	  this.bitsbuflen = bitsbuflen;
	  this.ip = ip;
	  return octet;
	};
	/**
	 * read huffman code using table
	 * @param {!(Array.<number>|Uint8Array|Uint16Array)} table huffman code table.
	 * @return {number} huffman code.
	 */


	Zlib.RawInflate.prototype.readCodeByTable = function (table) {
	  var bitsbuf = this.bitsbuf;
	  var bitsbuflen = this.bitsbuflen;
	  var input = this.input;
	  var ip = this.ip;
	  /** @type {number} */

	  var inputLength = input.length;
	  /** @type {!(Array.<number>|Uint8Array)} huffman code table */

	  var codeTable = table[0];
	  /** @type {number} */

	  var maxCodeLength = table[1];
	  /** @type {number} code length & code (16bit, 16bit) */

	  var codeWithLength;
	  /** @type {number} code bits length */

	  var codeLength; // not enough buffer

	  while (bitsbuflen < maxCodeLength) {
	    if (ip >= inputLength) {
	      break;
	    }

	    bitsbuf |= input[ip++] << bitsbuflen;
	    bitsbuflen += 8;
	  } // read max length


	  codeWithLength = codeTable[bitsbuf & (1 << maxCodeLength) - 1];
	  codeLength = codeWithLength >>> 16;

	  if (codeLength > bitsbuflen) {
	    throw new Error('invalid code length: ' + codeLength);
	  }

	  this.bitsbuf = bitsbuf >> codeLength;
	  this.bitsbuflen = bitsbuflen - codeLength;
	  this.ip = ip;
	  return codeWithLength & 0xffff;
	};
	/**
	 * parse uncompressed block.
	 */


	Zlib.RawInflate.prototype.parseUncompressedBlock = function () {
	  var input = this.input;
	  var ip = this.ip;
	  var output = this.output;
	  var op = this.op;
	  /** @type {number} */

	  var inputLength = input.length;
	  /** @type {number} block length */

	  var len;
	  /** @type {number} number for check block length */

	  var nlen;
	  /** @type {number} output buffer length */

	  var olength = output.length;
	  /** @type {number} copy counter */

	  var preCopy; // skip buffered header bits

	  this.bitsbuf = 0;
	  this.bitsbuflen = 0; // len

	  if (ip + 1 >= inputLength) {
	    throw new Error('invalid uncompressed block header: LEN');
	  }

	  len = input[ip++] | input[ip++] << 8; // nlen

	  if (ip + 1 >= inputLength) {
	    throw new Error('invalid uncompressed block header: NLEN');
	  }

	  nlen = input[ip++] | input[ip++] << 8; // check len & nlen

	  if (len === ~nlen) {
	    throw new Error('invalid uncompressed block header: length verify');
	  } // check size


	  if (ip + len > input.length) {
	    throw new Error('input buffer is broken');
	  } // expand buffer


	  switch (this.bufferType) {
	    case Zlib.RawInflate.BufferType.BLOCK:
	      // pre copy
	      while (op + len > output.length) {
	        preCopy = olength - op;
	        len -= preCopy;
	        {
	          output.set(input.subarray(ip, ip + preCopy), op);
	          op += preCopy;
	          ip += preCopy;
	        }
	        this.op = op;
	        output = this.expandBufferBlock();
	        op = this.op;
	      }

	      break;

	    case Zlib.RawInflate.BufferType.ADAPTIVE:
	      while (op + len > output.length) {
	        output = this.expandBufferAdaptive({
	          fixRatio: 2
	        });
	      }

	      break;

	    default:
	      throw new Error('invalid inflate mode');
	  } // copy


	  {
	    output.set(input.subarray(ip, ip + len), op);
	    op += len;
	    ip += len;
	  }
	  this.ip = ip;
	  this.op = op;
	  this.output = output;
	};
	/**
	 * parse fixed huffman block.
	 */


	Zlib.RawInflate.prototype.parseFixedHuffmanBlock = function () {
	  switch (this.bufferType) {
	    case Zlib.RawInflate.BufferType.ADAPTIVE:
	      this.decodeHuffmanAdaptive(Zlib.RawInflate.FixedLiteralLengthTable, Zlib.RawInflate.FixedDistanceTable);
	      break;

	    case Zlib.RawInflate.BufferType.BLOCK:
	      this.decodeHuffmanBlock(Zlib.RawInflate.FixedLiteralLengthTable, Zlib.RawInflate.FixedDistanceTable);
	      break;

	    default:
	      throw new Error('invalid inflate mode');
	  }
	};
	/**
	 * parse dynamic huffman block.
	 */


	Zlib.RawInflate.prototype.parseDynamicHuffmanBlock = function () {
	  /** @type {number} number of literal and length codes. */
	  var hlit = this.readBits(5) + 257;
	  /** @type {number} number of distance codes. */

	  var hdist = this.readBits(5) + 1;
	  /** @type {number} number of code lengths. */

	  var hclen = this.readBits(4) + 4;
	  /** @type {!(Uint8Array|Array.<number>)} code lengths. */

	  var codeLengths = new Uint8Array(Zlib.RawInflate.Order.length);
	  /** @type {!Array} code lengths table. */

	  var codeLengthsTable;
	  /** @type {!(Uint8Array|Array.<number>)} literal and length code table. */

	  var litlenTable;
	  /** @type {!(Uint8Array|Array.<number>)} distance code table. */

	  var distTable;
	  /** @type {!(Uint8Array|Array.<number>)} code length table. */

	  var lengthTable;
	  /** @type {number} */

	  var code;
	  /** @type {number} */

	  var prev;
	  /** @type {number} */

	  var repeat;
	  /** @type {number} loop counter. */

	  var i;
	  /** @type {number} loop limit. */

	  var il; // decode code lengths

	  for (i = 0; i < hclen; ++i) {
	    codeLengths[Zlib.RawInflate.Order[i]] = this.readBits(3);
	  } // decode length table


	  codeLengthsTable = buildHuffmanTable(codeLengths);
	  lengthTable = new Uint8Array(hlit + hdist);

	  for (i = 0, il = hlit + hdist; i < il;) {
	    code = this.readCodeByTable(codeLengthsTable);

	    switch (code) {
	      case 16:
	        repeat = 3 + this.readBits(2);

	        while (repeat--) {
	          lengthTable[i++] = prev;
	        }

	        break;

	      case 17:
	        repeat = 3 + this.readBits(3);

	        while (repeat--) {
	          lengthTable[i++] = 0;
	        }

	        prev = 0;
	        break;

	      case 18:
	        repeat = 11 + this.readBits(7);

	        while (repeat--) {
	          lengthTable[i++] = 0;
	        }

	        prev = 0;
	        break;

	      default:
	        lengthTable[i++] = code;
	        prev = code;
	        break;
	    }
	  }

	  litlenTable = buildHuffmanTable(lengthTable.subarray(0, hlit));
	  distTable = buildHuffmanTable(lengthTable.subarray(hlit));

	  switch (this.bufferType) {
	    case Zlib.RawInflate.BufferType.ADAPTIVE:
	      this.decodeHuffmanAdaptive(litlenTable, distTable);
	      break;

	    case Zlib.RawInflate.BufferType.BLOCK:
	      this.decodeHuffmanBlock(litlenTable, distTable);
	      break;

	    default:
	      throw new Error('invalid inflate mode');
	  }
	};
	/**
	 * decode huffman code
	 * @param {!(Array.<number>|Uint16Array)} litlen literal and length code table.
	 * @param {!(Array.<number>|Uint8Array)} dist distination code table.
	 */


	Zlib.RawInflate.prototype.decodeHuffmanBlock = function (litlen, dist) {
	  var output = this.output;
	  var op = this.op;
	  this.currentLitlenTable = litlen;
	  /** @type {number} output position limit. */

	  var olength = output.length - Zlib.RawInflate.MaxCopyLength;
	  /** @type {number} huffman code. */

	  var code;
	  /** @type {number} table index. */

	  var ti;
	  /** @type {number} huffman code distination. */

	  var codeDist;
	  /** @type {number} huffman code length. */

	  var codeLength;
	  var lengthCodeTable = Zlib.RawInflate.LengthCodeTable;
	  var lengthExtraTable = Zlib.RawInflate.LengthExtraTable;
	  var distCodeTable = Zlib.RawInflate.DistCodeTable;
	  var distExtraTable = Zlib.RawInflate.DistExtraTable;

	  while ((code = this.readCodeByTable(litlen)) !== 256) {
	    // literal
	    if (code < 256) {
	      if (op >= olength) {
	        this.op = op;
	        output = this.expandBufferBlock();
	        op = this.op;
	      }

	      output[op++] = code;
	      continue;
	    } // length code


	    ti = code - 257;
	    codeLength = lengthCodeTable[ti];

	    if (lengthExtraTable[ti] > 0) {
	      codeLength += this.readBits(lengthExtraTable[ti]);
	    } // dist code


	    code = this.readCodeByTable(dist);
	    codeDist = distCodeTable[code];

	    if (distExtraTable[code] > 0) {
	      codeDist += this.readBits(distExtraTable[code]);
	    } // lz77 decode


	    if (op >= olength) {
	      this.op = op;
	      output = this.expandBufferBlock();
	      op = this.op;
	    }

	    while (codeLength--) {
	      output[op] = output[op++ - codeDist];
	    }
	  }

	  while (this.bitsbuflen >= 8) {
	    this.bitsbuflen -= 8;
	    this.ip--;
	  }

	  this.op = op;
	};
	/**
	 * decode huffman code (adaptive)
	 * @param {!(Array.<number>|Uint16Array)} litlen literal and length code table.
	 * @param {!(Array.<number>|Uint8Array)} dist distination code table.
	 */


	Zlib.RawInflate.prototype.decodeHuffmanAdaptive = function (litlen, dist) {
	  var output = this.output;
	  var op = this.op;
	  this.currentLitlenTable = litlen;
	  /** @type {number} output position limit. */

	  var olength = output.length;
	  /** @type {number} huffman code. */

	  var code;
	  /** @type {number} table index. */

	  var ti;
	  /** @type {number} huffman code distination. */

	  var codeDist;
	  /** @type {number} huffman code length. */

	  var codeLength;
	  var lengthCodeTable = Zlib.RawInflate.LengthCodeTable;
	  var lengthExtraTable = Zlib.RawInflate.LengthExtraTable;
	  var distCodeTable = Zlib.RawInflate.DistCodeTable;
	  var distExtraTable = Zlib.RawInflate.DistExtraTable;

	  while ((code = this.readCodeByTable(litlen)) !== 256) {
	    // literal
	    if (code < 256) {
	      if (op >= olength) {
	        output = this.expandBufferAdaptive();
	        olength = output.length;
	      }

	      output[op++] = code;
	      continue;
	    } // length code


	    ti = code - 257;
	    codeLength = lengthCodeTable[ti];

	    if (lengthExtraTable[ti] > 0) {
	      codeLength += this.readBits(lengthExtraTable[ti]);
	    } // dist code


	    code = this.readCodeByTable(dist);
	    codeDist = distCodeTable[code];

	    if (distExtraTable[code] > 0) {
	      codeDist += this.readBits(distExtraTable[code]);
	    } // lz77 decode


	    if (op + codeLength > olength) {
	      output = this.expandBufferAdaptive();
	      olength = output.length;
	    }

	    while (codeLength--) {
	      output[op] = output[op++ - codeDist];
	    }
	  }

	  while (this.bitsbuflen >= 8) {
	    this.bitsbuflen -= 8;
	    this.ip--;
	  }

	  this.op = op;
	};
	/**
	 * expand output buffer.
	 * @param {Object=} opt_param option parameters.
	 * @return {!(Array.<number>|Uint8Array)} output buffer.
	 */


	Zlib.RawInflate.prototype.expandBufferBlock = function (opt_param) {
	  /** @type {!(Array.<number>|Uint8Array)} store buffer. */
	  var buffer = new Uint8Array(this.op - Zlib.RawInflate.MaxBackwardLength);
	  /** @type {number} backward base point */

	  var backward = this.op - Zlib.RawInflate.MaxBackwardLength;
	  var output = this.output; // copy to output buffer

	  {
	    buffer.set(output.subarray(Zlib.RawInflate.MaxBackwardLength, buffer.length));
	  }
	  this.blocks.push(buffer);
	  this.totalpos += buffer.length; // copy to backward buffer

	  {
	    output.set(output.subarray(backward, backward + Zlib.RawInflate.MaxBackwardLength));
	  }
	  this.op = Zlib.RawInflate.MaxBackwardLength;
	  return output;
	};
	/**
	 * expand output buffer. (adaptive)
	 * @param {Object=} opt_param option parameters.
	 * @return {!(Array.<number>|Uint8Array)} output buffer pointer.
	 */


	Zlib.RawInflate.prototype.expandBufferAdaptive = function (opt_param) {
	  /** @type {!(Array.<number>|Uint8Array)} store buffer. */
	  var buffer;
	  /** @type {number} expantion ratio. */

	  var ratio = this.input.length / this.ip + 1 | 0;
	  /** @type {number} maximum number of huffman code. */

	  var maxHuffCode;
	  /** @type {number} new output buffer size. */

	  var newSize;
	  /** @type {number} max inflate size. */

	  var maxInflateSize;
	  var input = this.input;
	  var output = this.output;

	  if (opt_param) {
	    if (typeof opt_param.fixRatio === 'number') {
	      ratio = opt_param.fixRatio;
	    }

	    if (typeof opt_param.addRatio === 'number') {
	      ratio += opt_param.addRatio;
	    }
	  } // calculate new buffer size


	  if (ratio < 2) {
	    maxHuffCode = (input.length - this.ip) / this.currentLitlenTable[2];
	    maxInflateSize = maxHuffCode / 2 * 258 | 0;
	    newSize = maxInflateSize < output.length ? output.length + maxInflateSize : output.length << 1;
	  } else {
	    newSize = output.length * ratio;
	  } // buffer expantion


	  {
	    buffer = new Uint8Array(newSize);
	    buffer.set(output);
	  }
	  this.output = buffer;
	  return this.output;
	};
	/**
	 * concat output buffer.
	 * @return {!(Array.<number>|Uint8Array)} output buffer.
	 */


	Zlib.RawInflate.prototype.concatBufferBlock = function () {
	  /** @type {number} buffer pointer. */
	  var pos = 0;
	  /** @type {number} buffer pointer. */

	  var limit = this.totalpos + (this.op - Zlib.RawInflate.MaxBackwardLength);
	  /** @type {!(Array.<number>|Uint8Array)} output block array. */

	  var output = this.output;
	  /** @type {!Array} blocks array. */

	  var blocks = this.blocks;
	  /** @type {!(Array.<number>|Uint8Array)} output block array. */

	  var block;
	  /** @type {!(Array.<number>|Uint8Array)} output buffer. */

	  var buffer = new Uint8Array(limit);
	  /** @type {number} loop counter. */

	  var i;
	  /** @type {number} loop limiter. */

	  var il;
	  /** @type {number} loop counter. */

	  var j;
	  /** @type {number} loop limiter. */

	  var jl; // single buffer

	  if (blocks.length === 0) {
	    return this.output.subarray(Zlib.RawInflate.MaxBackwardLength, this.op);
	  } // copy to buffer


	  for (i = 0, il = blocks.length; i < il; ++i) {
	    block = blocks[i];

	    for (j = 0, jl = block.length; j < jl; ++j) {
	      buffer[pos++] = block[j];
	    }
	  } // current buffer


	  for (i = Zlib.RawInflate.MaxBackwardLength, il = this.op; i < il; ++i) {
	    buffer[pos++] = output[i];
	  }

	  this.blocks = [];
	  this.buffer = buffer;
	  return this.buffer;
	};
	/**
	 * concat output buffer. (dynamic)
	 * @return {!(Array.<number>|Uint8Array)} output buffer.
	 */


	Zlib.RawInflate.prototype.concatBufferDynamic = function () {
	  /** @type {Array.<number>|Uint8Array} output buffer. */
	  var buffer;
	  var op = this.op;
	  {
	    if (this.resize) {
	      buffer = new Uint8Array(op);
	      buffer.set(this.output.subarray(0, op));
	    } else {
	      buffer = this.output.subarray(0, op);
	    }
	  }
	  this.buffer = buffer;
	  return this.buffer;
	};

	var buildHuffmanTable = Zlib.Huffman.buildHuffmanTable;
	/**
	 * @param {!(Uint8Array|Array.<number>)} input input buffer.
	 * @param {number} ip input buffer pointer.
	 * @param {number=} opt_buffersize buffer block size.
	 * @constructor
	 */

	Zlib.RawInflateStream = function (input, ip, opt_buffersize) {
	  /** @type {!Array.<(Array|Uint8Array)>} */
	  this.blocks = [];
	  /** @type {number} block size. */

	  this.bufferSize = opt_buffersize ? opt_buffersize : ZLIB_STREAM_RAW_INFLATE_BUFFER_SIZE;
	  /** @type {!number} total output buffer pointer. */

	  this.totalpos = 0;
	  /** @type {!number} input buffer pointer. */

	  this.ip = ip === void 0 ? 0 : ip;
	  /** @type {!number} bit stream reader buffer. */

	  this.bitsbuf = 0;
	  /** @type {!number} bit stream reader buffer size. */

	  this.bitsbuflen = 0;
	  /** @type {!(Array|Uint8Array)} input buffer. */

	  this.input = new Uint8Array(input);
	  /** @type {!(Uint8Array|Array)} output buffer. */

	  this.output = new Uint8Array(this.bufferSize);
	  /** @type {!number} output buffer pointer. */

	  this.op = 0;
	  /** @type {boolean} is final block flag. */

	  this.bfinal = false;
	  /** @type {number} uncompressed block length. */

	  this.blockLength;
	  /** @type {boolean} resize flag for memory size optimization. */

	  this.resize = false;
	  /** @type {Array} */

	  this.litlenTable;
	  /** @type {Array} */

	  this.distTable;
	  /** @type {number} */

	  this.sp = 0; // stream pointer

	  /** @type {Zlib.RawInflateStream.Status} */

	  this.status = Zlib.RawInflateStream.Status.INITIALIZED; //
	  // backup
	  //

	  /** @type {!number} */

	  this.ip_;
	  /** @type {!number} */

	  this.bitsbuflen_;
	  /** @type {!number} */

	  this.bitsbuf_;
	};
	/**
	 * @enum {number}
	 */


	Zlib.RawInflateStream.BlockType = {
	  UNCOMPRESSED: 0,
	  FIXED: 1,
	  DYNAMIC: 2
	};
	/**
	 * @enum {number}
	 */

	Zlib.RawInflateStream.Status = {
	  INITIALIZED: 0,
	  BLOCK_HEADER_START: 1,
	  BLOCK_HEADER_END: 2,
	  BLOCK_BODY_START: 3,
	  BLOCK_BODY_END: 4,
	  DECODE_BLOCK_START: 5,
	  DECODE_BLOCK_END: 6
	};
	/**
	 * decompress.
	 * @return {!(Uint8Array|Array)} inflated buffer.
	 */

	Zlib.RawInflateStream.prototype.decompress = function (newInput, ip) {
	  /** @type {boolean} */
	  var stop = false;

	  if (newInput !== void 0) {
	    this.input = newInput;
	  }

	  if (ip !== void 0) {
	    this.ip = ip;
	  } // decompress


	  while (!stop) {
	    switch (this.status) {
	      // block header
	      case Zlib.RawInflateStream.Status.INITIALIZED:
	      case Zlib.RawInflateStream.Status.BLOCK_HEADER_START:
	        if (this.readBlockHeader() < 0) {
	          stop = true;
	        }

	        break;
	      // block body

	      case Zlib.RawInflateStream.Status.BLOCK_HEADER_END:
	      /* FALLTHROUGH */

	      case Zlib.RawInflateStream.Status.BLOCK_BODY_START:
	        switch (this.currentBlockType) {
	          case Zlib.RawInflateStream.BlockType.UNCOMPRESSED:
	            if (this.readUncompressedBlockHeader() < 0) {
	              stop = true;
	            }

	            break;

	          case Zlib.RawInflateStream.BlockType.FIXED:
	            if (this.parseFixedHuffmanBlock() < 0) {
	              stop = true;
	            }

	            break;

	          case Zlib.RawInflateStream.BlockType.DYNAMIC:
	            if (this.parseDynamicHuffmanBlock() < 0) {
	              stop = true;
	            }

	            break;
	        }

	        break;
	      // decode data

	      case Zlib.RawInflateStream.Status.BLOCK_BODY_END:
	      case Zlib.RawInflateStream.Status.DECODE_BLOCK_START:
	        switch (this.currentBlockType) {
	          case Zlib.RawInflateStream.BlockType.UNCOMPRESSED:
	            if (this.parseUncompressedBlock() < 0) {
	              stop = true;
	            }

	            break;

	          case Zlib.RawInflateStream.BlockType.FIXED:
	          /* FALLTHROUGH */

	          case Zlib.RawInflateStream.BlockType.DYNAMIC:
	            if (this.decodeHuffman() < 0) {
	              stop = true;
	            }

	            break;
	        }

	        break;

	      case Zlib.RawInflateStream.Status.DECODE_BLOCK_END:
	        if (this.bfinal) {
	          stop = true;
	        } else {
	          this.status = Zlib.RawInflateStream.Status.INITIALIZED;
	        }

	        break;
	    }
	  }

	  return this.concatBuffer();
	};
	/**
	 * @const
	 * @type {number} max backward length for LZ77.
	 */


	Zlib.RawInflateStream.MaxBackwardLength = 32768;
	/**
	 * @const
	 * @type {number} max copy length for LZ77.
	 */

	Zlib.RawInflateStream.MaxCopyLength = 258;
	/**
	 * huffman order
	 * @const
	 * @type {!(Array.<number>|Uint8Array)}
	 */

	Zlib.RawInflateStream.Order = function (table) {
	  return new Uint16Array(table);
	}([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
	/**
	 * huffman length code table.
	 * @const
	 * @type {!(Array.<number>|Uint16Array)}
	 */


	Zlib.RawInflateStream.LengthCodeTable = function (table) {
	  return new Uint16Array(table);
	}([0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b, 0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3, 0x00e3, 0x0102, 0x0102, 0x0102]);
	/**
	 * huffman length extra-bits table.
	 * @const
	 * @type {!(Array.<number>|Uint8Array)}
	 */


	Zlib.RawInflateStream.LengthExtraTable = function (table) {
	  return new Uint8Array(table);
	}([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);
	/**
	 * huffman dist code table.
	 * @const
	 * @type {!(Array.<number>|Uint16Array)}
	 */


	Zlib.RawInflateStream.DistCodeTable = function (table) {
	  return new Uint16Array(table);
	}([0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011, 0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181, 0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001, 0x3001, 0x4001, 0x6001]);
	/**
	 * huffman dist extra-bits table.
	 * @const
	 * @type {!(Array.<number>|Uint8Array)}
	 */


	Zlib.RawInflateStream.DistExtraTable = function (table) {
	  return new Uint8Array(table);
	}([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
	/**
	 * fixed huffman length code table
	 * @const
	 * @type {!Array}
	 */


	Zlib.RawInflateStream.FixedLiteralLengthTable = function (table) {
	  return table;
	}(function () {
	  var lengths = new Uint8Array(288);
	  var i, il;

	  for (i = 0, il = lengths.length; i < il; ++i) {
	    lengths[i] = i <= 143 ? 8 : i <= 255 ? 9 : i <= 279 ? 7 : 8;
	  }

	  return buildHuffmanTable(lengths);
	}());
	/**
	 * fixed huffman distance code table
	 * @const
	 * @type {!Array}
	 */


	Zlib.RawInflateStream.FixedDistanceTable = function (table) {
	  return table;
	}(function () {
	  var lengths = new Uint8Array(30);
	  var i, il;

	  for (i = 0, il = lengths.length; i < il; ++i) {
	    lengths[i] = 5;
	  }

	  return buildHuffmanTable(lengths);
	}());
	/**
	 * parse deflated block.
	 */


	Zlib.RawInflateStream.prototype.readBlockHeader = function () {
	  /** @type {number} header */
	  var hdr;
	  this.status = Zlib.RawInflateStream.Status.BLOCK_HEADER_START;
	  this.save_();

	  if ((hdr = this.readBits(3)) < 0) {
	    this.restore_();
	    return -1;
	  } // BFINAL


	  if (hdr & 0x1) {
	    this.bfinal = true;
	  } // BTYPE


	  hdr >>>= 1;

	  switch (hdr) {
	    case 0:
	      // uncompressed
	      this.currentBlockType = Zlib.RawInflateStream.BlockType.UNCOMPRESSED;
	      break;

	    case 1:
	      // fixed huffman
	      this.currentBlockType = Zlib.RawInflateStream.BlockType.FIXED;
	      break;

	    case 2:
	      // dynamic huffman
	      this.currentBlockType = Zlib.RawInflateStream.BlockType.DYNAMIC;
	      break;

	    default:
	      // reserved or other
	      throw new Error('unknown BTYPE: ' + hdr);
	  }

	  this.status = Zlib.RawInflateStream.Status.BLOCK_HEADER_END;
	};
	/**
	 * read inflate bits
	 * @param {number} length bits length.
	 * @return {number} read bits.
	 */


	Zlib.RawInflateStream.prototype.readBits = function (length) {
	  var bitsbuf = this.bitsbuf;
	  var bitsbuflen = this.bitsbuflen;
	  var input = this.input;
	  var ip = this.ip;
	  /** @type {number} input and output byte. */

	  var octet; // not enough buffer

	  while (bitsbuflen < length) {
	    // input byte
	    if (input.length <= ip) {
	      return -1;
	    }

	    octet = input[ip++]; // concat octet

	    bitsbuf |= octet << bitsbuflen;
	    bitsbuflen += 8;
	  } // output byte


	  octet = bitsbuf &
	  /* MASK */
	  (1 << length) - 1;
	  bitsbuf >>>= length;
	  bitsbuflen -= length;
	  this.bitsbuf = bitsbuf;
	  this.bitsbuflen = bitsbuflen;
	  this.ip = ip;
	  return octet;
	};
	/**
	 * read huffman code using table
	 * @param {Array} table huffman code table.
	 * @return {number} huffman code.
	 */


	Zlib.RawInflateStream.prototype.readCodeByTable = function (table) {
	  var bitsbuf = this.bitsbuf;
	  var bitsbuflen = this.bitsbuflen;
	  var input = this.input;
	  var ip = this.ip;
	  /** @type {!(Array|Uint8Array)} huffman code table */

	  var codeTable = table[0];
	  /** @type {number} */

	  var maxCodeLength = table[1];
	  /** @type {number} input byte */

	  var octet;
	  /** @type {number} code length & code (16bit, 16bit) */

	  var codeWithLength;
	  /** @type {number} code bits length */

	  var codeLength; // not enough buffer

	  while (bitsbuflen < maxCodeLength) {
	    if (input.length <= ip) {
	      return -1;
	    }

	    octet = input[ip++];
	    bitsbuf |= octet << bitsbuflen;
	    bitsbuflen += 8;
	  } // read max length


	  codeWithLength = codeTable[bitsbuf & (1 << maxCodeLength) - 1];
	  codeLength = codeWithLength >>> 16;

	  if (codeLength > bitsbuflen) {
	    throw new Error('invalid code length: ' + codeLength);
	  }

	  this.bitsbuf = bitsbuf >> codeLength;
	  this.bitsbuflen = bitsbuflen - codeLength;
	  this.ip = ip;
	  return codeWithLength & 0xffff;
	};
	/**
	 * read uncompressed block header
	 */


	Zlib.RawInflateStream.prototype.readUncompressedBlockHeader = function () {
	  /** @type {number} block length */
	  var len;
	  /** @type {number} number for check block length */

	  var nlen;
	  var input = this.input;
	  var ip = this.ip;
	  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;

	  if (ip + 4 >= input.length) {
	    return -1;
	  }

	  len = input[ip++] | input[ip++] << 8;
	  nlen = input[ip++] | input[ip++] << 8; // check len & nlen

	  if (len === ~nlen) {
	    throw new Error('invalid uncompressed block header: length verify');
	  } // skip buffered header bits


	  this.bitsbuf = 0;
	  this.bitsbuflen = 0;
	  this.ip = ip;
	  this.blockLength = len;
	  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;
	};
	/**
	 * parse uncompressed block.
	 */


	Zlib.RawInflateStream.prototype.parseUncompressedBlock = function () {
	  var input = this.input;
	  var ip = this.ip;
	  var output = this.output;
	  var op = this.op;
	  var len = this.blockLength;
	  this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_START; // copy
	  // XXX: ã¨ããããç´ ç´ã«ã³ãã¼

	  while (len--) {
	    if (op === output.length) {
	      output = this.expandBuffer({
	        fixRatio: 2
	      });
	    } // not enough input buffer


	    if (ip >= input.length) {
	      this.ip = ip;
	      this.op = op;
	      this.blockLength = len + 1; // ã³ãã¼ãã¦ãªãã®ã§æ»ã

	      return -1;
	    }

	    output[op++] = input[ip++];
	  }

	  if (len < 0) {
	    this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_END;
	  }

	  this.ip = ip;
	  this.op = op;
	  return 0;
	};
	/**
	 * parse fixed huffman block.
	 */


	Zlib.RawInflateStream.prototype.parseFixedHuffmanBlock = function () {
	  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;
	  this.litlenTable = Zlib.RawInflateStream.FixedLiteralLengthTable;
	  this.distTable = Zlib.RawInflateStream.FixedDistanceTable;
	  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;
	  return 0;
	};
	/**
	 * ãªãã¸ã§ã¯ãã®ã³ã³ãã­ã¹ããå¥ã®ãã­ããã£ã«éé¿ãã.
	 * @private
	 */


	Zlib.RawInflateStream.prototype.save_ = function () {
	  this.ip_ = this.ip;
	  this.bitsbuflen_ = this.bitsbuflen;
	  this.bitsbuf_ = this.bitsbuf;
	};
	/**
	 * å¥ã®ãã­ããã£ã«éé¿ããã³ã³ãã­ã¹ããå¾©åãã.
	 * @private
	 */


	Zlib.RawInflateStream.prototype.restore_ = function () {
	  this.ip = this.ip_;
	  this.bitsbuflen = this.bitsbuflen_;
	  this.bitsbuf = this.bitsbuf_;
	};
	/**
	 * parse dynamic huffman block.
	 */


	Zlib.RawInflateStream.prototype.parseDynamicHuffmanBlock = function () {
	  /** @type {number} number of literal and length codes. */
	  var hlit;
	  /** @type {number} number of distance codes. */

	  var hdist;
	  /** @type {number} number of code lengths. */

	  var hclen;
	  /** @type {!(Uint8Array|Array)} code lengths. */

	  var codeLengths = new Uint8Array(Zlib.RawInflateStream.Order.length);
	  /** @type {!Array} code lengths table. */

	  var codeLengthsTable;
	  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;
	  this.save_();
	  hlit = this.readBits(5) + 257;
	  hdist = this.readBits(5) + 1;
	  hclen = this.readBits(4) + 4;

	  if (hlit < 0 || hdist < 0 || hclen < 0) {
	    this.restore_();
	    return -1;
	  }

	  try {
	    parseDynamicHuffmanBlockImpl.call(this);
	  } catch (e) {
	    this.restore_();
	    return -1;
	  }

	  function parseDynamicHuffmanBlockImpl() {
	    /** @type {number} */
	    var bits;
	    var code;
	    var prev = 0;
	    var repeat;
	    /** @type {!(Uint8Array|Array.<number>)} code length table. */

	    var lengthTable;
	    /** @type {number} loop counter. */

	    var i;
	    /** @type {number} loop limit. */

	    var il; // decode code lengths

	    for (i = 0; i < hclen; ++i) {
	      if ((bits = this.readBits(3)) < 0) {
	        throw new Error('not enough input');
	      }

	      codeLengths[Zlib.RawInflateStream.Order[i]] = bits;
	    } // decode length table


	    codeLengthsTable = buildHuffmanTable(codeLengths);
	    lengthTable = new Uint8Array(hlit + hdist);

	    for (i = 0, il = hlit + hdist; i < il;) {
	      code = this.readCodeByTable(codeLengthsTable);

	      if (code < 0) {
	        throw new Error('not enough input');
	      }

	      switch (code) {
	        case 16:
	          if ((bits = this.readBits(2)) < 0) {
	            throw new Error('not enough input');
	          }

	          repeat = 3 + bits;

	          while (repeat--) {
	            lengthTable[i++] = prev;
	          }

	          break;

	        case 17:
	          if ((bits = this.readBits(3)) < 0) {
	            throw new Error('not enough input');
	          }

	          repeat = 3 + bits;

	          while (repeat--) {
	            lengthTable[i++] = 0;
	          }

	          prev = 0;
	          break;

	        case 18:
	          if ((bits = this.readBits(7)) < 0) {
	            throw new Error('not enough input');
	          }

	          repeat = 11 + bits;

	          while (repeat--) {
	            lengthTable[i++] = 0;
	          }

	          prev = 0;
	          break;

	        default:
	          lengthTable[i++] = code;
	          prev = code;
	          break;
	      }
	    }

	    this.litlenTable = buildHuffmanTable(lengthTable.subarray(0, hlit));
	    this.distTable = buildHuffmanTable(lengthTable.subarray(hlit));
	  }

	  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;
	  return 0;
	};
	/**
	 * decode huffman code (dynamic)
	 * @return {(number|undefined)} -1 is error.
	 */


	Zlib.RawInflateStream.prototype.decodeHuffman = function () {
	  var output = this.output;
	  var op = this.op;
	  /** @type {number} huffman code. */

	  var code;
	  /** @type {number} table index. */

	  var ti;
	  /** @type {number} huffman code distination. */

	  var codeDist;
	  /** @type {number} huffman code length. */

	  var codeLength;
	  var litlen = this.litlenTable;
	  var dist = this.distTable;
	  var olength = output.length;
	  var bits;
	  this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_START;

	  while (true) {
	    this.save_();
	    code = this.readCodeByTable(litlen);

	    if (code < 0) {
	      this.op = op;
	      this.restore_();
	      return -1;
	    }

	    if (code === 256) {
	      break;
	    } // literal


	    if (code < 256) {
	      if (op === olength) {
	        output = this.expandBuffer();
	        olength = output.length;
	      }

	      output[op++] = code;
	      continue;
	    } // length code


	    ti = code - 257;
	    codeLength = Zlib.RawInflateStream.LengthCodeTable[ti];

	    if (Zlib.RawInflateStream.LengthExtraTable[ti] > 0) {
	      bits = this.readBits(Zlib.RawInflateStream.LengthExtraTable[ti]);

	      if (bits < 0) {
	        this.op = op;
	        this.restore_();
	        return -1;
	      }

	      codeLength += bits;
	    } // dist code


	    code = this.readCodeByTable(dist);

	    if (code < 0) {
	      this.op = op;
	      this.restore_();
	      return -1;
	    }

	    codeDist = Zlib.RawInflateStream.DistCodeTable[code];

	    if (Zlib.RawInflateStream.DistExtraTable[code] > 0) {
	      bits = this.readBits(Zlib.RawInflateStream.DistExtraTable[code]);

	      if (bits < 0) {
	        this.op = op;
	        this.restore_();
	        return -1;
	      }

	      codeDist += bits;
	    } // lz77 decode


	    if (op + codeLength >= olength) {
	      output = this.expandBuffer();
	      olength = output.length;
	    }

	    while (codeLength--) {
	      output[op] = output[op++ - codeDist];
	    } // break


	    if (this.ip === this.input.length) {
	      this.op = op;
	      return -1;
	    }
	  }

	  while (this.bitsbuflen >= 8) {
	    this.bitsbuflen -= 8;
	    this.ip--;
	  }

	  this.op = op;
	  this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_END;
	};
	/**
	 * expand output buffer. (dynamic)
	 * @param {Object=} opt_param option parameters.
	 * @return {!(Array|Uint8Array)} output buffer pointer.
	 */


	Zlib.RawInflateStream.prototype.expandBuffer = function (opt_param) {
	  /** @type {!(Array|Uint8Array)} store buffer. */
	  var buffer;
	  /** @type {number} expantion ratio. */

	  var ratio = this.input.length / this.ip + 1 | 0;
	  /** @type {number} maximum number of huffman code. */

	  var maxHuffCode;
	  /** @type {number} new output buffer size. */

	  var newSize;
	  /** @type {number} max inflate size. */

	  var maxInflateSize;
	  var input = this.input;
	  var output = this.output;

	  if (opt_param) {
	    if (typeof opt_param.fixRatio === 'number') {
	      ratio = opt_param.fixRatio;
	    }

	    if (typeof opt_param.addRatio === 'number') {
	      ratio += opt_param.addRatio;
	    }
	  } // calculate new buffer size


	  if (ratio < 2) {
	    maxHuffCode = (input.length - this.ip) / this.litlenTable[2];
	    maxInflateSize = maxHuffCode / 2 * 258 | 0;
	    newSize = maxInflateSize < output.length ? output.length + maxInflateSize : output.length << 1;
	  } else {
	    newSize = output.length * ratio;
	  } // buffer expantion


	  {
	    buffer = new Uint8Array(newSize);
	    buffer.set(output);
	  }
	  this.output = buffer;
	  return this.output;
	};
	/**
	 * concat output buffer. (dynamic)
	 * @return {!(Array|Uint8Array)} output buffer.
	 */


	Zlib.RawInflateStream.prototype.concatBuffer = function () {
	  /** @type {!(Array|Uint8Array)} output buffer. */
	  var buffer;
	  /** @type {number} */

	  var op = this.op;
	  /** @type {Uint8Array} */

	  var tmp;

	  if (this.resize) {
	    {
	      buffer = new Uint8Array(this.output.subarray(this.sp, op));
	    }
	  } else {
	    buffer = this.output.subarray(this.sp, op);
	  }

	  this.sp = op; // compaction

	  if (op > Zlib.RawInflateStream.MaxBackwardLength + this.bufferSize) {
	    this.op = this.sp = Zlib.RawInflateStream.MaxBackwardLength;
	    {
	      tmp =
	      /** @type {Uint8Array} */
	      this.output;
	      this.output = new Uint8Array(this.bufferSize + Zlib.RawInflateStream.MaxBackwardLength);
	      this.output.set(tmp.subarray(op - Zlib.RawInflateStream.MaxBackwardLength, op));
	    }
	  }

	  return buffer;
	};
	/**
	 * @constructor
	 * @param {!(Uint8Array|Array)} input deflated buffer.
	 * @param {Object=} opt_params option parameters.
	 *
	 * opt_params ã¯ä»¥ä¸ã®ãã­ããã£ãæå®ããäºãã§ãã¾ãã
	 *   - index: input buffer ã® deflate ã³ã³ããã®éå§ä½ç½®.
	 *   - blockSize: ãããã¡ã®ãã­ãã¯ãµã¤ãº.
	 *   - verify: ä¼¸å¼µãçµãã£ãå¾ adler-32 checksum ã®æ¤è¨¼ãè¡ãã.
	 *   - bufferType: Zlib.Inflate.BufferType ã®å¤ã«ãã£ã¦ãããã¡ã®ç®¡çæ¹æ³ãæå®ãã.
	 *       Zlib.Inflate.BufferType ã¯ Zlib.RawInflate.BufferType ã®ã¨ã¤ãªã¢ã¹.
	 */


	Zlib.Inflate = function (input, opt_params) {
	  /** @type {number} */
	  var cmf;
	  /** @type {number} */

	  var flg;
	  /** @type {!(Uint8Array|Array)} */

	  this.input = input;
	  /** @type {number} */

	  this.ip = 0;
	  /** @type {Zlib.RawInflate} */

	  this.rawinflate;
	  /** @type {(boolean|undefined)} verify flag. */

	  this.verify; // option parameters

	  if (opt_params || !(opt_params = {})) {
	    if (opt_params['index']) {
	      this.ip = opt_params['index'];
	    }

	    if (opt_params['verify']) {
	      this.verify = opt_params['verify'];
	    }
	  } // Compression Method and Flags


	  cmf = input[this.ip++];
	  flg = input[this.ip++]; // compression method

	  switch (cmf & 0x0f) {
	    case Zlib.CompressionMethod.DEFLATE:
	      this.method = Zlib.CompressionMethod.DEFLATE;
	      break;

	    default:
	      throw new Error('unsupported compression method');
	  } // fcheck


	  if (((cmf << 8) + flg) % 31 !== 0) {
	    throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);
	  } // fdict (not supported)


	  if (flg & 0x20) {
	    throw new Error('fdict flag is not supported');
	  } // RawInflate


	  this.rawinflate = new Zlib.RawInflate(input, {
	    'index': this.ip,
	    'bufferSize': opt_params['bufferSize'],
	    'bufferType': opt_params['bufferType'],
	    'resize': opt_params['resize']
	  });
	};
	/**
	 * @enum {number}
	 */


	Zlib.Inflate.BufferType = Zlib.RawInflate.BufferType;
	/**
	 * decompress.
	 * @return {!(Uint8Array|Array)} inflated buffer.
	 */

	Zlib.Inflate.prototype.decompress = function () {
	  /** @type {!(Array|Uint8Array)} input buffer. */
	  var input = this.input;
	  /** @type {!(Uint8Array|Array)} inflated buffer. */

	  var buffer;
	  /** @type {number} adler-32 checksum */

	  var adler32;
	  buffer = this.rawinflate.decompress();
	  this.ip = this.rawinflate.ip; // verify adler-32

	  if (this.verify) {
	    adler32 = (input[this.ip++] << 24 | input[this.ip++] << 16 | input[this.ip++] << 8 | input[this.ip++]) >>> 0;

	    if (adler32 !== Zlib.Adler32(buffer)) {
	      throw new Error('invalid adler-32 checksum');
	    }
	  }

	  return buffer;
	};
	/* vim:set expandtab ts=2 sw=2 tw=80: */

	/**
	 * @param {!(Uint8Array|Array)} input deflated buffer.
	 * @constructor
	 */


	Zlib.InflateStream = function (input) {
	  /** @type {!(Uint8Array|Array)} */
	  this.input = input === void 0 ? new Uint8Array() : input;
	  /** @type {number} */

	  this.ip = 0;
	  /** @type {Zlib.RawInflateStream} */

	  this.rawinflate = new Zlib.RawInflateStream(this.input, this.ip);
	  /** @type {Zlib.CompressionMethod} */

	  this.method;
	  /** @type {!(Array|Uint8Array)} */

	  this.output = this.rawinflate.output;
	};
	/**
	 * decompress.
	 * @return {!(Uint8Array|Array)} inflated buffer.
	 */


	Zlib.InflateStream.prototype.decompress = function (input) {
	  /** @type {!(Uint8Array|Array)} inflated buffer. */
	  var buffer; // æ°ããå¥åãå¥åãããã¡ã«çµåãã
	  // XXX Array, Uint8Array ã®ãã§ãã¯ãè¡ããç¢ºèªãã

	  if (input !== void 0) {
	    {
	      var tmp = new Uint8Array(this.input.length + input.length);
	      tmp.set(this.input, 0);
	      tmp.set(input, this.input.length);
	      this.input = tmp;
	    }
	  }

	  if (this.method === void 0) {
	    if (this.readHeader() < 0) {
	      return new Uint8Array();
	    }
	  }

	  buffer = this.rawinflate.decompress(this.input, this.ip);

	  if (this.rawinflate.ip !== 0) {
	    this.input = this.input.subarray(this.rawinflate.ip);
	    this.ip = 0;
	  } // verify adler-32

	  /*
	  if (this.verify) {
	    adler32 =
	      input[this.ip++] << 24 | input[this.ip++] << 16 |
	      input[this.ip++] << 8 | input[this.ip++];
	     if (adler32 !== Zlib.Adler32(buffer)) {
	      throw new Error('invalid adler-32 checksum');
	    }
	  }
	  */


	  return buffer;
	};

	Zlib.InflateStream.prototype.readHeader = function () {
	  var ip = this.ip;
	  var input = this.input; // Compression Method and Flags

	  var cmf = input[ip++];
	  var flg = input[ip++];

	  if (cmf === void 0 || flg === void 0) {
	    return -1;
	  } // compression method


	  switch (cmf & 0x0f) {
	    case Zlib.CompressionMethod.DEFLATE:
	      this.method = Zlib.CompressionMethod.DEFLATE;
	      break;

	    default:
	      throw new Error('unsupported compression method');
	  } // fcheck


	  if (((cmf << 8) + flg) % 31 !== 0) {
	    throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);
	  } // fdict (not supported)


	  if (flg & 0x20) {
	    throw new Error('fdict flag is not supported');
	  }

	  this.ip = ip;
	};
	/**
	 * @fileoverview GZIP (RFC1952) å±éã³ã³ããå®è£.
	 */

	/**
	 * @constructor
	 * @param {!(Array|Uint8Array)} input input buffer.
	 * @param {Object=} opt_params option parameters.
	 */


	Zlib.Gunzip = function (input, opt_params) {
	  /** @type {!(Array.<number>|Uint8Array)} input buffer. */
	  this.input = input;
	  /** @type {number} input buffer pointer. */

	  this.ip = 0;
	  /** @type {Array.<Zlib.GunzipMember>} */

	  this.member = [];
	  /** @type {boolean} */

	  this.decompressed = false;
	};
	/**
	 * @return {Array.<Zlib.GunzipMember>}
	 */


	Zlib.Gunzip.prototype.getMembers = function () {
	  if (!this.decompressed) {
	    this.decompress();
	  }

	  return this.member.slice();
	};
	/**
	 * inflate gzip data.
	 * @return {!(Array.<number>|Uint8Array)} inflated buffer.
	 */


	Zlib.Gunzip.prototype.decompress = function () {
	  /** @type {number} input length. */
	  var il = this.input.length;

	  while (this.ip < il) {
	    this.decodeMember();
	  }

	  this.decompressed = true;
	  return this.concatMember();
	};
	/**
	 * decode gzip member.
	 */


	Zlib.Gunzip.prototype.decodeMember = function () {
	  /** @type {Zlib.GunzipMember} */
	  var member = new Zlib.GunzipMember();
	  /** @type {number} */

	  var isize;
	  /** @type {Zlib.RawInflate} RawInflate implementation. */

	  var rawinflate;
	  /** @type {!(Array.<number>|Uint8Array)} inflated data. */

	  var inflated;
	  /** @type {number} inflate size */

	  var inflen;
	  /** @type {number} character code */

	  var c;
	  /** @type {number} character index in string. */

	  var ci;
	  /** @type {Array.<string>} character array. */

	  var str;
	  /** @type {number} modification time. */

	  var mtime;
	  /** @type {number} */

	  var crc32;
	  var input = this.input;
	  var ip = this.ip;
	  member.id1 = input[ip++];
	  member.id2 = input[ip++]; // check signature

	  if (member.id1 !== 0x1f || member.id2 !== 0x8b) {
	    throw new Error('invalid file signature:' + member.id1 + ',' + member.id2);
	  } // check compression method


	  member.cm = input[ip++];

	  switch (member.cm) {
	    case 8:
	      /* XXX: use Zlib const */
	      break;

	    default:
	      throw new Error('unknown compression method: ' + member.cm);
	  } // flags


	  member.flg = input[ip++]; // modification time

	  mtime = input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24;
	  member.mtime = new Date(mtime * 1000); // extra flags

	  member.xfl = input[ip++]; // operating system

	  member.os = input[ip++]; // extra

	  if ((member.flg & Zlib.Gzip.FlagsMask.FEXTRA) > 0) {
	    member.xlen = input[ip++] | input[ip++] << 8;
	    ip = this.decodeSubField(ip, member.xlen);
	  } // fname


	  if ((member.flg & Zlib.Gzip.FlagsMask.FNAME) > 0) {
	    for (str = [], ci = 0; (c = input[ip++]) > 0;) {
	      str[ci++] = String.fromCharCode(c);
	    }

	    member.name = str.join('');
	  } // fcomment


	  if ((member.flg & Zlib.Gzip.FlagsMask.FCOMMENT) > 0) {
	    for (str = [], ci = 0; (c = input[ip++]) > 0;) {
	      str[ci++] = String.fromCharCode(c);
	    }

	    member.comment = str.join('');
	  } // fhcrc


	  if ((member.flg & Zlib.Gzip.FlagsMask.FHCRC) > 0) {
	    member.crc16 = Zlib.CRC32.calc(input, 0, ip) & 0xffff;

	    if (member.crc16 !== (input[ip++] | input[ip++] << 8)) {
	      throw new Error('invalid header crc16');
	    }
	  } // isize ãäºåã«åå¾ããã¨å±éå¾ã®ãµã¤ãºãåããããã
	  // inflateå¦çã®ãããã¡ãµã¤ãºãäºåã«åãããé«éã«ãªã


	  isize = input[input.length - 4] | input[input.length - 3] << 8 | input[input.length - 2] << 16 | input[input.length - 1] << 24; // isize ã®å¦¥å½æ§ãã§ãã¯
	  // ãããã³ç¬¦å·ã§ã¯æå° 2-bit ã®ãããæå¤§ã§ 1/4 ã«ãªã
	  // LZ77 ç¬¦å·ã§ã¯ é·ãã¨è·é¢ 2-Byte ã§æå¤§ 258-Byte ãè¡¨ç¾ã§ããããã
	  // 1/128 ã«ãªãã¨ãã
	  // ããããå¥åãããã¡ã®æ®ãã isize ã® 512 åä»¥ä¸ã ã£ãã
	  // ãµã¤ãºæå®ã®ãããã¡ç¢ºä¿ã¯è¡ããªãäºã¨ãã

	  if (input.length - ip -
	  /* CRC-32 */
	  4 -
	  /* ISIZE */
	  4 < isize * 512) {
	    inflen = isize;
	  } // compressed block


	  rawinflate = new Zlib.RawInflate(input, {
	    'index': ip,
	    'bufferSize': inflen
	  });
	  member.data = inflated = rawinflate.decompress();
	  ip = rawinflate.ip; // crc32

	  member.crc32 = crc32 = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;

	  if (Zlib.CRC32.calc(inflated) !== crc32) {
	    throw new Error('invalid CRC-32 checksum: 0x' + Zlib.CRC32.calc(inflated).toString(16) + ' / 0x' + crc32.toString(16));
	  } // input size


	  member.isize = isize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;

	  if ((inflated.length & 0xffffffff) !== isize) {
	    throw new Error('invalid input size: ' + (inflated.length & 0xffffffff) + ' / ' + isize);
	  }

	  this.member.push(member);
	  this.ip = ip;
	};
	/**
	 * ãµããã£ã¼ã«ãã®ãã³ã¼ã
	 * XXX: ç¾å¨ã¯ä½ãããã¹ã­ãããã
	 */


	Zlib.Gunzip.prototype.decodeSubField = function (ip, length) {
	  return ip + length;
	};
	/**
	 * @return {!(Array.<number>|Uint8Array)}
	 */


	Zlib.Gunzip.prototype.concatMember = function () {
	  /** @type {Array.<Zlib.GunzipMember>} */
	  var member = this.member;
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il;
	  /** @type {number} */

	  var p = 0;
	  /** @type {number} */

	  var size = 0;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var buffer;

	  for (i = 0, il = member.length; i < il; ++i) {
	    size += member[i].data.length;
	  }

	  {
	    buffer = new Uint8Array(size);

	    for (i = 0; i < il; ++i) {
	      buffer.set(member[i].data, p);
	      p += member[i].data.length;
	    }
	  }
	  return buffer;
	};
	/**
	 * @constructor
	 */


	Zlib.GunzipMember = function () {
	  /** @type {number} signature first byte. */
	  this.id1;
	  /** @type {number} signature second byte. */

	  this.id2;
	  /** @type {number} compression method. */

	  this.cm;
	  /** @type {number} flags. */

	  this.flg;
	  /** @type {Date} modification time. */

	  this.mtime;
	  /** @type {number} extra flags. */

	  this.xfl;
	  /** @type {number} operating system number. */

	  this.os;
	  /** @type {number} CRC-16 value for FHCRC flag. */

	  this.crc16;
	  /** @type {number} extra length. */

	  this.xlen;
	  /** @type {number} CRC-32 value for verification. */

	  this.crc32;
	  /** @type {number} input size modulo 32 value. */

	  this.isize;
	  /** @type {string} filename. */

	  this.name;
	  /** @type {string} comment. */

	  this.comment;
	  /** @type {!(Uint8Array|Array.<number>)} */

	  this.data;
	};

	Zlib.GunzipMember.prototype.getName = function () {
	  return this.name;
	};

	Zlib.GunzipMember.prototype.getData = function () {
	  return this.data;
	};

	Zlib.GunzipMember.prototype.getMtime = function () {
	  return this.mtime;
	};
	/**
	 * @fileoverview GZIP (RFC1952) å®è£.
	 */

	/**
	 * @constructor
	 * @param {!(Array|Uint8Array)} input input buffer.
	 * @param {Object=} opt_params option parameters.
	 */


	Zlib.Gzip = function (input, opt_params) {
	  /** @type {!(Array.<number>|Uint8Array)} input buffer. */
	  this.input = input;
	  /** @type {number} input buffer pointer. */

	  this.ip = 0;
	  /** @type {!(Array.<number>|Uint8Array)} output buffer. */

	  this.output;
	  /** @type {number} output buffer. */

	  this.op = 0;
	  /** @type {!Object} flags option flags. */

	  this.flags = {};
	  /** @type {!string} filename. */

	  this.filename;
	  /** @type {!string} comment. */

	  this.comment;
	  /** @type {!Object} deflate options. */

	  this.deflateOptions; // option parameters

	  if (opt_params) {
	    if (opt_params['flags']) {
	      this.flags = opt_params['flags'];
	    }

	    if (typeof opt_params['filename'] === 'string') {
	      this.filename = opt_params['filename'];
	    }

	    if (typeof opt_params['comment'] === 'string') {
	      this.comment = opt_params['comment'];
	    }

	    if (opt_params['deflateOptions']) {
	      this.deflateOptions = opt_params['deflateOptions'];
	    }
	  }

	  if (!this.deflateOptions) {
	    this.deflateOptions = {};
	  }
	};
	/**
	 * @type {number}
	 * @const
	 */


	Zlib.Gzip.DefaultBufferSize = 0x8000;
	/**
	 * encode gzip members.
	 * @return {!(Array|Uint8Array)} gzip binary array.
	 */

	Zlib.Gzip.prototype.compress = function () {
	  /** @type {number} flags. */
	  var flg;
	  /** @type {number} modification time. */

	  var mtime;
	  /** @type {number} CRC-16 value for FHCRC flag. */

	  var crc16;
	  /** @type {number} CRC-32 value for verification. */

	  var crc32;
	  /** @type {!Zlib.RawDeflate} raw deflate object. */

	  var rawdeflate;
	  /** @type {number} character code */

	  var c;
	  /** @type {number} loop counter. */

	  var i;
	  /** @type {number} loop limiter. */

	  var il;
	  /** @type {!(Array|Uint8Array)} output buffer. */

	  var output = new Uint8Array(Zlib.Gzip.DefaultBufferSize);
	  /** @type {number} output buffer pointer. */

	  var op = 0;
	  var input = this.input;
	  var ip = this.ip;
	  var filename = this.filename;
	  var comment = this.comment; // check signature

	  output[op++] = 0x1f;
	  output[op++] = 0x8b; // check compression method

	  output[op++] = 8;
	  /* XXX: use Zlib const */
	  // flags

	  flg = 0;
	  if (this.flags['fname']) flg |= Zlib.Gzip.FlagsMask.FNAME;
	  if (this.flags['fcomment']) flg |= Zlib.Gzip.FlagsMask.FCOMMENT;
	  if (this.flags['fhcrc']) flg |= Zlib.Gzip.FlagsMask.FHCRC; // XXX: FTEXT
	  // XXX: FEXTRA

	  output[op++] = flg; // modification time

	  mtime = (Date.now ? Date.now() : +new Date()) / 1000 | 0;
	  output[op++] = mtime & 0xff;
	  output[op++] = mtime >>> 8 & 0xff;
	  output[op++] = mtime >>> 16 & 0xff;
	  output[op++] = mtime >>> 24 & 0xff; // extra flags

	  output[op++] = 0; // operating system

	  output[op++] = Zlib.Gzip.OperatingSystem.UNKNOWN; // extra

	  /* NOP */
	  // fname

	  if (this.flags['fname'] !== void 0) {
	    for (i = 0, il = filename.length; i < il; ++i) {
	      c = filename.charCodeAt(i);

	      if (c > 0xff) {
	        output[op++] = c >>> 8 & 0xff;
	      }

	      output[op++] = c & 0xff;
	    }

	    output[op++] = 0; // null termination
	  } // fcomment


	  if (this.flags['comment']) {
	    for (i = 0, il = comment.length; i < il; ++i) {
	      c = comment.charCodeAt(i);

	      if (c > 0xff) {
	        output[op++] = c >>> 8 & 0xff;
	      }

	      output[op++] = c & 0xff;
	    }

	    output[op++] = 0; // null termination
	  } // fhcrc


	  if (this.flags['fhcrc']) {
	    crc16 = Zlib.CRC32.calc(output, 0, op) & 0xffff;
	    output[op++] = crc16 & 0xff;
	    output[op++] = crc16 >>> 8 & 0xff;
	  } // add compress option


	  this.deflateOptions['outputBuffer'] = output;
	  this.deflateOptions['outputIndex'] = op; // compress

	  rawdeflate = new Zlib.RawDeflate(input, this.deflateOptions);
	  output = rawdeflate.compress();
	  op = rawdeflate.op; // expand buffer

	  {
	    if (op + 8 > output.buffer.byteLength) {
	      this.output = new Uint8Array(op + 8);
	      this.output.set(new Uint8Array(output.buffer));
	      output = this.output;
	    } else {
	      output = new Uint8Array(output.buffer);
	    }
	  } // crc32

	  crc32 = Zlib.CRC32.calc(input);
	  output[op++] = crc32 & 0xff;
	  output[op++] = crc32 >>> 8 & 0xff;
	  output[op++] = crc32 >>> 16 & 0xff;
	  output[op++] = crc32 >>> 24 & 0xff; // input size

	  il = input.length;
	  output[op++] = il & 0xff;
	  output[op++] = il >>> 8 & 0xff;
	  output[op++] = il >>> 16 & 0xff;
	  output[op++] = il >>> 24 & 0xff;
	  this.ip = ip;

	  if (op < output.length) {
	    this.output = output = output.subarray(0, op);
	  }

	  return output;
	};
	/** @enum {number} */


	Zlib.Gzip.OperatingSystem = {
	  FAT: 0,
	  AMIGA: 1,
	  VMS: 2,
	  UNIX: 3,
	  VM_CMS: 4,
	  ATARI_TOS: 5,
	  HPFS: 6,
	  MACINTOSH: 7,
	  Z_SYSTEM: 8,
	  CP_M: 9,
	  TOPS_20: 10,
	  NTFS: 11,
	  QDOS: 12,
	  ACORN_RISCOS: 13,
	  UNKNOWN: 255
	};
	/** @enum {number} */

	Zlib.Gzip.FlagsMask = {
	  FTEXT: 0x01,
	  FHCRC: 0x02,
	  FEXTRA: 0x04,
	  FNAME: 0x08,
	  FCOMMENT: 0x10
	};
	/**
	 * @fileoverview Heap Sort å®è£. ãããã³ç¬¦å·åã§ä½¿ç¨ãã.
	 */

	/**
	 * ã«ã¹ã¿ã ãããã³ç¬¦å·ã§ä½¿ç¨ãããã¼ãå®è£
	 * @param {number} length ãã¼ããµã¤ãº.
	 * @constructor
	 */

	Zlib.Heap = function (length) {
	  this.buffer = new Uint16Array(length * 2);
	  this.length = 0;
	};
	/**
	 * è¦ªãã¼ãã® index åå¾
	 * @param {number} index å­ãã¼ãã® index.
	 * @return {number} è¦ªãã¼ãã® index.
	 *
	 */


	Zlib.Heap.prototype.getParent = function (index) {
	  return ((index - 2) / 4 | 0) * 2;
	};
	/**
	 * å­ãã¼ãã® index åå¾
	 * @param {number} index è¦ªãã¼ãã® index.
	 * @return {number} å­ãã¼ãã® index.
	 */


	Zlib.Heap.prototype.getChild = function (index) {
	  return 2 * index + 2;
	};
	/**
	 * Heap ã«å¤ãè¿½å ãã
	 * @param {number} index ã­ã¼ index.
	 * @param {number} value å¤.
	 * @return {number} ç¾å¨ã®ãã¼ãé·.
	 */


	Zlib.Heap.prototype.push = function (index, value) {
	  var current,
	      parent,
	      heap = this.buffer,
	      swap;
	  current = this.length;
	  heap[this.length++] = value;
	  heap[this.length++] = index; // ã«ã¼ããã¼ãã«ãã©ãçãã¾ã§å¥ãæ¿ããè©¦ã¿ã

	  while (current > 0) {
	    parent = this.getParent(current); // è¦ªãã¼ãã¨æ¯è¼ãã¦è¦ªã®æ¹ãå°ãããã°å¥ãæ¿ãã

	    if (heap[current] > heap[parent]) {
	      swap = heap[current];
	      heap[current] = heap[parent];
	      heap[parent] = swap;
	      swap = heap[current + 1];
	      heap[current + 1] = heap[parent + 1];
	      heap[parent + 1] = swap;
	      current = parent; // å¥ãæ¿ããå¿è¦ãªããªã£ããããã§æãã
	    } else {
	      break;
	    }
	  }

	  return this.length;
	};
	/**
	 * Heapããä¸çªå¤§ããå¤ãè¿ã
	 * @return {{index: number, value: number, length: number}} {index: ã­ã¼index,
	 *     value: å¤, length: ãã¼ãé·} ã® Object.
	 */


	Zlib.Heap.prototype.pop = function () {
	  var index,
	      value,
	      heap = this.buffer,
	      swap,
	      current,
	      parent;
	  value = heap[0];
	  index = heap[1]; // å¾ãããå¤ãåã

	  this.length -= 2;
	  heap[0] = heap[this.length];
	  heap[1] = heap[this.length + 1];
	  parent = 0; // ã«ã¼ããã¼ãããä¸ãã£ã¦ãã

	  while (true) {
	    current = this.getChild(parent); // ç¯å²ãã§ãã¯

	    if (current >= this.length) {
	      break;
	    } // é£ã®ãã¼ãã¨æ¯è¼ãã¦ãé£ã®æ¹ãå¤ãå¤§ãããã°é£ãç¾å¨ãã¼ãã¨ãã¦é¸æ


	    if (current + 2 < this.length && heap[current + 2] > heap[current]) {
	      current += 2;
	    } // è¦ªãã¼ãã¨æ¯è¼ãã¦è¦ªã®æ¹ãå°ããå ´åã¯å¥ãæ¿ãã


	    if (heap[current] > heap[parent]) {
	      swap = heap[parent];
	      heap[parent] = heap[current];
	      heap[current] = swap;
	      swap = heap[parent + 1];
	      heap[parent + 1] = heap[current + 1];
	      heap[current + 1] = swap;
	    } else {
	      break;
	    }

	    parent = current;
	  }

	  return {
	    index: index,
	    value: value,
	    length: this.length
	  };
	};
	/* vim:set expandtab ts=2 sw=2 tw=80: */

	/**
	 * @fileoverview Deflate (RFC1951) ç¬¦å·åã¢ã«ã´ãªãºã å®è£.
	 */

	/**
	 * Raw Deflate å®è£
	 *
	 * @constructor
	 * @param {!(Array.<number>|Uint8Array)} input ç¬¦å·åããå¯¾è±¡ã®ãããã¡.
	 * @param {Object=} opt_params option parameters.
	 *
	 * typed array ãä½¿ç¨å¯è½ãªã¨ããoutputBuffer ã Array ã¯èªåçã« Uint8Array ã«
	 * å¤æããã¾ã.
	 * å¥ã®ãªãã¸ã§ã¯ãã«ãªãããåºåãããã¡ãåç§ãã¦ããå¤æ°ãªã©ã¯
	 * æ´æ°ããå¿è¦ãããã¾ã.
	 */


	Zlib.RawDeflate = function (input, opt_params) {
	  /** @type {Zlib.RawDeflate.CompressionType} */
	  this.compressionType = Zlib.RawDeflate.CompressionType.DYNAMIC;
	  /** @type {number} */

	  this.lazy = 0;
	  /** @type {!(Array.<number>|Uint32Array)} */

	  this.freqsLitLen;
	  /** @type {!(Array.<number>|Uint32Array)} */

	  this.freqsDist;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  this.input = input instanceof Array ? new Uint8Array(input) : input;
	  /** @type {!(Array.<number>|Uint8Array)} output output buffer. */

	  this.output;
	  /** @type {number} pos output buffer position. */

	  this.op = 0; // option parameters

	  if (opt_params) {
	    if (opt_params['lazy']) {
	      this.lazy = opt_params['lazy'];
	    }

	    if (typeof opt_params['compressionType'] === 'number') {
	      this.compressionType = opt_params['compressionType'];
	    }

	    if (opt_params['outputBuffer']) {
	      this.output = opt_params['outputBuffer'] instanceof Array ? new Uint8Array(opt_params['outputBuffer']) : opt_params['outputBuffer'];
	    }

	    if (typeof opt_params['outputIndex'] === 'number') {
	      this.op = opt_params['outputIndex'];
	    }
	  }

	  if (!this.output) {
	    this.output = new Uint8Array(0x8000);
	  }
	};
	/**
	 * @enum {number}
	 */


	Zlib.RawDeflate.CompressionType = {
	  NONE: 0,
	  FIXED: 1,
	  DYNAMIC: 2,
	  RESERVED: 3
	};
	/**
	 * LZ77 ã®æå°ãããé·
	 * @const
	 * @type {number}
	 */

	Zlib.RawDeflate.Lz77MinLength = 3;
	/**
	 * LZ77 ã®æå¤§ãããé·
	 * @const
	 * @type {number}
	 */

	Zlib.RawDeflate.Lz77MaxLength = 258;
	/**
	 * LZ77 ã®ã¦ã£ã³ãã¦ãµã¤ãº
	 * @const
	 * @type {number}
	 */

	Zlib.RawDeflate.WindowSize = 0x8000;
	/**
	 * æé·ã®ç¬¦å·é·
	 * @const
	 * @type {number}
	 */

	Zlib.RawDeflate.MaxCodeLength = 16;
	/**
	 * ãããã³ç¬¦å·ã®æå¤§æ°å¤
	 * @const
	 * @type {number}
	 */

	Zlib.RawDeflate.HUFMAX = 286;
	/**
	 * åºå®ãããã³ç¬¦å·ã®ç¬¦å·åãã¼ãã«
	 * @const
	 * @type {Array.<Array.<number, number>>}
	 */

	Zlib.RawDeflate.FixedHuffmanTable = function () {
	  var table = [],
	      i;

	  for (i = 0; i < 288; i++) {
	    switch (true) {
	      case i <= 143:
	        table.push([i + 0x030, 8]);
	        break;

	      case i <= 255:
	        table.push([i - 144 + 0x190, 9]);
	        break;

	      case i <= 279:
	        table.push([i - 256 + 0x000, 7]);
	        break;

	      case i <= 287:
	        table.push([i - 280 + 0x0C0, 8]);
	        break;

	      default:
	        throw 'invalid literal: ' + i;
	    }
	  }

	  return table;
	}();
	/**
	 * DEFLATE ãã­ãã¯ã®ä½æ
	 * @return {!(Array.<number>|Uint8Array)} å§ç¸®æ¸ã¿ byte array.
	 */


	Zlib.RawDeflate.prototype.compress = function () {
	  /** @type {!(Array.<number>|Uint8Array)} */
	  var blockArray;
	  /** @type {number} */

	  var position;
	  /** @type {number} */

	  var length;
	  var input = this.input; // compression

	  switch (this.compressionType) {
	    case Zlib.RawDeflate.CompressionType.NONE:
	      // each 65535-Byte (length header: 16-bit)
	      for (position = 0, length = input.length; position < length;) {
	        blockArray = input.subarray(position, position + 0xffff);
	        position += blockArray.length;
	        this.makeNocompressBlock(blockArray, position === length);
	      }

	      break;

	    case Zlib.RawDeflate.CompressionType.FIXED:
	      this.output = this.makeFixedHuffmanBlock(input, true);
	      this.op = this.output.length;
	      break;

	    case Zlib.RawDeflate.CompressionType.DYNAMIC:
	      this.output = this.makeDynamicHuffmanBlock(input, true);
	      this.op = this.output.length;
	      break;

	    default:
	      throw 'invalid compression type';
	  }

	  return this.output;
	};
	/**
	 * éå§ç¸®ãã­ãã¯ã®ä½æ
	 * @param {!(Array.<number>|Uint8Array)} blockArray ãã­ãã¯ãã¼ã¿ byte array.
	 * @param {!boolean} isFinalBlock æå¾ã®ãã­ãã¯ãªãã°true.
	 * @return {!(Array.<number>|Uint8Array)} éå§ç¸®ãã­ãã¯ byte array.
	 */


	Zlib.RawDeflate.prototype.makeNocompressBlock = function (blockArray, isFinalBlock) {
	  /** @type {number} */
	  var bfinal;
	  /** @type {Zlib.RawDeflate.CompressionType} */

	  var btype;
	  /** @type {number} */

	  var len;
	  /** @type {number} */

	  var nlen;
	  var output = this.output;
	  var op = this.op; // expand buffer

	  {
	    output = new Uint8Array(this.output.buffer);

	    while (output.length <= op + blockArray.length + 5) {
	      output = new Uint8Array(output.length << 1);
	    }

	    output.set(this.output);
	  } // header

	  bfinal = isFinalBlock ? 1 : 0;
	  btype = Zlib.RawDeflate.CompressionType.NONE;
	  output[op++] = bfinal | btype << 1; // length

	  len = blockArray.length;
	  nlen = ~len + 0x10000 & 0xffff;
	  output[op++] = len & 0xff;
	  output[op++] = len >>> 8 & 0xff;
	  output[op++] = nlen & 0xff;
	  output[op++] = nlen >>> 8 & 0xff; // copy buffer

	  {
	    output.set(blockArray, op);
	    op += blockArray.length;
	    output = output.subarray(0, op);
	  }
	  this.op = op;
	  this.output = output;
	  return output;
	};
	/**
	 * åºå®ãããã³ãã­ãã¯ã®ä½æ
	 * @param {!(Array.<number>|Uint8Array)} blockArray ãã­ãã¯ãã¼ã¿ byte array.
	 * @param {!boolean} isFinalBlock æå¾ã®ãã­ãã¯ãªãã°true.
	 * @return {!(Array.<number>|Uint8Array)} åºå®ãããã³ç¬¦å·åãã­ãã¯ byte array.
	 */


	Zlib.RawDeflate.prototype.makeFixedHuffmanBlock = function (blockArray, isFinalBlock) {
	  /** @type {Zlib.BitStream} */
	  var stream = new Zlib.BitStream(new Uint8Array(this.output.buffer), this.op);
	  /** @type {number} */

	  var bfinal;
	  /** @type {Zlib.RawDeflate.CompressionType} */

	  var btype;
	  /** @type {!(Array.<number>|Uint16Array)} */

	  var data; // header

	  bfinal = isFinalBlock ? 1 : 0;
	  btype = Zlib.RawDeflate.CompressionType.FIXED;
	  stream.writeBits(bfinal, 1, true);
	  stream.writeBits(btype, 2, true);
	  data = this.lz77(blockArray);
	  this.fixedHuffman(data, stream);
	  return stream.finish();
	};
	/**
	 * åçãããã³ãã­ãã¯ã®ä½æ
	 * @param {!(Array.<number>|Uint8Array)} blockArray ãã­ãã¯ãã¼ã¿ byte array.
	 * @param {!boolean} isFinalBlock æå¾ã®ãã­ãã¯ãªãã°true.
	 * @return {!(Array.<number>|Uint8Array)} åçãããã³ç¬¦å·ãã­ãã¯ byte array.
	 */


	Zlib.RawDeflate.prototype.makeDynamicHuffmanBlock = function (blockArray, isFinalBlock) {
	  /** @type {Zlib.BitStream} */
	  var stream = new Zlib.BitStream(new Uint8Array(this.output.buffer), this.op);
	  /** @type {number} */

	  var bfinal;
	  /** @type {Zlib.RawDeflate.CompressionType} */

	  var btype;
	  /** @type {!(Array.<number>|Uint16Array)} */

	  var data;
	  /** @type {number} */

	  var hlit;
	  /** @type {number} */

	  var hdist;
	  /** @type {number} */

	  var hclen;
	  /** @const @type {Array.<number>} */

	  var hclenOrder = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var litLenLengths;
	  /** @type {!(Array.<number>|Uint16Array)} */

	  var litLenCodes;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var distLengths;
	  /** @type {!(Array.<number>|Uint16Array)} */

	  var distCodes;
	  /** @type {{
	   *   codes: !(Array.<number>|Uint32Array),
	   *   freqs: !(Array.<number>|Uint8Array)
	   * }} */

	  var treeSymbols;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var treeLengths;
	  /** @type {Array} */

	  var transLengths = new Array(19);
	  /** @type {!(Array.<number>|Uint16Array)} */

	  var treeCodes;
	  /** @type {number} */

	  var code;
	  /** @type {number} */

	  var bitlen;
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il; // header

	  bfinal = isFinalBlock ? 1 : 0;
	  btype = Zlib.RawDeflate.CompressionType.DYNAMIC;
	  stream.writeBits(bfinal, 1, true);
	  stream.writeBits(btype, 2, true);
	  data = this.lz77(blockArray); // ãªãã©ã«ã»é·ã, è·é¢ã®ãããã³ç¬¦å·ã¨ç¬¦å·é·ã®ç®åº

	  litLenLengths = this.getLengths_(this.freqsLitLen, 15);
	  litLenCodes = this.getCodesFromLengths_(litLenLengths);
	  distLengths = this.getLengths_(this.freqsDist, 7);
	  distCodes = this.getCodesFromLengths_(distLengths); // HLIT, HDIST ã®æ±ºå®

	  for (hlit = 286; hlit > 257 && litLenLengths[hlit - 1] === 0; hlit--) {}

	  for (hdist = 30; hdist > 1 && distLengths[hdist - 1] === 0; hdist--) {} // HCLEN


	  treeSymbols = this.getTreeSymbols_(hlit, litLenLengths, hdist, distLengths);
	  treeLengths = this.getLengths_(treeSymbols.freqs, 7);

	  for (i = 0; i < 19; i++) {
	    transLengths[i] = treeLengths[hclenOrder[i]];
	  }

	  for (hclen = 19; hclen > 4 && transLengths[hclen - 1] === 0; hclen--) {}

	  treeCodes = this.getCodesFromLengths_(treeLengths); // åºå

	  stream.writeBits(hlit - 257, 5, true);
	  stream.writeBits(hdist - 1, 5, true);
	  stream.writeBits(hclen - 4, 4, true);

	  for (i = 0; i < hclen; i++) {
	    stream.writeBits(transLengths[i], 3, true);
	  } // ããªã¼ã®åºå


	  for (i = 0, il = treeSymbols.codes.length; i < il; i++) {
	    code = treeSymbols.codes[i];
	    stream.writeBits(treeCodes[code], treeLengths[code], true); // extra bits

	    if (code >= 16) {
	      i++;

	      switch (code) {
	        case 16:
	          bitlen = 2;
	          break;

	        case 17:
	          bitlen = 3;
	          break;

	        case 18:
	          bitlen = 7;
	          break;

	        default:
	          throw 'invalid code: ' + code;
	      }

	      stream.writeBits(treeSymbols.codes[i], bitlen, true);
	    }
	  }

	  this.dynamicHuffman(data, [litLenCodes, litLenLengths], [distCodes, distLengths], stream);
	  return stream.finish();
	};
	/**
	 * åçãããã³ç¬¦å·å(ã«ã¹ã¿ã ãããã³ãã¼ãã«)
	 * @param {!(Array.<number>|Uint16Array)} dataArray LZ77 ç¬¦å·åæ¸ã¿ byte array.
	 * @param {!Zlib.BitStream} stream æ¸ãè¾¼ã¿ç¨ãããã¹ããªã¼ã .
	 * @return {!Zlib.BitStream} ãããã³ç¬¦å·åæ¸ã¿ãããã¹ããªã¼ã ãªãã¸ã§ã¯ã.
	 */


	Zlib.RawDeflate.prototype.dynamicHuffman = function (dataArray, litLen, dist, stream) {
	  /** @type {number} */
	  var index;
	  /** @type {number} */

	  var length;
	  /** @type {number} */

	  var literal;
	  /** @type {number} */

	  var code;
	  /** @type {number} */

	  var litLenCodes;
	  /** @type {number} */

	  var litLenLengths;
	  /** @type {number} */

	  var distCodes;
	  /** @type {number} */

	  var distLengths;
	  litLenCodes = litLen[0];
	  litLenLengths = litLen[1];
	  distCodes = dist[0];
	  distLengths = dist[1]; // ç¬¦å·ã BitStream ã«æ¸ãè¾¼ãã§ãã

	  for (index = 0, length = dataArray.length; index < length; ++index) {
	    literal = dataArray[index]; // literal or length

	    stream.writeBits(litLenCodes[literal], litLenLengths[literal], true); // é·ãã»è·é¢ç¬¦å·

	    if (literal > 256) {
	      // length extra
	      stream.writeBits(dataArray[++index], dataArray[++index], true); // distance

	      code = dataArray[++index];
	      stream.writeBits(distCodes[code], distLengths[code], true); // distance extra

	      stream.writeBits(dataArray[++index], dataArray[++index], true); // çµç«¯
	    } else if (literal === 256) {
	      break;
	    }
	  }

	  return stream;
	};
	/**
	 * åºå®ãããã³ç¬¦å·å
	 * @param {!(Array.<number>|Uint16Array)} dataArray LZ77 ç¬¦å·åæ¸ã¿ byte array.
	 * @param {!Zlib.BitStream} stream æ¸ãè¾¼ã¿ç¨ãããã¹ããªã¼ã .
	 * @return {!Zlib.BitStream} ãããã³ç¬¦å·åæ¸ã¿ãããã¹ããªã¼ã ãªãã¸ã§ã¯ã.
	 */


	Zlib.RawDeflate.prototype.fixedHuffman = function (dataArray, stream) {
	  /** @type {number} */
	  var index;
	  /** @type {number} */

	  var length;
	  /** @type {number} */

	  var literal; // ç¬¦å·ã BitStream ã«æ¸ãè¾¼ãã§ãã

	  for (index = 0, length = dataArray.length; index < length; index++) {
	    literal = dataArray[index]; // ç¬¦å·ã®æ¸ãè¾¼ã¿

	    Zlib.BitStream.prototype.writeBits.apply(stream, Zlib.RawDeflate.FixedHuffmanTable[literal]); // é·ãã»è·é¢ç¬¦å·

	    if (literal > 0x100) {
	      // length extra
	      stream.writeBits(dataArray[++index], dataArray[++index], true); // distance

	      stream.writeBits(dataArray[++index], 5); // distance extra

	      stream.writeBits(dataArray[++index], dataArray[++index], true); // çµç«¯
	    } else if (literal === 0x100) {
	      break;
	    }
	  }

	  return stream;
	};
	/**
	 * ãããæå ±
	 * @param {!number} length ãããããé·ã.
	 * @param {!number} backwardDistance ãããä½ç½®ã¨ã®è·é¢.
	 * @constructor
	 */


	Zlib.RawDeflate.Lz77Match = function (length, backwardDistance) {
	  /** @type {number} match length. */
	  this.length = length;
	  /** @type {number} backward distance. */

	  this.backwardDistance = backwardDistance;
	};
	/**
	 * é·ãç¬¦å·ãã¼ãã«.
	 * [ã³ã¼ã, æ¡å¼µããã, æ¡å¼µãããé·] ã®éåã¨ãªã£ã¦ãã.
	 * @const
	 * @type {!(Array.<number>|Uint32Array)}
	 */


	Zlib.RawDeflate.Lz77Match.LengthCodeTable = function (table) {
	  return new Uint32Array(table);
	}(function () {
	  /** @type {!Array} */
	  var table = [];
	  /** @type {number} */

	  var i;
	  /** @type {!Array.<number>} */

	  var c;

	  for (i = 3; i <= 258; i++) {
	    c = code(i);
	    table[i] = c[2] << 24 | c[1] << 16 | c[0];
	  }
	  /**
	   * @param {number} length lz77 length.
	   * @return {!Array.<number>} lz77 codes.
	   */


	  function code(length) {
	    switch (true) {
	      case length === 3:
	        return [257, length - 3, 0];

	      case length === 4:
	        return [258, length - 4, 0];

	      case length === 5:
	        return [259, length - 5, 0];

	      case length === 6:
	        return [260, length - 6, 0];

	      case length === 7:
	        return [261, length - 7, 0];

	      case length === 8:
	        return [262, length - 8, 0];

	      case length === 9:
	        return [263, length - 9, 0];

	      case length === 10:
	        return [264, length - 10, 0];

	      case length <= 12:
	        return [265, length - 11, 1];

	      case length <= 14:
	        return [266, length - 13, 1];

	      case length <= 16:
	        return [267, length - 15, 1];

	      case length <= 18:
	        return [268, length - 17, 1];

	      case length <= 22:
	        return [269, length - 19, 2];

	      case length <= 26:
	        return [270, length - 23, 2];

	      case length <= 30:
	        return [271, length - 27, 2];

	      case length <= 34:
	        return [272, length - 31, 2];

	      case length <= 42:
	        return [273, length - 35, 3];

	      case length <= 50:
	        return [274, length - 43, 3];

	      case length <= 58:
	        return [275, length - 51, 3];

	      case length <= 66:
	        return [276, length - 59, 3];

	      case length <= 82:
	        return [277, length - 67, 4];

	      case length <= 98:
	        return [278, length - 83, 4];

	      case length <= 114:
	        return [279, length - 99, 4];

	      case length <= 130:
	        return [280, length - 115, 4];

	      case length <= 162:
	        return [281, length - 131, 5];

	      case length <= 194:
	        return [282, length - 163, 5];

	      case length <= 226:
	        return [283, length - 195, 5];

	      case length <= 257:
	        return [284, length - 227, 5];

	      case length === 258:
	        return [285, length - 258, 0];

	      default:
	        throw 'invalid length: ' + length;
	    }
	  }

	  return table;
	}());
	/**
	 * è·é¢ç¬¦å·ãã¼ãã«
	 * @param {!number} dist è·é¢.
	 * @return {!Array.<number>} ã³ã¼ããæ¡å¼µããããæ¡å¼µãããé·ã®éå.
	 * @private
	 */


	Zlib.RawDeflate.Lz77Match.prototype.getDistanceCode_ = function (dist) {
	  /** @type {!Array.<number>} distance code table. */
	  var r;

	  switch (true) {
	    case dist === 1:
	      r = [0, dist - 1, 0];
	      break;

	    case dist === 2:
	      r = [1, dist - 2, 0];
	      break;

	    case dist === 3:
	      r = [2, dist - 3, 0];
	      break;

	    case dist === 4:
	      r = [3, dist - 4, 0];
	      break;

	    case dist <= 6:
	      r = [4, dist - 5, 1];
	      break;

	    case dist <= 8:
	      r = [5, dist - 7, 1];
	      break;

	    case dist <= 12:
	      r = [6, dist - 9, 2];
	      break;

	    case dist <= 16:
	      r = [7, dist - 13, 2];
	      break;

	    case dist <= 24:
	      r = [8, dist - 17, 3];
	      break;

	    case dist <= 32:
	      r = [9, dist - 25, 3];
	      break;

	    case dist <= 48:
	      r = [10, dist - 33, 4];
	      break;

	    case dist <= 64:
	      r = [11, dist - 49, 4];
	      break;

	    case dist <= 96:
	      r = [12, dist - 65, 5];
	      break;

	    case dist <= 128:
	      r = [13, dist - 97, 5];
	      break;

	    case dist <= 192:
	      r = [14, dist - 129, 6];
	      break;

	    case dist <= 256:
	      r = [15, dist - 193, 6];
	      break;

	    case dist <= 384:
	      r = [16, dist - 257, 7];
	      break;

	    case dist <= 512:
	      r = [17, dist - 385, 7];
	      break;

	    case dist <= 768:
	      r = [18, dist - 513, 8];
	      break;

	    case dist <= 1024:
	      r = [19, dist - 769, 8];
	      break;

	    case dist <= 1536:
	      r = [20, dist - 1025, 9];
	      break;

	    case dist <= 2048:
	      r = [21, dist - 1537, 9];
	      break;

	    case dist <= 3072:
	      r = [22, dist - 2049, 10];
	      break;

	    case dist <= 4096:
	      r = [23, dist - 3073, 10];
	      break;

	    case dist <= 6144:
	      r = [24, dist - 4097, 11];
	      break;

	    case dist <= 8192:
	      r = [25, dist - 6145, 11];
	      break;

	    case dist <= 12288:
	      r = [26, dist - 8193, 12];
	      break;

	    case dist <= 16384:
	      r = [27, dist - 12289, 12];
	      break;

	    case dist <= 24576:
	      r = [28, dist - 16385, 13];
	      break;

	    case dist <= 32768:
	      r = [29, dist - 24577, 13];
	      break;

	    default:
	      throw 'invalid distance';
	  }

	  return r;
	};
	/**
	 * ãããæå ±ã LZ77 ç¬¦å·åéåã§è¿ã.
	 * ãªããããã§ã¯ä»¥ä¸ã®åé¨ä»æ§ã§ç¬¦å·åãã¦ãã
	 * [ CODE, EXTRA-BIT-LEN, EXTRA, CODE, EXTRA-BIT-LEN, EXTRA ]
	 * @return {!Array.<number>} LZ77 ç¬¦å·å byte array.
	 */


	Zlib.RawDeflate.Lz77Match.prototype.toLz77Array = function () {
	  /** @type {number} */
	  var length = this.length;
	  /** @type {number} */

	  var dist = this.backwardDistance;
	  /** @type {Array} */

	  var codeArray = [];
	  /** @type {number} */

	  var pos = 0;
	  /** @type {!Array.<number>} */

	  var code; // length

	  code = Zlib.RawDeflate.Lz77Match.LengthCodeTable[length];
	  codeArray[pos++] = code & 0xffff;
	  codeArray[pos++] = code >> 16 & 0xff;
	  codeArray[pos++] = code >> 24; // distance

	  code = this.getDistanceCode_(dist);
	  codeArray[pos++] = code[0];
	  codeArray[pos++] = code[1];
	  codeArray[pos++] = code[2];
	  return codeArray;
	};
	/**
	 * LZ77 å®è£
	 * @param {!(Array.<number>|Uint8Array)} dataArray LZ77 ç¬¦å·åãããã¤ãéå.
	 * @return {!(Array.<number>|Uint16Array)} LZ77 ç¬¦å·åããéå.
	 */


	Zlib.RawDeflate.prototype.lz77 = function (dataArray) {
	  /** @type {number} input position */
	  var position;
	  /** @type {number} input length */

	  var length;
	  /** @type {number} loop counter */

	  var i;
	  /** @type {number} loop limiter */

	  var il;
	  /** @type {number} chained-hash-table key */

	  var matchKey;
	  /** @type {Object.<number, Array.<number>>} chained-hash-table */

	  var table = {};
	  /** @const @type {number} */

	  var windowSize = Zlib.RawDeflate.WindowSize;
	  /** @type {Array.<number>} match list */

	  var matchList;
	  /** @type {Zlib.RawDeflate.Lz77Match} longest match */

	  var longestMatch;
	  /** @type {Zlib.RawDeflate.Lz77Match} previous longest match */

	  var prevMatch;
	  /** @type {!(Array.<number>|Uint16Array)} lz77 buffer */

	  var lz77buf = new Uint16Array(dataArray.length * 2);
	  /** @type {number} lz77 output buffer pointer */

	  var pos = 0;
	  /** @type {number} lz77 skip length */

	  var skipLength = 0;
	  /** @type {!(Array.<number>|Uint32Array)} */

	  var freqsLitLen = new Uint32Array(286);
	  /** @type {!(Array.<number>|Uint32Array)} */

	  var freqsDist = new Uint32Array(30);
	  /** @type {number} */

	  var lazy = this.lazy;
	  /** @type {*} temporary variable */

	  var tmp;
	  freqsLitLen[256] = 1; // EOB ã®æä½åºç¾åæ°ã¯ 1

	  /**
	   * ããããã¼ã¿ã®æ¸ãè¾¼ã¿
	   * @param {Zlib.RawDeflate.Lz77Match} match LZ77 Match data.
	   * @param {!number} offset ã¹ã­ããéå§ä½ç½®(ç¸å¯¾æå®).
	   * @private
	   */

	  function writeMatch(match, offset) {
	    /** @type {Array.<number>} */
	    var lz77Array = match.toLz77Array();
	    /** @type {number} */

	    var i;
	    /** @type {number} */

	    var il;

	    for (i = 0, il = lz77Array.length; i < il; ++i) {
	      lz77buf[pos++] = lz77Array[i];
	    }

	    freqsLitLen[lz77Array[0]]++;
	    freqsDist[lz77Array[3]]++;
	    skipLength = match.length + offset - 1;
	    prevMatch = null;
	  } // LZ77 ç¬¦å·å


	  for (position = 0, length = dataArray.length; position < length; ++position) {
	    // ããã·ã¥ã­ã¼ã®ä½æ
	    for (matchKey = 0, i = 0, il = Zlib.RawDeflate.Lz77MinLength; i < il; ++i) {
	      if (position + i === length) {
	        break;
	      }

	      matchKey = matchKey << 8 | dataArray[position + i];
	    } // ãã¼ãã«ãæªå®ç¾©ã ã£ããä½æãã


	    if (table[matchKey] === void 0) {
	      table[matchKey] = [];
	    }

	    matchList = table[matchKey]; // skip

	    if (skipLength-- > 0) {
	      matchList.push(position);
	      continue;
	    } // ããããã¼ãã«ã®æ´æ° (æå¤§æ»ãè·é¢ãè¶ãã¦ãããã®ãåé¤ãã)


	    while (matchList.length > 0 && position - matchList[0] > windowSize) {
	      matchList.shift();
	    } // ãã¼ã¿æ«å°¾ã§ããããããããªãå ´åã¯ãã®ã¾ã¾æµããã


	    if (position + Zlib.RawDeflate.Lz77MinLength >= length) {
	      if (prevMatch) {
	        writeMatch(prevMatch, -1);
	      }

	      for (i = 0, il = length - position; i < il; ++i) {
	        tmp = dataArray[position + i];
	        lz77buf[pos++] = tmp;
	        ++freqsLitLen[tmp];
	      }

	      break;
	    } // ãããåè£ããæé·ã®ãã®ãæ¢ã


	    if (matchList.length > 0) {
	      longestMatch = this.searchLongestMatch_(dataArray, position, matchList);

	      if (prevMatch) {
	        // ç¾å¨ã®ãããã®æ¹ãååã®ããããããé·ã
	        if (prevMatch.length < longestMatch.length) {
	          // write previous literal
	          tmp = dataArray[position - 1];
	          lz77buf[pos++] = tmp;
	          ++freqsLitLen[tmp]; // write current match

	          writeMatch(longestMatch, 0);
	        } else {
	          // write previous match
	          writeMatch(prevMatch, -1);
	        }
	      } else if (longestMatch.length < lazy) {
	        prevMatch = longestMatch;
	      } else {
	        writeMatch(longestMatch, 0);
	      } // ååããããã¦ãã¦ä»åãããããªãã£ããååã®ãæ¡ç¨

	    } else if (prevMatch) {
	      writeMatch(prevMatch, -1);
	    } else {
	      tmp = dataArray[position];
	      lz77buf[pos++] = tmp;
	      ++freqsLitLen[tmp];
	    }

	    matchList.push(position); // ããããã¼ãã«ã«ç¾å¨ã®ä½ç½®ãä¿å­
	  } // çµç«¯å¦ç


	  lz77buf[pos++] = 256;
	  freqsLitLen[256]++;
	  this.freqsLitLen = freqsLitLen;
	  this.freqsDist = freqsDist;
	  return (
	    /** @type {!(Uint16Array|Array.<number>)} */
	    lz77buf.subarray(0, pos)
	  );
	};
	/**
	 * ãããããåè£ã®ä¸­ããæé·ä¸è´ãæ¢ã
	 * @param {!Object} data plain data byte array.
	 * @param {!number} position plain data byte array position.
	 * @param {!Array.<number>} matchList åè£ã¨ãªãä½ç½®ã®éå.
	 * @return {!Zlib.RawDeflate.Lz77Match} æé·ãã¤æç­è·é¢ã®ããããªãã¸ã§ã¯ã.
	 * @private
	 */


	Zlib.RawDeflate.prototype.searchLongestMatch_ = function (data, position, matchList) {
	  var match,
	      currentMatch,
	      matchMax = 0,
	      matchLength,
	      i,
	      j,
	      l,
	      dl = data.length; // åè£ãå¾ããã 1 ã¤ãã¤çµãè¾¼ãã§ãã

	  permatch: for (i = 0, l = matchList.length; i < l; i++) {
	    match = matchList[l - i - 1];
	    matchLength = Zlib.RawDeflate.Lz77MinLength; // ååã¾ã§ã®æé·ä¸è´ãæ«å°¾ããä¸è´æ¤ç´¢ãã

	    if (matchMax > Zlib.RawDeflate.Lz77MinLength) {
	      for (j = matchMax; j > Zlib.RawDeflate.Lz77MinLength; j--) {
	        if (data[match + j - 1] !== data[position + j - 1]) {
	          continue permatch;
	        }
	      }

	      matchLength = matchMax;
	    } // æé·ä¸è´æ¢ç´¢


	    while (matchLength < Zlib.RawDeflate.Lz77MaxLength && position + matchLength < dl && data[match + matchLength] === data[position + matchLength]) {
	      ++matchLength;
	    } // ãããé·ãåãå ´åã¯å¾æ¹ãåªå


	    if (matchLength > matchMax) {
	      currentMatch = match;
	      matchMax = matchLength;
	    } // æé·ãç¢ºå®ãããå¾ã®å¦çã¯çç¥


	    if (matchLength === Zlib.RawDeflate.Lz77MaxLength) {
	      break;
	    }
	  }

	  return new Zlib.RawDeflate.Lz77Match(matchMax, position - currentMatch);
	};
	/**
	 * Tree-Transmit Symbols ã®ç®åº
	 * reference: PuTTY Deflate implementation
	 * @param {number} hlit HLIT.
	 * @param {!(Array.<number>|Uint8Array)} litlenLengths ãªãã©ã«ã¨é·ãç¬¦å·ã®ç¬¦å·é·éå.
	 * @param {number} hdist HDIST.
	 * @param {!(Array.<number>|Uint8Array)} distLengths è·é¢ç¬¦å·ã®ç¬¦å·é·éå.
	 * @return {{
	 *   codes: !(Array.<number>|Uint32Array),
	 *   freqs: !(Array.<number>|Uint8Array)
	 * }} Tree-Transmit Symbols.
	 */


	Zlib.RawDeflate.prototype.getTreeSymbols_ = function (hlit, litlenLengths, hdist, distLengths) {
	  var src = new Uint32Array(hlit + hdist),
	      i,
	      j,
	      runLength,
	      l,
	      result = new Uint32Array(286 + 30),
	      nResult,
	      rpt,
	      freqs = new Uint8Array(19);
	  j = 0;

	  for (i = 0; i < hlit; i++) {
	    src[j++] = litlenLengths[i];
	  }

	  for (i = 0; i < hdist; i++) {
	    src[j++] = distLengths[i];
	  } // ç¬¦å·å


	  nResult = 0;

	  for (i = 0, l = src.length; i < l; i += j) {
	    // Run Length Encoding
	    for (j = 1; i + j < l && src[i + j] === src[i]; ++j) {}

	    runLength = j;

	    if (src[i] === 0) {
	      // 0 ã®ç¹°ãè¿ãã 3 åæªæºãªãã°ãã®ã¾ã¾
	      if (runLength < 3) {
	        while (runLength-- > 0) {
	          result[nResult++] = 0;
	          freqs[0]++;
	        }
	      } else {
	        while (runLength > 0) {
	          // ç¹°ãè¿ãã¯æå¤§ 138 ã¾ã§ãªã®ã§åãè©°ãã
	          rpt = runLength < 138 ? runLength : 138;

	          if (rpt > runLength - 3 && rpt < runLength) {
	            rpt = runLength - 3;
	          } // 3-10 å -> 17


	          if (rpt <= 10) {
	            result[nResult++] = 17;
	            result[nResult++] = rpt - 3;
	            freqs[17]++; // 11-138 å -> 18
	          } else {
	            result[nResult++] = 18;
	            result[nResult++] = rpt - 11;
	            freqs[18]++;
	          }

	          runLength -= rpt;
	        }
	      }
	    } else {
	      result[nResult++] = src[i];
	      freqs[src[i]]++;
	      runLength--; // ç¹°ãè¿ãåæ°ã3åæªæºãªãã°ã©ã³ã¬ã³ã°ã¹ç¬¦å·ã¯è¦ããªã

	      if (runLength < 3) {
	        while (runLength-- > 0) {
	          result[nResult++] = src[i];
	          freqs[src[i]]++;
	        } // 3 åä»¥ä¸ãªãã°ã©ã³ã¬ã³ã°ã¹ç¬¦å·å

	      } else {
	        while (runLength > 0) {
	          // runLengthã 3-6 ã§åå²
	          rpt = runLength < 6 ? runLength : 6;

	          if (rpt > runLength - 3 && rpt < runLength) {
	            rpt = runLength - 3;
	          }

	          result[nResult++] = 16;
	          result[nResult++] = rpt - 3;
	          freqs[16]++;
	          runLength -= rpt;
	        }
	      }
	    }
	  }

	  return {
	    codes: result.subarray(0, nResult),
	    freqs: freqs
	  };
	};
	/**
	 * ãããã³ç¬¦å·ã®é·ããåå¾ãã
	 * @param {!(Array.<number>|Uint8Array|Uint32Array)} freqs åºç¾ã«ã¦ã³ã.
	 * @param {number} limit ç¬¦å·é·ã®å¶é.
	 * @return {!(Array.<number>|Uint8Array)} ç¬¦å·é·éå.
	 * @private
	 */


	Zlib.RawDeflate.prototype.getLengths_ = function (freqs, limit) {
	  /** @type {number} */
	  var nSymbols = freqs.length;
	  /** @type {Zlib.Heap} */

	  var heap = new Zlib.Heap(2 * Zlib.RawDeflate.HUFMAX);
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var length = new Uint8Array(nSymbols);
	  /** @type {Array} */

	  var nodes;
	  /** @type {!(Array.<number>|Uint32Array)} */

	  var values;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var codeLength;
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il; // ãã¼ãã®æ§ç¯

	  for (i = 0; i < nSymbols; ++i) {
	    if (freqs[i] > 0) {
	      heap.push(i, freqs[i]);
	    }
	  }

	  nodes = new Array(heap.length / 2);
	  values = new Uint32Array(heap.length / 2); // é 0 ã®è¦ç´ ãä¸ã¤ã ãã ã£ãå ´åã¯ããã®ã·ã³ãã«ã«ç¬¦å·é· 1 ãå²ãå½ã¦ã¦çµäº

	  if (nodes.length === 1) {
	    length[heap.pop().index] = 1;
	    return length;
	  } // Reverse Package Merge Algorithm ã«ãã Canonical Huffman Code ã®ç¬¦å·é·æ±ºå®


	  for (i = 0, il = heap.length / 2; i < il; ++i) {
	    nodes[i] = heap.pop();
	    values[i] = nodes[i].value;
	  }

	  codeLength = this.reversePackageMerge_(values, values.length, limit);

	  for (i = 0, il = nodes.length; i < il; ++i) {
	    length[nodes[i].index] = codeLength[i];
	  }

	  return length;
	};
	/**
	 * Reverse Package Merge Algorithm.
	 * @param {!(Array.<number>|Uint32Array)} freqs sorted probability.
	 * @param {number} symbols number of symbols.
	 * @param {number} limit code length limit.
	 * @return {!(Array.<number>|Uint8Array)} code lengths.
	 */


	Zlib.RawDeflate.prototype.reversePackageMerge_ = function (freqs, symbols, limit) {
	  /** @type {!(Array.<number>|Uint16Array)} */
	  var minimumCost = new Uint16Array(limit);
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var flag = new Uint8Array(limit);
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var codeLength = new Uint8Array(symbols);
	  /** @type {Array} */

	  var value = new Array(limit);
	  /** @type {Array} */

	  var type = new Array(limit);
	  /** @type {Array.<number>} */

	  var currentPosition = new Array(limit);
	  /** @type {number} */

	  var excess = (1 << limit) - symbols;
	  /** @type {number} */

	  var half = 1 << limit - 1;
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var j;
	  /** @type {number} */

	  var t;
	  /** @type {number} */

	  var weight;
	  /** @type {number} */

	  var next;
	  /**
	   * @param {number} j
	   */

	  function takePackage(j) {
	    /** @type {number} */
	    var x = type[j][currentPosition[j]];

	    if (x === symbols) {
	      takePackage(j + 1);
	      takePackage(j + 1);
	    } else {
	      --codeLength[x];
	    }

	    ++currentPosition[j];
	  }

	  minimumCost[limit - 1] = symbols;

	  for (j = 0; j < limit; ++j) {
	    if (excess < half) {
	      flag[j] = 0;
	    } else {
	      flag[j] = 1;
	      excess -= half;
	    }

	    excess <<= 1;
	    minimumCost[limit - 2 - j] = (minimumCost[limit - 1 - j] / 2 | 0) + symbols;
	  }

	  minimumCost[0] = flag[0];
	  value[0] = new Array(minimumCost[0]);
	  type[0] = new Array(minimumCost[0]);

	  for (j = 1; j < limit; ++j) {
	    if (minimumCost[j] > 2 * minimumCost[j - 1] + flag[j]) {
	      minimumCost[j] = 2 * minimumCost[j - 1] + flag[j];
	    }

	    value[j] = new Array(minimumCost[j]);
	    type[j] = new Array(minimumCost[j]);
	  }

	  for (i = 0; i < symbols; ++i) {
	    codeLength[i] = limit;
	  }

	  for (t = 0; t < minimumCost[limit - 1]; ++t) {
	    value[limit - 1][t] = freqs[t];
	    type[limit - 1][t] = t;
	  }

	  for (i = 0; i < limit; ++i) {
	    currentPosition[i] = 0;
	  }

	  if (flag[limit - 1] === 1) {
	    --codeLength[0];
	    ++currentPosition[limit - 1];
	  }

	  for (j = limit - 2; j >= 0; --j) {
	    i = 0;
	    weight = 0;
	    next = currentPosition[j + 1];

	    for (t = 0; t < minimumCost[j]; t++) {
	      weight = value[j + 1][next] + value[j + 1][next + 1];

	      if (weight > freqs[i]) {
	        value[j][t] = weight;
	        type[j][t] = symbols;
	        next += 2;
	      } else {
	        value[j][t] = freqs[i];
	        type[j][t] = i;
	        ++i;
	      }
	    }

	    currentPosition[j] = 0;

	    if (flag[j] === 1) {
	      takePackage(j);
	    }
	  }

	  return codeLength;
	};
	/**
	 * ç¬¦å·é·éåãããããã³ç¬¦å·ãåå¾ãã
	 * reference: PuTTY Deflate implementation
	 * @param {!(Array.<number>|Uint8Array)} lengths ç¬¦å·é·éå.
	 * @return {!(Array.<number>|Uint16Array)} ãããã³ç¬¦å·éå.
	 * @private
	 */


	Zlib.RawDeflate.prototype.getCodesFromLengths_ = function (lengths) {
	  var codes = new Uint16Array(lengths.length),
	      count = [],
	      startCode = [],
	      code = 0,
	      i,
	      il,
	      j,
	      m; // Count the codes of each length.

	  for (i = 0, il = lengths.length; i < il; i++) {
	    count[lengths[i]] = (count[lengths[i]] | 0) + 1;
	  } // Determine the starting code for each length block.


	  for (i = 1, il = Zlib.RawDeflate.MaxCodeLength; i <= il; i++) {
	    startCode[i] = code;
	    code += count[i] | 0;
	    code <<= 1;
	  } // Determine the code for each symbol. Mirrored, of course.


	  for (i = 0, il = lengths.length; i < il; i++) {
	    code = startCode[lengths[i]];
	    startCode[lengths[i]] += 1;
	    codes[i] = 0;

	    for (j = 0, m = lengths[i]; j < m; j++) {
	      codes[i] = codes[i] << 1 | code & 1;
	      code >>>= 1;
	    }
	  }

	  return codes;
	};
	/**
	 * @param {!(Array.<number>|Uint8Array)} input input buffer.
	 * @param {Object=} opt_params options.
	 * @constructor
	 */


	Zlib.Unzip = function (input, opt_params) {
	  opt_params = opt_params || {};
	  /** @type {!(Array.<number>|Uint8Array)} */

	  this.input = input instanceof Array ? new Uint8Array(input) : input;
	  /** @type {number} */

	  this.ip = 0;
	  /** @type {number} */

	  this.eocdrOffset;
	  /** @type {number} */

	  this.numberOfThisDisk;
	  /** @type {number} */

	  this.startDisk;
	  /** @type {number} */

	  this.totalEntriesThisDisk;
	  /** @type {number} */

	  this.totalEntries;
	  /** @type {number} */

	  this.centralDirectorySize;
	  /** @type {number} */

	  this.centralDirectoryOffset;
	  /** @type {number} */

	  this.commentLength;
	  /** @type {(Array.<number>|Uint8Array)} */

	  this.comment;
	  /** @type {Array.<Zlib.Unzip.FileHeader>} */

	  this.fileHeaderList;
	  /** @type {Object.<string, number>} */

	  this.filenameToIndex;
	  /** @type {boolean} */

	  this.verify = opt_params['verify'] || false;
	  /** @type {(Array.<number>|Uint8Array)} */

	  this.password = opt_params['password'];
	};

	Zlib.Unzip.CompressionMethod = Zlib.Zip.CompressionMethod;
	/**
	 * @type {Array.<number>}
	 * @const
	 */

	Zlib.Unzip.FileHeaderSignature = Zlib.Zip.FileHeaderSignature;
	/**
	 * @type {Array.<number>}
	 * @const
	 */

	Zlib.Unzip.LocalFileHeaderSignature = Zlib.Zip.LocalFileHeaderSignature;
	/**
	 * @type {Array.<number>}
	 * @const
	 */

	Zlib.Unzip.CentralDirectorySignature = Zlib.Zip.CentralDirectorySignature;
	/**
	 * @param {!(Array.<number>|Uint8Array)} input input buffer.
	 * @param {number} ip input position.
	 * @constructor
	 */

	Zlib.Unzip.FileHeader = function (input, ip) {
	  /** @type {!(Array.<number>|Uint8Array)} */
	  this.input = input;
	  /** @type {number} */

	  this.offset = ip;
	  /** @type {number} */

	  this.length;
	  /** @type {number} */

	  this.version;
	  /** @type {number} */

	  this.os;
	  /** @type {number} */

	  this.needVersion;
	  /** @type {number} */

	  this.flags;
	  /** @type {number} */

	  this.compression;
	  /** @type {number} */

	  this.time;
	  /** @type {number} */

	  this.date;
	  /** @type {number} */

	  this.crc32;
	  /** @type {number} */

	  this.compressedSize;
	  /** @type {number} */

	  this.plainSize;
	  /** @type {number} */

	  this.fileNameLength;
	  /** @type {number} */

	  this.extraFieldLength;
	  /** @type {number} */

	  this.fileCommentLength;
	  /** @type {number} */

	  this.diskNumberStart;
	  /** @type {number} */

	  this.internalFileAttributes;
	  /** @type {number} */

	  this.externalFileAttributes;
	  /** @type {number} */

	  this.relativeOffset;
	  /** @type {string} */

	  this.filename;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  this.extraField;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  this.comment;
	};

	Zlib.Unzip.FileHeader.prototype.parse = function () {
	  /** @type {!(Array.<number>|Uint8Array)} */
	  var input = this.input;
	  /** @type {number} */

	  var ip = this.offset; // central file header signature

	  if (input[ip++] !== Zlib.Unzip.FileHeaderSignature[0] || input[ip++] !== Zlib.Unzip.FileHeaderSignature[1] || input[ip++] !== Zlib.Unzip.FileHeaderSignature[2] || input[ip++] !== Zlib.Unzip.FileHeaderSignature[3]) {
	    throw new Error('invalid file header signature');
	  } // version made by


	  this.version = input[ip++];
	  this.os = input[ip++]; // version needed to extract

	  this.needVersion = input[ip++] | input[ip++] << 8; // general purpose bit flag

	  this.flags = input[ip++] | input[ip++] << 8; // compression method

	  this.compression = input[ip++] | input[ip++] << 8; // last mod file time

	  this.time = input[ip++] | input[ip++] << 8; //last mod file date

	  this.date = input[ip++] | input[ip++] << 8; // crc-32

	  this.crc32 = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // compressed size

	  this.compressedSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // uncompressed size

	  this.plainSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // file name length

	  this.fileNameLength = input[ip++] | input[ip++] << 8; // extra field length

	  this.extraFieldLength = input[ip++] | input[ip++] << 8; // file comment length

	  this.fileCommentLength = input[ip++] | input[ip++] << 8; // disk number start

	  this.diskNumberStart = input[ip++] | input[ip++] << 8; // internal file attributes

	  this.internalFileAttributes = input[ip++] | input[ip++] << 8; // external file attributes

	  this.externalFileAttributes = input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24; // relative offset of local header

	  this.relativeOffset = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // file name

	  this.filename = String.fromCharCode.apply(null, input.subarray(ip, ip += this.fileNameLength)); // extra field

	  this.extraField = input.subarray(ip, ip += this.extraFieldLength); // file comment

	  this.comment = input.subarray(ip, ip + this.fileCommentLength);
	  this.length = ip - this.offset;
	};
	/**
	 * @param {!(Array.<number>|Uint8Array)} input input buffer.
	 * @param {number} ip input position.
	 * @constructor
	 */


	Zlib.Unzip.LocalFileHeader = function (input, ip) {
	  /** @type {!(Array.<number>|Uint8Array)} */
	  this.input = input;
	  /** @type {number} */

	  this.offset = ip;
	  /** @type {number} */

	  this.length;
	  /** @type {number} */

	  this.needVersion;
	  /** @type {number} */

	  this.flags;
	  /** @type {number} */

	  this.compression;
	  /** @type {number} */

	  this.time;
	  /** @type {number} */

	  this.date;
	  /** @type {number} */

	  this.crc32;
	  /** @type {number} */

	  this.compressedSize;
	  /** @type {number} */

	  this.plainSize;
	  /** @type {number} */

	  this.fileNameLength;
	  /** @type {number} */

	  this.extraFieldLength;
	  /** @type {string} */

	  this.filename;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  this.extraField;
	};

	Zlib.Unzip.LocalFileHeader.Flags = Zlib.Zip.Flags;

	Zlib.Unzip.LocalFileHeader.prototype.parse = function () {
	  /** @type {!(Array.<number>|Uint8Array)} */
	  var input = this.input;
	  /** @type {number} */

	  var ip = this.offset; // local file header signature

	  if (input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[0] || input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[1] || input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[2] || input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[3]) {
	    throw new Error('invalid local file header signature');
	  } // version needed to extract


	  this.needVersion = input[ip++] | input[ip++] << 8; // general purpose bit flag

	  this.flags = input[ip++] | input[ip++] << 8; // compression method

	  this.compression = input[ip++] | input[ip++] << 8; // last mod file time

	  this.time = input[ip++] | input[ip++] << 8; //last mod file date

	  this.date = input[ip++] | input[ip++] << 8; // crc-32

	  this.crc32 = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // compressed size

	  this.compressedSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // uncompressed size

	  this.plainSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // file name length

	  this.fileNameLength = input[ip++] | input[ip++] << 8; // extra field length

	  this.extraFieldLength = input[ip++] | input[ip++] << 8; // file name

	  this.filename = String.fromCharCode.apply(null, input.subarray(ip, ip += this.fileNameLength)); // extra field

	  this.extraField = input.subarray(ip, ip += this.extraFieldLength);
	  this.length = ip - this.offset;
	};

	Zlib.Unzip.prototype.searchEndOfCentralDirectoryRecord = function () {
	  /** @type {!(Array.<number>|Uint8Array)} */
	  var input = this.input;
	  /** @type {number} */

	  var ip;

	  for (ip = input.length - 12; ip > 0; --ip) {
	    if (input[ip] === Zlib.Unzip.CentralDirectorySignature[0] && input[ip + 1] === Zlib.Unzip.CentralDirectorySignature[1] && input[ip + 2] === Zlib.Unzip.CentralDirectorySignature[2] && input[ip + 3] === Zlib.Unzip.CentralDirectorySignature[3]) {
	      this.eocdrOffset = ip;
	      return;
	    }
	  }

	  throw new Error('End of Central Directory Record not found');
	};

	Zlib.Unzip.prototype.parseEndOfCentralDirectoryRecord = function () {
	  /** @type {!(Array.<number>|Uint8Array)} */
	  var input = this.input;
	  /** @type {number} */

	  var ip;

	  if (!this.eocdrOffset) {
	    this.searchEndOfCentralDirectoryRecord();
	  }

	  ip = this.eocdrOffset; // signature

	  if (input[ip++] !== Zlib.Unzip.CentralDirectorySignature[0] || input[ip++] !== Zlib.Unzip.CentralDirectorySignature[1] || input[ip++] !== Zlib.Unzip.CentralDirectorySignature[2] || input[ip++] !== Zlib.Unzip.CentralDirectorySignature[3]) {
	    throw new Error('invalid signature');
	  } // number of this disk


	  this.numberOfThisDisk = input[ip++] | input[ip++] << 8; // number of the disk with the start of the central directory

	  this.startDisk = input[ip++] | input[ip++] << 8; // total number of entries in the central directory on this disk

	  this.totalEntriesThisDisk = input[ip++] | input[ip++] << 8; // total number of entries in the central directory

	  this.totalEntries = input[ip++] | input[ip++] << 8; // size of the central directory

	  this.centralDirectorySize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // offset of start of central directory with respect to the starting disk number

	  this.centralDirectoryOffset = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // .ZIP file comment length

	  this.commentLength = input[ip++] | input[ip++] << 8; // .ZIP file comment

	  this.comment = input.subarray(ip, ip + this.commentLength);
	};

	Zlib.Unzip.prototype.parseFileHeader = function () {
	  /** @type {Array.<Zlib.Unzip.FileHeader>} */
	  var filelist = [];
	  /** @type {Object.<string, number>} */

	  var filetable = {};
	  /** @type {number} */

	  var ip;
	  /** @type {Zlib.Unzip.FileHeader} */

	  var fileHeader;
	  /*: @type {number} */

	  var i;
	  /*: @type {number} */

	  var il;

	  if (this.fileHeaderList) {
	    return;
	  }

	  if (this.centralDirectoryOffset === void 0) {
	    this.parseEndOfCentralDirectoryRecord();
	  }

	  ip = this.centralDirectoryOffset;

	  for (i = 0, il = this.totalEntries; i < il; ++i) {
	    fileHeader = new Zlib.Unzip.FileHeader(this.input, ip);
	    fileHeader.parse();
	    ip += fileHeader.length;
	    filelist[i] = fileHeader;
	    filetable[fileHeader.filename] = i;
	  }

	  if (this.centralDirectorySize < ip - this.centralDirectoryOffset) {
	    throw new Error('invalid file header size');
	  }

	  this.fileHeaderList = filelist;
	  this.filenameToIndex = filetable;
	};
	/**
	 * @param {number} index file header index.
	 * @param {Object=} opt_params
	 * @return {!(Array.<number>|Uint8Array)} file data.
	 */


	Zlib.Unzip.prototype.getFileData = function (index, opt_params) {
	  opt_params = opt_params || {};
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var input = this.input;
	  /** @type {Array.<Zlib.Unzip.FileHeader>} */

	  var fileHeaderList = this.fileHeaderList;
	  /** @type {Zlib.Unzip.LocalFileHeader} */

	  var localFileHeader;
	  /** @type {number} */

	  var offset;
	  /** @type {number} */

	  var length;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var buffer;
	  /** @type {number} */

	  var crc32;
	  /** @type {Array.<number>|Uint32Array|Object} */

	  var key;
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il;

	  if (!fileHeaderList) {
	    this.parseFileHeader();
	  }

	  if (fileHeaderList[index] === void 0) {
	    throw new Error('wrong index');
	  }

	  offset = fileHeaderList[index].relativeOffset;
	  localFileHeader = new Zlib.Unzip.LocalFileHeader(this.input, offset);
	  localFileHeader.parse();
	  offset += localFileHeader.length;
	  length = localFileHeader.compressedSize; // decryption

	  if ((localFileHeader.flags & Zlib.Unzip.LocalFileHeader.Flags.ENCRYPT) !== 0) {
	    if (!(opt_params['password'] || this.password)) {
	      throw new Error('please set password');
	    }

	    key = this.createDecryptionKey(opt_params['password'] || this.password); // encryption header

	    for (i = offset, il = offset + 12; i < il; ++i) {
	      this.decode(key, input[i]);
	    }

	    offset += 12;
	    length -= 12; // decryption

	    for (i = offset, il = offset + length; i < il; ++i) {
	      input[i] = this.decode(key, input[i]);
	    }
	  }

	  switch (localFileHeader.compression) {
	    case Zlib.Unzip.CompressionMethod.STORE:
	      buffer = this.input.subarray(offset, offset + length);
	      break;

	    case Zlib.Unzip.CompressionMethod.DEFLATE:
	      buffer = new Zlib.RawInflate(this.input, {
	        'index': offset,
	        'bufferSize': localFileHeader.plainSize
	      }).decompress();
	      break;

	    default:
	      throw new Error('unknown compression type');
	  }

	  if (this.verify) {
	    crc32 = Zlib.CRC32.calc(buffer);

	    if (localFileHeader.crc32 !== crc32) {
	      throw new Error('wrong crc: file=0x' + localFileHeader.crc32.toString(16) + ', data=0x' + crc32.toString(16));
	    }
	  }

	  return buffer;
	};
	/**
	 * @return {Array.<string>}
	 */


	Zlib.Unzip.prototype.getFilenames = function () {
	  /** @type {Array.<string>} */
	  var filenameList = [];
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il;
	  /** @type {Array.<Zlib.Unzip.FileHeader>} */

	  var fileHeaderList;

	  if (!this.fileHeaderList) {
	    this.parseFileHeader();
	  }

	  fileHeaderList = this.fileHeaderList;

	  for (i = 0, il = fileHeaderList.length; i < il; ++i) {
	    filenameList[i] = fileHeaderList[i].filename;
	  }

	  return filenameList;
	};
	/**
	 * @param {string} filename extract filename.
	 * @param {Object=} opt_params
	 * @return {!(Array.<number>|Uint8Array)} decompressed data.
	 */


	Zlib.Unzip.prototype.decompress = function (filename, opt_params) {
	  /** @type {number} */
	  var index;

	  if (!this.filenameToIndex) {
	    this.parseFileHeader();
	  }

	  index = this.filenameToIndex[filename];

	  if (index === void 0) {
	    throw new Error(filename + ' not found');
	  }

	  return this.getFileData(index, opt_params);
	};
	/**
	 * @param {(Array.<number>|Uint8Array)} password
	 */


	Zlib.Unzip.prototype.setPassword = function (password) {
	  this.password = password;
	};
	/**
	 * @param {(Array.<number>|Uint32Array|Object)} key
	 * @param {number} n
	 * @return {number}
	 */


	Zlib.Unzip.prototype.decode = function (key, n) {
	  n ^= this.getByte(
	  /** @type {(Array.<number>|Uint32Array)} */
	  key);
	  this.updateKeys(
	  /** @type {(Array.<number>|Uint32Array)} */
	  key, n);
	  return n;
	}; // common method


	Zlib.Unzip.prototype.updateKeys = Zlib.Zip.prototype.updateKeys;
	Zlib.Unzip.prototype.createDecryptionKey = Zlib.Zip.prototype.createEncryptionKey;
	Zlib.Unzip.prototype.getByte = Zlib.Zip.prototype.getByte;
	/**
	 * @fileoverview éå¤ãªé¢æ°ç¾¤ãã¾ã¨ããã¢ã¸ã¥ã¼ã«å®è£.
	 */

	/**
	 * Byte String ãã Byte Array ã«å¤æ.
	 * @param {!string} str byte string.
	 * @return {!Array.<number>} byte array.
	 */

	Zlib.Util.stringToByteArray = function (str) {
	  /** @type {!Array.<(string|number)>} */
	  var tmp = str.split('');
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il;

	  for (i = 0, il = tmp.length; i < il; i++) {
	    tmp[i] = (tmp[i].charCodeAt(0) & 0xff) >>> 0;
	  }

	  return tmp;
	};
	/**
	 * @fileoverview Adler32 checksum å®è£.
	 */

	/**
	 * Adler32 ããã·ã¥å¤ã®ä½æ
	 * @param {!(Array|Uint8Array|string)} array ç®åºã«ä½¿ç¨ãã byte array.
	 * @return {number} Adler32 ããã·ã¥å¤.
	 */


	Zlib.Adler32 = function (array) {
	  if (typeof array === 'string') {
	    array = Zlib.Util.stringToByteArray(array);
	  }

	  return Zlib.Adler32.update(1, array);
	};
	/**
	 * Adler32 ããã·ã¥å¤ã®æ´æ°
	 * @param {number} adler ç¾å¨ã®ããã·ã¥å¤.
	 * @param {!(Array|Uint8Array)} array æ´æ°ã«ä½¿ç¨ãã byte array.
	 * @return {number} Adler32 ããã·ã¥å¤.
	 */


	Zlib.Adler32.update = function (adler, array) {
	  /** @type {number} */
	  var s1 = adler & 0xffff;
	  /** @type {number} */

	  var s2 = adler >>> 16 & 0xffff;
	  /** @type {number} array length */

	  var len = array.length;
	  /** @type {number} loop length (don't overflow) */

	  var tlen;
	  /** @type {number} array index */

	  var i = 0;

	  while (len > 0) {
	    tlen = len > Zlib.Adler32.OptimizationParameter ? Zlib.Adler32.OptimizationParameter : len;
	    len -= tlen;

	    do {
	      s1 += array[i++];
	      s2 += s1;
	    } while (--tlen);

	    s1 %= 65521;
	    s2 %= 65521;
	  }

	  return (s2 << 16 | s1) >>> 0;
	};
	/**
	 * Adler32 æé©åãã©ã¡ã¼ã¿
	 * ç¾ç¶ã§ã¯ 1024 ç¨åº¦ãæé©.
	 * @see http://jsperf.com/adler-32-simple-vs-optimized/3
	 * @define {number}
	 */


	Zlib.Adler32.OptimizationParameter = 1024;
	/**
	 * ãããã¹ããªã¼ã 
	 * @constructor
	 * @param {!(Array|Uint8Array)=} buffer output buffer.
	 * @param {number=} bufferPosition start buffer pointer.
	 */

	Zlib.BitStream = function (buffer, bufferPosition) {
	  /** @type {number} buffer index. */
	  this.index = typeof bufferPosition === 'number' ? bufferPosition : 0;
	  /** @type {number} bit index. */

	  this.bitindex = 0;
	  /** @type {!(Array|Uint8Array)} bit-stream output buffer. */

	  this.buffer = buffer instanceof Uint8Array ? buffer : new Uint8Array(Zlib.BitStream.DefaultBlockSize); // å¥åããã index ãè¶³ããªãã£ããæ¡å¼µããããåã«ãã¦ããã¡ãªãä¸æ­£ã¨ãã

	  if (this.buffer.length * 2 <= this.index) {
	    throw new Error("invalid index");
	  } else if (this.buffer.length <= this.index) {
	    this.expandBuffer();
	  }
	};
	/**
	 * ããã©ã«ããã­ãã¯ãµã¤ãº.
	 * @const
	 * @type {number}
	 */


	Zlib.BitStream.DefaultBlockSize = 0x8000;
	/**
	 * expand buffer.
	 * @return {!(Array|Uint8Array)} new buffer.
	 */

	Zlib.BitStream.prototype.expandBuffer = function () {
	  /** @type {!(Array|Uint8Array)} old buffer. */
	  var oldbuf = this.buffer;
	  /** @type {number} loop limiter. */

	  var il = oldbuf.length;
	  /** @type {!(Array|Uint8Array)} new buffer. */

	  var buffer = new Uint8Array(il << 1); // copy buffer

	  {
	    buffer.set(oldbuf);
	  }
	  return this.buffer = buffer;
	};
	/**
	 * æ°å¤ããããã§æå®ããæ°ã ãæ¸ãè¾¼ã.
	 * @param {number} number æ¸ãè¾¼ãæ°å¤.
	 * @param {number} n æ¸ãè¾¼ããããæ°.
	 * @param {boolean=} reverse éé ã«æ¸ãè¾¼ããªãã° true.
	 */


	Zlib.BitStream.prototype.writeBits = function (number, n, reverse) {
	  var buffer = this.buffer;
	  var index = this.index;
	  var bitindex = this.bitindex;
	  /** @type {number} current octet. */

	  var current = buffer[index];
	  /** @type {number} loop counter. */

	  var i;
	  /**
	   * 32-bit æ´æ°ã®ãããé ãéã«ãã
	   * @param {number} n 32-bit integer.
	   * @return {number} reversed 32-bit integer.
	   * @private
	   */

	  function rev32_(n) {
	    return Zlib.BitStream.ReverseTable[n & 0xFF] << 24 | Zlib.BitStream.ReverseTable[n >>> 8 & 0xFF] << 16 | Zlib.BitStream.ReverseTable[n >>> 16 & 0xFF] << 8 | Zlib.BitStream.ReverseTable[n >>> 24 & 0xFF];
	  }

	  if (reverse && n > 1) {
	    number = n > 8 ? rev32_(number) >> 32 - n : Zlib.BitStream.ReverseTable[number] >> 8 - n;
	  } // Byte å¢çãè¶ããªãã¨ã


	  if (n + bitindex < 8) {
	    current = current << n | number;
	    bitindex += n; // Byte å¢çãè¶ããã¨ã
	  } else {
	    for (i = 0; i < n; ++i) {
	      current = current << 1 | number >> n - i - 1 & 1; // next byte

	      if (++bitindex === 8) {
	        bitindex = 0;
	        buffer[index++] = Zlib.BitStream.ReverseTable[current];
	        current = 0; // expand

	        if (index === buffer.length) {
	          buffer = this.expandBuffer();
	        }
	      }
	    }
	  }

	  buffer[index] = current;
	  this.buffer = buffer;
	  this.bitindex = bitindex;
	  this.index = index;
	};
	/**
	 * ã¹ããªã¼ã ã®çµç«¯å¦çãè¡ã
	 * @return {!(Array|Uint8Array)} çµç«¯å¦çå¾ã®ãããã¡ã byte array ã§è¿ã.
	 */


	Zlib.BitStream.prototype.finish = function () {
	  var buffer = this.buffer;
	  var index = this.index;
	  /** @type {!(Array|Uint8Array)} output buffer. */

	  var output; // bitindex ã 0 ã®æã¯ä½åã« index ãé²ãã§ããç¶æ

	  if (this.bitindex > 0) {
	    buffer[index] <<= 8 - this.bitindex;
	    buffer[index] = Zlib.BitStream.ReverseTable[buffer[index]];
	    index++;
	  } // array truncation


	  {
	    output = buffer.subarray(0, index);
	  }
	  return output;
	};
	/**
	 * 0-255 ã®ãããé ãåè»¢ãããã¼ãã«
	 * @const
	 * @type {!(Uint8Array|Array.<number>)}
	 */


	Zlib.BitStream.ReverseTable = function (table) {
	  return table;
	}(function () {
	  /** @type {!(Array|Uint8Array)} reverse table. */
	  var table = new Uint8Array(256);
	  /** @type {number} loop counter. */

	  var i; // generate

	  for (i = 0; i < 256; ++i) {
	    table[i] = function (n) {
	      var r = n;
	      var s = 7;

	      for (n >>>= 1; n; n >>>= 1) {
	        r <<= 1;
	        r |= n & 1;
	        --s;
	      }

	      return (r << s & 0xff) >>> 0;
	    }(i);
	  }

	  return table;
	}());
	/**
	 * CRC32 ããã·ã¥å¤ãåå¾
	 * @param {!(Array.<number>|Uint8Array)} data data byte array.
	 * @param {number=} pos data position.
	 * @param {number=} length data length.
	 * @return {number} CRC32.
	 */


	Zlib.CRC32.calc = function (data, pos, length) {
	  return Zlib.CRC32.update(data, 0, pos, length);
	};
	/**
	 * CRC32ããã·ã¥å¤ãæ´æ°
	 * @param {!(Array.<number>|Uint8Array)} data data byte array.
	 * @param {number} crc CRC32.
	 * @param {number=} pos data position.
	 * @param {number=} length data length.
	 * @return {number} CRC32.
	 */


	Zlib.CRC32.update = function (data, crc, pos, length) {
	  var table = Zlib.CRC32.Table;
	  var i = typeof pos === 'number' ? pos : pos = 0;
	  var il = typeof length === 'number' ? length : data.length;
	  crc ^= 0xffffffff; // loop unrolling for performance

	  for (i = il & 7; i--; ++pos) {
	    crc = crc >>> 8 ^ table[(crc ^ data[pos]) & 0xff];
	  }

	  for (i = il >> 3; i--; pos += 8) {
	    crc = crc >>> 8 ^ table[(crc ^ data[pos]) & 0xff];
	    crc = crc >>> 8 ^ table[(crc ^ data[pos + 1]) & 0xff];
	    crc = crc >>> 8 ^ table[(crc ^ data[pos + 2]) & 0xff];
	    crc = crc >>> 8 ^ table[(crc ^ data[pos + 3]) & 0xff];
	    crc = crc >>> 8 ^ table[(crc ^ data[pos + 4]) & 0xff];
	    crc = crc >>> 8 ^ table[(crc ^ data[pos + 5]) & 0xff];
	    crc = crc >>> 8 ^ table[(crc ^ data[pos + 6]) & 0xff];
	    crc = crc >>> 8 ^ table[(crc ^ data[pos + 7]) & 0xff];
	  }

	  return (crc ^ 0xffffffff) >>> 0;
	};
	/**
	 * @param {number} num
	 * @param {number} crc
	 * @returns {number}
	 */


	Zlib.CRC32.single = function (num, crc) {
	  return (Zlib.CRC32.Table[(num ^ crc) & 0xff] ^ num >>> 8) >>> 0;
	};
	/**
	 * @type {Array.<number>}
	 * @const
	 * @private
	 */


	Zlib.CRC32.Table_ = [0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d];
	/**
	 * @type {!(Array.<number>|Uint32Array)} CRC-32 Table.
	 * @const
	 */

	Zlib.CRC32.Table = new Uint32Array(Zlib.CRC32.Table_);
	/**
	 * @fileoverview Deflate (RFC1951) å®è£.
	 * Deflateã¢ã«ã´ãªãºã æ¬ä½ã¯ Zlib.RawDeflate ã§å®è£ããã¦ãã.
	 */

	/**
	 * Zlib Deflate
	 * @constructor
	 * @param {!(Array|Uint8Array)} input ç¬¦å·åããå¯¾è±¡ã® byte array.
	 * @param {Object=} opt_params option parameters.
	 */

	Zlib.Deflate = function (input, opt_params) {
	  /** @type {!(Array|Uint8Array)} */
	  this.input = input;
	  /** @type {!(Array|Uint8Array)} */

	  this.output = new Uint8Array(Zlib.Deflate.DefaultBufferSize);
	  /** @type {Zlib.Deflate.CompressionType} */

	  this.compressionType = Zlib.Deflate.CompressionType.DYNAMIC;
	  /** @type {Zlib.RawDeflate} */

	  this.rawDeflate;
	  /** @type {Object} */

	  var rawDeflateOption = {};
	  /** @type {string} */

	  var prop; // option parameters

	  if (opt_params || !(opt_params = {})) {
	    if (typeof opt_params['compressionType'] === 'number') {
	      this.compressionType = opt_params['compressionType'];
	    }
	  } // copy options


	  for (prop in opt_params) {
	    rawDeflateOption[prop] = opt_params[prop];
	  } // set raw-deflate output buffer


	  rawDeflateOption['outputBuffer'] = this.output;
	  this.rawDeflate = new Zlib.RawDeflate(this.input, rawDeflateOption);
	};
	/**
	 * @const
	 * @type {number} ããã©ã«ããããã¡ãµã¤ãº.
	 */


	Zlib.Deflate.DefaultBufferSize = 0x8000;
	/**
	 * @enum {number}
	 */

	Zlib.Deflate.CompressionType = Zlib.RawDeflate.CompressionType;
	/**
	 * ç´æ¥å§ç¸®ã«æãã.
	 * @param {!(Array|Uint8Array)} input target buffer.
	 * @param {Object=} opt_params option parameters.
	 * @return {!(Array|Uint8Array)} compressed data byte array.
	 */

	Zlib.Deflate.compress = function (input, opt_params) {
	  return new Zlib.Deflate(input, opt_params).compress();
	};
	/**
	 * Deflate Compression.
	 * @return {!(Array|Uint8Array)} compressed data byte array.
	 */


	Zlib.Deflate.prototype.compress = function () {
	  /** @type {Zlib.CompressionMethod} */
	  var cm;
	  /** @type {number} */

	  var cinfo;
	  /** @type {number} */

	  var cmf;
	  /** @type {number} */

	  var flg;
	  /** @type {number} */

	  var fcheck;
	  /** @type {number} */

	  var fdict;
	  /** @type {number} */

	  var flevel;
	  /** @type {number} */

	  var adler;
	  /** @type {!(Array|Uint8Array)} */

	  var output;
	  /** @type {number} */

	  var pos = 0;
	  output = this.output; // Compression Method and Flags

	  cm = Zlib.CompressionMethod.DEFLATE;

	  switch (cm) {
	    case Zlib.CompressionMethod.DEFLATE:
	      cinfo = Math.LOG2E * Math.log(Zlib.RawDeflate.WindowSize) - 8;
	      break;

	    default:
	      throw new Error('invalid compression method');
	  }

	  cmf = cinfo << 4 | cm;
	  output[pos++] = cmf; // Flags

	  fdict = 0;

	  switch (cm) {
	    case Zlib.CompressionMethod.DEFLATE:
	      switch (this.compressionType) {
	        case Zlib.Deflate.CompressionType.NONE:
	          flevel = 0;
	          break;

	        case Zlib.Deflate.CompressionType.FIXED:
	          flevel = 1;
	          break;

	        case Zlib.Deflate.CompressionType.DYNAMIC:
	          flevel = 2;
	          break;

	        default:
	          throw new Error('unsupported compression type');
	      }

	      break;

	    default:
	      throw new Error('invalid compression method');
	  }

	  flg = flevel << 6 | fdict << 5;
	  fcheck = 31 - (cmf * 256 + flg) % 31;
	  flg |= fcheck;
	  output[pos++] = flg; // Adler-32 checksum

	  adler = Zlib.Adler32(this.input);
	  this.rawDeflate.op = pos;
	  output = this.rawDeflate.compress();
	  pos = output.length;
	  {
	    // subarray åãåã«ãã©ã
	    output = new Uint8Array(output.buffer); // expand buffer

	    if (output.length <= pos + 4) {
	      this.output = new Uint8Array(output.length + 4);
	      this.output.set(output);
	      output = this.output;
	    }

	    output = output.subarray(0, pos + 4);
	  } // adler32

	  output[pos++] = adler >> 24 & 0xff;
	  output[pos++] = adler >> 16 & 0xff;
	  output[pos++] = adler >> 8 & 0xff;
	  output[pos++] = adler & 0xff;
	  return output;
	};

	if (typeof process === 'object' && typeof window === 'undefined') {
	  global.atob = function (str) {
	    return Buffer.from(str, 'base64').toString('binary');
	  };
	}
	/**
	 * Make the target element movable by clicking and dragging on the handle.  This is not a general purprose function,
	 * it makes several options specific to igv dialogs, the primary one being that the
	 * target is absolutely positioned in pixel coordinates

	 */


	let dragData; // Its assumed we are only dragging one element at a time.

	function makeDraggable(target, handle) {
	  handle.addEventListener('mousedown', dragStart.bind(target));
	}

	function dragStart(event) {
	  event.stopPropagation();
	  event.preventDefault();
	  const pageCoords = offset(this);
	  const dragFunction = drag.bind(this);
	  const dragEndFunction = dragEnd.bind(this);
	  const computedStyle = getComputedStyle(this);
	  const top = parseInt(computedStyle.top.replace("px", ""));
	  const left = parseInt(computedStyle.left.replace("px", ""));
	  dragData = {
	    dragFunction: dragFunction,
	    dragEndFunction: dragEndFunction,
	    screenX: event.screenX,
	    screenY: event.screenY,
	    top: top,
	    left: left
	  };
	  document.addEventListener('mousemove', dragFunction);
	  document.addEventListener('mouseup', dragEndFunction);
	  document.addEventListener('mouseleave', dragEndFunction);
	  document.addEventListener('mouseexit', dragEndFunction);
	}

	function drag(event) {
	  if (!dragData) {
	    return;
	  }

	  event.stopPropagation();
	  event.preventDefault();
	  const dx = event.screenX - dragData.screenX;
	  const dy = event.screenY - dragData.screenY;
	  this.style.left = `${dragData.left + dx}px`;
	  this.style.top = `${dragData.top + dy}px`;
	}

	function dragEnd(event) {
	  if (!dragData) {
	    return;
	  }

	  event.stopPropagation();
	  event.preventDefault();
	  const dragFunction = dragData.dragFunction;
	  const dragEndFunction = dragData.dragEndFunction;
	  document.removeEventListener('mousemove', dragFunction);
	  document.removeEventListener('mouseup', dragEndFunction);
	  document.removeEventListener('mouseleave', dragEndFunction);
	  document.removeEventListener('mouseexit', dragEndFunction);
	  dragData = undefined;
	}

	const appleCrayonPalette = {
	  licorice: "#000000",
	  lead: "#1e1e1e",
	  tungsten: "#3a3a3a",
	  iron: "#545453",
	  steel: "#6e6e6e",
	  tin: "#878687",
	  nickel: "#888787",
	  aluminum: "#a09fa0",
	  magnesium: "#b8b8b8",
	  silver: "#d0d0d0",
	  mercury: "#e8e8e8",
	  snow: "#ffffff",
	  //
	  cayenne: "#891100",
	  mocha: "#894800",
	  aspargus: "#888501",
	  fern: "#458401",
	  clover: "#028401",
	  moss: "#018448",
	  teal: "#008688",
	  ocean: "#004a88",
	  midnight: "#001888",
	  eggplant: "#491a88",
	  plum: "#891e88",
	  maroon: "#891648",
	  //
	  maraschino: "#ff2101",
	  tangerine: "#ff8802",
	  lemon: "#fffa03",
	  lime: "#83f902",
	  spring: "#05f802",
	  seam_foam: "#03f987",
	  turquoise: "#00fdff",
	  aqua: "#008cff",
	  blueberry: "#002eff",
	  grape: "#8931ff",
	  magenta: "#ff39ff",
	  strawberry: "#ff2987",
	  //
	  salmon: "#ff726e",
	  cantaloupe: "#ffce6e",
	  banana: "#fffb6d",
	  honeydew: "#cefa6e",
	  flora: "#68f96e",
	  spindrift: "#68fbd0",
	  ice: "#68fdff",
	  sky: "#6acfff",
	  orchid: "#6e76ff",
	  lavender: "#d278ff",
	  bubblegum: "#ff7aff",
	  carnation: "#ff7fd3"
	};
	const httpMessages = {
	  "401": "Access unauthorized",
	  "403": "Access forbidden",
	  "404": "Not found"
	};

	class AlertDialog {
	  constructor(parent) {
	    // container
	    this.container = div({
	      class: "igv-ui-alert-dialog-container"
	    });
	    parent.appendChild(this.container);
	    this.container.setAttribute('tabIndex', '-1'); // header

	    const header = div();
	    this.container.appendChild(header);
	    this.errorHeadline = div();
	    header.appendChild(this.errorHeadline);
	    this.errorHeadline.textContent = ''; // body container

	    let bodyContainer = div({
	      id: 'igv-ui-alert-dialog-body'
	    });
	    this.container.appendChild(bodyContainer); // body copy

	    this.body = div({
	      id: 'igv-ui-alert-dialog-body-copy'
	    });
	    bodyContainer.appendChild(this.body); // ok container

	    let ok_container = div();
	    this.container.appendChild(ok_container); // ok

	    this.ok = div();
	    ok_container.appendChild(this.ok);
	    this.ok.textContent = 'OK';

	    const okHandler = () => {
	      if (typeof this.callback === 'function') {
	        this.callback("OK");
	        this.callback = undefined;
	      }

	      this.body.innerHTML = '';
	      hide(this.container);
	    };

	    this.ok.addEventListener('click', event => {
	      event.stopPropagation();
	      okHandler();
	    });
	    this.container.addEventListener('keypress', event => {
	      event.stopPropagation();

	      if ('Enter' === event.key) {
	        okHandler();
	      }
	    });
	    makeDraggable(this.container, header);
	    hide(this.container);
	  }

	  present(alert, callback) {
	    this.errorHeadline.textContent = alert.message ? 'ERROR' : '';
	    let string = alert.message || alert;

	    if (httpMessages.hasOwnProperty(string)) {
	      string = httpMessages[string];
	    }

	    this.body.innerHTML = string;
	    this.callback = callback;
	    show(this.container);
	    this.container.focus();
	  }

	}

	let alertDialog;
	const Alert = {
	  init(root) {
	    if (!alertDialog) {
	      alertDialog = new AlertDialog(root);
	    }
	  },

	  presentAlert: function (alert, callback) {
	    alertDialog.present(alert, callback);
	  }
	};

	class InputDialog {
	  constructor(parent) {
	    this.parent = parent; // dialog container

	    this.container = div({
	      class: 'igv-ui-generic-dialog-container'
	    });
	    parent.appendChild(this.container); // const { x, y, width, height } = this.container.getBoundingClientRect();
	    // console.log(`InputDialog - x ${ x } y ${ y } width ${ width } height ${ height }`)
	    // dialog header

	    const header = div({
	      class: 'igv-ui-generic-dialog-header'
	    });
	    this.container.appendChild(header); // dialog label

	    this.label = div({
	      class: 'igv-ui-generic-dialog-one-liner'
	    });
	    this.container.appendChild(this.label);
	    this.label.text = 'Unlabeled'; // input container

	    this.input_container = div({
	      class: 'igv-ui-generic-dialog-input'
	    });
	    this.container.appendChild(this.input_container); //

	    this.input = document.createElement("input");
	    this.input_container.appendChild(this.input); // ok | cancel

	    const buttons = div({
	      class: 'igv-ui-generic-dialog-ok-cancel'
	    });
	    this.container.appendChild(buttons); // ok

	    this.ok = div();
	    buttons.appendChild(this.ok);
	    this.ok.textContent = 'OK'; // cancel

	    this.cancel = div();
	    buttons.appendChild(this.cancel);
	    this.cancel.textContent = 'Cancel';
	    hide(this.container);
	    this.input.addEventListener('keyup', e => {
	      if (13 === e.keyCode) {
	        if (typeof this.callback === 'function') {
	          this.callback(this.input.value);
	          this.callback = undefined;
	        }

	        this.input.value = undefined;
	        hide(this.container);
	      }
	    });
	    this.ok.addEventListener('click', () => {
	      if (typeof this.callback === 'function') {
	        this.callback(this.input.value);
	        this.callback = undefined;
	      }

	      this.input.value = undefined;
	      hide(this.container);
	    });

	    const cancel = () => {
	      this.input.value = '';
	      hide(this.container);
	    };

	    this.cancel.addEventListener('click', cancel);
	    attachDialogCloseHandlerWithParent(header, cancel);
	    makeDraggable(this.container, header);
	  }

	  present(options, e) {
	    this.label.textContent = options.label;
	    this.input.value = options.value;
	    this.callback = options.callback || options.click;
	    show(this.container);
	    const {
	      x,
	      y
	    } = pageCoordinates(e);
	    this.clampLocation(x, y);
	  }

	  clampLocation(pageX, pageY) {
	    const {
	      width: w,
	      height: h
	    } = this.container.getBoundingClientRect();
	    const {
	      x: px,
	      y: py,
	      width: pw,
	      height: ph
	    } = this.parent.getBoundingClientRect();
	    const y = Math.min(Math.max(pageY, py), py + ph - h);
	    const x = Math.min(Math.max(pageX, px), px + pw - w);
	    this.container.style.left = `${x}px`;
	    this.container.style.top = `${y}px`;
	  }

	}
	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2014 Broad Institute
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */


	class GenericContainer {
	  constructor({
	    parent,
	    top,
	    left,
	    width,
	    height,
	    border,
	    closeHandler
	  }) {
	    let container = div({
	      class: 'igv-ui-generic-container'
	    });
	    parent.appendChild(container);
	    hide(container);
	    this.container = container;

	    if (top !== undefined) {
	      this.container.style.width = top + "px";
	    }

	    if (left !== undefined) {
	      this.container.style.width = left + "px";
	    }

	    if (width !== undefined) {
	      this.container.style.width = width + "px";
	    }

	    if (height !== undefined) {
	      this.container.style.height = height + "px";
	    }

	    if (border) {
	      this.container.style.border = border;
	    } //
	    // let bbox = parent.getBoundingClientRect();
	    // this.origin = {x: bbox.x, y: bbox.y};
	    // this.container.offset({left: this.origin.x, top: this.origin.y});
	    // header


	    const header = div();
	    this.container.appendChild(header); // close button

	    attachDialogCloseHandlerWithParent(header, e => {
	      hide(this.container);

	      if (typeof closeHandler === "function") {
	        closeHandler(e);
	      }
	    });
	    makeDraggable(this.container, header);
	  }

	  show() {
	    show(this.container);
	  }

	  hide() {
	    hide(this.container);
	  }

	  dispose() {
	    if (this.container.parent) {
	      this.container.parent.removeChild(this.container);
	    }
	  }

	}

	class ColorPicker extends GenericContainer {
	  constructor({
	    parent,
	    top,
	    left,
	    width,
	    height,
	    defaultColors,
	    colorHandler
	  }) {
	    super({
	      parent,
	      top,
	      left,
	      width,
	      height,
	      border: '1px solid gray'
	    });
	    createColorSwatchSelector(this.container, colorHandler, defaultColors);
	  }

	}

	const createColorSwatchSelector = (container, colorHandler, defaultColors) => {
	  const hexColorStrings = Object.values(appleCrayonPalette);

	  for (let hexColorString of hexColorStrings) {
	    const swatch = div({
	      class: 'igv-ui-color-swatch'
	    });
	    container.appendChild(swatch);
	    decorateSwatch(swatch, hexColorString, colorHandler);
	  }

	  if (defaultColors) {
	    for (let hexColorString of defaultColors) {
	      const swatch = div({
	        class: 'igv-ui-color-swatch'
	      });
	      container.appendChild(swatch);
	      decorateSwatch(swatch, hexColorString, colorHandler);
	    }
	  }
	};

	const decorateSwatch = (swatch, hexColorString, colorHandler) => {
	  swatch.style.backgroundColor = hexColorString;

	  swatch.onmouseenter = () => swatch.style.borderColor = hexColorString;

	  swatch.onmouseenter = () => swatch.style.borderColor = 'white';

	  swatch.addEventListener('click', event => {
	    event.stopPropagation();
	    colorHandler(hexColorString);
	  });
	  swatch.addEventListener('touchend', event => {
	    event.stopPropagation();
	    colorHandler(hexColorString);
	  });
	};
	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2014 Broad Institute
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */


	class Popover {
	  constructor(parent) {
	    this.parent = parent; // popover

	    this.popover = div({
	      class: "igv-ui-popover"
	    });
	    parent.appendChild(this.popover); // header

	    const popoverHeader = div();
	    this.popover.appendChild(popoverHeader);
	    attachDialogCloseHandlerWithParent(popoverHeader, () => this.hide());
	    makeDraggable(this.popover, popoverHeader); // content

	    this.popoverContent = div();
	    this.popover.appendChild(this.popoverContent);
	    this.popover.style.display = 'none';
	  }

	  presentContentWithEvent(e, content) {
	    this.popover.style.display = 'block';
	    this.popoverContent.innerHTML = content;
	    present(e, this.popover);
	  }

	  presentMenu(e, menuItems) {
	    if (0 === menuItems.length) {
	      return;
	    }

	    this.popover.style.display = 'block';
	    const menuElements = createMenuElements(menuItems, this.popover);

	    for (let item of menuElements) {
	      this.popoverContent.appendChild(item.object);
	    }

	    present(e, this.popover);
	  }

	  hide() {
	    this.popover.style.display = 'none';
	    this.dispose();
	  }

	  dispose() {
	    if (this.popover) {
	      this.popover.parentNode.removeChild(this.popover);
	    }

	    const keys = Object.keys(this);

	    for (let key of keys) {
	      this[key] = undefined;
	    }
	  }

	}

	function present(e, popover) {
	  const {
	    x,
	    y
	  } = translateMouseCoordinates(e, popover.parentNode); // parent bbox

	  const {
	    width
	  } = popover.parentNode.getBoundingClientRect();
	  const {
	    width: w
	  } = popover.getBoundingClientRect();
	  const xmax = x + w;
	  popover.style.left = `${xmax > width ? x - (xmax - width) : x}px`;
	  popover.style.top = `${y}px`;
	}

	function createMenuElements(itemList, popover) {
	  const list = itemList.map(function (item, i) {
	    let elem;

	    if (typeof item === 'string') {
	      elem = div();
	      elem.innerHTML = item;
	    } else if (typeof item === 'Node') {
	      elem = item;
	    } else {
	      if (typeof item.init === 'function') {
	        item.init();
	      }

	      if ("checkbox" === item.type) {
	        elem = createCheckbox("Show all bases", item.value);
	      } else if ("color" === item.type) {
	        const colorPicker = new ColorPicker({
	          parent: popover.parentElement,
	          width: 364,
	          //defaultColor: 'aqua',
	          colorHandler: color => item.click(color)
	        });
	        elem = div();

	        if (typeof item.label === 'string') {
	          elem.innerHTML = item.label;
	        }

	        const clickHandler = e => {
	          colorPicker.show();
	          hide(popover);
	          e.preventDefault();
	          e.stopPropagation();
	        };

	        elem.addEventListener('click', clickHandler);
	        elem.addEventListener('touchend', clickHandler);
	        elem.addEventListener('mouseup', function (e) {
	          e.preventDefault();
	          e.stopPropagation();
	        });
	      } else {
	        elem = div();

	        if (typeof item.label === 'string') {
	          elem.innerHTML = item.label;
	        }
	      }

	      if (item.click && "color" !== item.type) {
	        elem.addEventListener('click', handleClick);
	        elem.addEventListener('touchend', handleClick);
	        elem.addEventListener('mouseup', function (e) {
	          e.preventDefault();
	          e.stopPropagation();
	        }); // eslint-disable-next-line no-inner-declarations

	        function handleClick(e) {
	          item.click();
	          hide(popover);
	          e.preventDefault();
	          e.stopPropagation();
	        }
	      }
	    }

	    return {
	      object: elem,
	      init: item.init
	    };
	  });
	  return list;
	}

	function embedCSS() {
	  var css = '.igv-ui-popover {\n  cursor: default;\n  position: absolute;\n  z-index: 2048;\n  border-color: #7F7F7F;\n  border-radius: 4px;\n  border-style: solid;\n  border-width: 1px;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: small;\n  background-color: white; }\n  .igv-ui-popover > div:first-child {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    justify-content: flex-end;\n    align-items: center;\n    width: 100%;\n    height: 24px;\n    cursor: move;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n    border-bottom-color: #7F7F7F;\n    border-bottom-style: solid;\n    border-bottom-width: thin;\n    background-color: #eee; }\n    .igv-ui-popover > div:first-child > div {\n      margin-right: 4px;\n      height: 12px;\n      width: 12px;\n      color: #7F7F7F; }\n    .igv-ui-popover > div:first-child > div:hover {\n      cursor: pointer;\n      color: #444; }\n  .igv-ui-popover > div:last-child {\n    overflow-y: auto;\n    overflow-x: hidden;\n    max-height: 400px;\n    background-color: white; }\n    .igv-ui-popover > div:last-child > div {\n      -webkit-user-select: all;\n      /* Chrome/Safari */\n      -moz-user-select: all;\n      /* Firefox */\n      margin-left: 4px;\n      margin-right: 4px;\n      max-width: 384px;\n      min-width: 220px;\n      overflow-x: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap; }\n      .igv-ui-popover > div:last-child > div > span {\n        font-weight: bolder; }\n    .igv-ui-popover > div:last-child hr {\n      width: 100%; }\n\n.igv-ui-alert-dialog-container {\n  box-sizing: content-box;\n  position: absolute;\n  z-index: 2048;\n  top: 50%;\n  left: 50%;\n  width: 400px;\n  height: 200px;\n  border-color: #7F7F7F;\n  border-radius: 4px;\n  border-style: solid;\n  border-width: thin;\n  outline: none;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: 15px;\n  font-weight: 400;\n  background-color: white;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center; }\n  .igv-ui-alert-dialog-container > div:first-child {\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n    align-items: center;\n    width: 100%;\n    height: 24px;\n    cursor: move;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n    border-bottom-color: #7F7F7F;\n    border-bottom-style: solid;\n    border-bottom-width: thin;\n    background-color: #eee; }\n    .igv-ui-alert-dialog-container > div:first-child div:first-child {\n      padding-left: 8px; }\n  .igv-ui-alert-dialog-container #igv-ui-alert-dialog-body {\n    color: #373737;\n    width: 100%;\n    height: calc(100% - 24px - 64px);\n    overflow-y: scroll; }\n    .igv-ui-alert-dialog-container #igv-ui-alert-dialog-body #igv-ui-alert-dialog-body-copy {\n      cursor: pointer;\n      margin: 16px;\n      width: auto;\n      height: auto;\n      overflow-wrap: break-word;\n      word-break: break-word;\n      background-color: white;\n      border: unset; }\n  .igv-ui-alert-dialog-container > div:last-child {\n    width: 100%;\n    margin-bottom: 10px;\n    background-color: white;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: center;\n    align-items: center; }\n    .igv-ui-alert-dialog-container > div:last-child div {\n      margin: unset;\n      width: 40px;\n      height: 30px;\n      line-height: 30px;\n      text-align: center;\n      color: white;\n      font-family: \"Open Sans\", sans-serif;\n      font-size: small;\n      font-weight: 400;\n      border-color: #2B81AF;\n      border-style: solid;\n      border-width: thin;\n      border-radius: 4px;\n      background-color: #2B81AF; }\n    .igv-ui-alert-dialog-container > div:last-child div:hover {\n      cursor: pointer;\n      border-color: #25597f;\n      background-color: #25597f; }\n\n.igv-ui-color-swatch {\n  box-sizing: content-box;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  width: 32px;\n  height: 32px;\n  border-style: solid;\n  border-width: 2px;\n  border-color: white;\n  border-radius: 4px; }\n\n.igv-ui-colorpicker-menu-close-button {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  align-items: center;\n  width: 100%;\n  height: 32px;\n  margin-top: 4px;\n  margin-bottom: 4px;\n  padding-right: 8px; }\n  .igv-ui-colorpicker-menu-close-button i.fa {\n    display: block;\n    margin-left: 4px;\n    margin-right: 4px;\n    color: #5f5f5f; }\n  .igv-ui-colorpicker-menu-close-button i.fa:hover,\n  .igv-ui-colorpicker-menu-close-button i.fa:focus,\n  .igv-ui-colorpicker-menu-close-button i.fa:active {\n    cursor: pointer;\n    color: #0f0f0f; }\n\n.igv-ui-generic-dialog-container {\n  box-sizing: content-box;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 300px;\n  height: 200px;\n  border-color: #7F7F7F;\n  border-radius: 4px;\n  border-style: solid;\n  border-width: thin;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  z-index: 2048;\n  background-color: white;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center; }\n  .igv-ui-generic-dialog-container .igv-ui-generic-dialog-header {\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-end;\n    align-items: center;\n    width: 100%;\n    height: 24px;\n    cursor: move;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n    border-bottom-color: #7F7F7F;\n    border-bottom-style: solid;\n    border-bottom-width: thin;\n    background-color: #eee; }\n    .igv-ui-generic-dialog-container .igv-ui-generic-dialog-header div {\n      margin-right: 4px;\n      margin-bottom: 2px;\n      height: 12px;\n      width: 12px;\n      color: #7F7F7F; }\n    .igv-ui-generic-dialog-container .igv-ui-generic-dialog-header div:hover {\n      cursor: pointer;\n      color: #444; }\n  .igv-ui-generic-dialog-container .igv-ui-generic-dialog-one-liner {\n    color: #373737;\n    width: 95%;\n    height: 24px;\n    line-height: 24px;\n    text-align: left;\n    margin-top: 8px;\n    padding-left: 8px;\n    overflow-wrap: break-word;\n    background-color: white; }\n  .igv-ui-generic-dialog-container .igv-ui-generic-dialog-label-input {\n    margin-top: 8px;\n    width: 95%;\n    height: 24px;\n    color: #373737;\n    line-height: 24px;\n    padding-left: 8px;\n    background-color: white;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n    align-items: center; }\n    .igv-ui-generic-dialog-container .igv-ui-generic-dialog-label-input div {\n      width: 30%;\n      height: 100%;\n      font-size: 16px;\n      text-align: right;\n      padding-right: 8px;\n      background-color: white; }\n    .igv-ui-generic-dialog-container .igv-ui-generic-dialog-label-input input {\n      display: block;\n      height: 100%;\n      width: 100%;\n      padding-left: 4px;\n      font-family: \"Open Sans\", sans-serif;\n      font-weight: 400;\n      color: #373737;\n      text-align: left;\n      outline: none;\n      border-style: solid;\n      border-width: thin;\n      border-color: #7F7F7F;\n      background-color: white; }\n    .igv-ui-generic-dialog-container .igv-ui-generic-dialog-label-input input {\n      width: 50%;\n      font-size: 16px; }\n  .igv-ui-generic-dialog-container .igv-ui-generic-dialog-input {\n    margin-top: 8px;\n    width: calc(100% - 16px);\n    height: 24px;\n    color: #373737;\n    line-height: 24px;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: space-around;\n    align-items: center; }\n    .igv-ui-generic-dialog-container .igv-ui-generic-dialog-input input {\n      display: block;\n      height: 100%;\n      width: 100%;\n      padding-left: 4px;\n      font-family: \"Open Sans\", sans-serif;\n      font-weight: 400;\n      color: #373737;\n      text-align: left;\n      outline: none;\n      border-style: solid;\n      border-width: thin;\n      border-color: #7F7F7F;\n      background-color: white; }\n    .igv-ui-generic-dialog-container .igv-ui-generic-dialog-input input {\n      font-size: 16px; }\n  .igv-ui-generic-dialog-container .igv-ui-generic-dialog-ok-cancel {\n    width: 100%;\n    height: 28px;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: space-around;\n    align-items: center; }\n    .igv-ui-generic-dialog-container .igv-ui-generic-dialog-ok-cancel div {\n      margin-top: 32px;\n      color: white;\n      font-family: \"Open Sans\", sans-serif;\n      font-size: 14px;\n      font-weight: 400;\n      width: 75px;\n      height: 28px;\n      line-height: 28px;\n      text-align: center;\n      border-color: transparent;\n      border-style: solid;\n      border-width: thin;\n      border-radius: 2px; }\n    .igv-ui-generic-dialog-container .igv-ui-generic-dialog-ok-cancel div:first-child {\n      margin-left: 32px;\n      margin-right: 0;\n      background-color: #5ea4e0; }\n    .igv-ui-generic-dialog-container .igv-ui-generic-dialog-ok-cancel div:last-child {\n      margin-left: 0;\n      margin-right: 32px;\n      background-color: #c4c4c4; }\n    .igv-ui-generic-dialog-container .igv-ui-generic-dialog-ok-cancel div:first-child:hover {\n      cursor: pointer;\n      background-color: #3b5c7f; }\n    .igv-ui-generic-dialog-container .igv-ui-generic-dialog-ok-cancel div:last-child:hover {\n      cursor: pointer;\n      background-color: #7f7f7f; }\n  .igv-ui-generic-dialog-container .igv-ui-generic-dialog-ok {\n    width: 100%;\n    height: 36px;\n    margin-top: 32px;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: space-around;\n    align-items: center; }\n    .igv-ui-generic-dialog-container .igv-ui-generic-dialog-ok div {\n      width: 98px;\n      height: 36px;\n      line-height: 36px;\n      text-align: center;\n      color: white;\n      font-family: \"Open Sans\", sans-serif;\n      font-size: medium;\n      font-weight: 400;\n      border-color: white;\n      border-style: solid;\n      border-width: thin;\n      border-radius: 4px;\n      background-color: #2B81AF; }\n    .igv-ui-generic-dialog-container .igv-ui-generic-dialog-ok div:hover {\n      cursor: pointer;\n      background-color: #25597f; }\n\n.igv-ui-generic-container {\n  box-sizing: content-box;\n  position: absolute;\n  z-index: 2048;\n  background-color: white;\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  align-items: center; }\n  .igv-ui-generic-container div:first-child {\n    cursor: move;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-end;\n    align-items: center;\n    height: 24px;\n    width: 100%;\n    background-color: #dddddd; }\n    .igv-ui-generic-container div:first-child div {\n      display: block;\n      color: #5f5f5f;\n      cursor: pointer;\n      width: 14px;\n      height: 14px;\n      margin-right: 8px;\n      margin-bottom: 4px; }\n\n.igv-ui-dialog {\n  z-index: 2048;\n  position: fixed;\n  width: fit-content;\n  height: fit-content;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  background-color: white;\n  border-color: #7F7F7F;\n  border-radius: 4px;\n  border-style: solid;\n  border-width: thin;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: medium;\n  font-weight: 400; }\n  .igv-ui-dialog .igv-ui-dialog-header {\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-end;\n    align-items: center;\n    width: 100%;\n    height: 24px;\n    cursor: move;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n    border-bottom-color: #7F7F7F;\n    border-bottom-style: solid;\n    border-bottom-width: thin;\n    background-color: #eee; }\n    .igv-ui-dialog .igv-ui-dialog-header div {\n      margin-right: 4px;\n      margin-bottom: 2px;\n      height: 12px;\n      width: 12px;\n      color: #7F7F7F; }\n    .igv-ui-dialog .igv-ui-dialog-header div:hover {\n      cursor: pointer;\n      color: #444; }\n  .igv-ui-dialog .igv-ui-dialog-one-liner {\n    width: 95%;\n    height: 24px;\n    line-height: 24px;\n    text-align: left;\n    margin: 8px;\n    overflow-wrap: break-word;\n    background-color: white;\n    font-weight: bold; }\n  .igv-ui-dialog .igv-ui-dialog-ok-cancel {\n    width: 100%;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: space-around;\n    align-items: center; }\n    .igv-ui-dialog .igv-ui-dialog-ok-cancel div {\n      margin: 16px;\n      margin-top: 32px;\n      color: white;\n      font-family: \"Open Sans\", sans-serif;\n      font-size: 14px;\n      font-weight: 400;\n      width: 75px;\n      height: 28px;\n      line-height: 28px;\n      text-align: center;\n      border-color: transparent;\n      border-style: solid;\n      border-width: thin;\n      border-radius: 2px; }\n    .igv-ui-dialog .igv-ui-dialog-ok-cancel div:first-child {\n      background-color: #5ea4e0; }\n    .igv-ui-dialog .igv-ui-dialog-ok-cancel div:last-child {\n      background-color: #c4c4c4; }\n    .igv-ui-dialog .igv-ui-dialog-ok-cancel div:first-child:hover {\n      cursor: pointer;\n      background-color: #3b5c7f; }\n    .igv-ui-dialog .igv-ui-dialog-ok-cancel div:last-child:hover {\n      cursor: pointer;\n      background-color: #7f7f7f; }\n  .igv-ui-dialog .igv-ui-dialog-ok {\n    width: 100%;\n    height: 36px;\n    margin-top: 32px;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: space-around;\n    align-items: center; }\n    .igv-ui-dialog .igv-ui-dialog-ok div {\n      width: 98px;\n      height: 36px;\n      line-height: 36px;\n      text-align: center;\n      color: white;\n      font-family: \"Open Sans\", sans-serif;\n      font-size: medium;\n      font-weight: 400;\n      border-color: white;\n      border-style: solid;\n      border-width: thin;\n      border-radius: 4px;\n      background-color: #2B81AF; }\n    .igv-ui-dialog .igv-ui-dialog-ok div:hover {\n      cursor: pointer;\n      background-color: #25597f; }\n\n.igv-ui-panel, .igv-ui-panel-column, .igv-ui-panel-row {\n  z-index: 2048;\n  background-color: white;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start; }\n\n.igv-ui-panel-column {\n  display: flex;\n  flex-direction: column; }\n\n.igv-ui-panel-row {\n  display: flex;\n  flex-direction: row; }\n\n.igv-ui-textbox {\n  background-color: white;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start; }\n\n/*# sourceMappingURL=igv-ui.css.map */\n';
	  var style = document.createElement('style');
	  style.setAttribute('type', 'text/css');
	  style.innerHTML = css;
	  document.head.insertBefore(style, document.head.childNodes[document.head.childNodes.length - 1]);
	}

	if (typeof document !== 'undefined') {
	  if (!stylesheetExists("igv-ui.css")) {
	    // console.log('igv-ui. will call embedCSS() ...');
	    embedCSS(); // console.log('... done.');
	  }

	  function stylesheetExists(stylesheetName) {
	    for (let ss of document.styleSheets) {
	      ss = ss.href ? ss.href.replace(/^.*[\\\/]/, '') : '';

	      if (ss === stylesheetName) {
	        return true;
	      }
	    }

	    return false;
	  }
	}

	function div$1(options) {
	  return create$1("div", options);
	}

	function create$1(tag, options) {
	  const elem = document.createElement(tag);

	  if (options) {
	    if (options.class) {
	      elem.classList.add(options.class);
	    }

	    if (options.id) {
	      elem.id = options.id;
	    }

	    if (options.style) {
	      applyStyle$1(elem, options.style);
	    }
	  }

	  return elem;
	}

	function hide$1(elem) {
	  const cssStyle = getComputedStyle(elem);

	  if (cssStyle.display !== "none") {
	    elem._initialDisplay = cssStyle.display;
	  }

	  elem.style.display = "none";
	}

	function offset$1(elem) {
	  // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
	  // Support: IE <=11 only
	  // Running getBoundingClientRect on a
	  // disconnected node in IE throws an error
	  if (!elem.getClientRects().length) {
	    return {
	      top: 0,
	      left: 0
	    };
	  } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


	  const rect = elem.getBoundingClientRect();
	  const win = elem.ownerDocument.defaultView;
	  return {
	    top: rect.top + win.pageYOffset,
	    left: rect.left + win.pageXOffset
	  };
	}

	function pageCoordinates$1(e) {
	  if (e.type.startsWith("touch")) {
	    const touch = e.touches[0];
	    return {
	      x: touch.pageX,
	      y: touch.pageY
	    };
	  } else {
	    return {
	      x: e.pageX,
	      y: e.pageY
	    };
	  }
	}

	const relativeDOMBBox = (parentElement, childElement) => {
	  const {
	    x: x_p,
	    y: y_p,
	    width: width_p,
	    height: height_p
	  } = parentElement.getBoundingClientRect();
	  const {
	    x: x_c,
	    y: y_c,
	    width: width_c,
	    height: height_c
	  } = childElement.getBoundingClientRect();
	  return {
	    x: x_c - x_p,
	    y: y_c - y_p,
	    width: width_c,
	    height: height_c
	  };
	};

	function applyStyle$1(elem, style) {
	  for (let key of Object.keys(style)) {
	    elem.style[key] = style[key];
	  }
	}

	function guid() {
	  return ("0000" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);
	}

	let getMouseXY$1 = (domElement, {
	  clientX,
	  clientY
	}) => {
	  // DOMRect object with eight properties: left, top, right, bottom, x, y, width, height
	  const {
	    left,
	    top,
	    width,
	    height
	  } = domElement.getBoundingClientRect();
	  const x = clientX - left;
	  const y = clientY - top;
	  return {
	    x,
	    y,
	    xNormalized: x / width,
	    yNormalized: y / height,
	    width,
	    height
	  };
	};
	/**
	 * Translate the mouse coordinates for the event to the coordinates for the given target element
	 * @param event
	 * @param domElement
	 * @returns {{x: number, y: number}}
	 */


	function translateMouseCoordinates$1(event, domElement) {
	  const {
	    clientX,
	    clientY
	  } = event;
	  return getMouseXY$1(domElement, {
	    clientX,
	    clientY
	  });
	}

	function createIcon$1(name, color) {
	  return iconMarkup$1(name, color);
	}

	function iconMarkup$1(name, color) {
	  color = color || "currentColor";
	  let icon = icons$1[name];

	  if (!icon) {
	    console.error(`No icon named: ${name}`);
	    icon = icons$1["question"];
	  }

	  const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
	  svg.setAttributeNS(null, 'viewBox', '0 0 ' + icon[0] + ' ' + icon[1]);
	  const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
	  path.setAttributeNS(null, 'fill', color);
	  path.setAttributeNS(null, 'd', icon[4]);
	  svg.appendChild(path);
	  return svg;
	}

	const icons$1 = {
	  "check": [512, 512, [], "f00c", "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"],
	  "cog": [512, 512, [], "f013", "M444.788 291.1l42.616 24.599c4.867 2.809 7.126 8.618 5.459 13.985-11.07 35.642-29.97 67.842-54.689 94.586a12.016 12.016 0 0 1-14.832 2.254l-42.584-24.595a191.577 191.577 0 0 1-60.759 35.13v49.182a12.01 12.01 0 0 1-9.377 11.718c-34.956 7.85-72.499 8.256-109.219.007-5.49-1.233-9.403-6.096-9.403-11.723v-49.184a191.555 191.555 0 0 1-60.759-35.13l-42.584 24.595a12.016 12.016 0 0 1-14.832-2.254c-24.718-26.744-43.619-58.944-54.689-94.586-1.667-5.366.592-11.175 5.459-13.985L67.212 291.1a193.48 193.48 0 0 1 0-70.199l-42.616-24.599c-4.867-2.809-7.126-8.618-5.459-13.985 11.07-35.642 29.97-67.842 54.689-94.586a12.016 12.016 0 0 1 14.832-2.254l42.584 24.595a191.577 191.577 0 0 1 60.759-35.13V25.759a12.01 12.01 0 0 1 9.377-11.718c34.956-7.85 72.499-8.256 109.219-.007 5.49 1.233 9.403 6.096 9.403 11.723v49.184a191.555 191.555 0 0 1 60.759 35.13l42.584-24.595a12.016 12.016 0 0 1 14.832 2.254c24.718 26.744 43.619 58.944 54.689 94.586 1.667 5.366-.592 11.175-5.459 13.985L444.788 220.9a193.485 193.485 0 0 1 0 70.2zM336 256c0-44.112-35.888-80-80-80s-80 35.888-80 80 35.888 80 80 80 80-35.888 80-80z"],
	  "exclamation": [192, 512, [], "f12a", "M176 432c0 44.112-35.888 80-80 80s-80-35.888-80-80 35.888-80 80-80 80 35.888 80 80zM25.26 25.199l13.6 272C39.499 309.972 50.041 320 62.83 320h66.34c12.789 0 23.331-10.028 23.97-22.801l13.6-272C167.425 11.49 156.496 0 142.77 0H49.23C35.504 0 24.575 11.49 25.26 25.199z"],
	  "exclamation-circle": [512, 512, [], "f06a", "M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"],
	  "exclamation-triangle": [576, 512, [], "f071", "M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"],
	  "minus": [448, 512, [], "f068", "M424 318.2c13.3 0 24-10.7 24-24v-76.4c0-13.3-10.7-24-24-24H24c-13.3 0-24 10.7-24 24v76.4c0 13.3 10.7 24 24 24h400z"],
	  "minus-circle": [512, 512, [], "f056", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zM124 296c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h264c6.6 0 12 5.4 12 12v56c0 6.6-5.4 12-12 12H124z"],
	  "minus-square": [448, 512, [], "f146", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zM92 296c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h264c6.6 0 12 5.4 12 12v56c0 6.6-5.4 12-12 12H92z"],
	  "plus": [448, 512, [], "f067", "M448 294.2v-76.4c0-13.3-10.7-24-24-24H286.2V56c0-13.3-10.7-24-24-24h-76.4c-13.3 0-24 10.7-24 24v137.8H24c-13.3 0-24 10.7-24 24v76.4c0 13.3 10.7 24 24 24h137.8V456c0 13.3 10.7 24 24 24h76.4c13.3 0 24-10.7 24-24V318.2H424c13.3 0 24-10.7 24-24z"],
	  "plus-circle": [512, 512, [], "f055", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"],
	  "plus-square": [448, 512, [], "f0fe", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-32 252c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92H92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"],
	  "question": [384, 512, [], "f128", "M202.021 0C122.202 0 70.503 32.703 29.914 91.026c-7.363 10.58-5.093 25.086 5.178 32.874l43.138 32.709c10.373 7.865 25.132 6.026 33.253-4.148 25.049-31.381 43.63-49.449 82.757-49.449 30.764 0 68.816 19.799 68.816 49.631 0 22.552-18.617 34.134-48.993 51.164-35.423 19.86-82.299 44.576-82.299 106.405V320c0 13.255 10.745 24 24 24h72.471c13.255 0 24-10.745 24-24v-5.773c0-42.86 125.268-44.645 125.268-160.627C377.504 66.256 286.902 0 202.021 0zM192 373.459c-38.196 0-69.271 31.075-69.271 69.271 0 38.195 31.075 69.27 69.271 69.27s69.271-31.075 69.271-69.271-31.075-69.27-69.271-69.27z"],
	  "save": [448, 512, [], "f0c7", "M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z"],
	  "search": [512, 512, [], "f002", "M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"],
	  "share": [512, 512, [], "f064", "M503.691 189.836L327.687 37.851C312.281 24.546 288 35.347 288 56.015v80.053C127.371 137.907 0 170.1 0 322.326c0 61.441 39.581 122.309 83.333 154.132 13.653 9.931 33.111-2.533 28.077-18.631C66.066 312.814 132.917 274.316 288 272.085V360c0 20.7 24.3 31.453 39.687 18.164l176.004-152c11.071-9.562 11.086-26.753 0-36.328z"],
	  "spinner": [512, 512, [], "f110", "M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z"],
	  "square": [448, 512, [], "f0c8", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"],
	  "square-full": [512, 512, [], "f45c", "M512 512H0V0h512v512z"],
	  "times": [384, 512, [], "f00d", "M323.1 441l53.9-53.9c9.4-9.4 9.4-24.5 0-33.9L279.8 256l97.2-97.2c9.4-9.4 9.4-24.5 0-33.9L323.1 71c-9.4-9.4-24.5-9.4-33.9 0L192 168.2 94.8 71c-9.4-9.4-24.5-9.4-33.9 0L7 124.9c-9.4 9.4-9.4 24.5 0 33.9l97.2 97.2L7 353.2c-9.4 9.4-9.4 24.5 0 33.9L60.9 441c9.4 9.4 24.5 9.4 33.9 0l97.2-97.2 97.2 97.2c9.3 9.3 24.5 9.3 33.9 0z"],
	  "times-circle": [512, 512, [], "f057", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"],
	  "wrench": [512, 512, [], "f0ad", "M481.156 200c9.3 0 15.12 10.155 10.325 18.124C466.295 259.992 420.419 288 368 288c-79.222 0-143.501-63.974-143.997-143.079C223.505 65.469 288.548-.001 368.002 0c52.362.001 98.196 27.949 123.4 69.743C496.24 77.766 490.523 88 481.154 88H376l-40 56 40 56h105.156zm-171.649 93.003L109.255 493.255c-24.994 24.993-65.515 24.994-90.51 0-24.993-24.994-24.993-65.516 0-90.51L218.991 202.5c16.16 41.197 49.303 74.335 90.516 90.503zM104 432c0-13.255-10.745-24-24-24s-24 10.745-24 24 10.745 24 24 24 24-10.745 24-24z"]
	};

	function attachDialogCloseHandlerWithParent$1(parent, closeHandler) {
	  var container = document.createElement("div");
	  parent.appendChild(container);
	  container.appendChild(createIcon$1("times"));
	  container.addEventListener('click', function (e) {
	    e.preventDefault();
	    e.stopPropagation();
	    closeHandler();
	  });
	}

	/**
	 * @fileoverview Zlib namespace. Zlib ã®ä»æ§ã«æºæ ããå§ç¸®ã¯ Zlib.Deflate ã§å®è£
	 * ããã¦ãã. ããã¯ Inflate ã¨ã®å±å­ãèæ®ãã¦ããçº.
	 */
	const ZLIB_STREAM_RAW_INFLATE_BUFFER_SIZE$1 = 65000;
	var Zlib$1 = {
	  Huffman: {},
	  Util: {},
	  CRC32: {}
	};
	/**
	 * Compression Method
	 * @enum {number}
	 */

	Zlib$1.CompressionMethod = {
	  DEFLATE: 8,
	  RESERVED: 15
	};
	/**
	 * @param {Object=} opt_params options.
	 * @constructor
	 */

	Zlib$1.Zip = function (opt_params) {
	  opt_params = opt_params || {};
	  /** @type {Array.<{
	   *   buffer: !(Array.<number>|Uint8Array),
	   *   option: Object,
	   *   compressed: boolean,
	   *   encrypted: boolean,
	   *   size: number,
	   *   crc32: number
	   * }>} */

	  this.files = [];
	  /** @type {(Array.<number>|Uint8Array)} */

	  this.comment = opt_params['comment'];
	  /** @type {(Array.<number>|Uint8Array)} */

	  this.password;
	};
	/**
	 * @enum {number}
	 */


	Zlib$1.Zip.CompressionMethod = {
	  STORE: 0,
	  DEFLATE: 8
	};
	/**
	 * @enum {number}
	 */

	Zlib$1.Zip.OperatingSystem = {
	  MSDOS: 0,
	  UNIX: 3,
	  MACINTOSH: 7
	};
	/**
	 * @enum {number}
	 */

	Zlib$1.Zip.Flags = {
	  ENCRYPT: 0x0001,
	  DESCRIPTOR: 0x0008,
	  UTF8: 0x0800
	};
	/**
	 * @type {Array.<number>}
	 * @const
	 */

	Zlib$1.Zip.FileHeaderSignature = [0x50, 0x4b, 0x01, 0x02];
	/**
	 * @type {Array.<number>}
	 * @const
	 */

	Zlib$1.Zip.LocalFileHeaderSignature = [0x50, 0x4b, 0x03, 0x04];
	/**
	 * @type {Array.<number>}
	 * @const
	 */

	Zlib$1.Zip.CentralDirectorySignature = [0x50, 0x4b, 0x05, 0x06];
	/**
	 * @param {Array.<number>|Uint8Array} input
	 * @param {Object=} opt_params options.
	 */

	Zlib$1.Zip.prototype.addFile = function (input, opt_params) {
	  opt_params = opt_params || {};
	  /** @type {string} */

	  var filename =  opt_params['filename'];
	  /** @type {boolean} */

	  var compressed;
	  /** @type {number} */

	  var size = input.length;
	  /** @type {number} */

	  var crc32 = 0;

	  if ( input instanceof Array) {
	    input = new Uint8Array(input);
	  } // default


	  if (typeof opt_params['compressionMethod'] !== 'number') {
	    opt_params['compressionMethod'] = Zlib$1.Zip.CompressionMethod.DEFLATE;
	  } // ãã®å ´ã§å§ç¸®ããå ´å


	  if (opt_params['compress']) {
	    switch (opt_params['compressionMethod']) {
	      case Zlib$1.Zip.CompressionMethod.STORE:
	        break;

	      case Zlib$1.Zip.CompressionMethod.DEFLATE:
	        crc32 = Zlib$1.CRC32.calc(input);
	        input = this.deflateWithOption(input, opt_params);
	        compressed = true;
	        break;

	      default:
	        throw new Error('unknown compression method:' + opt_params['compressionMethod']);
	    }
	  }

	  this.files.push({
	    buffer: input,
	    option: opt_params,
	    compressed: compressed,
	    encrypted: false,
	    size: size,
	    crc32: crc32
	  });
	};
	/**
	 * @param {(Array.<number>|Uint8Array)} password
	 */


	Zlib$1.Zip.prototype.setPassword = function (password) {
	  this.password = password;
	};

	Zlib$1.Zip.prototype.compress = function () {
	  /** @type {Array.<{
	   *   buffer: !(Array.<number>|Uint8Array),
	   *   option: Object,
	   *   compressed: boolean,
	   *   encrypted: boolean,
	   *   size: number,
	   *   crc32: number
	   * }>} */
	  var files = this.files;
	  /** @type {{
	   *   buffer: !(Array.<number>|Uint8Array),
	   *   option: Object,
	   *   compressed: boolean,
	   *   encrypted: boolean,
	   *   size: number,
	   *   crc32: number
	   * }} */

	  var file;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var output;
	  /** @type {number} */

	  var op1;
	  /** @type {number} */

	  var op2;
	  /** @type {number} */

	  var op3;
	  /** @type {number} */

	  var localFileSize = 0;
	  /** @type {number} */

	  var centralDirectorySize = 0;
	  /** @type {number} */

	  var endOfCentralDirectorySize;
	  /** @type {number} */

	  var offset;
	  /** @type {number} */

	  var needVersion;
	  /** @type {number} */

	  var flags;
	  /** @type {Zlib.Zip.CompressionMethod} */

	  var compressionMethod;
	  /** @type {Date} */

	  var date;
	  /** @type {number} */

	  var crc32;
	  /** @type {number} */

	  var size;
	  /** @type {number} */

	  var plainSize;
	  /** @type {number} */

	  var filenameLength;
	  /** @type {number} */

	  var extraFieldLength;
	  /** @type {number} */

	  var commentLength;
	  /** @type {(Array.<number>|Uint8Array)} */

	  var filename;
	  /** @type {(Array.<number>|Uint8Array)} */

	  var extraField;
	  /** @type {(Array.<number>|Uint8Array)} */

	  var comment;
	  /** @type {(Array.<number>|Uint8Array)} */

	  var buffer;
	  /** @type {*} */

	  var tmp;
	  /** @type {Array.<number>|Uint32Array|Object} */

	  var key;
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il;
	  /** @type {number} */

	  var j;
	  /** @type {number} */

	  var jl; // ãã¡ã¤ã«ã®å§ç¸®

	  for (i = 0, il = files.length; i < il; ++i) {
	    file = files[i];
	    filenameLength = file.option['filename'] ? file.option['filename'].length : 0;
	    extraFieldLength = file.option['extraField'] ? file.option['extraField'].length : 0;
	    commentLength = file.option['comment'] ? file.option['comment'].length : 0; // å§ç¸®ããã¦ããªãã£ããå§ç¸®

	    if (!file.compressed) {
	      // å§ç¸®åã« CRC32 ã®è¨ç®ããã¦ãã
	      file.crc32 = Zlib$1.CRC32.calc(file.buffer);

	      switch (file.option['compressionMethod']) {
	        case Zlib$1.Zip.CompressionMethod.STORE:
	          break;

	        case Zlib$1.Zip.CompressionMethod.DEFLATE:
	          file.buffer = this.deflateWithOption(file.buffer, file.option);
	          file.compressed = true;
	          break;

	        default:
	          throw new Error('unknown compression method:' + file.option['compressionMethod']);
	      }
	    } // encryption


	    if (file.option['password'] !== void 0 || this.password !== void 0) {
	      // init encryption
	      key = this.createEncryptionKey(file.option['password'] || this.password); // add header

	      buffer = file.buffer;

	      {
	        tmp = new Uint8Array(buffer.length + 12);
	        tmp.set(buffer, 12);
	        buffer = tmp;
	      }

	      for (j = 0; j < 12; ++j) {
	        buffer[j] = this.encode(key, i === 11 ? file.crc32 & 0xff : Math.random() * 256 | 0);
	      } // data encryption


	      for (jl = buffer.length; j < jl; ++j) {
	        buffer[j] = this.encode(key, buffer[j]);
	      }

	      file.buffer = buffer;
	    } // å¿è¦ãããã¡ãµã¤ãºã®è¨ç®


	    localFileSize += // local file header
	    30 + filenameLength + // file data
	    file.buffer.length;
	    centralDirectorySize += // file header
	    46 + filenameLength + commentLength;
	  } // end of central directory


	  endOfCentralDirectorySize = 22 + (this.comment ? this.comment.length : 0);
	  output = new ( Uint8Array )(localFileSize + centralDirectorySize + endOfCentralDirectorySize);
	  op1 = 0;
	  op2 = localFileSize;
	  op3 = op2 + centralDirectorySize; // ãã¡ã¤ã«ã®å§ç¸®

	  for (i = 0, il = files.length; i < il; ++i) {
	    file = files[i];
	    filenameLength = file.option['filename'] ? file.option['filename'].length : 0;
	    extraFieldLength = 0; // TODO

	    commentLength = file.option['comment'] ? file.option['comment'].length : 0; //-------------------------------------------------------------------------
	    // local file header & file header
	    //-------------------------------------------------------------------------

	    offset = op1; // signature
	    // local file header

	    output[op1++] = Zlib$1.Zip.LocalFileHeaderSignature[0];
	    output[op1++] = Zlib$1.Zip.LocalFileHeaderSignature[1];
	    output[op1++] = Zlib$1.Zip.LocalFileHeaderSignature[2];
	    output[op1++] = Zlib$1.Zip.LocalFileHeaderSignature[3]; // file header

	    output[op2++] = Zlib$1.Zip.FileHeaderSignature[0];
	    output[op2++] = Zlib$1.Zip.FileHeaderSignature[1];
	    output[op2++] = Zlib$1.Zip.FileHeaderSignature[2];
	    output[op2++] = Zlib$1.Zip.FileHeaderSignature[3]; // compressor info

	    needVersion = 20;
	    output[op2++] = needVersion & 0xff;
	    output[op2++] =
	    /** @type {Zlib.Zip.OperatingSystem} */
	    file.option['os'] || Zlib$1.Zip.OperatingSystem.MSDOS; // need version

	    output[op1++] = output[op2++] = needVersion & 0xff;
	    output[op1++] = output[op2++] = needVersion >> 8 & 0xff; // general purpose bit flag

	    flags = 0;

	    if (file.option['password'] || this.password) {
	      flags |= Zlib$1.Zip.Flags.ENCRYPT;
	    }

	    output[op1++] = output[op2++] = flags & 0xff;
	    output[op1++] = output[op2++] = flags >> 8 & 0xff; // compression method

	    compressionMethod =
	    /** @type {Zlib.Zip.CompressionMethod} */
	    file.option['compressionMethod'];
	    output[op1++] = output[op2++] = compressionMethod & 0xff;
	    output[op1++] = output[op2++] = compressionMethod >> 8 & 0xff; // date

	    date =
	    /** @type {(Date|undefined)} */
	    file.option['date'] || new Date();
	    output[op1++] = output[op2++] = (date.getMinutes() & 0x7) << 5 | (date.getSeconds() / 2 | 0);
	    output[op1++] = output[op2++] = date.getHours() << 3 | date.getMinutes() >> 3; //

	    output[op1++] = output[op2++] = (date.getMonth() + 1 & 0x7) << 5 | date.getDate();
	    output[op1++] = output[op2++] = (date.getFullYear() - 1980 & 0x7f) << 1 | date.getMonth() + 1 >> 3; // CRC-32

	    crc32 = file.crc32;
	    output[op1++] = output[op2++] = crc32 & 0xff;
	    output[op1++] = output[op2++] = crc32 >> 8 & 0xff;
	    output[op1++] = output[op2++] = crc32 >> 16 & 0xff;
	    output[op1++] = output[op2++] = crc32 >> 24 & 0xff; // compressed size

	    size = file.buffer.length;
	    output[op1++] = output[op2++] = size & 0xff;
	    output[op1++] = output[op2++] = size >> 8 & 0xff;
	    output[op1++] = output[op2++] = size >> 16 & 0xff;
	    output[op1++] = output[op2++] = size >> 24 & 0xff; // uncompressed size

	    plainSize = file.size;
	    output[op1++] = output[op2++] = plainSize & 0xff;
	    output[op1++] = output[op2++] = plainSize >> 8 & 0xff;
	    output[op1++] = output[op2++] = plainSize >> 16 & 0xff;
	    output[op1++] = output[op2++] = plainSize >> 24 & 0xff; // filename length

	    output[op1++] = output[op2++] = filenameLength & 0xff;
	    output[op1++] = output[op2++] = filenameLength >> 8 & 0xff; // extra field length

	    output[op1++] = output[op2++] = extraFieldLength & 0xff;
	    output[op1++] = output[op2++] = extraFieldLength >> 8 & 0xff; // file comment length

	    output[op2++] = commentLength & 0xff;
	    output[op2++] = commentLength >> 8 & 0xff; // disk number start

	    output[op2++] = 0;
	    output[op2++] = 0; // internal file attributes

	    output[op2++] = 0;
	    output[op2++] = 0; // external file attributes

	    output[op2++] = 0;
	    output[op2++] = 0;
	    output[op2++] = 0;
	    output[op2++] = 0; // relative offset of local header

	    output[op2++] = offset & 0xff;
	    output[op2++] = offset >> 8 & 0xff;
	    output[op2++] = offset >> 16 & 0xff;
	    output[op2++] = offset >> 24 & 0xff; // filename

	    filename = file.option['filename'];

	    if (filename) {
	      {
	        output.set(filename, op1);
	        output.set(filename, op2);
	        op1 += filenameLength;
	        op2 += filenameLength;
	      }
	    } // extra field


	    extraField = file.option['extraField'];

	    if (extraField) {
	      {
	        output.set(extraField, op1);
	        output.set(extraField, op2);
	        op1 += extraFieldLength;
	        op2 += extraFieldLength;
	      }
	    } // comment


	    comment = file.option['comment'];

	    if (comment) {
	      {
	        output.set(comment, op2);
	        op2 += commentLength;
	      }
	    } //-------------------------------------------------------------------------
	    // file data
	    //-------------------------------------------------------------------------


	    {
	      output.set(file.buffer, op1);
	      op1 += file.buffer.length;
	    }
	  } //-------------------------------------------------------------------------
	  // end of central directory
	  //-------------------------------------------------------------------------
	  // signature


	  output[op3++] = Zlib$1.Zip.CentralDirectorySignature[0];
	  output[op3++] = Zlib$1.Zip.CentralDirectorySignature[1];
	  output[op3++] = Zlib$1.Zip.CentralDirectorySignature[2];
	  output[op3++] = Zlib$1.Zip.CentralDirectorySignature[3]; // number of this disk

	  output[op3++] = 0;
	  output[op3++] = 0; // number of the disk with the start of the central directory

	  output[op3++] = 0;
	  output[op3++] = 0; // total number of entries in the central directory on this disk

	  output[op3++] = il & 0xff;
	  output[op3++] = il >> 8 & 0xff; // total number of entries in the central directory

	  output[op3++] = il & 0xff;
	  output[op3++] = il >> 8 & 0xff; // size of the central directory

	  output[op3++] = centralDirectorySize & 0xff;
	  output[op3++] = centralDirectorySize >> 8 & 0xff;
	  output[op3++] = centralDirectorySize >> 16 & 0xff;
	  output[op3++] = centralDirectorySize >> 24 & 0xff; // offset of start of central directory with respect to the starting disk number

	  output[op3++] = localFileSize & 0xff;
	  output[op3++] = localFileSize >> 8 & 0xff;
	  output[op3++] = localFileSize >> 16 & 0xff;
	  output[op3++] = localFileSize >> 24 & 0xff; // .ZIP file comment length

	  commentLength = this.comment ? this.comment.length : 0;
	  output[op3++] = commentLength & 0xff;
	  output[op3++] = commentLength >> 8 & 0xff; // .ZIP file comment

	  if (this.comment) {
	    {
	      output.set(this.comment, op3);
	      op3 += commentLength;
	    }
	  }

	  return output;
	};
	/**
	 * @param {!(Array.<number>|Uint8Array)} input
	 * @param {Object=} opt_params options.
	 * @return {!(Array.<number>|Uint8Array)}
	 */


	Zlib$1.Zip.prototype.deflateWithOption = function (input, opt_params) {
	  /** @type {Zlib.RawDeflate} */
	  var deflator = new Zlib$1.RawDeflate(input, opt_params['deflateOption']);
	  return deflator.compress();
	};
	/**
	 * @param {(Array.<number>|Uint32Array)} key
	 * @return {number}
	 */


	Zlib$1.Zip.prototype.getByte = function (key) {
	  /** @type {number} */
	  var tmp = key[2] & 0xffff | 2;
	  return tmp * (tmp ^ 1) >> 8 & 0xff;
	};
	/**
	 * @param {(Array.<number>|Uint32Array|Object)} key
	 * @param {number} n
	 * @return {number}
	 */


	Zlib$1.Zip.prototype.encode = function (key, n) {
	  /** @type {number} */
	  var tmp = this.getByte(
	  /** @type {(Array.<number>|Uint32Array)} */
	  key);
	  this.updateKeys(
	  /** @type {(Array.<number>|Uint32Array)} */
	  key, n);
	  return tmp ^ n;
	};
	/**
	 * @param {(Array.<number>|Uint32Array)} key
	 * @param {number} n
	 */


	Zlib$1.Zip.prototype.updateKeys = function (key, n) {
	  key[0] = Zlib$1.CRC32.single(key[0], n);
	  key[1] = (((key[1] + (key[0] & 0xff)) * 20173 >>> 0) * 6681 >>> 0) + 1 >>> 0;
	  key[2] = Zlib$1.CRC32.single(key[2], key[1] >>> 24);
	};
	/**
	 * @param {(Array.<number>|Uint8Array)} password
	 * @return {!(Array.<number>|Uint32Array|Object)}
	 */


	Zlib$1.Zip.prototype.createEncryptionKey = function (password) {
	  /** @type {!(Array.<number>|Uint32Array)} */
	  var key = [305419896, 591751049, 878082192];
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il;

	  {
	    key = new Uint32Array(key);
	  }

	  for (i = 0, il = password.length; i < il; ++i) {
	    this.updateKeys(key, password[i] & 0xff);
	  }

	  return key;
	};
	/**
	 * build huffman table from length list.
	 * @param {!(Array.<number>|Uint8Array)} lengths length list.
	 * @return {!Array} huffman table.
	 */


	Zlib$1.Huffman.buildHuffmanTable = function (lengths) {
	  /** @type {number} length list size. */
	  var listSize = lengths.length;
	  /** @type {number} max code length for table size. */

	  var maxCodeLength = 0;
	  /** @type {number} min code length for table size. */

	  var minCodeLength = Number.POSITIVE_INFINITY;
	  /** @type {number} table size. */

	  var size;
	  /** @type {!(Array|Uint8Array)} huffman code table. */

	  var table;
	  /** @type {number} bit length. */

	  var bitLength;
	  /** @type {number} huffman code. */

	  var code;
	  /**
	   * ãµã¤ãºã 2^maxlength åã®ãã¼ãã«ãåããããã®ã¹ã­ããé·.
	   * @type {number} skip length for table filling.
	   */

	  var skip;
	  /** @type {number} reversed code. */

	  var reversed;
	  /** @type {number} reverse temp. */

	  var rtemp;
	  /** @type {number} loop counter. */

	  var i;
	  /** @type {number} loop limit. */

	  var il;
	  /** @type {number} loop counter. */

	  var j;
	  /** @type {number} table value. */

	  var value; // Math.max ã¯éãã®ã§æé·ã®å¤ã¯ for-loop ã§åå¾ãã

	  for (i = 0, il = listSize; i < il; ++i) {
	    if (lengths[i] > maxCodeLength) {
	      maxCodeLength = lengths[i];
	    }

	    if (lengths[i] < minCodeLength) {
	      minCodeLength = lengths[i];
	    }
	  }

	  size = 1 << maxCodeLength;
	  table = new ( Uint32Array )(size); // ãããé·ã®ç­ãé ãããããã³ç¬¦å·ãå²ãå½ã¦ã

	  for (bitLength = 1, code = 0, skip = 2; bitLength <= maxCodeLength;) {
	    for (i = 0; i < listSize; ++i) {
	      if (lengths[i] === bitLength) {
	        // ããããªã¼ãã¼ãéã«ãªããããããé·åä¸¦ã³ãåè»¢ãã
	        for (reversed = 0, rtemp = code, j = 0; j < bitLength; ++j) {
	          reversed = reversed << 1 | rtemp & 1;
	          rtemp >>= 1;
	        } // æå¤§ãããé·ããã¨ã«ãã¼ãã«ãä½ãããã
	        // æå¤§ãããé·ä»¥å¤ã§ã¯ 0 / 1 ã©ã¡ãã§ãè¯ãç®æãã§ãã
	        // ãã®ã©ã¡ãã§ãè¯ãå ´æã¯åãå¤ã§åãããã¨ã§
	        // æ¬æ¥ã®ãããé·ä»¥ä¸ã®ãããæ°åå¾ãã¦ãåé¡ãèµ·ãããªãããã«ãã


	        value = bitLength << 16 | i;

	        for (j = reversed; j < size; j += skip) {
	          table[j] = value;
	        }

	        ++code;
	      }
	    } // æ¬¡ã®ãããé·ã¸


	    ++bitLength;
	    code <<= 1;
	    skip <<= 1;
	  }

	  return [table, maxCodeLength, minCodeLength];
	}; //-----------------------------------------------------------------------------

	/** @define {number} buffer block size. */


	var ZLIB_RAW_INFLATE_BUFFER_SIZE$1 = 0x8000; // [ 0x8000 >= ZLIB_BUFFER_BLOCK_SIZE ]
	//-----------------------------------------------------------------------------

	var buildHuffmanTable$1 = Zlib$1.Huffman.buildHuffmanTable;
	/**
	 * @constructor
	 * @param {!(Uint8Array|Array.<number>)} input input buffer.
	 * @param {Object} opt_params option parameter.
	 *
	 * opt_params ã¯ä»¥ä¸ã®ãã­ããã£ãæå®ããäºãã§ãã¾ãã
	 *   - index: input buffer ã® deflate ã³ã³ããã®éå§ä½ç½®.
	 *   - blockSize: ãããã¡ã®ãã­ãã¯ãµã¤ãº.
	 *   - bufferType: Zlib.RawInflate.BufferType ã®å¤ã«ãã£ã¦ãããã¡ã®ç®¡çæ¹æ³ãæå®ãã.
	 *   - resize: ç¢ºä¿ãããããã¡ãå®éã®å¤§ããããå¤§ããã£ãå ´åã«åãè©°ãã.
	 */

	Zlib$1.RawInflate = function (input, opt_params) {
	  /** @type {!(Array.<number>|Uint8Array)} inflated buffer */
	  this.buffer;
	  /** @type {!Array.<(Array.<number>|Uint8Array)>} */

	  this.blocks = [];
	  /** @type {number} block size. */

	  this.bufferSize = ZLIB_RAW_INFLATE_BUFFER_SIZE$1;
	  /** @type {!number} total output buffer pointer. */

	  this.totalpos = 0;
	  /** @type {!number} input buffer pointer. */

	  this.ip = 0;
	  /** @type {!number} bit stream reader buffer. */

	  this.bitsbuf = 0;
	  /** @type {!number} bit stream reader buffer size. */

	  this.bitsbuflen = 0;
	  /** @type {!(Array.<number>|Uint8Array)} input buffer. */

	  this.input =  new Uint8Array(input) ;
	  /** @type {!(Uint8Array|Array.<number>)} output buffer. */

	  this.output;
	  /** @type {!number} output buffer pointer. */

	  this.op;
	  /** @type {boolean} is final block flag. */

	  this.bfinal = false;
	  /** @type {Zlib.RawInflate.BufferType} buffer management. */

	  this.bufferType = Zlib$1.RawInflate.BufferType.ADAPTIVE;
	  /** @type {boolean} resize flag for memory size optimization. */

	  this.resize = false; // option parameters

	  if (opt_params || !(opt_params = {})) {
	    if (opt_params['index']) {
	      this.ip = opt_params['index'];
	    }

	    if (opt_params['bufferSize']) {
	      this.bufferSize = opt_params['bufferSize'];
	    }

	    if (opt_params['bufferType']) {
	      this.bufferType = opt_params['bufferType'];
	    }

	    if (opt_params['resize']) {
	      this.resize = opt_params['resize'];
	    }
	  } // initialize


	  switch (this.bufferType) {
	    case Zlib$1.RawInflate.BufferType.BLOCK:
	      this.op = Zlib$1.RawInflate.MaxBackwardLength;
	      this.output = new ( Uint8Array )(Zlib$1.RawInflate.MaxBackwardLength + this.bufferSize + Zlib$1.RawInflate.MaxCopyLength);
	      break;

	    case Zlib$1.RawInflate.BufferType.ADAPTIVE:
	      this.op = 0;
	      this.output = new ( Uint8Array )(this.bufferSize);
	      break;

	    default:
	      throw new Error('invalid inflate mode');
	  }
	};
	/**
	 * @enum {number}
	 */


	Zlib$1.RawInflate.BufferType = {
	  BLOCK: 0,
	  ADAPTIVE: 1
	};
	/**
	 * decompress.
	 * @return {!(Uint8Array|Array.<number>)} inflated buffer.
	 */

	Zlib$1.RawInflate.prototype.decompress = function () {
	  while (!this.bfinal) {
	    this.parseBlock();
	  }

	  switch (this.bufferType) {
	    case Zlib$1.RawInflate.BufferType.BLOCK:
	      return this.concatBufferBlock();

	    case Zlib$1.RawInflate.BufferType.ADAPTIVE:
	      return this.concatBufferDynamic();

	    default:
	      throw new Error('invalid inflate mode');
	  }
	};
	/**
	 * @const
	 * @type {number} max backward length for LZ77.
	 */


	Zlib$1.RawInflate.MaxBackwardLength = 32768;
	/**
	 * @const
	 * @type {number} max copy length for LZ77.
	 */

	Zlib$1.RawInflate.MaxCopyLength = 258;
	/**
	 * huffman order
	 * @const
	 * @type {!(Array.<number>|Uint8Array)}
	 */

	Zlib$1.RawInflate.Order = function (table) {
	  return  new Uint16Array(table) ;
	}([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
	/**
	 * huffman length code table.
	 * @const
	 * @type {!(Array.<number>|Uint16Array)}
	 */


	Zlib$1.RawInflate.LengthCodeTable = function (table) {
	  return  new Uint16Array(table) ;
	}([0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b, 0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3, 0x00e3, 0x0102, 0x0102, 0x0102]);
	/**
	 * huffman length extra-bits table.
	 * @const
	 * @type {!(Array.<number>|Uint8Array)}
	 */


	Zlib$1.RawInflate.LengthExtraTable = function (table) {
	  return  new Uint8Array(table) ;
	}([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);
	/**
	 * huffman dist code table.
	 * @const
	 * @type {!(Array.<number>|Uint16Array)}
	 */


	Zlib$1.RawInflate.DistCodeTable = function (table) {
	  return  new Uint16Array(table) ;
	}([0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011, 0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181, 0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001, 0x3001, 0x4001, 0x6001]);
	/**
	 * huffman dist extra-bits table.
	 * @const
	 * @type {!(Array.<number>|Uint8Array)}
	 */


	Zlib$1.RawInflate.DistExtraTable = function (table) {
	  return  new Uint8Array(table) ;
	}([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
	/**
	 * fixed huffman length code table
	 * @const
	 * @type {!Array}
	 */


	Zlib$1.RawInflate.FixedLiteralLengthTable = function (table) {
	  return table;
	}(function () {
	  var lengths = new ( Uint8Array )(288);
	  var i, il;

	  for (i = 0, il = lengths.length; i < il; ++i) {
	    lengths[i] = i <= 143 ? 8 : i <= 255 ? 9 : i <= 279 ? 7 : 8;
	  }

	  return buildHuffmanTable$1(lengths);
	}());
	/**
	 * fixed huffman distance code table
	 * @const
	 * @type {!Array}
	 */


	Zlib$1.RawInflate.FixedDistanceTable = function (table) {
	  return table;
	}(function () {
	  var lengths = new ( Uint8Array )(30);
	  var i, il;

	  for (i = 0, il = lengths.length; i < il; ++i) {
	    lengths[i] = 5;
	  }

	  return buildHuffmanTable$1(lengths);
	}());
	/**
	 * parse deflated block.
	 */


	Zlib$1.RawInflate.prototype.parseBlock = function () {
	  /** @type {number} header */
	  var hdr = this.readBits(3); // BFINAL

	  if (hdr & 0x1) {
	    this.bfinal = true;
	  } // BTYPE


	  hdr >>>= 1;

	  switch (hdr) {
	    // uncompressed
	    case 0:
	      this.parseUncompressedBlock();
	      break;
	    // fixed huffman

	    case 1:
	      this.parseFixedHuffmanBlock();
	      break;
	    // dynamic huffman

	    case 2:
	      this.parseDynamicHuffmanBlock();
	      break;
	    // reserved or other

	    default:
	      throw new Error('unknown BTYPE: ' + hdr);
	  }
	};
	/**
	 * read inflate bits
	 * @param {number} length bits length.
	 * @return {number} read bits.
	 */


	Zlib$1.RawInflate.prototype.readBits = function (length) {
	  var bitsbuf = this.bitsbuf;
	  var bitsbuflen = this.bitsbuflen;
	  var input = this.input;
	  var ip = this.ip;
	  /** @type {number} */

	  var inputLength = input.length;
	  /** @type {number} input and output byte. */

	  var octet; // input byte

	  if (ip + (length - bitsbuflen + 7 >> 3) >= inputLength) {
	    throw new Error('input buffer is broken');
	  } // not enough buffer


	  while (bitsbuflen < length) {
	    bitsbuf |= input[ip++] << bitsbuflen;
	    bitsbuflen += 8;
	  } // output byte


	  octet = bitsbuf &
	  /* MASK */
	  (1 << length) - 1;
	  bitsbuf >>>= length;
	  bitsbuflen -= length;
	  this.bitsbuf = bitsbuf;
	  this.bitsbuflen = bitsbuflen;
	  this.ip = ip;
	  return octet;
	};
	/**
	 * read huffman code using table
	 * @param {!(Array.<number>|Uint8Array|Uint16Array)} table huffman code table.
	 * @return {number} huffman code.
	 */


	Zlib$1.RawInflate.prototype.readCodeByTable = function (table) {
	  var bitsbuf = this.bitsbuf;
	  var bitsbuflen = this.bitsbuflen;
	  var input = this.input;
	  var ip = this.ip;
	  /** @type {number} */

	  var inputLength = input.length;
	  /** @type {!(Array.<number>|Uint8Array)} huffman code table */

	  var codeTable = table[0];
	  /** @type {number} */

	  var maxCodeLength = table[1];
	  /** @type {number} code length & code (16bit, 16bit) */

	  var codeWithLength;
	  /** @type {number} code bits length */

	  var codeLength; // not enough buffer

	  while (bitsbuflen < maxCodeLength) {
	    if (ip >= inputLength) {
	      break;
	    }

	    bitsbuf |= input[ip++] << bitsbuflen;
	    bitsbuflen += 8;
	  } // read max length


	  codeWithLength = codeTable[bitsbuf & (1 << maxCodeLength) - 1];
	  codeLength = codeWithLength >>> 16;

	  if (codeLength > bitsbuflen) {
	    throw new Error('invalid code length: ' + codeLength);
	  }

	  this.bitsbuf = bitsbuf >> codeLength;
	  this.bitsbuflen = bitsbuflen - codeLength;
	  this.ip = ip;
	  return codeWithLength & 0xffff;
	};
	/**
	 * parse uncompressed block.
	 */


	Zlib$1.RawInflate.prototype.parseUncompressedBlock = function () {
	  var input = this.input;
	  var ip = this.ip;
	  var output = this.output;
	  var op = this.op;
	  /** @type {number} */

	  var inputLength = input.length;
	  /** @type {number} block length */

	  var len;
	  /** @type {number} number for check block length */

	  var nlen;
	  /** @type {number} output buffer length */

	  var olength = output.length;
	  /** @type {number} copy counter */

	  var preCopy; // skip buffered header bits

	  this.bitsbuf = 0;
	  this.bitsbuflen = 0; // len

	  if (ip + 1 >= inputLength) {
	    throw new Error('invalid uncompressed block header: LEN');
	  }

	  len = input[ip++] | input[ip++] << 8; // nlen

	  if (ip + 1 >= inputLength) {
	    throw new Error('invalid uncompressed block header: NLEN');
	  }

	  nlen = input[ip++] | input[ip++] << 8; // check len & nlen

	  if (len === ~nlen) {
	    throw new Error('invalid uncompressed block header: length verify');
	  } // check size


	  if (ip + len > input.length) {
	    throw new Error('input buffer is broken');
	  } // expand buffer


	  switch (this.bufferType) {
	    case Zlib$1.RawInflate.BufferType.BLOCK:
	      // pre copy
	      while (op + len > output.length) {
	        preCopy = olength - op;
	        len -= preCopy;

	        {
	          output.set(input.subarray(ip, ip + preCopy), op);
	          op += preCopy;
	          ip += preCopy;
	        }

	        this.op = op;
	        output = this.expandBufferBlock();
	        op = this.op;
	      }

	      break;

	    case Zlib$1.RawInflate.BufferType.ADAPTIVE:
	      while (op + len > output.length) {
	        output = this.expandBufferAdaptive({
	          fixRatio: 2
	        });
	      }

	      break;

	    default:
	      throw new Error('invalid inflate mode');
	  } // copy


	  {
	    output.set(input.subarray(ip, ip + len), op);
	    op += len;
	    ip += len;
	  }

	  this.ip = ip;
	  this.op = op;
	  this.output = output;
	};
	/**
	 * parse fixed huffman block.
	 */


	Zlib$1.RawInflate.prototype.parseFixedHuffmanBlock = function () {
	  switch (this.bufferType) {
	    case Zlib$1.RawInflate.BufferType.ADAPTIVE:
	      this.decodeHuffmanAdaptive(Zlib$1.RawInflate.FixedLiteralLengthTable, Zlib$1.RawInflate.FixedDistanceTable);
	      break;

	    case Zlib$1.RawInflate.BufferType.BLOCK:
	      this.decodeHuffmanBlock(Zlib$1.RawInflate.FixedLiteralLengthTable, Zlib$1.RawInflate.FixedDistanceTable);
	      break;

	    default:
	      throw new Error('invalid inflate mode');
	  }
	};
	/**
	 * parse dynamic huffman block.
	 */


	Zlib$1.RawInflate.prototype.parseDynamicHuffmanBlock = function () {
	  /** @type {number} number of literal and length codes. */
	  var hlit = this.readBits(5) + 257;
	  /** @type {number} number of distance codes. */

	  var hdist = this.readBits(5) + 1;
	  /** @type {number} number of code lengths. */

	  var hclen = this.readBits(4) + 4;
	  /** @type {!(Uint8Array|Array.<number>)} code lengths. */

	  var codeLengths = new ( Uint8Array )(Zlib$1.RawInflate.Order.length);
	  /** @type {!Array} code lengths table. */

	  var codeLengthsTable;
	  /** @type {!(Uint8Array|Array.<number>)} literal and length code table. */

	  var litlenTable;
	  /** @type {!(Uint8Array|Array.<number>)} distance code table. */

	  var distTable;
	  /** @type {!(Uint8Array|Array.<number>)} code length table. */

	  var lengthTable;
	  /** @type {number} */

	  var code;
	  /** @type {number} */

	  var prev;
	  /** @type {number} */

	  var repeat;
	  /** @type {number} loop counter. */

	  var i;
	  /** @type {number} loop limit. */

	  var il; // decode code lengths

	  for (i = 0; i < hclen; ++i) {
	    codeLengths[Zlib$1.RawInflate.Order[i]] = this.readBits(3);
	  }


	  codeLengthsTable = buildHuffmanTable$1(codeLengths);
	  lengthTable = new ( Uint8Array )(hlit + hdist);

	  for (i = 0, il = hlit + hdist; i < il;) {
	    code = this.readCodeByTable(codeLengthsTable);

	    switch (code) {
	      case 16:
	        repeat = 3 + this.readBits(2);

	        while (repeat--) {
	          lengthTable[i++] = prev;
	        }

	        break;

	      case 17:
	        repeat = 3 + this.readBits(3);

	        while (repeat--) {
	          lengthTable[i++] = 0;
	        }

	        prev = 0;
	        break;

	      case 18:
	        repeat = 11 + this.readBits(7);

	        while (repeat--) {
	          lengthTable[i++] = 0;
	        }

	        prev = 0;
	        break;

	      default:
	        lengthTable[i++] = code;
	        prev = code;
	        break;
	    }
	  }

	  litlenTable =  buildHuffmanTable$1(lengthTable.subarray(0, hlit)) ;
	  distTable =  buildHuffmanTable$1(lengthTable.subarray(hlit)) ;

	  switch (this.bufferType) {
	    case Zlib$1.RawInflate.BufferType.ADAPTIVE:
	      this.decodeHuffmanAdaptive(litlenTable, distTable);
	      break;

	    case Zlib$1.RawInflate.BufferType.BLOCK:
	      this.decodeHuffmanBlock(litlenTable, distTable);
	      break;

	    default:
	      throw new Error('invalid inflate mode');
	  }
	};
	/**
	 * decode huffman code
	 * @param {!(Array.<number>|Uint16Array)} litlen literal and length code table.
	 * @param {!(Array.<number>|Uint8Array)} dist distination code table.
	 */


	Zlib$1.RawInflate.prototype.decodeHuffmanBlock = function (litlen, dist) {
	  var output = this.output;
	  var op = this.op;
	  this.currentLitlenTable = litlen;
	  /** @type {number} output position limit. */

	  var olength = output.length - Zlib$1.RawInflate.MaxCopyLength;
	  /** @type {number} huffman code. */

	  var code;
	  /** @type {number} table index. */

	  var ti;
	  /** @type {number} huffman code distination. */

	  var codeDist;
	  /** @type {number} huffman code length. */

	  var codeLength;
	  var lengthCodeTable = Zlib$1.RawInflate.LengthCodeTable;
	  var lengthExtraTable = Zlib$1.RawInflate.LengthExtraTable;
	  var distCodeTable = Zlib$1.RawInflate.DistCodeTable;
	  var distExtraTable = Zlib$1.RawInflate.DistExtraTable;

	  while ((code = this.readCodeByTable(litlen)) !== 256) {
	    // literal
	    if (code < 256) {
	      if (op >= olength) {
	        this.op = op;
	        output = this.expandBufferBlock();
	        op = this.op;
	      }

	      output[op++] = code;
	      continue;
	    } // length code


	    ti = code - 257;
	    codeLength = lengthCodeTable[ti];

	    if (lengthExtraTable[ti] > 0) {
	      codeLength += this.readBits(lengthExtraTable[ti]);
	    } // dist code


	    code = this.readCodeByTable(dist);
	    codeDist = distCodeTable[code];

	    if (distExtraTable[code] > 0) {
	      codeDist += this.readBits(distExtraTable[code]);
	    } // lz77 decode


	    if (op >= olength) {
	      this.op = op;
	      output = this.expandBufferBlock();
	      op = this.op;
	    }

	    while (codeLength--) {
	      output[op] = output[op++ - codeDist];
	    }
	  }

	  while (this.bitsbuflen >= 8) {
	    this.bitsbuflen -= 8;
	    this.ip--;
	  }

	  this.op = op;
	};
	/**
	 * decode huffman code (adaptive)
	 * @param {!(Array.<number>|Uint16Array)} litlen literal and length code table.
	 * @param {!(Array.<number>|Uint8Array)} dist distination code table.
	 */


	Zlib$1.RawInflate.prototype.decodeHuffmanAdaptive = function (litlen, dist) {
	  var output = this.output;
	  var op = this.op;
	  this.currentLitlenTable = litlen;
	  /** @type {number} output position limit. */

	  var olength = output.length;
	  /** @type {number} huffman code. */

	  var code;
	  /** @type {number} table index. */

	  var ti;
	  /** @type {number} huffman code distination. */

	  var codeDist;
	  /** @type {number} huffman code length. */

	  var codeLength;
	  var lengthCodeTable = Zlib$1.RawInflate.LengthCodeTable;
	  var lengthExtraTable = Zlib$1.RawInflate.LengthExtraTable;
	  var distCodeTable = Zlib$1.RawInflate.DistCodeTable;
	  var distExtraTable = Zlib$1.RawInflate.DistExtraTable;

	  while ((code = this.readCodeByTable(litlen)) !== 256) {
	    // literal
	    if (code < 256) {
	      if (op >= olength) {
	        output = this.expandBufferAdaptive();
	        olength = output.length;
	      }

	      output[op++] = code;
	      continue;
	    } // length code


	    ti = code - 257;
	    codeLength = lengthCodeTable[ti];

	    if (lengthExtraTable[ti] > 0) {
	      codeLength += this.readBits(lengthExtraTable[ti]);
	    } // dist code


	    code = this.readCodeByTable(dist);
	    codeDist = distCodeTable[code];

	    if (distExtraTable[code] > 0) {
	      codeDist += this.readBits(distExtraTable[code]);
	    } // lz77 decode


	    if (op + codeLength > olength) {
	      output = this.expandBufferAdaptive();
	      olength = output.length;
	    }

	    while (codeLength--) {
	      output[op] = output[op++ - codeDist];
	    }
	  }

	  while (this.bitsbuflen >= 8) {
	    this.bitsbuflen -= 8;
	    this.ip--;
	  }

	  this.op = op;
	};
	/**
	 * expand output buffer.
	 * @param {Object=} opt_param option parameters.
	 * @return {!(Array.<number>|Uint8Array)} output buffer.
	 */


	Zlib$1.RawInflate.prototype.expandBufferBlock = function (opt_param) {
	  /** @type {!(Array.<number>|Uint8Array)} store buffer. */
	  var buffer = new ( Uint8Array )(this.op - Zlib$1.RawInflate.MaxBackwardLength);
	  /** @type {number} backward base point */

	  var backward = this.op - Zlib$1.RawInflate.MaxBackwardLength;
	  var output = this.output; // copy to output buffer

	  {
	    buffer.set(output.subarray(Zlib$1.RawInflate.MaxBackwardLength, buffer.length));
	  }

	  this.blocks.push(buffer);
	  this.totalpos += buffer.length; // copy to backward buffer

	  {
	    output.set(output.subarray(backward, backward + Zlib$1.RawInflate.MaxBackwardLength));
	  }

	  this.op = Zlib$1.RawInflate.MaxBackwardLength;
	  return output;
	};
	/**
	 * expand output buffer. (adaptive)
	 * @param {Object=} opt_param option parameters.
	 * @return {!(Array.<number>|Uint8Array)} output buffer pointer.
	 */


	Zlib$1.RawInflate.prototype.expandBufferAdaptive = function (opt_param) {
	  /** @type {!(Array.<number>|Uint8Array)} store buffer. */
	  var buffer;
	  /** @type {number} expantion ratio. */

	  var ratio = this.input.length / this.ip + 1 | 0;
	  /** @type {number} maximum number of huffman code. */

	  var maxHuffCode;
	  /** @type {number} new output buffer size. */

	  var newSize;
	  /** @type {number} max inflate size. */

	  var maxInflateSize;
	  var input = this.input;
	  var output = this.output;

	  if (opt_param) {
	    if (typeof opt_param.fixRatio === 'number') {
	      ratio = opt_param.fixRatio;
	    }

	    if (typeof opt_param.addRatio === 'number') {
	      ratio += opt_param.addRatio;
	    }
	  } // calculate new buffer size


	  if (ratio < 2) {
	    maxHuffCode = (input.length - this.ip) / this.currentLitlenTable[2];
	    maxInflateSize = maxHuffCode / 2 * 258 | 0;
	    newSize = maxInflateSize < output.length ? output.length + maxInflateSize : output.length << 1;
	  } else {
	    newSize = output.length * ratio;
	  } // buffer expantion


	  {
	    buffer = new Uint8Array(newSize);
	    buffer.set(output);
	  }

	  this.output = buffer;
	  return this.output;
	};
	/**
	 * concat output buffer.
	 * @return {!(Array.<number>|Uint8Array)} output buffer.
	 */


	Zlib$1.RawInflate.prototype.concatBufferBlock = function () {
	  /** @type {number} buffer pointer. */
	  var pos = 0;
	  /** @type {number} buffer pointer. */

	  var limit = this.totalpos + (this.op - Zlib$1.RawInflate.MaxBackwardLength);
	  /** @type {!(Array.<number>|Uint8Array)} output block array. */

	  var output = this.output;
	  /** @type {!Array} blocks array. */

	  var blocks = this.blocks;
	  /** @type {!(Array.<number>|Uint8Array)} output block array. */

	  var block;
	  /** @type {!(Array.<number>|Uint8Array)} output buffer. */

	  var buffer = new ( Uint8Array )(limit);
	  /** @type {number} loop counter. */

	  var i;
	  /** @type {number} loop limiter. */

	  var il;
	  /** @type {number} loop counter. */

	  var j;
	  /** @type {number} loop limiter. */

	  var jl; // single buffer

	  if (blocks.length === 0) {
	    return  this.output.subarray(Zlib$1.RawInflate.MaxBackwardLength, this.op) ;
	  } // copy to buffer


	  for (i = 0, il = blocks.length; i < il; ++i) {
	    block = blocks[i];

	    for (j = 0, jl = block.length; j < jl; ++j) {
	      buffer[pos++] = block[j];
	    }
	  } // current buffer


	  for (i = Zlib$1.RawInflate.MaxBackwardLength, il = this.op; i < il; ++i) {
	    buffer[pos++] = output[i];
	  }

	  this.blocks = [];
	  this.buffer = buffer;
	  return this.buffer;
	};
	/**
	 * concat output buffer. (dynamic)
	 * @return {!(Array.<number>|Uint8Array)} output buffer.
	 */


	Zlib$1.RawInflate.prototype.concatBufferDynamic = function () {
	  /** @type {Array.<number>|Uint8Array} output buffer. */
	  var buffer;
	  var op = this.op;

	  {
	    if (this.resize) {
	      buffer = new Uint8Array(op);
	      buffer.set(this.output.subarray(0, op));
	    } else {
	      buffer = this.output.subarray(0, op);
	    }
	  }

	  this.buffer = buffer;
	  return this.buffer;
	};

	var buildHuffmanTable$1 = Zlib$1.Huffman.buildHuffmanTable;
	/**
	 * @param {!(Uint8Array|Array.<number>)} input input buffer.
	 * @param {number} ip input buffer pointer.
	 * @param {number=} opt_buffersize buffer block size.
	 * @constructor
	 */

	Zlib$1.RawInflateStream = function (input, ip, opt_buffersize) {
	  /** @type {!Array.<(Array|Uint8Array)>} */
	  this.blocks = [];
	  /** @type {number} block size. */

	  this.bufferSize = opt_buffersize ? opt_buffersize : ZLIB_STREAM_RAW_INFLATE_BUFFER_SIZE$1;
	  /** @type {!number} total output buffer pointer. */

	  this.totalpos = 0;
	  /** @type {!number} input buffer pointer. */

	  this.ip = ip === void 0 ? 0 : ip;
	  /** @type {!number} bit stream reader buffer. */

	  this.bitsbuf = 0;
	  /** @type {!number} bit stream reader buffer size. */

	  this.bitsbuflen = 0;
	  /** @type {!(Array|Uint8Array)} input buffer. */

	  this.input =  new Uint8Array(input) ;
	  /** @type {!(Uint8Array|Array)} output buffer. */

	  this.output = new ( Uint8Array )(this.bufferSize);
	  /** @type {!number} output buffer pointer. */

	  this.op = 0;
	  /** @type {boolean} is final block flag. */

	  this.bfinal = false;
	  /** @type {number} uncompressed block length. */

	  this.blockLength;
	  /** @type {boolean} resize flag for memory size optimization. */

	  this.resize = false;
	  /** @type {Array} */

	  this.litlenTable;
	  /** @type {Array} */

	  this.distTable;
	  /** @type {number} */

	  this.sp = 0; // stream pointer

	  /** @type {Zlib.RawInflateStream.Status} */

	  this.status = Zlib$1.RawInflateStream.Status.INITIALIZED; //
	  // backup
	  //

	  /** @type {!number} */

	  this.ip_;
	  /** @type {!number} */

	  this.bitsbuflen_;
	  /** @type {!number} */

	  this.bitsbuf_;
	};
	/**
	 * @enum {number}
	 */


	Zlib$1.RawInflateStream.BlockType = {
	  UNCOMPRESSED: 0,
	  FIXED: 1,
	  DYNAMIC: 2
	};
	/**
	 * @enum {number}
	 */

	Zlib$1.RawInflateStream.Status = {
	  INITIALIZED: 0,
	  BLOCK_HEADER_START: 1,
	  BLOCK_HEADER_END: 2,
	  BLOCK_BODY_START: 3,
	  BLOCK_BODY_END: 4,
	  DECODE_BLOCK_START: 5,
	  DECODE_BLOCK_END: 6
	};
	/**
	 * decompress.
	 * @return {!(Uint8Array|Array)} inflated buffer.
	 */

	Zlib$1.RawInflateStream.prototype.decompress = function (newInput, ip) {
	  /** @type {boolean} */
	  var stop = false;

	  if (newInput !== void 0) {
	    this.input = newInput;
	  }

	  if (ip !== void 0) {
	    this.ip = ip;
	  } // decompress


	  while (!stop) {
	    switch (this.status) {
	      // block header
	      case Zlib$1.RawInflateStream.Status.INITIALIZED:
	      case Zlib$1.RawInflateStream.Status.BLOCK_HEADER_START:
	        if (this.readBlockHeader() < 0) {
	          stop = true;
	        }

	        break;
	      // block body

	      case Zlib$1.RawInflateStream.Status.BLOCK_HEADER_END:
	      /* FALLTHROUGH */

	      case Zlib$1.RawInflateStream.Status.BLOCK_BODY_START:
	        switch (this.currentBlockType) {
	          case Zlib$1.RawInflateStream.BlockType.UNCOMPRESSED:
	            if (this.readUncompressedBlockHeader() < 0) {
	              stop = true;
	            }

	            break;

	          case Zlib$1.RawInflateStream.BlockType.FIXED:
	            if (this.parseFixedHuffmanBlock() < 0) {
	              stop = true;
	            }

	            break;

	          case Zlib$1.RawInflateStream.BlockType.DYNAMIC:
	            if (this.parseDynamicHuffmanBlock() < 0) {
	              stop = true;
	            }

	            break;
	        }

	        break;
	      // decode data

	      case Zlib$1.RawInflateStream.Status.BLOCK_BODY_END:
	      case Zlib$1.RawInflateStream.Status.DECODE_BLOCK_START:
	        switch (this.currentBlockType) {
	          case Zlib$1.RawInflateStream.BlockType.UNCOMPRESSED:
	            if (this.parseUncompressedBlock() < 0) {
	              stop = true;
	            }

	            break;

	          case Zlib$1.RawInflateStream.BlockType.FIXED:
	          /* FALLTHROUGH */

	          case Zlib$1.RawInflateStream.BlockType.DYNAMIC:
	            if (this.decodeHuffman() < 0) {
	              stop = true;
	            }

	            break;
	        }

	        break;

	      case Zlib$1.RawInflateStream.Status.DECODE_BLOCK_END:
	        if (this.bfinal) {
	          stop = true;
	        } else {
	          this.status = Zlib$1.RawInflateStream.Status.INITIALIZED;
	        }

	        break;
	    }
	  }

	  return this.concatBuffer();
	};
	/**
	 * @const
	 * @type {number} max backward length for LZ77.
	 */


	Zlib$1.RawInflateStream.MaxBackwardLength = 32768;
	/**
	 * @const
	 * @type {number} max copy length for LZ77.
	 */

	Zlib$1.RawInflateStream.MaxCopyLength = 258;
	/**
	 * huffman order
	 * @const
	 * @type {!(Array.<number>|Uint8Array)}
	 */

	Zlib$1.RawInflateStream.Order = function (table) {
	  return  new Uint16Array(table) ;
	}([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
	/**
	 * huffman length code table.
	 * @const
	 * @type {!(Array.<number>|Uint16Array)}
	 */


	Zlib$1.RawInflateStream.LengthCodeTable = function (table) {
	  return  new Uint16Array(table) ;
	}([0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b, 0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3, 0x00e3, 0x0102, 0x0102, 0x0102]);
	/**
	 * huffman length extra-bits table.
	 * @const
	 * @type {!(Array.<number>|Uint8Array)}
	 */


	Zlib$1.RawInflateStream.LengthExtraTable = function (table) {
	  return  new Uint8Array(table) ;
	}([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);
	/**
	 * huffman dist code table.
	 * @const
	 * @type {!(Array.<number>|Uint16Array)}
	 */


	Zlib$1.RawInflateStream.DistCodeTable = function (table) {
	  return  new Uint16Array(table) ;
	}([0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011, 0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181, 0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001, 0x3001, 0x4001, 0x6001]);
	/**
	 * huffman dist extra-bits table.
	 * @const
	 * @type {!(Array.<number>|Uint8Array)}
	 */


	Zlib$1.RawInflateStream.DistExtraTable = function (table) {
	  return  new Uint8Array(table) ;
	}([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
	/**
	 * fixed huffman length code table
	 * @const
	 * @type {!Array}
	 */


	Zlib$1.RawInflateStream.FixedLiteralLengthTable = function (table) {
	  return table;
	}(function () {
	  var lengths = new ( Uint8Array )(288);
	  var i, il;

	  for (i = 0, il = lengths.length; i < il; ++i) {
	    lengths[i] = i <= 143 ? 8 : i <= 255 ? 9 : i <= 279 ? 7 : 8;
	  }

	  return buildHuffmanTable$1(lengths);
	}());
	/**
	 * fixed huffman distance code table
	 * @const
	 * @type {!Array}
	 */


	Zlib$1.RawInflateStream.FixedDistanceTable = function (table) {
	  return table;
	}(function () {
	  var lengths = new ( Uint8Array )(30);
	  var i, il;

	  for (i = 0, il = lengths.length; i < il; ++i) {
	    lengths[i] = 5;
	  }

	  return buildHuffmanTable$1(lengths);
	}());
	/**
	 * parse deflated block.
	 */


	Zlib$1.RawInflateStream.prototype.readBlockHeader = function () {
	  /** @type {number} header */
	  var hdr;
	  this.status = Zlib$1.RawInflateStream.Status.BLOCK_HEADER_START;
	  this.save_();

	  if ((hdr = this.readBits(3)) < 0) {
	    this.restore_();
	    return -1;
	  } // BFINAL


	  if (hdr & 0x1) {
	    this.bfinal = true;
	  } // BTYPE


	  hdr >>>= 1;

	  switch (hdr) {
	    case 0:
	      // uncompressed
	      this.currentBlockType = Zlib$1.RawInflateStream.BlockType.UNCOMPRESSED;
	      break;

	    case 1:
	      // fixed huffman
	      this.currentBlockType = Zlib$1.RawInflateStream.BlockType.FIXED;
	      break;

	    case 2:
	      // dynamic huffman
	      this.currentBlockType = Zlib$1.RawInflateStream.BlockType.DYNAMIC;
	      break;

	    default:
	      // reserved or other
	      throw new Error('unknown BTYPE: ' + hdr);
	  }

	  this.status = Zlib$1.RawInflateStream.Status.BLOCK_HEADER_END;
	};
	/**
	 * read inflate bits
	 * @param {number} length bits length.
	 * @return {number} read bits.
	 */


	Zlib$1.RawInflateStream.prototype.readBits = function (length) {
	  var bitsbuf = this.bitsbuf;
	  var bitsbuflen = this.bitsbuflen;
	  var input = this.input;
	  var ip = this.ip;
	  /** @type {number} input and output byte. */

	  var octet; // not enough buffer

	  while (bitsbuflen < length) {
	    // input byte
	    if (input.length <= ip) {
	      return -1;
	    }

	    octet = input[ip++]; // concat octet

	    bitsbuf |= octet << bitsbuflen;
	    bitsbuflen += 8;
	  } // output byte


	  octet = bitsbuf &
	  /* MASK */
	  (1 << length) - 1;
	  bitsbuf >>>= length;
	  bitsbuflen -= length;
	  this.bitsbuf = bitsbuf;
	  this.bitsbuflen = bitsbuflen;
	  this.ip = ip;
	  return octet;
	};
	/**
	 * read huffman code using table
	 * @param {Array} table huffman code table.
	 * @return {number} huffman code.
	 */


	Zlib$1.RawInflateStream.prototype.readCodeByTable = function (table) {
	  var bitsbuf = this.bitsbuf;
	  var bitsbuflen = this.bitsbuflen;
	  var input = this.input;
	  var ip = this.ip;
	  /** @type {!(Array|Uint8Array)} huffman code table */

	  var codeTable = table[0];
	  /** @type {number} */

	  var maxCodeLength = table[1];
	  /** @type {number} input byte */

	  var octet;
	  /** @type {number} code length & code (16bit, 16bit) */

	  var codeWithLength;
	  /** @type {number} code bits length */

	  var codeLength; // not enough buffer

	  while (bitsbuflen < maxCodeLength) {
	    if (input.length <= ip) {
	      return -1;
	    }

	    octet = input[ip++];
	    bitsbuf |= octet << bitsbuflen;
	    bitsbuflen += 8;
	  } // read max length


	  codeWithLength = codeTable[bitsbuf & (1 << maxCodeLength) - 1];
	  codeLength = codeWithLength >>> 16;

	  if (codeLength > bitsbuflen) {
	    throw new Error('invalid code length: ' + codeLength);
	  }

	  this.bitsbuf = bitsbuf >> codeLength;
	  this.bitsbuflen = bitsbuflen - codeLength;
	  this.ip = ip;
	  return codeWithLength & 0xffff;
	};
	/**
	 * read uncompressed block header
	 */


	Zlib$1.RawInflateStream.prototype.readUncompressedBlockHeader = function () {
	  /** @type {number} block length */
	  var len;
	  /** @type {number} number for check block length */

	  var nlen;
	  var input = this.input;
	  var ip = this.ip;
	  this.status = Zlib$1.RawInflateStream.Status.BLOCK_BODY_START;

	  if (ip + 4 >= input.length) {
	    return -1;
	  }

	  len = input[ip++] | input[ip++] << 8;
	  nlen = input[ip++] | input[ip++] << 8; // check len & nlen

	  if (len === ~nlen) {
	    throw new Error('invalid uncompressed block header: length verify');
	  } // skip buffered header bits


	  this.bitsbuf = 0;
	  this.bitsbuflen = 0;
	  this.ip = ip;
	  this.blockLength = len;
	  this.status = Zlib$1.RawInflateStream.Status.BLOCK_BODY_END;
	};
	/**
	 * parse uncompressed block.
	 */


	Zlib$1.RawInflateStream.prototype.parseUncompressedBlock = function () {
	  var input = this.input;
	  var ip = this.ip;
	  var output = this.output;
	  var op = this.op;
	  var len = this.blockLength;
	  this.status = Zlib$1.RawInflateStream.Status.DECODE_BLOCK_START; // copy
	  // XXX: ã¨ããããç´ ç´ã«ã³ãã¼

	  while (len--) {
	    if (op === output.length) {
	      output = this.expandBuffer({
	        fixRatio: 2
	      });
	    } // not enough input buffer


	    if (ip >= input.length) {
	      this.ip = ip;
	      this.op = op;
	      this.blockLength = len + 1; // ã³ãã¼ãã¦ãªãã®ã§æ»ã

	      return -1;
	    }

	    output[op++] = input[ip++];
	  }

	  if (len < 0) {
	    this.status = Zlib$1.RawInflateStream.Status.DECODE_BLOCK_END;
	  }

	  this.ip = ip;
	  this.op = op;
	  return 0;
	};
	/**
	 * parse fixed huffman block.
	 */


	Zlib$1.RawInflateStream.prototype.parseFixedHuffmanBlock = function () {
	  this.status = Zlib$1.RawInflateStream.Status.BLOCK_BODY_START;
	  this.litlenTable = Zlib$1.RawInflateStream.FixedLiteralLengthTable;
	  this.distTable = Zlib$1.RawInflateStream.FixedDistanceTable;
	  this.status = Zlib$1.RawInflateStream.Status.BLOCK_BODY_END;
	  return 0;
	};
	/**
	 * ãªãã¸ã§ã¯ãã®ã³ã³ãã­ã¹ããå¥ã®ãã­ããã£ã«éé¿ãã.
	 * @private
	 */


	Zlib$1.RawInflateStream.prototype.save_ = function () {
	  this.ip_ = this.ip;
	  this.bitsbuflen_ = this.bitsbuflen;
	  this.bitsbuf_ = this.bitsbuf;
	};
	/**
	 * å¥ã®ãã­ããã£ã«éé¿ããã³ã³ãã­ã¹ããå¾©åãã.
	 * @private
	 */


	Zlib$1.RawInflateStream.prototype.restore_ = function () {
	  this.ip = this.ip_;
	  this.bitsbuflen = this.bitsbuflen_;
	  this.bitsbuf = this.bitsbuf_;
	};
	/**
	 * parse dynamic huffman block.
	 */


	Zlib$1.RawInflateStream.prototype.parseDynamicHuffmanBlock = function () {
	  /** @type {number} number of literal and length codes. */
	  var hlit;
	  /** @type {number} number of distance codes. */

	  var hdist;
	  /** @type {number} number of code lengths. */

	  var hclen;
	  /** @type {!(Uint8Array|Array)} code lengths. */

	  var codeLengths = new ( Uint8Array )(Zlib$1.RawInflateStream.Order.length);
	  /** @type {!Array} code lengths table. */

	  var codeLengthsTable;
	  this.status = Zlib$1.RawInflateStream.Status.BLOCK_BODY_START;
	  this.save_();
	  hlit = this.readBits(5) + 257;
	  hdist = this.readBits(5) + 1;
	  hclen = this.readBits(4) + 4;

	  if (hlit < 0 || hdist < 0 || hclen < 0) {
	    this.restore_();
	    return -1;
	  }

	  try {
	    parseDynamicHuffmanBlockImpl.call(this);
	  } catch (e) {
	    this.restore_();
	    return -1;
	  }

	  function parseDynamicHuffmanBlockImpl() {
	    /** @type {number} */
	    var bits;
	    var code;
	    var prev = 0;
	    var repeat;
	    /** @type {!(Uint8Array|Array.<number>)} code length table. */

	    var lengthTable;
	    /** @type {number} loop counter. */

	    var i;
	    /** @type {number} loop limit. */

	    var il; // decode code lengths

	    for (i = 0; i < hclen; ++i) {
	      if ((bits = this.readBits(3)) < 0) {
	        throw new Error('not enough input');
	      }

	      codeLengths[Zlib$1.RawInflateStream.Order[i]] = bits;
	    } // decode length table


	    codeLengthsTable = buildHuffmanTable$1(codeLengths);
	    lengthTable = new ( Uint8Array )(hlit + hdist);

	    for (i = 0, il = hlit + hdist; i < il;) {
	      code = this.readCodeByTable(codeLengthsTable);

	      if (code < 0) {
	        throw new Error('not enough input');
	      }

	      switch (code) {
	        case 16:
	          if ((bits = this.readBits(2)) < 0) {
	            throw new Error('not enough input');
	          }

	          repeat = 3 + bits;

	          while (repeat--) {
	            lengthTable[i++] = prev;
	          }

	          break;

	        case 17:
	          if ((bits = this.readBits(3)) < 0) {
	            throw new Error('not enough input');
	          }

	          repeat = 3 + bits;

	          while (repeat--) {
	            lengthTable[i++] = 0;
	          }

	          prev = 0;
	          break;

	        case 18:
	          if ((bits = this.readBits(7)) < 0) {
	            throw new Error('not enough input');
	          }

	          repeat = 11 + bits;

	          while (repeat--) {
	            lengthTable[i++] = 0;
	          }

	          prev = 0;
	          break;

	        default:
	          lengthTable[i++] = code;
	          prev = code;
	          break;
	      }
	    } // literal and length code
	    this.litlenTable =  buildHuffmanTable$1(lengthTable.subarray(0, hlit)) ;
	    this.distTable =  buildHuffmanTable$1(lengthTable.subarray(hlit)) ;
	  }

	  this.status = Zlib$1.RawInflateStream.Status.BLOCK_BODY_END;
	  return 0;
	};
	/**
	 * decode huffman code (dynamic)
	 * @return {(number|undefined)} -1 is error.
	 */


	Zlib$1.RawInflateStream.prototype.decodeHuffman = function () {
	  var output = this.output;
	  var op = this.op;
	  /** @type {number} huffman code. */

	  var code;
	  /** @type {number} table index. */

	  var ti;
	  /** @type {number} huffman code distination. */

	  var codeDist;
	  /** @type {number} huffman code length. */

	  var codeLength;
	  var litlen = this.litlenTable;
	  var dist = this.distTable;
	  var olength = output.length;
	  var bits;
	  this.status = Zlib$1.RawInflateStream.Status.DECODE_BLOCK_START;

	  while (true) {
	    this.save_();
	    code = this.readCodeByTable(litlen);

	    if (code < 0) {
	      this.op = op;
	      this.restore_();
	      return -1;
	    }

	    if (code === 256) {
	      break;
	    } // literal


	    if (code < 256) {
	      if (op === olength) {
	        output = this.expandBuffer();
	        olength = output.length;
	      }

	      output[op++] = code;
	      continue;
	    } // length code


	    ti = code - 257;
	    codeLength = Zlib$1.RawInflateStream.LengthCodeTable[ti];

	    if (Zlib$1.RawInflateStream.LengthExtraTable[ti] > 0) {
	      bits = this.readBits(Zlib$1.RawInflateStream.LengthExtraTable[ti]);

	      if (bits < 0) {
	        this.op = op;
	        this.restore_();
	        return -1;
	      }

	      codeLength += bits;
	    } // dist code


	    code = this.readCodeByTable(dist);

	    if (code < 0) {
	      this.op = op;
	      this.restore_();
	      return -1;
	    }

	    codeDist = Zlib$1.RawInflateStream.DistCodeTable[code];

	    if (Zlib$1.RawInflateStream.DistExtraTable[code] > 0) {
	      bits = this.readBits(Zlib$1.RawInflateStream.DistExtraTable[code]);

	      if (bits < 0) {
	        this.op = op;
	        this.restore_();
	        return -1;
	      }

	      codeDist += bits;
	    } // lz77 decode


	    if (op + codeLength >= olength) {
	      output = this.expandBuffer();
	      olength = output.length;
	    }

	    while (codeLength--) {
	      output[op] = output[op++ - codeDist];
	    } // break


	    if (this.ip === this.input.length) {
	      this.op = op;
	      return -1;
	    }
	  }

	  while (this.bitsbuflen >= 8) {
	    this.bitsbuflen -= 8;
	    this.ip--;
	  }

	  this.op = op;
	  this.status = Zlib$1.RawInflateStream.Status.DECODE_BLOCK_END;
	};
	/**
	 * expand output buffer. (dynamic)
	 * @param {Object=} opt_param option parameters.
	 * @return {!(Array|Uint8Array)} output buffer pointer.
	 */


	Zlib$1.RawInflateStream.prototype.expandBuffer = function (opt_param) {
	  /** @type {!(Array|Uint8Array)} store buffer. */
	  var buffer;
	  /** @type {number} expantion ratio. */

	  var ratio = this.input.length / this.ip + 1 | 0;
	  /** @type {number} maximum number of huffman code. */

	  var maxHuffCode;
	  /** @type {number} new output buffer size. */

	  var newSize;
	  /** @type {number} max inflate size. */

	  var maxInflateSize;
	  var input = this.input;
	  var output = this.output;

	  if (opt_param) {
	    if (typeof opt_param.fixRatio === 'number') {
	      ratio = opt_param.fixRatio;
	    }

	    if (typeof opt_param.addRatio === 'number') {
	      ratio += opt_param.addRatio;
	    }
	  } // calculate new buffer size


	  if (ratio < 2) {
	    maxHuffCode = (input.length - this.ip) / this.litlenTable[2];
	    maxInflateSize = maxHuffCode / 2 * 258 | 0;
	    newSize = maxInflateSize < output.length ? output.length + maxInflateSize : output.length << 1;
	  } else {
	    newSize = output.length * ratio;
	  } // buffer expantion


	  {
	    buffer = new Uint8Array(newSize);
	    buffer.set(output);
	  }

	  this.output = buffer;
	  return this.output;
	};
	/**
	 * concat output buffer. (dynamic)
	 * @return {!(Array|Uint8Array)} output buffer.
	 */


	Zlib$1.RawInflateStream.prototype.concatBuffer = function () {
	  /** @type {!(Array|Uint8Array)} output buffer. */
	  var buffer;
	  /** @type {number} */

	  var op = this.op;
	  /** @type {Uint8Array} */

	  var tmp;

	  if (this.resize) {
	    {
	      buffer = new Uint8Array(this.output.subarray(this.sp, op));
	    }
	  } else {
	    buffer =  this.output.subarray(this.sp, op) ;
	  }

	  this.sp = op; // compaction

	  if (op > Zlib$1.RawInflateStream.MaxBackwardLength + this.bufferSize) {
	    this.op = this.sp = Zlib$1.RawInflateStream.MaxBackwardLength;

	    {
	      tmp =
	      /** @type {Uint8Array} */
	      this.output;
	      this.output = new Uint8Array(this.bufferSize + Zlib$1.RawInflateStream.MaxBackwardLength);
	      this.output.set(tmp.subarray(op - Zlib$1.RawInflateStream.MaxBackwardLength, op));
	    }
	  }

	  return buffer;
	};
	/**
	 * @constructor
	 * @param {!(Uint8Array|Array)} input deflated buffer.
	 * @param {Object=} opt_params option parameters.
	 *
	 * opt_params ã¯ä»¥ä¸ã®ãã­ããã£ãæå®ããäºãã§ãã¾ãã
	 *   - index: input buffer ã® deflate ã³ã³ããã®éå§ä½ç½®.
	 *   - blockSize: ãããã¡ã®ãã­ãã¯ãµã¤ãº.
	 *   - verify: ä¼¸å¼µãçµãã£ãå¾ adler-32 checksum ã®æ¤è¨¼ãè¡ãã.
	 *   - bufferType: Zlib.Inflate.BufferType ã®å¤ã«ãã£ã¦ãããã¡ã®ç®¡çæ¹æ³ãæå®ãã.
	 *       Zlib.Inflate.BufferType ã¯ Zlib.RawInflate.BufferType ã®ã¨ã¤ãªã¢ã¹.
	 */


	Zlib$1.Inflate = function (input, opt_params) {
	  /** @type {number} */

	  var cmf;
	  /** @type {number} */

	  var flg;
	  /** @type {!(Uint8Array|Array)} */

	  this.input = input;
	  /** @type {number} */

	  this.ip = 0;
	  /** @type {Zlib.RawInflate} */

	  this.rawinflate;
	  /** @type {(boolean|undefined)} verify flag. */

	  this.verify; // option parameters

	  if (opt_params || !(opt_params = {})) {
	    if (opt_params['index']) {
	      this.ip = opt_params['index'];
	    }

	    if (opt_params['verify']) {
	      this.verify = opt_params['verify'];
	    }
	  } // Compression Method and Flags


	  cmf = input[this.ip++];
	  flg = input[this.ip++]; // compression method

	  switch (cmf & 0x0f) {
	    case Zlib$1.CompressionMethod.DEFLATE:
	      this.method = Zlib$1.CompressionMethod.DEFLATE;
	      break;

	    default:
	      throw new Error('unsupported compression method');
	  } // fcheck


	  if (((cmf << 8) + flg) % 31 !== 0) {
	    throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);
	  } // fdict (not supported)


	  if (flg & 0x20) {
	    throw new Error('fdict flag is not supported');
	  } // RawInflate


	  this.rawinflate = new Zlib$1.RawInflate(input, {
	    'index': this.ip,
	    'bufferSize': opt_params['bufferSize'],
	    'bufferType': opt_params['bufferType'],
	    'resize': opt_params['resize']
	  });
	};
	/**
	 * @enum {number}
	 */


	Zlib$1.Inflate.BufferType = Zlib$1.RawInflate.BufferType;
	/**
	 * decompress.
	 * @return {!(Uint8Array|Array)} inflated buffer.
	 */

	Zlib$1.Inflate.prototype.decompress = function () {
	  /** @type {!(Array|Uint8Array)} input buffer. */
	  var input = this.input;
	  /** @type {!(Uint8Array|Array)} inflated buffer. */

	  var buffer;
	  /** @type {number} adler-32 checksum */

	  var adler32;
	  buffer = this.rawinflate.decompress();
	  this.ip = this.rawinflate.ip; // verify adler-32

	  if (this.verify) {
	    adler32 = (input[this.ip++] << 24 | input[this.ip++] << 16 | input[this.ip++] << 8 | input[this.ip++]) >>> 0;

	    if (adler32 !== Zlib$1.Adler32(buffer)) {
	      throw new Error('invalid adler-32 checksum');
	    }
	  }

	  return buffer;
	};
	/* vim:set expandtab ts=2 sw=2 tw=80: */

	/**
	 * @param {!(Uint8Array|Array)} input deflated buffer.
	 * @constructor
	 */


	Zlib$1.InflateStream = function (input) {
	  /** @type {!(Uint8Array|Array)} */
	  this.input = input === void 0 ? new ( Uint8Array )() : input;
	  /** @type {number} */

	  this.ip = 0;
	  /** @type {Zlib.RawInflateStream} */

	  this.rawinflate = new Zlib$1.RawInflateStream(this.input, this.ip);
	  /** @type {Zlib.CompressionMethod} */

	  this.method;
	  /** @type {!(Array|Uint8Array)} */

	  this.output = this.rawinflate.output;
	};
	/**
	 * decompress.
	 * @return {!(Uint8Array|Array)} inflated buffer.
	 */


	Zlib$1.InflateStream.prototype.decompress = function (input) {
	  /** @type {!(Uint8Array|Array)} inflated buffer. */
	  var buffer;
	  // XXX Array, Uint8Array ã®ãã§ãã¯ãè¡ããç¢ºèªãã

	  if (input !== void 0) {
	    {
	      var tmp = new Uint8Array(this.input.length + input.length);
	      tmp.set(this.input, 0);
	      tmp.set(input, this.input.length);
	      this.input = tmp;
	    }
	  }

	  if (this.method === void 0) {
	    if (this.readHeader() < 0) {
	      return new ( Uint8Array )();
	    }
	  }

	  buffer = this.rawinflate.decompress(this.input, this.ip);

	  if (this.rawinflate.ip !== 0) {
	    this.input =  this.input.subarray(this.rawinflate.ip) ;
	    this.ip = 0;
	  } // verify adler-32

	  /*
	  if (this.verify) {
	    adler32 =
	      input[this.ip++] << 24 | input[this.ip++] << 16 |
	      input[this.ip++] << 8 | input[this.ip++];
	     if (adler32 !== Zlib.Adler32(buffer)) {
	      throw new Error('invalid adler-32 checksum');
	    }
	  }
	  */


	  return buffer;
	};

	Zlib$1.InflateStream.prototype.readHeader = function () {
	  var ip = this.ip;
	  var input = this.input; // Compression Method and Flags

	  var cmf = input[ip++];
	  var flg = input[ip++];

	  if (cmf === void 0 || flg === void 0) {
	    return -1;
	  } // compression method


	  switch (cmf & 0x0f) {
	    case Zlib$1.CompressionMethod.DEFLATE:
	      this.method = Zlib$1.CompressionMethod.DEFLATE;
	      break;

	    default:
	      throw new Error('unsupported compression method');
	  } // fcheck


	  if (((cmf << 8) + flg) % 31 !== 0) {
	    throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);
	  } // fdict (not supported)


	  if (flg & 0x20) {
	    throw new Error('fdict flag is not supported');
	  }

	  this.ip = ip;
	};
	/**
	 * @fileoverview GZIP (RFC1952) å±éã³ã³ããå®è£.
	 */

	/**
	 * @constructor
	 * @param {!(Array|Uint8Array)} input input buffer.
	 * @param {Object=} opt_params option parameters.
	 */


	Zlib$1.Gunzip = function (input, opt_params) {
	  /** @type {!(Array.<number>|Uint8Array)} input buffer. */
	  this.input = input;
	  /** @type {number} input buffer pointer. */

	  this.ip = 0;
	  /** @type {Array.<Zlib.GunzipMember>} */

	  this.member = [];
	  /** @type {boolean} */

	  this.decompressed = false;
	};
	/**
	 * @return {Array.<Zlib.GunzipMember>}
	 */


	Zlib$1.Gunzip.prototype.getMembers = function () {
	  if (!this.decompressed) {
	    this.decompress();
	  }

	  return this.member.slice();
	};
	/**
	 * inflate gzip data.
	 * @return {!(Array.<number>|Uint8Array)} inflated buffer.
	 */


	Zlib$1.Gunzip.prototype.decompress = function () {
	  /** @type {number} input length. */
	  var il = this.input.length;

	  while (this.ip < il) {
	    this.decodeMember();
	  }

	  this.decompressed = true;
	  return this.concatMember();
	};
	/**
	 * decode gzip member.
	 */


	Zlib$1.Gunzip.prototype.decodeMember = function () {
	  /** @type {Zlib.GunzipMember} */
	  var member = new Zlib$1.GunzipMember();
	  /** @type {number} */

	  var isize;
	  /** @type {Zlib.RawInflate} RawInflate implementation. */

	  var rawinflate;
	  /** @type {!(Array.<number>|Uint8Array)} inflated data. */

	  var inflated;
	  /** @type {number} inflate size */

	  var inflen;
	  /** @type {number} character code */

	  var c;
	  /** @type {number} character index in string. */

	  var ci;
	  /** @type {Array.<string>} character array. */

	  var str;
	  /** @type {number} modification time. */

	  var mtime;
	  /** @type {number} */

	  var crc32;
	  var input = this.input;
	  var ip = this.ip;
	  member.id1 = input[ip++];
	  member.id2 = input[ip++]; // check signature

	  if (member.id1 !== 0x1f || member.id2 !== 0x8b) {
	    throw new Error('invalid file signature:' + member.id1 + ',' + member.id2);
	  } // check compression method


	  member.cm = input[ip++];

	  switch (member.cm) {
	    case 8:
	      /* XXX: use Zlib const */
	      break;

	    default:
	      throw new Error('unknown compression method: ' + member.cm);
	  } // flags


	  member.flg = input[ip++]; // modification time

	  mtime = input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24;
	  member.mtime = new Date(mtime * 1000); // extra flags

	  member.xfl = input[ip++]; // operating system

	  member.os = input[ip++]; // extra

	  if ((member.flg & Zlib$1.Gzip.FlagsMask.FEXTRA) > 0) {
	    member.xlen = input[ip++] | input[ip++] << 8;
	    ip = this.decodeSubField(ip, member.xlen);
	  } // fname


	  if ((member.flg & Zlib$1.Gzip.FlagsMask.FNAME) > 0) {
	    for (str = [], ci = 0; (c = input[ip++]) > 0;) {
	      str[ci++] = String.fromCharCode(c);
	    }

	    member.name = str.join('');
	  } // fcomment


	  if ((member.flg & Zlib$1.Gzip.FlagsMask.FCOMMENT) > 0) {
	    for (str = [], ci = 0; (c = input[ip++]) > 0;) {
	      str[ci++] = String.fromCharCode(c);
	    }

	    member.comment = str.join('');
	  } // fhcrc


	  if ((member.flg & Zlib$1.Gzip.FlagsMask.FHCRC) > 0) {
	    member.crc16 = Zlib$1.CRC32.calc(input, 0, ip) & 0xffff;

	    if (member.crc16 !== (input[ip++] | input[ip++] << 8)) {
	      throw new Error('invalid header crc16');
	    }
	  } // isize ãäºåã«åå¾ããã¨å±éå¾ã®ãµã¤ãºãåããããã
	  // inflateå¦çã®ãããã¡ãµã¤ãºãäºåã«åãããé«éã«ãªã


	  isize = input[input.length - 4] | input[input.length - 3] << 8 | input[input.length - 2] << 16 | input[input.length - 1] << 24; // isize ã®å¦¥å½æ§ãã§ãã¯
	  // ãããã³ç¬¦å·ã§ã¯æå° 2-bit ã®ãããæå¤§ã§ 1/4 ã«ãªã
	  // LZ77 ç¬¦å·ã§ã¯ é·ãã¨è·é¢ 2-Byte ã§æå¤§ 258-Byte ãè¡¨ç¾ã§ããããã
	  // 1/128 ã«ãªãã¨ãã
	  // ããããå¥åãããã¡ã®æ®ãã isize ã® 512 åä»¥ä¸ã ã£ãã
	  // ãµã¤ãºæå®ã®ãããã¡ç¢ºä¿ã¯è¡ããªãäºã¨ãã

	  if (input.length - ip -
	  /* CRC-32 */
	  4 -
	  /* ISIZE */
	  4 < isize * 512) {
	    inflen = isize;
	  } // compressed block


	  rawinflate = new Zlib$1.RawInflate(input, {
	    'index': ip,
	    'bufferSize': inflen
	  });
	  member.data = inflated = rawinflate.decompress();
	  ip = rawinflate.ip; // crc32

	  member.crc32 = crc32 = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;

	  if (Zlib$1.CRC32.calc(inflated) !== crc32) {
	    throw new Error('invalid CRC-32 checksum: 0x' + Zlib$1.CRC32.calc(inflated).toString(16) + ' / 0x' + crc32.toString(16));
	  } // input size


	  member.isize = isize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;

	  if ((inflated.length & 0xffffffff) !== isize) {
	    throw new Error('invalid input size: ' + (inflated.length & 0xffffffff) + ' / ' + isize);
	  }

	  this.member.push(member);
	  this.ip = ip;
	};
	/**
	 * ãµããã£ã¼ã«ãã®ãã³ã¼ã
	 * XXX: ç¾å¨ã¯ä½ãããã¹ã­ãããã
	 */


	Zlib$1.Gunzip.prototype.decodeSubField = function (ip, length) {
	  return ip + length;
	};
	/**
	 * @return {!(Array.<number>|Uint8Array)}
	 */


	Zlib$1.Gunzip.prototype.concatMember = function () {
	  /** @type {Array.<Zlib.GunzipMember>} */
	  var member = this.member;
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il;
	  /** @type {number} */

	  var p = 0;
	  /** @type {number} */

	  var size = 0;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var buffer;

	  for (i = 0, il = member.length; i < il; ++i) {
	    size += member[i].data.length;
	  }

	  {
	    buffer = new Uint8Array(size);

	    for (i = 0; i < il; ++i) {
	      buffer.set(member[i].data, p);
	      p += member[i].data.length;
	    }
	  }

	  return buffer;
	};
	/**
	 * @constructor
	 */


	Zlib$1.GunzipMember = function () {
	  /** @type {number} signature first byte. */
	  this.id1;
	  /** @type {number} signature second byte. */

	  this.id2;
	  /** @type {number} compression method. */

	  this.cm;
	  /** @type {number} flags. */

	  this.flg;
	  /** @type {Date} modification time. */

	  this.mtime;
	  /** @type {number} extra flags. */

	  this.xfl;
	  /** @type {number} operating system number. */

	  this.os;
	  /** @type {number} CRC-16 value for FHCRC flag. */

	  this.crc16;
	  /** @type {number} extra length. */

	  this.xlen;
	  /** @type {number} CRC-32 value for verification. */

	  this.crc32;
	  /** @type {number} input size modulo 32 value. */

	  this.isize;
	  /** @type {string} filename. */

	  this.name;
	  /** @type {string} comment. */

	  this.comment;
	  /** @type {!(Uint8Array|Array.<number>)} */

	  this.data;
	};

	Zlib$1.GunzipMember.prototype.getName = function () {
	  return this.name;
	};

	Zlib$1.GunzipMember.prototype.getData = function () {
	  return this.data;
	};

	Zlib$1.GunzipMember.prototype.getMtime = function () {
	  return this.mtime;
	};
	/**
	 * @fileoverview GZIP (RFC1952) å®è£.
	 */

	/**
	 * @constructor
	 * @param {!(Array|Uint8Array)} input input buffer.
	 * @param {Object=} opt_params option parameters.
	 */


	Zlib$1.Gzip = function (input, opt_params) {
	  /** @type {!(Array.<number>|Uint8Array)} input buffer. */
	  this.input = input;
	  /** @type {number} input buffer pointer. */

	  this.ip = 0;
	  /** @type {!(Array.<number>|Uint8Array)} output buffer. */

	  this.output;
	  /** @type {number} output buffer. */

	  this.op = 0;
	  /** @type {!Object} flags option flags. */

	  this.flags = {};
	  /** @type {!string} filename. */

	  this.filename;
	  /** @type {!string} comment. */

	  this.comment;
	  /** @type {!Object} deflate options. */

	  this.deflateOptions; // option parameters

	  if (opt_params) {
	    if (opt_params['flags']) {
	      this.flags = opt_params['flags'];
	    }

	    if (typeof opt_params['filename'] === 'string') {
	      this.filename = opt_params['filename'];
	    }

	    if (typeof opt_params['comment'] === 'string') {
	      this.comment = opt_params['comment'];
	    }

	    if (opt_params['deflateOptions']) {
	      this.deflateOptions = opt_params['deflateOptions'];
	    }
	  }

	  if (!this.deflateOptions) {
	    this.deflateOptions = {};
	  }
	};
	/**
	 * @type {number}
	 * @const
	 */


	Zlib$1.Gzip.DefaultBufferSize = 0x8000;
	/**
	 * encode gzip members.
	 * @return {!(Array|Uint8Array)} gzip binary array.
	 */

	Zlib$1.Gzip.prototype.compress = function () {
	  /** @type {number} flags. */
	  var flg;
	  /** @type {number} modification time. */

	  var mtime;
	  /** @type {number} CRC-16 value for FHCRC flag. */

	  var crc16;
	  /** @type {number} CRC-32 value for verification. */

	  var crc32;
	  /** @type {!Zlib.RawDeflate} raw deflate object. */

	  var rawdeflate;
	  /** @type {number} character code */

	  var c;
	  /** @type {number} loop counter. */

	  var i;
	  /** @type {number} loop limiter. */

	  var il;
	  /** @type {!(Array|Uint8Array)} output buffer. */

	  var output = new ( Uint8Array )(Zlib$1.Gzip.DefaultBufferSize);
	  /** @type {number} output buffer pointer. */

	  var op = 0;
	  var input = this.input;
	  var ip = this.ip;
	  var filename = this.filename;
	  var comment = this.comment; // check signature

	  output[op++] = 0x1f;
	  output[op++] = 0x8b; // check compression method

	  output[op++] = 8;
	  /* XXX: use Zlib const */
	  // flags

	  flg = 0;
	  if (this.flags['fname']) flg |= Zlib$1.Gzip.FlagsMask.FNAME;
	  if (this.flags['fcomment']) flg |= Zlib$1.Gzip.FlagsMask.FCOMMENT;
	  if (this.flags['fhcrc']) flg |= Zlib$1.Gzip.FlagsMask.FHCRC; // XXX: FTEXT
	  // XXX: FEXTRA

	  output[op++] = flg; // modification time

	  mtime = (Date.now ? Date.now() : +new Date()) / 1000 | 0;
	  output[op++] = mtime & 0xff;
	  output[op++] = mtime >>> 8 & 0xff;
	  output[op++] = mtime >>> 16 & 0xff;
	  output[op++] = mtime >>> 24 & 0xff; // extra flags

	  output[op++] = 0; // operating system

	  output[op++] = Zlib$1.Gzip.OperatingSystem.UNKNOWN; // extra

	  /* NOP */
	  // fname

	  if (this.flags['fname'] !== void 0) {
	    for (i = 0, il = filename.length; i < il; ++i) {
	      c = filename.charCodeAt(i);

	      if (c > 0xff) {
	        output[op++] = c >>> 8 & 0xff;
	      }

	      output[op++] = c & 0xff;
	    }

	    output[op++] = 0; // null termination
	  } // fcomment


	  if (this.flags['comment']) {
	    for (i = 0, il = comment.length; i < il; ++i) {
	      c = comment.charCodeAt(i);

	      if (c > 0xff) {
	        output[op++] = c >>> 8 & 0xff;
	      }

	      output[op++] = c & 0xff;
	    }

	    output[op++] = 0; // null termination
	  } // fhcrc


	  if (this.flags['fhcrc']) {
	    crc16 = Zlib$1.CRC32.calc(output, 0, op) & 0xffff;
	    output[op++] = crc16 & 0xff;
	    output[op++] = crc16 >>> 8 & 0xff;
	  } // add compress option


	  this.deflateOptions['outputBuffer'] = output;
	  this.deflateOptions['outputIndex'] = op; // compress

	  rawdeflate = new Zlib$1.RawDeflate(input, this.deflateOptions);
	  output = rawdeflate.compress();
	  op = rawdeflate.op; // expand buffer

	  {
	    if (op + 8 > output.buffer.byteLength) {
	      this.output = new Uint8Array(op + 8);
	      this.output.set(new Uint8Array(output.buffer));
	      output = this.output;
	    } else {
	      output = new Uint8Array(output.buffer);
	    }
	  } // crc32


	  crc32 = Zlib$1.CRC32.calc(input);
	  output[op++] = crc32 & 0xff;
	  output[op++] = crc32 >>> 8 & 0xff;
	  output[op++] = crc32 >>> 16 & 0xff;
	  output[op++] = crc32 >>> 24 & 0xff; // input size

	  il = input.length;
	  output[op++] = il & 0xff;
	  output[op++] = il >>> 8 & 0xff;
	  output[op++] = il >>> 16 & 0xff;
	  output[op++] = il >>> 24 & 0xff;
	  this.ip = ip;

	  if ( op < output.length) {
	    this.output = output = output.subarray(0, op);
	  }

	  return output;
	};
	/** @enum {number} */


	Zlib$1.Gzip.OperatingSystem = {
	  FAT: 0,
	  AMIGA: 1,
	  VMS: 2,
	  UNIX: 3,
	  VM_CMS: 4,
	  ATARI_TOS: 5,
	  HPFS: 6,
	  MACINTOSH: 7,
	  Z_SYSTEM: 8,
	  CP_M: 9,
	  TOPS_20: 10,
	  NTFS: 11,
	  QDOS: 12,
	  ACORN_RISCOS: 13,
	  UNKNOWN: 255
	};
	/** @enum {number} */

	Zlib$1.Gzip.FlagsMask = {
	  FTEXT: 0x01,
	  FHCRC: 0x02,
	  FEXTRA: 0x04,
	  FNAME: 0x08,
	  FCOMMENT: 0x10
	};
	/**
	 * @fileoverview Heap Sort å®è£. ãããã³ç¬¦å·åã§ä½¿ç¨ãã.
	 */

	/**
	 * ã«ã¹ã¿ã ãããã³ç¬¦å·ã§ä½¿ç¨ãããã¼ãå®è£
	 * @param {number} length ãã¼ããµã¤ãº.
	 * @constructor
	 */

	Zlib$1.Heap = function (length) {
	  this.buffer = new ( Uint16Array )(length * 2);
	  this.length = 0;
	};
	/**
	 * è¦ªãã¼ãã® index åå¾
	 * @param {number} index å­ãã¼ãã® index.
	 * @return {number} è¦ªãã¼ãã® index.
	 *
	 */


	Zlib$1.Heap.prototype.getParent = function (index) {
	  return ((index - 2) / 4 | 0) * 2;
	};
	/**
	 * å­ãã¼ãã® index åå¾
	 * @param {number} index è¦ªãã¼ãã® index.
	 * @return {number} å­ãã¼ãã® index.
	 */


	Zlib$1.Heap.prototype.getChild = function (index) {
	  return 2 * index + 2;
	};
	/**
	 * Heap ã«å¤ãè¿½å ãã
	 * @param {number} index ã­ã¼ index.
	 * @param {number} value å¤.
	 * @return {number} ç¾å¨ã®ãã¼ãé·.
	 */


	Zlib$1.Heap.prototype.push = function (index, value) {
	  var current,
	      parent,
	      heap = this.buffer,
	      swap;
	  current = this.length;
	  heap[this.length++] = value;
	  heap[this.length++] = index; // ã«ã¼ããã¼ãã«ãã©ãçãã¾ã§å¥ãæ¿ããè©¦ã¿ã

	  while (current > 0) {
	    parent = this.getParent(current); // è¦ªãã¼ãã¨æ¯è¼ãã¦è¦ªã®æ¹ãå°ãããã°å¥ãæ¿ãã

	    if (heap[current] > heap[parent]) {
	      swap = heap[current];
	      heap[current] = heap[parent];
	      heap[parent] = swap;
	      swap = heap[current + 1];
	      heap[current + 1] = heap[parent + 1];
	      heap[parent + 1] = swap;
	      current = parent; // å¥ãæ¿ããå¿è¦ãªããªã£ããããã§æãã
	    } else {
	      break;
	    }
	  }

	  return this.length;
	};
	/**
	 * Heapããä¸çªå¤§ããå¤ãè¿ã
	 * @return {{index: number, value: number, length: number}} {index: ã­ã¼index,
	 *     value: å¤, length: ãã¼ãé·} ã® Object.
	 */


	Zlib$1.Heap.prototype.pop = function () {
	  var index,
	      value,
	      heap = this.buffer,
	      swap,
	      current,
	      parent;
	  value = heap[0];
	  index = heap[1]; // å¾ãããå¤ãåã

	  this.length -= 2;
	  heap[0] = heap[this.length];
	  heap[1] = heap[this.length + 1];
	  parent = 0; // ã«ã¼ããã¼ãããä¸ãã£ã¦ãã

	  while (true) {
	    current = this.getChild(parent); // ç¯å²ãã§ãã¯

	    if (current >= this.length) {
	      break;
	    } // é£ã®ãã¼ãã¨æ¯è¼ãã¦ãé£ã®æ¹ãå¤ãå¤§ãããã°é£ãç¾å¨ãã¼ãã¨ãã¦é¸æ


	    if (current + 2 < this.length && heap[current + 2] > heap[current]) {
	      current += 2;
	    } // è¦ªãã¼ãã¨æ¯è¼ãã¦è¦ªã®æ¹ãå°ããå ´åã¯å¥ãæ¿ãã


	    if (heap[current] > heap[parent]) {
	      swap = heap[parent];
	      heap[parent] = heap[current];
	      heap[current] = swap;
	      swap = heap[parent + 1];
	      heap[parent + 1] = heap[current + 1];
	      heap[current + 1] = swap;
	    } else {
	      break;
	    }

	    parent = current;
	  }

	  return {
	    index: index,
	    value: value,
	    length: this.length
	  };
	};
	/* vim:set expandtab ts=2 sw=2 tw=80: */

	/**
	 * @fileoverview Deflate (RFC1951) ç¬¦å·åã¢ã«ã´ãªãºã å®è£.
	 */

	/**
	 * Raw Deflate å®è£
	 *
	 * @constructor
	 * @param {!(Array.<number>|Uint8Array)} input ç¬¦å·åããå¯¾è±¡ã®ãããã¡.
	 * @param {Object=} opt_params option parameters.
	 *
	 * typed array ãä½¿ç¨å¯è½ãªã¨ããoutputBuffer ã Array ã¯èªåçã« Uint8Array ã«
	 * å¤æããã¾ã.
	 * å¥ã®ãªãã¸ã§ã¯ãã«ãªãããåºåãããã¡ãåç§ãã¦ããå¤æ°ãªã©ã¯
	 * æ´æ°ããå¿è¦ãããã¾ã.
	 */


	Zlib$1.RawDeflate = function (input, opt_params) {
	  /** @type {Zlib.RawDeflate.CompressionType} */
	  this.compressionType = Zlib$1.RawDeflate.CompressionType.DYNAMIC;
	  /** @type {number} */

	  this.lazy = 0;
	  /** @type {!(Array.<number>|Uint32Array)} */

	  this.freqsLitLen;
	  /** @type {!(Array.<number>|Uint32Array)} */

	  this.freqsDist;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  this.input =  input instanceof Array ? new Uint8Array(input) : input;
	  /** @type {!(Array.<number>|Uint8Array)} output output buffer. */

	  this.output;
	  /** @type {number} pos output buffer position. */

	  this.op = 0; // option parameters

	  if (opt_params) {
	    if (opt_params['lazy']) {
	      this.lazy = opt_params['lazy'];
	    }

	    if (typeof opt_params['compressionType'] === 'number') {
	      this.compressionType = opt_params['compressionType'];
	    }

	    if (opt_params['outputBuffer']) {
	      this.output =  opt_params['outputBuffer'] instanceof Array ? new Uint8Array(opt_params['outputBuffer']) : opt_params['outputBuffer'];
	    }

	    if (typeof opt_params['outputIndex'] === 'number') {
	      this.op = opt_params['outputIndex'];
	    }
	  }

	  if (!this.output) {
	    this.output = new ( Uint8Array )(0x8000);
	  }
	};
	/**
	 * @enum {number}
	 */


	Zlib$1.RawDeflate.CompressionType = {
	  NONE: 0,
	  FIXED: 1,
	  DYNAMIC: 2,
	  RESERVED: 3
	};
	/**
	 * LZ77 ã®æå°ãããé·
	 * @const
	 * @type {number}
	 */

	Zlib$1.RawDeflate.Lz77MinLength = 3;
	/**
	 * LZ77 ã®æå¤§ãããé·
	 * @const
	 * @type {number}
	 */

	Zlib$1.RawDeflate.Lz77MaxLength = 258;
	/**
	 * LZ77 ã®ã¦ã£ã³ãã¦ãµã¤ãº
	 * @const
	 * @type {number}
	 */

	Zlib$1.RawDeflate.WindowSize = 0x8000;
	/**
	 * æé·ã®ç¬¦å·é·
	 * @const
	 * @type {number}
	 */

	Zlib$1.RawDeflate.MaxCodeLength = 16;
	/**
	 * ãããã³ç¬¦å·ã®æå¤§æ°å¤
	 * @const
	 * @type {number}
	 */

	Zlib$1.RawDeflate.HUFMAX = 286;
	/**
	 * åºå®ãããã³ç¬¦å·ã®ç¬¦å·åãã¼ãã«
	 * @const
	 * @type {Array.<Array.<number, number>>}
	 */

	Zlib$1.RawDeflate.FixedHuffmanTable = function () {
	  var table = [],
	      i;

	  for (i = 0; i < 288; i++) {
	    switch (true) {
	      case i <= 143:
	        table.push([i + 0x030, 8]);
	        break;

	      case i <= 255:
	        table.push([i - 144 + 0x190, 9]);
	        break;

	      case i <= 279:
	        table.push([i - 256 + 0x000, 7]);
	        break;

	      case i <= 287:
	        table.push([i - 280 + 0x0C0, 8]);
	        break;

	      default:
	        throw 'invalid literal: ' + i;
	    }
	  }

	  return table;
	}();
	/**
	 * DEFLATE ãã­ãã¯ã®ä½æ
	 * @return {!(Array.<number>|Uint8Array)} å§ç¸®æ¸ã¿ byte array.
	 */


	Zlib$1.RawDeflate.prototype.compress = function () {
	  /** @type {!(Array.<number>|Uint8Array)} */
	  var blockArray;
	  /** @type {number} */

	  var position;
	  /** @type {number} */

	  var length;
	  var input = this.input; // compression

	  switch (this.compressionType) {
	    case Zlib$1.RawDeflate.CompressionType.NONE:
	      // each 65535-Byte (length header: 16-bit)
	      for (position = 0, length = input.length; position < length;) {
	        blockArray =  input.subarray(position, position + 0xffff) ;
	        position += blockArray.length;
	        this.makeNocompressBlock(blockArray, position === length);
	      }

	      break;

	    case Zlib$1.RawDeflate.CompressionType.FIXED:
	      this.output = this.makeFixedHuffmanBlock(input, true);
	      this.op = this.output.length;
	      break;

	    case Zlib$1.RawDeflate.CompressionType.DYNAMIC:
	      this.output = this.makeDynamicHuffmanBlock(input, true);
	      this.op = this.output.length;
	      break;

	    default:
	      throw 'invalid compression type';
	  }

	  return this.output;
	};
	/**
	 * éå§ç¸®ãã­ãã¯ã®ä½æ
	 * @param {!(Array.<number>|Uint8Array)} blockArray ãã­ãã¯ãã¼ã¿ byte array.
	 * @param {!boolean} isFinalBlock æå¾ã®ãã­ãã¯ãªãã°true.
	 * @return {!(Array.<number>|Uint8Array)} éå§ç¸®ãã­ãã¯ byte array.
	 */


	Zlib$1.RawDeflate.prototype.makeNocompressBlock = function (blockArray, isFinalBlock) {
	  /** @type {number} */
	  var bfinal;
	  /** @type {Zlib.RawDeflate.CompressionType} */

	  var btype;
	  /** @type {number} */

	  var len;
	  /** @type {number} */

	  var nlen;
	  var output = this.output;
	  var op = this.op; // expand buffer

	  {
	    output = new Uint8Array(this.output.buffer);

	    while (output.length <= op + blockArray.length + 5) {
	      output = new Uint8Array(output.length << 1);
	    }

	    output.set(this.output);
	  } // header


	  bfinal = isFinalBlock ? 1 : 0;
	  btype = Zlib$1.RawDeflate.CompressionType.NONE;
	  output[op++] = bfinal | btype << 1; // length

	  len = blockArray.length;
	  nlen = ~len + 0x10000 & 0xffff;
	  output[op++] = len & 0xff;
	  output[op++] = len >>> 8 & 0xff;
	  output[op++] = nlen & 0xff;
	  output[op++] = nlen >>> 8 & 0xff; // copy buffer

	  {
	    output.set(blockArray, op);
	    op += blockArray.length;
	    output = output.subarray(0, op);
	  }

	  this.op = op;
	  this.output = output;
	  return output;
	};
	/**
	 * åºå®ãããã³ãã­ãã¯ã®ä½æ
	 * @param {!(Array.<number>|Uint8Array)} blockArray ãã­ãã¯ãã¼ã¿ byte array.
	 * @param {!boolean} isFinalBlock æå¾ã®ãã­ãã¯ãªãã°true.
	 * @return {!(Array.<number>|Uint8Array)} åºå®ãããã³ç¬¦å·åãã­ãã¯ byte array.
	 */


	Zlib$1.RawDeflate.prototype.makeFixedHuffmanBlock = function (blockArray, isFinalBlock) {
	  /** @type {Zlib.BitStream} */
	  var stream = new Zlib$1.BitStream( new Uint8Array(this.output.buffer) , this.op);
	  /** @type {number} */

	  var bfinal;
	  /** @type {Zlib.RawDeflate.CompressionType} */

	  var btype;
	  /** @type {!(Array.<number>|Uint16Array)} */

	  var data; // header

	  bfinal = isFinalBlock ? 1 : 0;
	  btype = Zlib$1.RawDeflate.CompressionType.FIXED;
	  stream.writeBits(bfinal, 1, true);
	  stream.writeBits(btype, 2, true);
	  data = this.lz77(blockArray);
	  this.fixedHuffman(data, stream);
	  return stream.finish();
	};
	/**
	 * åçãããã³ãã­ãã¯ã®ä½æ
	 * @param {!(Array.<number>|Uint8Array)} blockArray ãã­ãã¯ãã¼ã¿ byte array.
	 * @param {!boolean} isFinalBlock æå¾ã®ãã­ãã¯ãªãã°true.
	 * @return {!(Array.<number>|Uint8Array)} åçãããã³ç¬¦å·ãã­ãã¯ byte array.
	 */


	Zlib$1.RawDeflate.prototype.makeDynamicHuffmanBlock = function (blockArray, isFinalBlock) {
	  /** @type {Zlib.BitStream} */
	  var stream = new Zlib$1.BitStream( new Uint8Array(this.output.buffer) , this.op);
	  /** @type {number} */

	  var bfinal;
	  /** @type {Zlib.RawDeflate.CompressionType} */

	  var btype;
	  /** @type {!(Array.<number>|Uint16Array)} */

	  var data;
	  /** @type {number} */

	  var hlit;
	  /** @type {number} */

	  var hdist;
	  /** @type {number} */

	  var hclen;
	  /** @const @type {Array.<number>} */

	  var hclenOrder = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var litLenLengths;
	  /** @type {!(Array.<number>|Uint16Array)} */

	  var litLenCodes;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var distLengths;
	  /** @type {!(Array.<number>|Uint16Array)} */

	  var distCodes;
	  /** @type {{
	   *   codes: !(Array.<number>|Uint32Array),
	   *   freqs: !(Array.<number>|Uint8Array)
	   * }} */

	  var treeSymbols;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var treeLengths;
	  /** @type {Array} */

	  var transLengths = new Array(19);
	  /** @type {!(Array.<number>|Uint16Array)} */

	  var treeCodes;
	  /** @type {number} */

	  var code;
	  /** @type {number} */

	  var bitlen;
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il; // header

	  bfinal = isFinalBlock ? 1 : 0;
	  btype = Zlib$1.RawDeflate.CompressionType.DYNAMIC;
	  stream.writeBits(bfinal, 1, true);
	  stream.writeBits(btype, 2, true);
	  data = this.lz77(blockArray); // ãªãã©ã«ã»é·ã, è·é¢ã®ãããã³ç¬¦å·ã¨ç¬¦å·é·ã®ç®åº

	  litLenLengths = this.getLengths_(this.freqsLitLen, 15);
	  litLenCodes = this.getCodesFromLengths_(litLenLengths);
	  distLengths = this.getLengths_(this.freqsDist, 7);
	  distCodes = this.getCodesFromLengths_(distLengths); // HLIT, HDIST ã®æ±ºå®

	  for (hlit = 286; hlit > 257 && litLenLengths[hlit - 1] === 0; hlit--) {}

	  for (hdist = 30; hdist > 1 && distLengths[hdist - 1] === 0; hdist--) {} // HCLEN


	  treeSymbols = this.getTreeSymbols_(hlit, litLenLengths, hdist, distLengths);
	  treeLengths = this.getLengths_(treeSymbols.freqs, 7);

	  for (i = 0; i < 19; i++) {
	    transLengths[i] = treeLengths[hclenOrder[i]];
	  }

	  for (hclen = 19; hclen > 4 && transLengths[hclen - 1] === 0; hclen--) {}

	  treeCodes = this.getCodesFromLengths_(treeLengths); // åºå

	  stream.writeBits(hlit - 257, 5, true);
	  stream.writeBits(hdist - 1, 5, true);
	  stream.writeBits(hclen - 4, 4, true);

	  for (i = 0; i < hclen; i++) {
	    stream.writeBits(transLengths[i], 3, true);
	  } // ããªã¼ã®åºå


	  for (i = 0, il = treeSymbols.codes.length; i < il; i++) {
	    code = treeSymbols.codes[i];
	    stream.writeBits(treeCodes[code], treeLengths[code], true); // extra bits

	    if (code >= 16) {
	      i++;

	      switch (code) {
	        case 16:
	          bitlen = 2;
	          break;

	        case 17:
	          bitlen = 3;
	          break;

	        case 18:
	          bitlen = 7;
	          break;

	        default:
	          throw 'invalid code: ' + code;
	      }

	      stream.writeBits(treeSymbols.codes[i], bitlen, true);
	    }
	  }

	  this.dynamicHuffman(data, [litLenCodes, litLenLengths], [distCodes, distLengths], stream);
	  return stream.finish();
	};
	/**
	 * åçãããã³ç¬¦å·å(ã«ã¹ã¿ã ãããã³ãã¼ãã«)
	 * @param {!(Array.<number>|Uint16Array)} dataArray LZ77 ç¬¦å·åæ¸ã¿ byte array.
	 * @param {!Zlib.BitStream} stream æ¸ãè¾¼ã¿ç¨ãããã¹ããªã¼ã .
	 * @return {!Zlib.BitStream} ãããã³ç¬¦å·åæ¸ã¿ãããã¹ããªã¼ã ãªãã¸ã§ã¯ã.
	 */


	Zlib$1.RawDeflate.prototype.dynamicHuffman = function (dataArray, litLen, dist, stream) {
	  /** @type {number} */
	  var index;
	  /** @type {number} */

	  var length;
	  /** @type {number} */

	  var literal;
	  /** @type {number} */

	  var code;
	  /** @type {number} */

	  var litLenCodes;
	  /** @type {number} */

	  var litLenLengths;
	  /** @type {number} */

	  var distCodes;
	  /** @type {number} */

	  var distLengths;
	  litLenCodes = litLen[0];
	  litLenLengths = litLen[1];
	  distCodes = dist[0];
	  distLengths = dist[1]; // ç¬¦å·ã BitStream ã«æ¸ãè¾¼ãã§ãã

	  for (index = 0, length = dataArray.length; index < length; ++index) {
	    literal = dataArray[index]; // literal or length

	    stream.writeBits(litLenCodes[literal], litLenLengths[literal], true); // é·ãã»è·é¢ç¬¦å·

	    if (literal > 256) {
	      // length extra
	      stream.writeBits(dataArray[++index], dataArray[++index], true); // distance

	      code = dataArray[++index];
	      stream.writeBits(distCodes[code], distLengths[code], true); // distance extra

	      stream.writeBits(dataArray[++index], dataArray[++index], true); // çµç«¯
	    } else if (literal === 256) {
	      break;
	    }
	  }

	  return stream;
	};
	/**
	 * åºå®ãããã³ç¬¦å·å
	 * @param {!(Array.<number>|Uint16Array)} dataArray LZ77 ç¬¦å·åæ¸ã¿ byte array.
	 * @param {!Zlib.BitStream} stream æ¸ãè¾¼ã¿ç¨ãããã¹ããªã¼ã .
	 * @return {!Zlib.BitStream} ãããã³ç¬¦å·åæ¸ã¿ãããã¹ããªã¼ã ãªãã¸ã§ã¯ã.
	 */


	Zlib$1.RawDeflate.prototype.fixedHuffman = function (dataArray, stream) {
	  /** @type {number} */
	  var index;
	  /** @type {number} */

	  var length;
	  /** @type {number} */

	  var literal; // ç¬¦å·ã BitStream ã«æ¸ãè¾¼ãã§ãã

	  for (index = 0, length = dataArray.length; index < length; index++) {
	    literal = dataArray[index]; // ç¬¦å·ã®æ¸ãè¾¼ã¿

	    Zlib$1.BitStream.prototype.writeBits.apply(stream, Zlib$1.RawDeflate.FixedHuffmanTable[literal]); // é·ãã»è·é¢ç¬¦å·

	    if (literal > 0x100) {
	      // length extra
	      stream.writeBits(dataArray[++index], dataArray[++index], true); // distance

	      stream.writeBits(dataArray[++index], 5); // distance extra

	      stream.writeBits(dataArray[++index], dataArray[++index], true); // çµç«¯
	    } else if (literal === 0x100) {
	      break;
	    }
	  }

	  return stream;
	};
	/**
	 * ãããæå ±
	 * @param {!number} length ãããããé·ã.
	 * @param {!number} backwardDistance ãããä½ç½®ã¨ã®è·é¢.
	 * @constructor
	 */


	Zlib$1.RawDeflate.Lz77Match = function (length, backwardDistance) {
	  /** @type {number} match length. */
	  this.length = length;
	  /** @type {number} backward distance. */

	  this.backwardDistance = backwardDistance;
	};
	/**
	 * é·ãç¬¦å·ãã¼ãã«.
	 * [ã³ã¼ã, æ¡å¼µããã, æ¡å¼µãããé·] ã®éåã¨ãªã£ã¦ãã.
	 * @const
	 * @type {!(Array.<number>|Uint32Array)}
	 */


	Zlib$1.RawDeflate.Lz77Match.LengthCodeTable = function (table) {
	  return  new Uint32Array(table) ;
	}(function () {
	  /** @type {!Array} */
	  var table = [];
	  /** @type {number} */

	  var i;
	  /** @type {!Array.<number>} */

	  var c;

	  for (i = 3; i <= 258; i++) {
	    c = code(i);
	    table[i] = c[2] << 24 | c[1] << 16 | c[0];
	  }
	  /**
	   * @param {number} length lz77 length.
	   * @return {!Array.<number>} lz77 codes.
	   */


	  function code(length) {
	    switch (true) {
	      case length === 3:
	        return [257, length - 3, 0];

	      case length === 4:
	        return [258, length - 4, 0];

	      case length === 5:
	        return [259, length - 5, 0];

	      case length === 6:
	        return [260, length - 6, 0];

	      case length === 7:
	        return [261, length - 7, 0];

	      case length === 8:
	        return [262, length - 8, 0];

	      case length === 9:
	        return [263, length - 9, 0];

	      case length === 10:
	        return [264, length - 10, 0];

	      case length <= 12:
	        return [265, length - 11, 1];

	      case length <= 14:
	        return [266, length - 13, 1];

	      case length <= 16:
	        return [267, length - 15, 1];

	      case length <= 18:
	        return [268, length - 17, 1];

	      case length <= 22:
	        return [269, length - 19, 2];

	      case length <= 26:
	        return [270, length - 23, 2];

	      case length <= 30:
	        return [271, length - 27, 2];

	      case length <= 34:
	        return [272, length - 31, 2];

	      case length <= 42:
	        return [273, length - 35, 3];

	      case length <= 50:
	        return [274, length - 43, 3];

	      case length <= 58:
	        return [275, length - 51, 3];

	      case length <= 66:
	        return [276, length - 59, 3];

	      case length <= 82:
	        return [277, length - 67, 4];

	      case length <= 98:
	        return [278, length - 83, 4];

	      case length <= 114:
	        return [279, length - 99, 4];

	      case length <= 130:
	        return [280, length - 115, 4];

	      case length <= 162:
	        return [281, length - 131, 5];

	      case length <= 194:
	        return [282, length - 163, 5];

	      case length <= 226:
	        return [283, length - 195, 5];

	      case length <= 257:
	        return [284, length - 227, 5];

	      case length === 258:
	        return [285, length - 258, 0];

	      default:
	        throw 'invalid length: ' + length;
	    }
	  }

	  return table;
	}());
	/**
	 * è·é¢ç¬¦å·ãã¼ãã«
	 * @param {!number} dist è·é¢.
	 * @return {!Array.<number>} ã³ã¼ããæ¡å¼µããããæ¡å¼µãããé·ã®éå.
	 * @private
	 */


	Zlib$1.RawDeflate.Lz77Match.prototype.getDistanceCode_ = function (dist) {
	  /** @type {!Array.<number>} distance code table. */
	  var r;

	  switch (true) {
	    case dist === 1:
	      r = [0, dist - 1, 0];
	      break;

	    case dist === 2:
	      r = [1, dist - 2, 0];
	      break;

	    case dist === 3:
	      r = [2, dist - 3, 0];
	      break;

	    case dist === 4:
	      r = [3, dist - 4, 0];
	      break;

	    case dist <= 6:
	      r = [4, dist - 5, 1];
	      break;

	    case dist <= 8:
	      r = [5, dist - 7, 1];
	      break;

	    case dist <= 12:
	      r = [6, dist - 9, 2];
	      break;

	    case dist <= 16:
	      r = [7, dist - 13, 2];
	      break;

	    case dist <= 24:
	      r = [8, dist - 17, 3];
	      break;

	    case dist <= 32:
	      r = [9, dist - 25, 3];
	      break;

	    case dist <= 48:
	      r = [10, dist - 33, 4];
	      break;

	    case dist <= 64:
	      r = [11, dist - 49, 4];
	      break;

	    case dist <= 96:
	      r = [12, dist - 65, 5];
	      break;

	    case dist <= 128:
	      r = [13, dist - 97, 5];
	      break;

	    case dist <= 192:
	      r = [14, dist - 129, 6];
	      break;

	    case dist <= 256:
	      r = [15, dist - 193, 6];
	      break;

	    case dist <= 384:
	      r = [16, dist - 257, 7];
	      break;

	    case dist <= 512:
	      r = [17, dist - 385, 7];
	      break;

	    case dist <= 768:
	      r = [18, dist - 513, 8];
	      break;

	    case dist <= 1024:
	      r = [19, dist - 769, 8];
	      break;

	    case dist <= 1536:
	      r = [20, dist - 1025, 9];
	      break;

	    case dist <= 2048:
	      r = [21, dist - 1537, 9];
	      break;

	    case dist <= 3072:
	      r = [22, dist - 2049, 10];
	      break;

	    case dist <= 4096:
	      r = [23, dist - 3073, 10];
	      break;

	    case dist <= 6144:
	      r = [24, dist - 4097, 11];
	      break;

	    case dist <= 8192:
	      r = [25, dist - 6145, 11];
	      break;

	    case dist <= 12288:
	      r = [26, dist - 8193, 12];
	      break;

	    case dist <= 16384:
	      r = [27, dist - 12289, 12];
	      break;

	    case dist <= 24576:
	      r = [28, dist - 16385, 13];
	      break;

	    case dist <= 32768:
	      r = [29, dist - 24577, 13];
	      break;

	    default:
	      throw 'invalid distance';
	  }

	  return r;
	};
	/**
	 * ãããæå ±ã LZ77 ç¬¦å·åéåã§è¿ã.
	 * ãªããããã§ã¯ä»¥ä¸ã®åé¨ä»æ§ã§ç¬¦å·åãã¦ãã
	 * [ CODE, EXTRA-BIT-LEN, EXTRA, CODE, EXTRA-BIT-LEN, EXTRA ]
	 * @return {!Array.<number>} LZ77 ç¬¦å·å byte array.
	 */


	Zlib$1.RawDeflate.Lz77Match.prototype.toLz77Array = function () {
	  /** @type {number} */
	  var length = this.length;
	  /** @type {number} */

	  var dist = this.backwardDistance;
	  /** @type {Array} */

	  var codeArray = [];
	  /** @type {number} */

	  var pos = 0;
	  /** @type {!Array.<number>} */

	  var code; // length

	  code = Zlib$1.RawDeflate.Lz77Match.LengthCodeTable[length];
	  codeArray[pos++] = code & 0xffff;
	  codeArray[pos++] = code >> 16 & 0xff;
	  codeArray[pos++] = code >> 24; // distance

	  code = this.getDistanceCode_(dist);
	  codeArray[pos++] = code[0];
	  codeArray[pos++] = code[1];
	  codeArray[pos++] = code[2];
	  return codeArray;
	};
	/**
	 * LZ77 å®è£
	 * @param {!(Array.<number>|Uint8Array)} dataArray LZ77 ç¬¦å·åãããã¤ãéå.
	 * @return {!(Array.<number>|Uint16Array)} LZ77 ç¬¦å·åããéå.
	 */


	Zlib$1.RawDeflate.prototype.lz77 = function (dataArray) {
	  /** @type {number} input position */
	  var position;
	  /** @type {number} input length */

	  var length;
	  /** @type {number} loop counter */

	  var i;
	  /** @type {number} loop limiter */

	  var il;
	  /** @type {number} chained-hash-table key */

	  var matchKey;
	  /** @type {Object.<number, Array.<number>>} chained-hash-table */

	  var table = {};
	  /** @const @type {number} */

	  var windowSize = Zlib$1.RawDeflate.WindowSize;
	  /** @type {Array.<number>} match list */

	  var matchList;
	  /** @type {Zlib.RawDeflate.Lz77Match} longest match */

	  var longestMatch;
	  /** @type {Zlib.RawDeflate.Lz77Match} previous longest match */

	  var prevMatch;
	  /** @type {!(Array.<number>|Uint16Array)} lz77 buffer */

	  var lz77buf =  new Uint16Array(dataArray.length * 2) ;
	  /** @type {number} lz77 output buffer pointer */

	  var pos = 0;
	  /** @type {number} lz77 skip length */

	  var skipLength = 0;
	  /** @type {!(Array.<number>|Uint32Array)} */

	  var freqsLitLen = new ( Uint32Array )(286);
	  /** @type {!(Array.<number>|Uint32Array)} */

	  var freqsDist = new ( Uint32Array )(30);
	  /** @type {number} */

	  var lazy = this.lazy;
	  /** @type {*} temporary variable */

	  var tmp; // åæå

	  freqsLitLen[256] = 1; // EOB ã®æä½åºç¾åæ°ã¯ 1

	  /**
	   * ããããã¼ã¿ã®æ¸ãè¾¼ã¿
	   * @param {Zlib.RawDeflate.Lz77Match} match LZ77 Match data.
	   * @param {!number} offset ã¹ã­ããéå§ä½ç½®(ç¸å¯¾æå®).
	   * @private
	   */

	  function writeMatch(match, offset) {
	    /** @type {Array.<number>} */
	    var lz77Array = match.toLz77Array();
	    /** @type {number} */

	    var i;
	    /** @type {number} */

	    var il;

	    for (i = 0, il = lz77Array.length; i < il; ++i) {
	      lz77buf[pos++] = lz77Array[i];
	    }

	    freqsLitLen[lz77Array[0]]++;
	    freqsDist[lz77Array[3]]++;
	    skipLength = match.length + offset - 1;
	    prevMatch = null;
	  } // LZ77 ç¬¦å·å


	  for (position = 0, length = dataArray.length; position < length; ++position) {
	    // ããã·ã¥ã­ã¼ã®ä½æ
	    for (matchKey = 0, i = 0, il = Zlib$1.RawDeflate.Lz77MinLength; i < il; ++i) {
	      if (position + i === length) {
	        break;
	      }

	      matchKey = matchKey << 8 | dataArray[position + i];
	    } // ãã¼ãã«ãæªå®ç¾©ã ã£ããä½æãã


	    if (table[matchKey] === void 0) {
	      table[matchKey] = [];
	    }

	    matchList = table[matchKey]; // skip

	    if (skipLength-- > 0) {
	      matchList.push(position);
	      continue;
	    } // ããããã¼ãã«ã®æ´æ° (æå¤§æ»ãè·é¢ãè¶ãã¦ãããã®ãåé¤ãã)


	    while (matchList.length > 0 && position - matchList[0] > windowSize) {
	      matchList.shift();
	    } // ãã¼ã¿æ«å°¾ã§ããããããããªãå ´åã¯ãã®ã¾ã¾æµããã


	    if (position + Zlib$1.RawDeflate.Lz77MinLength >= length) {
	      if (prevMatch) {
	        writeMatch(prevMatch, -1);
	      }

	      for (i = 0, il = length - position; i < il; ++i) {
	        tmp = dataArray[position + i];
	        lz77buf[pos++] = tmp;
	        ++freqsLitLen[tmp];
	      }

	      break;
	    } // ãããåè£ããæé·ã®ãã®ãæ¢ã


	    if (matchList.length > 0) {
	      longestMatch = this.searchLongestMatch_(dataArray, position, matchList);

	      if (prevMatch) {
	        // ç¾å¨ã®ãããã®æ¹ãååã®ããããããé·ã
	        if (prevMatch.length < longestMatch.length) {
	          // write previous literal
	          tmp = dataArray[position - 1];
	          lz77buf[pos++] = tmp;
	          ++freqsLitLen[tmp]; // write current match

	          writeMatch(longestMatch, 0);
	        } else {
	          // write previous match
	          writeMatch(prevMatch, -1);
	        }
	      } else if (longestMatch.length < lazy) {
	        prevMatch = longestMatch;
	      } else {
	        writeMatch(longestMatch, 0);
	      } // ååããããã¦ãã¦ä»åãããããªãã£ããååã®ãæ¡ç¨

	    } else if (prevMatch) {
	      writeMatch(prevMatch, -1);
	    } else {
	      tmp = dataArray[position];
	      lz77buf[pos++] = tmp;
	      ++freqsLitLen[tmp];
	    }

	    matchList.push(position); // ããããã¼ãã«ã«ç¾å¨ã®ä½ç½®ãä¿å­
	  } // çµç«¯å¦ç


	  lz77buf[pos++] = 256;
	  freqsLitLen[256]++;
	  this.freqsLitLen = freqsLitLen;
	  this.freqsDist = freqsDist;
	  return (
	    /** @type {!(Uint16Array|Array.<number>)} */
	     lz77buf.subarray(0, pos) 
	  );
	};
	/**
	 * ãããããåè£ã®ä¸­ããæé·ä¸è´ãæ¢ã
	 * @param {!Object} data plain data byte array.
	 * @param {!number} position plain data byte array position.
	 * @param {!Array.<number>} matchList åè£ã¨ãªãä½ç½®ã®éå.
	 * @return {!Zlib.RawDeflate.Lz77Match} æé·ãã¤æç­è·é¢ã®ããããªãã¸ã§ã¯ã.
	 * @private
	 */


	Zlib$1.RawDeflate.prototype.searchLongestMatch_ = function (data, position, matchList) {
	  var match,
	      currentMatch,
	      matchMax = 0,
	      matchLength,
	      i,
	      j,
	      l,
	      dl = data.length; // åè£ãå¾ããã 1 ã¤ãã¤çµãè¾¼ãã§ãã

	  permatch: for (i = 0, l = matchList.length; i < l; i++) {
	    match = matchList[l - i - 1];
	    matchLength = Zlib$1.RawDeflate.Lz77MinLength; // ååã¾ã§ã®æé·ä¸è´ãæ«å°¾ããä¸è´æ¤ç´¢ãã

	    if (matchMax > Zlib$1.RawDeflate.Lz77MinLength) {
	      for (j = matchMax; j > Zlib$1.RawDeflate.Lz77MinLength; j--) {
	        if (data[match + j - 1] !== data[position + j - 1]) {
	          continue permatch;
	        }
	      }

	      matchLength = matchMax;
	    } // æé·ä¸è´æ¢ç´¢


	    while (matchLength < Zlib$1.RawDeflate.Lz77MaxLength && position + matchLength < dl && data[match + matchLength] === data[position + matchLength]) {
	      ++matchLength;
	    } // ãããé·ãåãå ´åã¯å¾æ¹ãåªå


	    if (matchLength > matchMax) {
	      currentMatch = match;
	      matchMax = matchLength;
	    } // æé·ãç¢ºå®ãããå¾ã®å¦çã¯çç¥


	    if (matchLength === Zlib$1.RawDeflate.Lz77MaxLength) {
	      break;
	    }
	  }

	  return new Zlib$1.RawDeflate.Lz77Match(matchMax, position - currentMatch);
	};
	/**
	 * Tree-Transmit Symbols ã®ç®åº
	 * reference: PuTTY Deflate implementation
	 * @param {number} hlit HLIT.
	 * @param {!(Array.<number>|Uint8Array)} litlenLengths ãªãã©ã«ã¨é·ãç¬¦å·ã®ç¬¦å·é·éå.
	 * @param {number} hdist HDIST.
	 * @param {!(Array.<number>|Uint8Array)} distLengths è·é¢ç¬¦å·ã®ç¬¦å·é·éå.
	 * @return {{
	 *   codes: !(Array.<number>|Uint32Array),
	 *   freqs: !(Array.<number>|Uint8Array)
	 * }} Tree-Transmit Symbols.
	 */


	Zlib$1.RawDeflate.prototype.getTreeSymbols_ = function (hlit, litlenLengths, hdist, distLengths) {
	  var src = new ( Uint32Array )(hlit + hdist),
	      i,
	      j,
	      runLength,
	      l,
	      result = new ( Uint32Array )(286 + 30),
	      nResult,
	      rpt,
	      freqs = new ( Uint8Array )(19);
	  j = 0;

	  for (i = 0; i < hlit; i++) {
	    src[j++] = litlenLengths[i];
	  }

	  for (i = 0; i < hdist; i++) {
	    src[j++] = distLengths[i];
	  } // åæå


	  nResult = 0;

	  for (i = 0, l = src.length; i < l; i += j) {
	    // Run Length Encoding
	    for (j = 1; i + j < l && src[i + j] === src[i]; ++j) {}

	    runLength = j;

	    if (src[i] === 0) {
	      // 0 ã®ç¹°ãè¿ãã 3 åæªæºãªãã°ãã®ã¾ã¾
	      if (runLength < 3) {
	        while (runLength-- > 0) {
	          result[nResult++] = 0;
	          freqs[0]++;
	        }
	      } else {
	        while (runLength > 0) {
	          // ç¹°ãè¿ãã¯æå¤§ 138 ã¾ã§ãªã®ã§åãè©°ãã
	          rpt = runLength < 138 ? runLength : 138;

	          if (rpt > runLength - 3 && rpt < runLength) {
	            rpt = runLength - 3;
	          } // 3-10 å -> 17


	          if (rpt <= 10) {
	            result[nResult++] = 17;
	            result[nResult++] = rpt - 3;
	            freqs[17]++; // 11-138 å -> 18
	          } else {
	            result[nResult++] = 18;
	            result[nResult++] = rpt - 11;
	            freqs[18]++;
	          }

	          runLength -= rpt;
	        }
	      }
	    } else {
	      result[nResult++] = src[i];
	      freqs[src[i]]++;
	      runLength--; // ç¹°ãè¿ãåæ°ã3åæªæºãªãã°ã©ã³ã¬ã³ã°ã¹ç¬¦å·ã¯è¦ããªã

	      if (runLength < 3) {
	        while (runLength-- > 0) {
	          result[nResult++] = src[i];
	          freqs[src[i]]++;
	        } // 3 åä»¥ä¸ãªãã°ã©ã³ã¬ã³ã°ã¹ç¬¦å·å

	      } else {
	        while (runLength > 0) {
	          // runLengthã 3-6 ã§åå²
	          rpt = runLength < 6 ? runLength : 6;

	          if (rpt > runLength - 3 && rpt < runLength) {
	            rpt = runLength - 3;
	          }

	          result[nResult++] = 16;
	          result[nResult++] = rpt - 3;
	          freqs[16]++;
	          runLength -= rpt;
	        }
	      }
	    }
	  }

	  return {
	    codes:  result.subarray(0, nResult) ,
	    freqs: freqs
	  };
	};
	/**
	 * ãããã³ç¬¦å·ã®é·ããåå¾ãã
	 * @param {!(Array.<number>|Uint8Array|Uint32Array)} freqs åºç¾ã«ã¦ã³ã.
	 * @param {number} limit ç¬¦å·é·ã®å¶é.
	 * @return {!(Array.<number>|Uint8Array)} ç¬¦å·é·éå.
	 * @private
	 */


	Zlib$1.RawDeflate.prototype.getLengths_ = function (freqs, limit) {
	  /** @type {number} */
	  var nSymbols = freqs.length;
	  /** @type {Zlib.Heap} */

	  var heap = new Zlib$1.Heap(2 * Zlib$1.RawDeflate.HUFMAX);
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var length = new ( Uint8Array )(nSymbols);
	  /** @type {Array} */

	  var nodes;
	  /** @type {!(Array.<number>|Uint32Array)} */

	  var values;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var codeLength;
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il; // éåã®åæå


	  for (i = 0; i < nSymbols; ++i) {
	    if (freqs[i] > 0) {
	      heap.push(i, freqs[i]);
	    }
	  }

	  nodes = new Array(heap.length / 2);
	  values = new ( Uint32Array )(heap.length / 2); // é 0 ã®è¦ç´ ãä¸ã¤ã ãã ã£ãå ´åã¯ããã®ã·ã³ãã«ã«ç¬¦å·é· 1 ãå²ãå½ã¦ã¦çµäº

	  if (nodes.length === 1) {
	    length[heap.pop().index] = 1;
	    return length;
	  } // Reverse Package Merge Algorithm ã«ãã Canonical Huffman Code ã®ç¬¦å·é·æ±ºå®


	  for (i = 0, il = heap.length / 2; i < il; ++i) {
	    nodes[i] = heap.pop();
	    values[i] = nodes[i].value;
	  }

	  codeLength = this.reversePackageMerge_(values, values.length, limit);

	  for (i = 0, il = nodes.length; i < il; ++i) {
	    length[nodes[i].index] = codeLength[i];
	  }

	  return length;
	};
	/**
	 * Reverse Package Merge Algorithm.
	 * @param {!(Array.<number>|Uint32Array)} freqs sorted probability.
	 * @param {number} symbols number of symbols.
	 * @param {number} limit code length limit.
	 * @return {!(Array.<number>|Uint8Array)} code lengths.
	 */


	Zlib$1.RawDeflate.prototype.reversePackageMerge_ = function (freqs, symbols, limit) {
	  /** @type {!(Array.<number>|Uint16Array)} */
	  var minimumCost = new ( Uint16Array )(limit);
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var flag = new ( Uint8Array )(limit);
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var codeLength = new ( Uint8Array )(symbols);
	  /** @type {Array} */

	  var value = new Array(limit);
	  /** @type {Array} */

	  var type = new Array(limit);
	  /** @type {Array.<number>} */

	  var currentPosition = new Array(limit);
	  /** @type {number} */

	  var excess = (1 << limit) - symbols;
	  /** @type {number} */

	  var half = 1 << limit - 1;
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var j;
	  /** @type {number} */

	  var t;
	  /** @type {number} */

	  var weight;
	  /** @type {number} */

	  var next;
	  /**
	   * @param {number} j
	   */

	  function takePackage(j) {
	    /** @type {number} */
	    var x = type[j][currentPosition[j]];

	    if (x === symbols) {
	      takePackage(j + 1);
	      takePackage(j + 1);
	    } else {
	      --codeLength[x];
	    }

	    ++currentPosition[j];
	  }

	  minimumCost[limit - 1] = symbols;

	  for (j = 0; j < limit; ++j) {
	    if (excess < half) {
	      flag[j] = 0;
	    } else {
	      flag[j] = 1;
	      excess -= half;
	    }

	    excess <<= 1;
	    minimumCost[limit - 2 - j] = (minimumCost[limit - 1 - j] / 2 | 0) + symbols;
	  }

	  minimumCost[0] = flag[0];
	  value[0] = new Array(minimumCost[0]);
	  type[0] = new Array(minimumCost[0]);

	  for (j = 1; j < limit; ++j) {
	    if (minimumCost[j] > 2 * minimumCost[j - 1] + flag[j]) {
	      minimumCost[j] = 2 * minimumCost[j - 1] + flag[j];
	    }

	    value[j] = new Array(minimumCost[j]);
	    type[j] = new Array(minimumCost[j]);
	  }

	  for (i = 0; i < symbols; ++i) {
	    codeLength[i] = limit;
	  }

	  for (t = 0; t < minimumCost[limit - 1]; ++t) {
	    value[limit - 1][t] = freqs[t];
	    type[limit - 1][t] = t;
	  }

	  for (i = 0; i < limit; ++i) {
	    currentPosition[i] = 0;
	  }

	  if (flag[limit - 1] === 1) {
	    --codeLength[0];
	    ++currentPosition[limit - 1];
	  }

	  for (j = limit - 2; j >= 0; --j) {
	    i = 0;
	    weight = 0;
	    next = currentPosition[j + 1];

	    for (t = 0; t < minimumCost[j]; t++) {
	      weight = value[j + 1][next] + value[j + 1][next + 1];

	      if (weight > freqs[i]) {
	        value[j][t] = weight;
	        type[j][t] = symbols;
	        next += 2;
	      } else {
	        value[j][t] = freqs[i];
	        type[j][t] = i;
	        ++i;
	      }
	    }

	    currentPosition[j] = 0;

	    if (flag[j] === 1) {
	      takePackage(j);
	    }
	  }

	  return codeLength;
	};
	/**
	 * ç¬¦å·é·éåãããããã³ç¬¦å·ãåå¾ãã
	 * reference: PuTTY Deflate implementation
	 * @param {!(Array.<number>|Uint8Array)} lengths ç¬¦å·é·éå.
	 * @return {!(Array.<number>|Uint16Array)} ãããã³ç¬¦å·éå.
	 * @private
	 */


	Zlib$1.RawDeflate.prototype.getCodesFromLengths_ = function (lengths) {
	  var codes = new ( Uint16Array )(lengths.length),
	      count = [],
	      startCode = [],
	      code = 0,
	      i,
	      il,
	      j,
	      m; // Count the codes of each length.

	  for (i = 0, il = lengths.length; i < il; i++) {
	    count[lengths[i]] = (count[lengths[i]] | 0) + 1;
	  } // Determine the starting code for each length block.


	  for (i = 1, il = Zlib$1.RawDeflate.MaxCodeLength; i <= il; i++) {
	    startCode[i] = code;
	    code += count[i] | 0;
	    code <<= 1;
	  } // Determine the code for each symbol. Mirrored, of course.


	  for (i = 0, il = lengths.length; i < il; i++) {
	    code = startCode[lengths[i]];
	    startCode[lengths[i]] += 1;
	    codes[i] = 0;

	    for (j = 0, m = lengths[i]; j < m; j++) {
	      codes[i] = codes[i] << 1 | code & 1;
	      code >>>= 1;
	    }
	  }

	  return codes;
	};
	/**
	 * @param {!(Array.<number>|Uint8Array)} input input buffer.
	 * @param {Object=} opt_params options.
	 * @constructor
	 */


	Zlib$1.Unzip = function (input, opt_params) {
	  opt_params = opt_params || {};
	  /** @type {!(Array.<number>|Uint8Array)} */

	  this.input =  input instanceof Array ? new Uint8Array(input) : input;
	  /** @type {number} */

	  this.ip = 0;
	  /** @type {number} */

	  this.eocdrOffset;
	  /** @type {number} */

	  this.numberOfThisDisk;
	  /** @type {number} */

	  this.startDisk;
	  /** @type {number} */

	  this.totalEntriesThisDisk;
	  /** @type {number} */

	  this.totalEntries;
	  /** @type {number} */

	  this.centralDirectorySize;
	  /** @type {number} */

	  this.centralDirectoryOffset;
	  /** @type {number} */

	  this.commentLength;
	  /** @type {(Array.<number>|Uint8Array)} */

	  this.comment;
	  /** @type {Array.<Zlib.Unzip.FileHeader>} */

	  this.fileHeaderList;
	  /** @type {Object.<string, number>} */

	  this.filenameToIndex;
	  /** @type {boolean} */

	  this.verify = opt_params['verify'] || false;
	  /** @type {(Array.<number>|Uint8Array)} */

	  this.password = opt_params['password'];
	};

	Zlib$1.Unzip.CompressionMethod = Zlib$1.Zip.CompressionMethod;
	/**
	 * @type {Array.<number>}
	 * @const
	 */

	Zlib$1.Unzip.FileHeaderSignature = Zlib$1.Zip.FileHeaderSignature;
	/**
	 * @type {Array.<number>}
	 * @const
	 */

	Zlib$1.Unzip.LocalFileHeaderSignature = Zlib$1.Zip.LocalFileHeaderSignature;
	/**
	 * @type {Array.<number>}
	 * @const
	 */

	Zlib$1.Unzip.CentralDirectorySignature = Zlib$1.Zip.CentralDirectorySignature;
	/**
	 * @param {!(Array.<number>|Uint8Array)} input input buffer.
	 * @param {number} ip input position.
	 * @constructor
	 */

	Zlib$1.Unzip.FileHeader = function (input, ip) {
	  /** @type {!(Array.<number>|Uint8Array)} */
	  this.input = input;
	  /** @type {number} */

	  this.offset = ip;
	  /** @type {number} */

	  this.length;
	  /** @type {number} */

	  this.version;
	  /** @type {number} */

	  this.os;
	  /** @type {number} */

	  this.needVersion;
	  /** @type {number} */

	  this.flags;
	  /** @type {number} */

	  this.compression;
	  /** @type {number} */

	  this.time;
	  /** @type {number} */

	  this.date;
	  /** @type {number} */

	  this.crc32;
	  /** @type {number} */

	  this.compressedSize;
	  /** @type {number} */

	  this.plainSize;
	  /** @type {number} */

	  this.fileNameLength;
	  /** @type {number} */

	  this.extraFieldLength;
	  /** @type {number} */

	  this.fileCommentLength;
	  /** @type {number} */

	  this.diskNumberStart;
	  /** @type {number} */

	  this.internalFileAttributes;
	  /** @type {number} */

	  this.externalFileAttributes;
	  /** @type {number} */

	  this.relativeOffset;
	  /** @type {string} */

	  this.filename;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  this.extraField;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  this.comment;
	};

	Zlib$1.Unzip.FileHeader.prototype.parse = function () {
	  /** @type {!(Array.<number>|Uint8Array)} */
	  var input = this.input;
	  /** @type {number} */

	  var ip = this.offset; // central file header signature

	  if (input[ip++] !== Zlib$1.Unzip.FileHeaderSignature[0] || input[ip++] !== Zlib$1.Unzip.FileHeaderSignature[1] || input[ip++] !== Zlib$1.Unzip.FileHeaderSignature[2] || input[ip++] !== Zlib$1.Unzip.FileHeaderSignature[3]) {
	    throw new Error('invalid file header signature');
	  } // version made by


	  this.version = input[ip++];
	  this.os = input[ip++]; // version needed to extract

	  this.needVersion = input[ip++] | input[ip++] << 8; // general purpose bit flag

	  this.flags = input[ip++] | input[ip++] << 8; // compression method

	  this.compression = input[ip++] | input[ip++] << 8; // last mod file time

	  this.time = input[ip++] | input[ip++] << 8; //last mod file date

	  this.date = input[ip++] | input[ip++] << 8; // crc-32

	  this.crc32 = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // compressed size

	  this.compressedSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // uncompressed size

	  this.plainSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // file name length

	  this.fileNameLength = input[ip++] | input[ip++] << 8; // extra field length

	  this.extraFieldLength = input[ip++] | input[ip++] << 8; // file comment length

	  this.fileCommentLength = input[ip++] | input[ip++] << 8; // disk number start

	  this.diskNumberStart = input[ip++] | input[ip++] << 8; // internal file attributes

	  this.internalFileAttributes = input[ip++] | input[ip++] << 8; // external file attributes

	  this.externalFileAttributes = input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24; // relative offset of local header

	  this.relativeOffset = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // file name

	  this.filename = String.fromCharCode.apply(null,  input.subarray(ip, ip += this.fileNameLength) ); // extra field

	  this.extraField =  input.subarray(ip, ip += this.extraFieldLength) ; // file comment

	  this.comment =  input.subarray(ip, ip + this.fileCommentLength) ;
	  this.length = ip - this.offset;
	};
	/**
	 * @param {!(Array.<number>|Uint8Array)} input input buffer.
	 * @param {number} ip input position.
	 * @constructor
	 */


	Zlib$1.Unzip.LocalFileHeader = function (input, ip) {
	  /** @type {!(Array.<number>|Uint8Array)} */
	  this.input = input;
	  /** @type {number} */

	  this.offset = ip;
	  /** @type {number} */

	  this.length;
	  /** @type {number} */

	  this.needVersion;
	  /** @type {number} */

	  this.flags;
	  /** @type {number} */

	  this.compression;
	  /** @type {number} */

	  this.time;
	  /** @type {number} */

	  this.date;
	  /** @type {number} */

	  this.crc32;
	  /** @type {number} */

	  this.compressedSize;
	  /** @type {number} */

	  this.plainSize;
	  /** @type {number} */

	  this.fileNameLength;
	  /** @type {number} */

	  this.extraFieldLength;
	  /** @type {string} */

	  this.filename;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  this.extraField;
	};

	Zlib$1.Unzip.LocalFileHeader.Flags = Zlib$1.Zip.Flags;

	Zlib$1.Unzip.LocalFileHeader.prototype.parse = function () {
	  /** @type {!(Array.<number>|Uint8Array)} */
	  var input = this.input;
	  /** @type {number} */

	  var ip = this.offset; // local file header signature

	  if (input[ip++] !== Zlib$1.Unzip.LocalFileHeaderSignature[0] || input[ip++] !== Zlib$1.Unzip.LocalFileHeaderSignature[1] || input[ip++] !== Zlib$1.Unzip.LocalFileHeaderSignature[2] || input[ip++] !== Zlib$1.Unzip.LocalFileHeaderSignature[3]) {
	    throw new Error('invalid local file header signature');
	  } // version needed to extract


	  this.needVersion = input[ip++] | input[ip++] << 8; // general purpose bit flag

	  this.flags = input[ip++] | input[ip++] << 8; // compression method

	  this.compression = input[ip++] | input[ip++] << 8; // last mod file time

	  this.time = input[ip++] | input[ip++] << 8; //last mod file date

	  this.date = input[ip++] | input[ip++] << 8; // crc-32

	  this.crc32 = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // compressed size

	  this.compressedSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // uncompressed size

	  this.plainSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // file name length

	  this.fileNameLength = input[ip++] | input[ip++] << 8; // extra field length

	  this.extraFieldLength = input[ip++] | input[ip++] << 8; // file name

	  this.filename = String.fromCharCode.apply(null,  input.subarray(ip, ip += this.fileNameLength) ); // extra field

	  this.extraField =  input.subarray(ip, ip += this.extraFieldLength) ;
	  this.length = ip - this.offset;
	};

	Zlib$1.Unzip.prototype.searchEndOfCentralDirectoryRecord = function () {
	  /** @type {!(Array.<number>|Uint8Array)} */
	  var input = this.input;
	  /** @type {number} */

	  var ip;

	  for (ip = input.length - 12; ip > 0; --ip) {
	    if (input[ip] === Zlib$1.Unzip.CentralDirectorySignature[0] && input[ip + 1] === Zlib$1.Unzip.CentralDirectorySignature[1] && input[ip + 2] === Zlib$1.Unzip.CentralDirectorySignature[2] && input[ip + 3] === Zlib$1.Unzip.CentralDirectorySignature[3]) {
	      this.eocdrOffset = ip;
	      return;
	    }
	  }

	  throw new Error('End of Central Directory Record not found');
	};

	Zlib$1.Unzip.prototype.parseEndOfCentralDirectoryRecord = function () {
	  /** @type {!(Array.<number>|Uint8Array)} */
	  var input = this.input;
	  /** @type {number} */

	  var ip;

	  if (!this.eocdrOffset) {
	    this.searchEndOfCentralDirectoryRecord();
	  }

	  ip = this.eocdrOffset; // signature

	  if (input[ip++] !== Zlib$1.Unzip.CentralDirectorySignature[0] || input[ip++] !== Zlib$1.Unzip.CentralDirectorySignature[1] || input[ip++] !== Zlib$1.Unzip.CentralDirectorySignature[2] || input[ip++] !== Zlib$1.Unzip.CentralDirectorySignature[3]) {
	    throw new Error('invalid signature');
	  } // number of this disk


	  this.numberOfThisDisk = input[ip++] | input[ip++] << 8; // number of the disk with the start of the central directory

	  this.startDisk = input[ip++] | input[ip++] << 8; // total number of entries in the central directory on this disk

	  this.totalEntriesThisDisk = input[ip++] | input[ip++] << 8; // total number of entries in the central directory

	  this.totalEntries = input[ip++] | input[ip++] << 8; // size of the central directory

	  this.centralDirectorySize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // offset of start of central directory with respect to the starting disk number

	  this.centralDirectoryOffset = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // .ZIP file comment length

	  this.commentLength = input[ip++] | input[ip++] << 8; // .ZIP file comment

	  this.comment =  input.subarray(ip, ip + this.commentLength) ;
	};

	Zlib$1.Unzip.prototype.parseFileHeader = function () {
	  /** @type {Array.<Zlib.Unzip.FileHeader>} */
	  var filelist = [];
	  /** @type {Object.<string, number>} */

	  var filetable = {};
	  /** @type {number} */

	  var ip;
	  /** @type {Zlib.Unzip.FileHeader} */

	  var fileHeader;
	  /*: @type {number} */

	  var i;
	  /*: @type {number} */

	  var il;

	  if (this.fileHeaderList) {
	    return;
	  }

	  if (this.centralDirectoryOffset === void 0) {
	    this.parseEndOfCentralDirectoryRecord();
	  }

	  ip = this.centralDirectoryOffset;

	  for (i = 0, il = this.totalEntries; i < il; ++i) {
	    fileHeader = new Zlib$1.Unzip.FileHeader(this.input, ip);
	    fileHeader.parse();
	    ip += fileHeader.length;
	    filelist[i] = fileHeader;
	    filetable[fileHeader.filename] = i;
	  }

	  if (this.centralDirectorySize < ip - this.centralDirectoryOffset) {
	    throw new Error('invalid file header size');
	  }

	  this.fileHeaderList = filelist;
	  this.filenameToIndex = filetable;
	};
	/**
	 * @param {number} index file header index.
	 * @param {Object=} opt_params
	 * @return {!(Array.<number>|Uint8Array)} file data.
	 */


	Zlib$1.Unzip.prototype.getFileData = function (index, opt_params) {
	  opt_params = opt_params || {};
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var input = this.input;
	  /** @type {Array.<Zlib.Unzip.FileHeader>} */

	  var fileHeaderList = this.fileHeaderList;
	  /** @type {Zlib.Unzip.LocalFileHeader} */

	  var localFileHeader;
	  /** @type {number} */

	  var offset;
	  /** @type {number} */

	  var length;
	  /** @type {!(Array.<number>|Uint8Array)} */

	  var buffer;
	  /** @type {number} */

	  var crc32;
	  /** @type {Array.<number>|Uint32Array|Object} */

	  var key;
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il;

	  if (!fileHeaderList) {
	    this.parseFileHeader();
	  }

	  if (fileHeaderList[index] === void 0) {
	    throw new Error('wrong index');
	  }

	  offset = fileHeaderList[index].relativeOffset;
	  localFileHeader = new Zlib$1.Unzip.LocalFileHeader(this.input, offset);
	  localFileHeader.parse();
	  offset += localFileHeader.length;
	  length = localFileHeader.compressedSize; // decryption

	  if ((localFileHeader.flags & Zlib$1.Unzip.LocalFileHeader.Flags.ENCRYPT) !== 0) {
	    if (!(opt_params['password'] || this.password)) {
	      throw new Error('please set password');
	    }

	    key = this.createDecryptionKey(opt_params['password'] || this.password); // encryption header

	    for (i = offset, il = offset + 12; i < il; ++i) {
	      this.decode(key, input[i]);
	    }

	    offset += 12;
	    length -= 12; // decryption

	    for (i = offset, il = offset + length; i < il; ++i) {
	      input[i] = this.decode(key, input[i]);
	    }
	  }

	  switch (localFileHeader.compression) {
	    case Zlib$1.Unzip.CompressionMethod.STORE:
	      buffer =  this.input.subarray(offset, offset + length) ;
	      break;

	    case Zlib$1.Unzip.CompressionMethod.DEFLATE:
	      buffer = new Zlib$1.RawInflate(this.input, {
	        'index': offset,
	        'bufferSize': localFileHeader.plainSize
	      }).decompress();
	      break;

	    default:
	      throw new Error('unknown compression type');
	  }

	  if (this.verify) {
	    crc32 = Zlib$1.CRC32.calc(buffer);

	    if (localFileHeader.crc32 !== crc32) {
	      throw new Error('wrong crc: file=0x' + localFileHeader.crc32.toString(16) + ', data=0x' + crc32.toString(16));
	    }
	  }

	  return buffer;
	};
	/**
	 * @return {Array.<string>}
	 */


	Zlib$1.Unzip.prototype.getFilenames = function () {
	  /** @type {Array.<string>} */
	  var filenameList = [];
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il;
	  /** @type {Array.<Zlib.Unzip.FileHeader>} */

	  var fileHeaderList;

	  if (!this.fileHeaderList) {
	    this.parseFileHeader();
	  }

	  fileHeaderList = this.fileHeaderList;

	  for (i = 0, il = fileHeaderList.length; i < il; ++i) {
	    filenameList[i] = fileHeaderList[i].filename;
	  }

	  return filenameList;
	};
	/**
	 * @param {string} filename extract filename.
	 * @param {Object=} opt_params
	 * @return {!(Array.<number>|Uint8Array)} decompressed data.
	 */


	Zlib$1.Unzip.prototype.decompress = function (filename, opt_params) {
	  /** @type {number} */
	  var index;

	  if (!this.filenameToIndex) {
	    this.parseFileHeader();
	  }

	  index = this.filenameToIndex[filename];

	  if (index === void 0) {
	    throw new Error(filename + ' not found');
	  }

	  return this.getFileData(index, opt_params);
	};
	/**
	 * @param {(Array.<number>|Uint8Array)} password
	 */


	Zlib$1.Unzip.prototype.setPassword = function (password) {
	  this.password = password;
	};
	/**
	 * @param {(Array.<number>|Uint32Array|Object)} key
	 * @param {number} n
	 * @return {number}
	 */


	Zlib$1.Unzip.prototype.decode = function (key, n) {
	  n ^= this.getByte(
	  /** @type {(Array.<number>|Uint32Array)} */
	  key);
	  this.updateKeys(
	  /** @type {(Array.<number>|Uint32Array)} */
	  key, n);
	  return n;
	}; // common method


	Zlib$1.Unzip.prototype.updateKeys = Zlib$1.Zip.prototype.updateKeys;
	Zlib$1.Unzip.prototype.createDecryptionKey = Zlib$1.Zip.prototype.createEncryptionKey;
	Zlib$1.Unzip.prototype.getByte = Zlib$1.Zip.prototype.getByte;
	/**
	 * @fileoverview éå¤ãªé¢æ°ç¾¤ãã¾ã¨ããã¢ã¸ã¥ã¼ã«å®è£.
	 */

	/**
	 * Byte String ãã Byte Array ã«å¤æ.
	 * @param {!string} str byte string.
	 * @return {!Array.<number>} byte array.
	 */

	Zlib$1.Util.stringToByteArray = function (str) {
	  /** @type {!Array.<(string|number)>} */
	  var tmp = str.split('');
	  /** @type {number} */

	  var i;
	  /** @type {number} */

	  var il;

	  for (i = 0, il = tmp.length; i < il; i++) {
	    tmp[i] = (tmp[i].charCodeAt(0) & 0xff) >>> 0;
	  }

	  return tmp;
	};
	/**
	 * @fileoverview Adler32 checksum å®è£.
	 */

	/**
	 * Adler32 ããã·ã¥å¤ã®ä½æ
	 * @param {!(Array|Uint8Array|string)} array ç®åºã«ä½¿ç¨ãã byte array.
	 * @return {number} Adler32 ããã·ã¥å¤.
	 */


	Zlib$1.Adler32 = function (array) {
	  if (typeof array === 'string') {
	    array = Zlib$1.Util.stringToByteArray(array);
	  }

	  return Zlib$1.Adler32.update(1, array);
	};
	/**
	 * Adler32 ããã·ã¥å¤ã®æ´æ°
	 * @param {number} adler ç¾å¨ã®ããã·ã¥å¤.
	 * @param {!(Array|Uint8Array)} array æ´æ°ã«ä½¿ç¨ãã byte array.
	 * @return {number} Adler32 ããã·ã¥å¤.
	 */


	Zlib$1.Adler32.update = function (adler, array) {
	  /** @type {number} */
	  var s1 = adler & 0xffff;
	  /** @type {number} */

	  var s2 = adler >>> 16 & 0xffff;
	  /** @type {number} array length */

	  var len = array.length;
	  /** @type {number} loop length (don't overflow) */

	  var tlen;
	  /** @type {number} array index */

	  var i = 0;

	  while (len > 0) {
	    tlen = len > Zlib$1.Adler32.OptimizationParameter ? Zlib$1.Adler32.OptimizationParameter : len;
	    len -= tlen;

	    do {
	      s1 += array[i++];
	      s2 += s1;
	    } while (--tlen);

	    s1 %= 65521;
	    s2 %= 65521;
	  }

	  return (s2 << 16 | s1) >>> 0;
	};
	/**
	 * Adler32 æé©åãã©ã¡ã¼ã¿
	 * ç¾ç¶ã§ã¯ 1024 ç¨åº¦ãæé©.
	 * @see http://jsperf.com/adler-32-simple-vs-optimized/3
	 * @define {number}
	 */


	Zlib$1.Adler32.OptimizationParameter = 1024;
	/**
	 * ãããã¹ããªã¼ã 
	 * @constructor
	 * @param {!(Array|Uint8Array)=} buffer output buffer.
	 * @param {number=} bufferPosition start buffer pointer.
	 */

	Zlib$1.BitStream = function (buffer, bufferPosition) {
	  /** @type {number} buffer index. */
	  this.index = typeof bufferPosition === 'number' ? bufferPosition : 0;
	  /** @type {number} bit index. */

	  this.bitindex = 0;
	  /** @type {!(Array|Uint8Array)} bit-stream output buffer. */

	  this.buffer = buffer instanceof ( Uint8Array ) ? buffer : new ( Uint8Array )(Zlib$1.BitStream.DefaultBlockSize); // å¥åããã index ãè¶³ããªãã£ããæ¡å¼µããããåã«ãã¦ããã¡ãªãä¸æ­£ã¨ãã

	  if (this.buffer.length * 2 <= this.index) {
	    throw new Error("invalid index");
	  } else if (this.buffer.length <= this.index) {
	    this.expandBuffer();
	  }
	};
	/**
	 * ããã©ã«ããã­ãã¯ãµã¤ãº.
	 * @const
	 * @type {number}
	 */


	Zlib$1.BitStream.DefaultBlockSize = 0x8000;
	/**
	 * expand buffer.
	 * @return {!(Array|Uint8Array)} new buffer.
	 */

	Zlib$1.BitStream.prototype.expandBuffer = function () {
	  /** @type {!(Array|Uint8Array)} old buffer. */
	  var oldbuf = this.buffer;
	  /** @type {number} loop limiter. */

	  var il = oldbuf.length;
	  /** @type {!(Array|Uint8Array)} new buffer. */

	  var buffer = new ( Uint8Array )(il << 1); // copy buffer

	  {
	    buffer.set(oldbuf);
	  }

	  return this.buffer = buffer;
	};
	/**
	 * æ°å¤ããããã§æå®ããæ°ã ãæ¸ãè¾¼ã.
	 * @param {number} number æ¸ãè¾¼ãæ°å¤.
	 * @param {number} n æ¸ãè¾¼ããããæ°.
	 * @param {boolean=} reverse éé ã«æ¸ãè¾¼ããªãã° true.
	 */


	Zlib$1.BitStream.prototype.writeBits = function (number, n, reverse) {
	  var buffer = this.buffer;
	  var index = this.index;
	  var bitindex = this.bitindex;
	  /** @type {number} current octet. */

	  var current = buffer[index];
	  /** @type {number} loop counter. */

	  var i;
	  /**
	   * 32-bit æ´æ°ã®ãããé ãéã«ãã
	   * @param {number} n 32-bit integer.
	   * @return {number} reversed 32-bit integer.
	   * @private
	   */

	  function rev32_(n) {
	    return Zlib$1.BitStream.ReverseTable[n & 0xFF] << 24 | Zlib$1.BitStream.ReverseTable[n >>> 8 & 0xFF] << 16 | Zlib$1.BitStream.ReverseTable[n >>> 16 & 0xFF] << 8 | Zlib$1.BitStream.ReverseTable[n >>> 24 & 0xFF];
	  }

	  if (reverse && n > 1) {
	    number = n > 8 ? rev32_(number) >> 32 - n : Zlib$1.BitStream.ReverseTable[number] >> 8 - n;
	  } // Byte å¢çãè¶ããªãã¨ã


	  if (n + bitindex < 8) {
	    current = current << n | number;
	    bitindex += n; // Byte å¢çãè¶ããã¨ã
	  } else {
	    for (i = 0; i < n; ++i) {
	      current = current << 1 | number >> n - i - 1 & 1; // next byte

	      if (++bitindex === 8) {
	        bitindex = 0;
	        buffer[index++] = Zlib$1.BitStream.ReverseTable[current];
	        current = 0; // expand

	        if (index === buffer.length) {
	          buffer = this.expandBuffer();
	        }
	      }
	    }
	  }

	  buffer[index] = current;
	  this.buffer = buffer;
	  this.bitindex = bitindex;
	  this.index = index;
	};
	/**
	 * ã¹ããªã¼ã ã®çµç«¯å¦çãè¡ã
	 * @return {!(Array|Uint8Array)} çµç«¯å¦çå¾ã®ãããã¡ã byte array ã§è¿ã.
	 */


	Zlib$1.BitStream.prototype.finish = function () {
	  var buffer = this.buffer;
	  var index = this.index;
	  /** @type {!(Array|Uint8Array)} output buffer. */

	  var output; // bitindex ã 0 ã®æã¯ä½åã« index ãé²ãã§ããç¶æ

	  if (this.bitindex > 0) {
	    buffer[index] <<= 8 - this.bitindex;
	    buffer[index] = Zlib$1.BitStream.ReverseTable[buffer[index]];
	    index++;
	  } // array truncation


	  {
	    output = buffer.subarray(0, index);
	  }

	  return output;
	};
	/**
	 * 0-255 ã®ãããé ãåè»¢ãããã¼ãã«
	 * @const
	 * @type {!(Uint8Array|Array.<number>)}
	 */


	Zlib$1.BitStream.ReverseTable = function (table) {
	  return table;
	}(function () {
	  /** @type {!(Array|Uint8Array)} reverse table. */
	  var table = new ( Uint8Array )(256);
	  /** @type {number} loop counter. */

	  var i; // generate

	  for (i = 0; i < 256; ++i) {
	    table[i] = function (n) {
	      var r = n;
	      var s = 7;

	      for (n >>>= 1; n; n >>>= 1) {
	        r <<= 1;
	        r |= n & 1;
	        --s;
	      }

	      return (r << s & 0xff) >>> 0;
	    }(i);
	  }

	  return table;
	}());
	/**
	 * CRC32 ããã·ã¥å¤ãåå¾
	 * @param {!(Array.<number>|Uint8Array)} data data byte array.
	 * @param {number=} pos data position.
	 * @param {number=} length data length.
	 * @return {number} CRC32.
	 */

	Zlib$1.CRC32.calc = function (data, pos, length) {
	  return Zlib$1.CRC32.update(data, 0, pos, length);
	};
	/**
	 * CRC32ããã·ã¥å¤ãæ´æ°
	 * @param {!(Array.<number>|Uint8Array)} data data byte array.
	 * @param {number} crc CRC32.
	 * @param {number=} pos data position.
	 * @param {number=} length data length.
	 * @return {number} CRC32.
	 */


	Zlib$1.CRC32.update = function (data, crc, pos, length) {
	  var table = Zlib$1.CRC32.Table;
	  var i = typeof pos === 'number' ? pos : pos = 0;
	  var il = typeof length === 'number' ? length : data.length;
	  crc ^= 0xffffffff; // loop unrolling for performance

	  for (i = il & 7; i--; ++pos) {
	    crc = crc >>> 8 ^ table[(crc ^ data[pos]) & 0xff];
	  }

	  for (i = il >> 3; i--; pos += 8) {
	    crc = crc >>> 8 ^ table[(crc ^ data[pos]) & 0xff];
	    crc = crc >>> 8 ^ table[(crc ^ data[pos + 1]) & 0xff];
	    crc = crc >>> 8 ^ table[(crc ^ data[pos + 2]) & 0xff];
	    crc = crc >>> 8 ^ table[(crc ^ data[pos + 3]) & 0xff];
	    crc = crc >>> 8 ^ table[(crc ^ data[pos + 4]) & 0xff];
	    crc = crc >>> 8 ^ table[(crc ^ data[pos + 5]) & 0xff];
	    crc = crc >>> 8 ^ table[(crc ^ data[pos + 6]) & 0xff];
	    crc = crc >>> 8 ^ table[(crc ^ data[pos + 7]) & 0xff];
	  }

	  return (crc ^ 0xffffffff) >>> 0;
	};
	/**
	 * @param {number} num
	 * @param {number} crc
	 * @returns {number}
	 */


	Zlib$1.CRC32.single = function (num, crc) {
	  return (Zlib$1.CRC32.Table[(num ^ crc) & 0xff] ^ num >>> 8) >>> 0;
	};
	/**
	 * @type {Array.<number>}
	 * @const
	 * @private
	 */


	Zlib$1.CRC32.Table_ = [0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d];
	/**
	 * @type {!(Array.<number>|Uint32Array)} CRC-32 Table.
	 * @const
	 */

	Zlib$1.CRC32.Table =   new Uint32Array(Zlib$1.CRC32.Table_) ;
	/**
	 * @fileoverview Deflate (RFC1951) å®è£.
	 * Deflateã¢ã«ã´ãªãºã æ¬ä½ã¯ Zlib.RawDeflate ã§å®è£ããã¦ãã.
	 */

	/**
	 * Zlib Deflate
	 * @constructor
	 * @param {!(Array|Uint8Array)} input ç¬¦å·åããå¯¾è±¡ã® byte array.
	 * @param {Object=} opt_params option parameters.
	 */

	Zlib$1.Deflate = function (input, opt_params) {
	  /** @type {!(Array|Uint8Array)} */
	  this.input = input;
	  /** @type {!(Array|Uint8Array)} */

	  this.output = new ( Uint8Array )(Zlib$1.Deflate.DefaultBufferSize);
	  /** @type {Zlib.Deflate.CompressionType} */

	  this.compressionType = Zlib$1.Deflate.CompressionType.DYNAMIC;
	  /** @type {Zlib.RawDeflate} */

	  this.rawDeflate;
	  /** @type {Object} */

	  var rawDeflateOption = {};
	  /** @type {string} */

	  var prop; // option parameters

	  if (opt_params || !(opt_params = {})) {
	    if (typeof opt_params['compressionType'] === 'number') {
	      this.compressionType = opt_params['compressionType'];
	    }
	  } // copy options


	  for (prop in opt_params) {
	    rawDeflateOption[prop] = opt_params[prop];
	  } // set raw-deflate output buffer


	  rawDeflateOption['outputBuffer'] = this.output;
	  this.rawDeflate = new Zlib$1.RawDeflate(this.input, rawDeflateOption);
	};
	/**
	 * @const
	 * @type {number} ããã©ã«ããããã¡ãµã¤ãº.
	 */


	Zlib$1.Deflate.DefaultBufferSize = 0x8000;
	/**
	 * @enum {number}
	 */

	Zlib$1.Deflate.CompressionType = Zlib$1.RawDeflate.CompressionType;
	/**
	 * ç´æ¥å§ç¸®ã«æãã.
	 * @param {!(Array|Uint8Array)} input target buffer.
	 * @param {Object=} opt_params option parameters.
	 * @return {!(Array|Uint8Array)} compressed data byte array.
	 */

	Zlib$1.Deflate.compress = function (input, opt_params) {
	  return new Zlib$1.Deflate(input, opt_params).compress();
	};
	/**
	 * Deflate Compression.
	 * @return {!(Array|Uint8Array)} compressed data byte array.
	 */


	Zlib$1.Deflate.prototype.compress = function () {
	  /** @type {Zlib.CompressionMethod} */
	  var cm;
	  /** @type {number} */

	  var cinfo;
	  /** @type {number} */

	  var cmf;
	  /** @type {number} */

	  var flg;
	  /** @type {number} */

	  var fcheck;
	  /** @type {number} */

	  var fdict;
	  /** @type {number} */

	  var flevel;
	  /** @type {number} */

	  var adler;
	  /** @type {!(Array|Uint8Array)} */

	  var output;
	  /** @type {number} */

	  var pos = 0;
	  output = this.output; // Compression Method and Flags

	  cm = Zlib$1.CompressionMethod.DEFLATE;

	  switch (cm) {
	    case Zlib$1.CompressionMethod.DEFLATE:
	      cinfo = Math.LOG2E * Math.log(Zlib$1.RawDeflate.WindowSize) - 8;
	      break;

	    default:
	      throw new Error('invalid compression method');
	  }

	  cmf = cinfo << 4 | cm;
	  output[pos++] = cmf; // Flags

	  fdict = 0;

	  switch (cm) {
	    case Zlib$1.CompressionMethod.DEFLATE:
	      switch (this.compressionType) {
	        case Zlib$1.Deflate.CompressionType.NONE:
	          flevel = 0;
	          break;

	        case Zlib$1.Deflate.CompressionType.FIXED:
	          flevel = 1;
	          break;

	        case Zlib$1.Deflate.CompressionType.DYNAMIC:
	          flevel = 2;
	          break;

	        default:
	          throw new Error('unsupported compression type');
	      }

	      break;

	    default:
	      throw new Error('invalid compression method');
	  }

	  flg = flevel << 6 | fdict << 5;
	  fcheck = 31 - (cmf * 256 + flg) % 31;
	  flg |= fcheck;
	  output[pos++] = flg; // Adler-32 checksum

	  adler = Zlib$1.Adler32(this.input);
	  this.rawDeflate.op = pos;
	  output = this.rawDeflate.compress();
	  pos = output.length;

	  {
	    // subarray åãåã«ãã©ã
	    output = new Uint8Array(output.buffer); // expand buffer

	    if (output.length <= pos + 4) {
	      this.output = new Uint8Array(output.length + 4);
	      this.output.set(output);
	      output = this.output;
	    }

	    output = output.subarray(0, pos + 4);
	  } // adler32


	  output[pos++] = adler >> 24 & 0xff;
	  output[pos++] = adler >> 16 & 0xff;
	  output[pos++] = adler >> 8 & 0xff;
	  output[pos++] = adler & 0xff;
	  return output;
	};

	let _btoa;

	if (typeof btoa === 'undefined') {
	  _btoa = btoa$1;
	} else {
	  _btoa = btoa;
	}
	/**
	 * Covers string literals and String objects
	 * @param x
	 * @returns {boolean}
	 */


	function isString(x) {
	  return typeof x === "string" || x instanceof String;
	} // StackOverflow: http://stackoverflow.com/a/10810674/116169


	function numberFormatter(rawNumber) {
	  var dec = String(rawNumber).split(/[.,]/),
	      sep = ',',
	      decsep = '.';
	  return dec[0].split('').reverse().reduce(function (prev, now, i) {
	    return i % 3 === 0 ? prev + sep + now : prev + now;
	  }).split('').reverse().join('') + (dec[1] ? decsep + dec[1] : '');
	}

	const splitLines = function (string) {
	  return string.split(/\n|\r\n|\r/g);
	};

	function splitStringRespectingQuotes(string, delim) {
	  var tokens = [],
	      len = string.length,
	      i,
	      n = 0,
	      quote = false,
	      c;

	  if (len > 0) {
	    tokens[n] = string.charAt(0);

	    for (i = 1; i < len; i++) {
	      c = string.charAt(i);

	      if (c === '"') {
	        quote = !quote;
	      } else if (!quote && c === delim) {
	        n++;
	        tokens[n] = "";
	      } else {
	        tokens[n] += c;
	      }
	    }
	  }

	  return tokens;
	}

	function stripQuotes(str) {
	  if (str === undefined) {
	    return str;
	  }

	  if (str.startsWith("'") || str.startsWith('"')) {
	    str = str.substring(1);
	  }

	  if (str.endsWith("'") || str.endsWith('"')) {
	    str = str.substring(0, str.length - 1);
	  }

	  return str;
	}

	function hashCode(s) {
	  return s.split("").reduce(function (a, b) {
	    a = (a << 5) - a + b.charCodeAt(0);
	    return a & a;
	  }, 0);
	}
	/**
	 * Compress string and encode in a url safe form
	 * @param s
	 */


	function compressString(str) {
	  const bytes = [];

	  for (var i = 0; i < str.length; i++) {
	    bytes.push(str.charCodeAt(i));
	  }

	  const compressedBytes = new Zlib$1.RawDeflate(bytes).compress(); // UInt8Arry

	  const compressedString = String.fromCharCode.apply(null, compressedBytes); // Convert to string

	  let enc = _btoa(compressedString);

	  return enc.replace(/\+/g, '.').replace(/\//g, '_').replace(/=/g, '-'); // URL safe
	}
	/**
	 * Uncompress the url-safe encoded compressed string, presumably created by compressString above
	 *
	 * @param enc
	 * @returns {string}
	 */


	function uncompressString(enc) {
	  enc = enc.replace(/\./g, '+').replace(/_/g, '/').replace(/-/g, '=');
	  const compressedString = atob(enc);
	  const compressedBytes = [];

	  for (let i = 0; i < compressedString.length; i++) {
	    compressedBytes.push(compressedString.charCodeAt(i));
	  }

	  const bytes = new Zlib$1.RawInflate(compressedBytes).decompress();
	  let str = '';

	  for (let b of bytes) {
	    str += String.fromCharCode(b);
	  }

	  return str;
	}

	function capitalize(str) {
	  return str.length > 0 ? str.charAt(0).toUpperCase() + str.slice(1) : str;
	}
	/**
	 * Parse a locus string and return a range object.  Locus string is of the form chr:start-end.  End is optional
	 *
	 */


	function parseLocusString(string) {
	  const t1 = string.split(":");
	  const t2 = t1[1].split("-");
	  const range = {
	    chr: t1[0],
	    start: Number.parseInt(t2[0].replace(/,/g, '')) - 1
	  };

	  if (t2.length > 1) {
	    range.end = Number.parseInt(t2[1].replace(/,/g, ''));
	  } else {
	    range.end = range.start + 1;
	  }

	  return range;
	}

	function isGoogleURL(url) {
	  return url.includes("googleapis") && !url.includes("urlshortener") || isGoogleStorageURL(url) || isGoogleDriveURL(url);
	}

	function isGoogleStorageURL(url) {
	  return url.startsWith("gs://") || url.startsWith("https://www.googleapis.com/storage") || url.startsWith("https://storage.cloud.google.com") || url.startsWith("https://storage.googleapis.com");
	}

	function isGoogleDriveURL(url) {
	  return url.indexOf("drive.google.com") >= 0 || url.indexOf("www.googleapis.com/drive") > 0;
	}

	function translateGoogleCloudURL(gsUrl) {
	  var i, bucket, object, qIdx, objectString, paramString;
	  i = gsUrl.indexOf('/', 5);
	  qIdx = gsUrl.indexOf('?');

	  if (i < 0) {
	    return gsUrl;
	  }

	  bucket = gsUrl.substring(5, i);
	  objectString = qIdx < 0 ? gsUrl.substring(i + 1) : gsUrl.substring(i + 1, qIdx);
	  object = encodeURIComponent(objectString);

	  if (qIdx > 0) {
	    paramString = gsUrl.substring(qIdx);
	  }

	  return "https://www.googleapis.com/storage/v1/b/" + bucket + "/o/" + object + (paramString ? paramString + "&alt=media" : "?alt=media");
	}

	function driveDownloadURL(link) {
	  // Return a google drive download url for the sharable link
	  //https://drive.google.com/open?id=0B-lleX9c2pZFbDJ4VVRxakJzVGM
	  //https://drive.google.com/file/d/1_FC4kCeO8E3V4dJ1yIW7A0sn1yURKIX-/view?usp=sharing
	  var id = getGoogleDriveFileID(link);
	  return id ? "https://www.googleapis.com/drive/v3/files/" + id + "?alt=media&supportsTeamDrives=true" : link;
	}

	function getGoogleDriveFileID(link) {
	  //https://drive.google.com/file/d/1_FC4kCeO8E3V4dJ1yIW7A0sn1yURKIX-/view?usp=sharing
	  var i1, i2;

	  if (link.includes("/open?id=")) {
	    i1 = link.indexOf("/open?id=") + 9;
	    i2 = link.indexOf("&");

	    if (i1 > 0 && i2 > i1) {
	      return link.substring(i1, i2);
	    } else if (i1 > 0) {
	      return link.substring(i1);
	    }
	  } else if (link.includes("/file/d/")) {
	    i1 = link.indexOf("/file/d/") + 8;
	    i2 = link.lastIndexOf("/");
	    return link.substring(i1, i2);
	  }
	}

	// Convenience functions for the gapi oAuth library.
	const FIVE_MINUTES = 5 * 60 * 1000;

	async function load(library) {
	  return new Promise(function (resolve, reject) {
	    gapi.load(library, {
	      callback: resolve,
	      onerror: reject
	    });
	  });
	}

	async function init$1(config) {
	  if (isInitialized()) {
	    console.warn("oAuth has already been initialized");
	    return;
	  }

	  gapi.apiKey = config.apiKey; // copy config, gapi will modify it

	  const configCopy = Object.assign({}, config);

	  if (!configCopy.scope) {
	    configCopy.scope = 'profile';
	  }

	  if (!config.client_id) {
	    config.client_id = config.clientId;
	  }

	  await load("auth2");
	  return new Promise(function (resolve, reject) {
	    gapi.auth2.init(configCopy).then(resolve, reject);
	  });
	}

	function isInitialized() {
	  return typeof gapi !== "undefined" && gapi.auth2 && gapi.auth2.getAuthInstance();
	}

	let inProgress = false;

	async function getAccessToken(scope) {
	  if (typeof gapi === "undefined") {
	    throw Error("Google authentication requires the 'gapi' library");
	  }

	  if (!gapi.auth2) {
	    throw Error("Google 'auth2' has not been initialized");
	  }

	  if (inProgress) {
	    return new Promise(function (resolve, reject) {
	      let intervalID;

	      const checkForToken = () => {
	        // Wait for inProgress to equal "false"
	        try {
	          if (inProgress === false) {
	            //console.log("Delayed resolution for " + scope);
	            resolve(getAccessToken(scope));
	            clearInterval(intervalID);
	          }
	        } catch (e) {
	          clearInterval(intervalID);
	          reject(e);
	        }
	      };

	      intervalID = setInterval(checkForToken, 100);
	    });
	  } else {
	    inProgress = true;

	    try {
	      let currentUser = gapi.auth2.getAuthInstance().currentUser.get();
	      let token;

	      if (currentUser.isSignedIn()) {
	        if (!currentUser.hasGrantedScopes(scope)) {
	          await currentUser.grant({
	            scope
	          });
	        }

	        const {
	          access_token,
	          expires_at
	        } = currentUser.getAuthResponse();

	        if (Date.now() < expires_at - FIVE_MINUTES) {
	          token = {
	            access_token,
	            expires_at
	          };
	        } else {
	          const {
	            access_token,
	            expires_at
	          } = currentUser.reloadAuthResponse();
	          token = {
	            access_token,
	            expires_at
	          };
	        }
	      } else {
	        currentUser = await signIn(scope);
	        const {
	          access_token,
	          expires_at
	        } = currentUser.getAuthResponse();
	        token = {
	          access_token,
	          expires_at
	        };
	      }

	      return token;
	    } finally {
	      inProgress = false;
	    }
	  }
	}
	/**
	 * Return the current access token if the user is signed in, or undefined otherwise.  This function does not
	 * attempt a signIn or request any specfic scopes.
	 *
	 * @returns access_token || undefined
	 */


	function getCurrentAccessToken() {
	  let currentUser = gapi.auth2.getAuthInstance().currentUser.get();

	  if (currentUser && currentUser.isSignedIn()) {
	    const {
	      access_token,
	      expires_at
	    } = currentUser.getAuthResponse();
	    return {
	      access_token,
	      expires_at
	    };
	  } else {
	    return undefined;
	  }
	}

	async function signIn(scope) {
	  const options = new gapi.auth2.SigninOptionsBuilder();
	  options.setPrompt('select_account');
	  options.setScope(scope);
	  return gapi.auth2.getAuthInstance().signIn(options);
	}

	function getScopeForURL(url) {
	  if (isGoogleDriveURL(url)) {
	    return "https://www.googleapis.com/auth/drive.file";
	  } else if (isGoogleStorageURL(url)) {
	    return "https://www.googleapis.com/auth/devstorage.read_only";
	  } else {
	    return 'https://www.googleapis.com/auth/userinfo.profile';
	  }
	}

	function getApiKey() {
	  return gapi.apiKey;
	}

	async function getDriveFileInfo(googleDriveURL) {
	  const id = getGoogleDriveFileID(googleDriveURL);
	  let endPoint = "https://www.googleapis.com/drive/v3/files/" + id + "?supportsTeamDrives=true";
	  const apiKey = getApiKey();

	  if (apiKey) {
	    endPoint += "&key=" + apiKey;
	  }

	  const response = await fetch(endPoint);
	  let json = await response.json();

	  if (json.error && json.error.code === 404) {
	    const {
	      access_token
	    } = await getAccessToken("https://www.googleapis.com/auth/drive.readonly");

	    if (access_token) {
	      const response = await fetch(endPoint, {
	        headers: {
	          'Authorization': `Bearer ${access_token}`
	        }
	      });
	      json = await response.json();

	      if (json.error) {
	        throw Error(json.error);
	      }
	    } else {
	      throw Error(json.error);
	    }
	  }

	  return json;
	}

	if (typeof process === 'object' && typeof window === 'undefined') {
	  global.atob = function (str) {
	    return Buffer.from(str, 'base64').toString('binary');
	  };
	}
	/**
	 * @param dataURI
	 * @returns {Array<number>|Uint8Array}
	 */


	function decodeDataURI(dataURI) {
	  const split = dataURI.split(',');
	  const info = split[0].split(':')[1];
	  let dataString = split[1];

	  if (info.indexOf('base64') >= 0) {
	    dataString = atob(dataString);
	  } else {
	    dataString = decodeURI(dataString); // URL encoded string -- not currently used of tested
	  }

	  const bytes = new Uint8Array(dataString.length);

	  for (let i = 0; i < dataString.length; i++) {
	    bytes[i] = dataString.charCodeAt(i);
	  }

	  let plain;

	  if (info.indexOf('gzip') > 0) {
	    const inflate = new Zlib$1.Gunzip(bytes);
	    plain = inflate.decompress();
	  } else {
	    plain = bytes;
	  }

	  return plain;
	}

	function parseUri(str) {
	  var o = options,
	      m = o.parser[ "loose"].exec(str),
	      uri = {},
	      i = 14;

	  while (i--) uri[o.key[i]] = m[i] || "";

	  uri[o.q.name] = {};
	  uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
	    if ($1) uri[o.q.name][$1] = $2;
	  });
	  return uri;
	}

	const options = {
	  strictMode: false,
	  key: ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"],
	  q: {
	    name: "queryKey",
	    parser: /(?:^|&)([^&=]*)=?([^&]*)/g
	  },
	  parser: {
	    strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
	    loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
	  }
	};
	/**
	 * Resolve a url, which might be a string, function (that returns a string or Promse), or Promise (that resolves to a string)
	 *
	 * @param url
	 * @returns {Promise<*>}
	 */


	async function resolveURL(url) {
	  return typeof url === 'function' ? url() : url;
	}

	/**
	 * Return the filename from the path.   Example
	 *   https://foo.com/bar.bed?param=2   => bar.bed
	 * @param urlOrFile
	 */


	function getFilename(urlOrFile) {
	  if (urlOrFile instanceof File) {
	    return urlOrFile.name;
	  } else if (isString(urlOrFile)) {
	    let index = urlOrFile.lastIndexOf("/");
	    let filename = index < 0 ? urlOrFile : urlOrFile.substr(index + 1); //Strip parameters -- handle local files later

	    index = filename.indexOf("?");

	    if (index > 0) {
	      filename = filename.substr(0, index);
	    }

	    return filename;
	  } else {
	    throw Error(`Expected File or string, got ${typeof urlOrFile}`);
	  }
	}

	function isFilePath(path) {
	  return path instanceof File;
	}

	function download(filename, data) {
	  const element = document.createElement('a');
	  element.setAttribute('href', data);
	  element.setAttribute('download', filename);
	  element.style.display = 'none';
	  document.body.appendChild(element);
	  element.click();
	  document.body.removeChild(element);
	}

	const FileFormats = {
	  gwascatalog: {
	    fields: ['bin', 'chr', 'start', 'end', 'name', 'pubMedID', 'author', 'pubDate', 'journal', 'title', 'trait', 'initSample', 'replSample', 'region', 'genes', 'riskAllele', 'riskAlFreq', 'pValue', 'pValueDesc', 'orOrBeta', 'ci95', 'platform', 'cnv']
	  },
	  wgrna: {
	    fields: ['bin', 'chr', 'start', 'end', 'name', 'score', 'strand', 'thickStart', 'thickEnd', 'type']
	  },
	  cpgislandext: {
	    fields: ['bin', 'chr', 'start', 'end', 'name', 'length', 'cpgNum', 'gcNum', 'perCpg', 'perGc', 'obsExp']
	  },
	  clinVarMain: {
	    fields: ['chr1', 'start', 'end', 'name', 'score', 'strand', 'thickStart', 'thickEnd', 'reserved', 'blockCount', // Number of blocks
	    'blockSizes', // Comma separated list of block sizes
	    'chromStarts', // Start positions relative to chromStart
	    'origName', // NM_198053.2(CD247):c.462C>T (p.Asp154=)	ClinVar Variation Report
	    'clinSign', // Likely benign	Clinical significance
	    'reviewStatus', // 	based on: criteria provided,single submitter	Review Status
	    'type', // single nucleotide variant	Type of Variant
	    'geneId', // CD247	Gene Symbol
	    'snpId', //	181656780	dbSNP ID
	    'nsvId', //		dbVar ID
	    'rcvAcc', //	RCV000642347	ClinVar Allele Submission
	    'testedInGtr', //	N	Genetic Testing Registry
	    'phenotypeList', //	Immunodeficiency due to defect in cd3-zeta	Phenotypes
	    'phenotype', //	MedGen:C1857798, OMIM:610163	Phenotype identifiers
	    'origin', //	germline	Data origin
	    'assembly', //	GRCh37	Genome assembly
	    'cytogenetic', //	1q24.2	Cytogenetic status
	    'hgvsCod', //	NM_198053.2:c.462C>T	Nucleotide HGVS
	    'hgvsProt', //	NP_932170.1:p.Asp154=	Protein HGVS
	    'numSubmit', //	1	Number of submitters
	    'lastEval', //	Dec 19,2017	Last evaluation
	    'guidelines', //		Guidelines
	    'otherIds']
	  }
	};

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2014 Broad Institute
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	const knownFileExtensions = new Set(["narrowpeak", "broadpeak", "regionpeak", "peaks", "bedgraph", "wig", "gff3", "gff", "gtf", "fusionjuncspan", "refflat", "seg", "aed", "bed", "vcf", "bb", "bigbed", "bw", "bigwig", "bam", "tdf", "refgene", "genepred", "genepredext", "bedpe", "bp", "snp", "rmsk", "cram", "gwas"]);
	/**
	 * Return a custom format object with the given name.
	 * @param name
	 * @returns {*}
	 */

	function getFormat(name) {
	  if (FileFormats && FileFormats[name]) {
	    return expandFormat(FileFormats[name]);
	  } else {
	    return undefined;
	  }

	  function expandFormat(format) {
	    const fields = format.fields;
	    const keys = ['chr', 'start', 'end'];

	    for (let i = 0; i < fields.length; i++) {
	      for (let key of keys) {
	        if (key === fields[i]) {
	          format[key] = i;
	        }
	      }
	    }

	    return format;
	  }
	}

	function inferFileFormat(fn) {
	  var idx, ext;
	  fn = fn.toLowerCase(); // Special case -- UCSC refgene files

	  if (fn.endsWith("refgene.txt.gz") || fn.endsWith("refgene.txt.bgz") || fn.endsWith("refgene.txt") || fn.endsWith("refgene.sorted.txt.gz") || fn.endsWith("refgene.sorted.txt.bgz")) {
	    return "refgene";
	  } //Strip parameters -- handle local files later


	  idx = fn.indexOf("?");

	  if (idx > 0) {
	    fn = fn.substr(0, idx);
	  } //Strip aux extensions .gz, .tab, and .txt


	  if (fn.endsWith(".gz")) {
	    fn = fn.substr(0, fn.length - 3);
	  }

	  if (fn.endsWith(".txt") || fn.endsWith(".tab") || fn.endsWith(".bgz")) {
	    fn = fn.substr(0, fn.length - 4);
	  }

	  idx = fn.lastIndexOf(".");
	  ext = idx < 0 ? fn : fn.substr(idx + 1);

	  switch (ext) {
	    case "bw":
	      return "bigwig";

	    case "bb":
	      return "bigbed";

	    default:
	      if (knownFileExtensions.has(ext)) {
	        return ext;
	      } else {
	        return undefined;
	      }

	  }
	}

	function inferIndexPath(url, extension) {
	  var idx;

	  if (url instanceof File) {
	    throw new Error("Cannot infer an index path for a local File.  Please select explicitly");
	  }

	  if (url.includes("?")) {
	    idx = url.indexOf("?");
	    return url.substring(0, idx) + "." + extension + url.substring(idx);
	  } else {
	    return url + "." + extension;
	  }
	}

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2016-2017 The Regents of the University of California
	 * Author: Jim Robinson
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	const IGVMath = {
	  lerp: (v0, v1, t) => {
	    return (1 - t) * v0 + t * v1;
	  },
	  mean: function (array) {
	    var t = 0,
	        n = 0,
	        i;

	    for (i = 0; i < array.length; i++) {
	      if (!isNaN(array[i])) {
	        t += array[i];
	        n++;
	      }
	    }

	    return n > 0 ? t / n : 0;
	  },
	  meanAndStdev: function (array) {
	    var v,
	        t = 0,
	        t2 = 0,
	        n = 0,
	        i;

	    for (i = 0; i < array.length; i++) {
	      v = array[i];

	      if (!isNaN(v)) {
	        t += v;
	        t2 += v * v;
	        n++;
	      }
	    }

	    return n > 0 ? {
	      mean: t / n,
	      stdev: Math.sqrt(t2 - t * t / n)
	    } : {
	      mean: 0,
	      stdev: 0
	    };
	  },
	  median: function (numbers) {
	    // median of [3, 5, 4, 4, 1, 1, 2, 3] = 3
	    var median = 0,
	        numsLen = numbers.length;
	    numbers.sort();

	    if (numsLen % 2 === 0 // is even
	    ) {
	        // average of two middle numbers
	        median = (numbers[numsLen / 2 - 1] + numbers[numsLen / 2]) / 2;
	      } else {
	      // is odd
	      // middle number only
	      median = numbers[(numsLen - 1) / 2];
	    }

	    return median;
	  },
	  // Fast percentile function for "p" near edges.  This needs profiled for p in middle (e.g. median)
	  percentile: function (array, p) {
	    if (array.length === 0) return undefined;
	    var k = Math.floor(array.length * ((100 - p) / 100));

	    if (k === 0) {
	      array.sort(function (a, b) {
	        return b - a;
	      });
	      return array[k];
	    } else {
	      return selectElement(array, k);
	    }
	  },
	  clamp: function (value, min, max) {
	    return Math.min(Math.max(value, min), max);
	  },
	  log2: function (x) {
	    return Math.log(x) / Math.LN2;
	  }
	};

	function selectElement(array, k) {
	  // Credit Steve Hanov http://stevehanov.ca/blog/index.php?id=122
	  var heap = new BinaryHeap(),
	      i;

	  for (i = 0; i < array.length; i++) {
	    var item = array[i]; // If we have not yet found k items, or the current item is larger than
	    // the smallest item on the heap, add current item

	    if (heap.content.length < k || item > heap.content[0]) {
	      // If the heap is full, remove the smallest element on the heap.
	      if (heap.content.length === k) {
	        var r = heap.pop();
	      }

	      heap.push(item);
	    }
	  }

	  return heap.content[0];
	}

	function BinaryHeap() {
	  this.content = [];
	}

	BinaryHeap.prototype = {
	  push: function (element) {
	    // Add the new element to the end of the array.
	    this.content.push(element); // Allow it to bubble up.

	    this.bubbleUp(this.content.length - 1);
	  },
	  pop: function () {
	    // Store the first element so we can return it later.
	    var result = this.content[0]; // Get the element at the end of the array.

	    var end = this.content.pop(); // If there are any elements left, put the end element at the
	    // start, and let it sink down.

	    if (this.content.length > 0) {
	      this.content[0] = end;
	      this.sinkDown(0);
	    }

	    return result;
	  },
	  remove: function (node) {
	    var length = this.content.length; // To remove a value, we must search through the array to find
	    // it.

	    for (var i = 0; i < length; i++) {
	      if (this.content[i] !== node) continue; // When it is found, the process seen in 'pop' is repeated
	      // to fill up the hole.

	      var end = this.content.pop(); // If the element we popped was the one we needed to remove,
	      // we're done.

	      if (i === length - 1) break; // Otherwise, we replace the removed element with the popped
	      // one, and allow it to float up or sink down as appropriate.

	      this.content[i] = end;
	      this.bubbleUp(i);
	      this.sinkDown(i);
	      break;
	    }
	  },
	  size: function () {
	    return this.content.length;
	  },
	  bubbleUp: function (n) {
	    // Fetch the element that has to be moved.
	    var element = this.content[n],
	        score = element; // When at 0, an element can not go up any further.

	    while (n > 0) {
	      // Compute the parent element's index, and fetch it.
	      var parentN = Math.floor((n + 1) / 2) - 1,
	          parent = this.content[parentN]; // If the parent has a lesser score, things are in order and we
	      // are done.

	      if (score >= parent) break; // Otherwise, swap the parent with the current element and
	      // continue.

	      this.content[parentN] = element;
	      this.content[n] = parent;
	      n = parentN;
	    }
	  },
	  sinkDown: function (n) {
	    // Look up the target element and its score.
	    var length = this.content.length,
	        element = this.content[n],
	        elemScore = element;

	    while (true) {
	      // Compute the indices of the child elements.
	      var child2N = (n + 1) * 2,
	          child1N = child2N - 1; // This is used to store the new position of the element,
	      // if any.

	      var swap = null; // If the first child exists (is inside the array)...

	      if (child1N < length) {
	        // Look it up and compute its score.
	        var child1 = this.content[child1N],
	            child1Score = child1; // If the score is less than our element's, we need to swap.

	        if (child1Score < elemScore) swap = child1N;
	      } // Do the same checks for the other child.


	      if (child2N < length) {
	        var child2 = this.content[child2N],
	            child2Score = child2;
	        if (child2Score < (swap == null ? elemScore : child1Score)) swap = child2N;
	      } // No need to swap further, we are done.


	      if (swap == null) break; // Otherwise, swap and continue.

	      this.content[n] = this.content[swap];
	      this.content[swap] = element;
	      n = swap;
	    }
	  }
	};

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2014 Broad Institute
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	const IGVColor = {
	  rgbListFromHSV: () => {
	    let s = 1;
	    let accumulation = [];

	    for (let v = 1; v >= 0.5; v -= .1) {
	      for (let h = 0; h < 1; h += 1 / 28) {
	        const r = "rgb(" + IGVColor.hsvToRgb(h, s, v).join(",") + ")";
	        accumulation.push(r);
	      }
	    } // add black


	    accumulation.pop();
	    accumulation.push(IGVColor.rgbColor(16, 16, 16));
	    return accumulation;
	  },
	  rgbToHex: function (rgb) {
	    rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
	    return rgb && rgb.length === 4 ? "#" + ("0" + parseInt(rgb[1], 10).toString(16)).slice(-2) + ("0" + parseInt(rgb[2], 10).toString(16)).slice(-2) + ("0" + parseInt(rgb[3], 10).toString(16)).slice(-2) : '';
	  },
	  hexToRgb: function (hex) {
	    var cooked = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);

	    if (null === cooked) {
	      return undefined;
	    }

	    return "rgb(" + parseInt(cooked[1], 16) + "," + parseInt(cooked[2], 16) + "," + parseInt(cooked[3], 16) + ")";
	  },

	  /**
	   * Converts an HSV color value to RGB. Conversion formula
	   * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
	   * Assumes h, s, and v are contained in the set [0, 1] and
	   * returns r, g, and b in the set [0, 255].
	   *
	   * Credit: https://gist.githubusercontent.com/mjackson/5311256
	   *
	   * @param   h       The hue
	   * @param   s       The saturation
	   * @param   v       The value
	   * @return  Array   The RGB representation
	   */
	  hsvToRgb: function (h, s, v) {
	    var r, g, b;
	    var i = Math.floor(h * 6);
	    var f = h * 6 - i;
	    var p = v * (1 - s);
	    var q = v * (1 - f * s);
	    var t = v * (1 - (1 - f) * s);

	    switch (i % 6) {
	      case 0:
	        r = v, g = t, b = p;
	        break;

	      case 1:
	        r = q, g = v, b = p;
	        break;

	      case 2:
	        r = p, g = v, b = t;
	        break;

	      case 3:
	        r = p, g = q, b = v;
	        break;

	      case 4:
	        r = t, g = p, b = v;
	        break;

	      case 5:
	        r = v, g = p, b = q;
	        break;
	    }

	    return [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255)];
	  },

	  /**
	   * Converts an HSL color value to RGB. Conversion formula
	   * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
	   * Assumes h, s, and l are contained in the set [0, 1] and
	   * returns r, g, and b in the set [0, 255].
	   *
	   * Credit: https://gist.githubusercontent.com/mjackson/5311256
	   *
	   * @param   h       The hue
	   * @param   s       The saturation
	   * @param   l       The lightness
	   * @return  Array   The RGB representation
	   */
	  hslToRgb: function (h, s, l) {
	    var r, g, b;

	    if (s === 0) {
	      r = g = b = l; // achromatic
	    } else {
	      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	      var p = 2 * l - q;
	      r = IGVColor.hue2rgb(p, q, h + 1 / 3);
	      g = IGVColor.hue2rgb(p, q, h);
	      b = IGVColor.hue2rgb(p, q, h - 1 / 3);
	    }

	    return [r * 255, g * 255, b * 255];
	  },
	  hue2rgb: (p, q, t) => {
	    if (t < 0) t += 1;
	    if (t > 1) t -= 1;
	    if (t < 1 / 6) return p + (q - p) * 6 * t;
	    if (t < 1 / 2) return q;
	    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
	    return p;
	  },
	  rgbaColor: function (r, g, b, a) {
	    r = IGVMath.clamp(r, 0, 255);
	    g = IGVMath.clamp(g, 0, 255);
	    b = IGVMath.clamp(b, 0, 255);
	    a = IGVMath.clamp(a, 0.0, 1.0);
	    return "rgba(" + r + "," + g + "," + b + "," + a + ")";
	  },
	  rgbColor: function (r, g, b) {
	    r = IGVMath.clamp(r, 0, 255);
	    g = IGVMath.clamp(g, 0, 255);
	    b = IGVMath.clamp(b, 0, 255);
	    return "rgb(" + r + "," + g + "," + b + ")";
	  },
	  greyScale: function (value) {
	    var grey = IGVMath.clamp(value, 0, 255);
	    return "rgb(" + grey + "," + grey + "," + grey + ")";
	  },
	  randomGrey: function (min, max) {
	    min = IGVMath.clamp(min, 0, 255);
	    max = IGVMath.clamp(max, 0, 255);
	    var g = Math.round(Math.random(min, max)).toString(10);
	    return "rgb(" + g + "," + g + "," + g + ")";
	  },
	  randomRGB: function (min, max) {
	    min = IGVMath.clamp(min, 0, 255);
	    max = IGVMath.clamp(max, 0, 255);
	    var r = Math.round(Math.random(min, max)).toString(10);
	    var g = Math.round(Math.random(min, max)).toString(10);
	    var b = Math.round(Math.random(min, max)).toString(10);
	    return "rgb(" + r + "," + g + "," + b + ")";
	  },
	  randomRGBConstantAlpha: function (min, max, alpha) {
	    min = IGVMath.clamp(min, 0, 255);
	    max = IGVMath.clamp(max, 0, 255);
	    var r = Math.round(Math.random(min, max)).toString(10);
	    var g = Math.round(Math.random(min, max)).toString(10);
	    var b = Math.round(Math.random(min, max)).toString(10);
	    return "rgba(" + r + "," + g + "," + b + "," + alpha + ")";
	  },
	  addAlpha: function (color, alpha) {
	    if (color === "0" || color === ".") {
	      color = "rgb(0,0,0)";
	    } else {
	      const c = this.colorNameToHex(color);

	      if (c) {
	        color = c;
	      }
	    }

	    var isHex = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(color);

	    if (color.startsWith("rgba")) {
	      const idx = color.lastIndexOf(",");
	      return color.substring(0, idx + 1) + alpha.toString() + ")";
	    }

	    if (isHex) {
	      color = IGVColor.hexToRgb(color);
	    }

	    if (color.startsWith("rgb")) {
	      return color.replace("rgb", "rgba").replace(")", ", " + alpha + ")");
	    } else {
	      return color;
	    }
	  },

	  /**
	   *
	   * @param dest  RGB components as an array
	   * @param src  RGB components as an array
	   * @param alpha   alpha transparancy in the range 0-1
	   * @returns {}
	   */
	  getCompositeColor: function (dest, src, alpha) {
	    var r = Math.floor(alpha * src[0] + (1 - alpha) * dest[0]),
	        g = Math.floor(alpha * src[1] + (1 - alpha) * dest[1]),
	        b = Math.floor(alpha * src[2] + (1 - alpha) * dest[2]);
	    return "rgb(" + r + "," + g + "," + b + ")";
	  },
	  createColorString: function (str) {
	    // Excel will quote color strings, strip all quotes
	    str = stripQuotes(str);

	    if (str.includes(",")) {
	      return str.startsWith("rgb") ? str : "rgb(" + str + ")";
	    } else {
	      return str;
	    }
	  },
	  darkenLighten: function (color, amt) {
	    let src;
	    let hexColor = this.colorNameToHex(color);

	    if (hexColor) {
	      src = IGVColor.hexToRgb(hexColor);
	    } else {
	      src = color.startsWith('rgb(') ? color : IGVColor.hexToRgb(color);
	    }

	    const components = src.replace(")", "").substring(4).split(",");
	    const r = Math.max(0, Math.min(255, Number.parseInt(components[0].trim()) + amt));
	    const g = Math.max(0, Math.min(255, Number.parseInt(components[1].trim()) + amt));
	    const b = Math.max(0, Math.min(255, Number.parseInt(components[2].trim()) + amt));
	    return 'rgb(' + r.toString() + ',' + g.toString() + ',' + b.toString() + ')';
	  },

	  /**
	   * Convert html/css color name to hex value.  Adapted from https://gist.github.com/mxfh/4719348
	   * @param colorName
	   * @returns {*}
	   */
	  colorNameToHex: function (colorName) {
	    // color list from http://stackoverflow.com/q/1573053/731179  with added gray/gray
	    const definedColorNames = {
	      "aliceblue": "#f0f8ff",
	      "antiquewhite": "#faebd7",
	      "aqua": "#00ffff",
	      "aquamarine": "#7fffd4",
	      "azure": "#f0ffff",
	      "beige": "#f5f5dc",
	      "bisque": "#ffe4c4",
	      "black": "#000000",
	      "blanchedalmond": "#ffebcd",
	      "blue": "#0000ff",
	      "blueviolet": "#8a2be2",
	      "brown": "#a52a2a",
	      "burlywood": "#deb887",
	      "cadetblue": "#5f9ea0",
	      "chartreuse": "#7fff00",
	      "chocolate": "#d2691e",
	      "coral": "#ff7f50",
	      "cornflowerblue": "#6495ed",
	      "cornsilk": "#fff8dc",
	      "crimson": "#dc143c",
	      "cyan": "#00ffff",
	      "darkblue": "#00008b",
	      "darkcyan": "#008b8b",
	      "darkgoldenrod": "#b8860b",
	      "darkgray": "#a9a9a9",
	      "darkgreen": "#006400",
	      "darkkhaki": "#bdb76b",
	      "darkmagenta": "#8b008b",
	      "darkolivegreen": "#556b2f",
	      "darkorange": "#ff8c00",
	      "darkorchid": "#9932cc",
	      "darkred": "#8b0000",
	      "darksalmon": "#e9967a",
	      "darkseagreen": "#8fbc8f",
	      "darkslateblue": "#483d8b",
	      "darkslategray": "#2f4f4f",
	      "darkturquoise": "#00ced1",
	      "darkviolet": "#9400d3",
	      "deeppink": "#ff1493",
	      "deepskyblue": "#00bfff",
	      "dimgray": "#696969",
	      "dodgerblue": "#1e90ff",
	      "firebrick": "#b22222",
	      "floralwhite": "#fffaf0",
	      "forestgreen": "#228b22",
	      "fuchsia": "#ff00ff",
	      "gainsboro": "#dcdcdc",
	      "ghostwhite": "#f8f8ff",
	      "gold": "#ffd700",
	      "goldenrod": "#daa520",
	      "gray": "#808080",
	      "green": "#008000",
	      "greenyellow": "#adff2f",
	      "honeydew": "#f0fff0",
	      "hotpink": "#ff69b4",
	      "indianred ": "#cd5c5c",
	      "indigo ": "#4b0082",
	      "ivory": "#fffff0",
	      "khaki": "#f0e68c",
	      "lavender": "#e6e6fa",
	      "lavenderblush": "#fff0f5",
	      "lawngreen": "#7cfc00",
	      "lemonchiffon": "#fffacd",
	      "lightblue": "#add8e6",
	      "lightcoral": "#f08080",
	      "lightcyan": "#e0ffff",
	      "lightgoldenrodyellow": "#fafad2",
	      "lightgrey": "#d3d3d3",
	      "lightgreen": "#90ee90",
	      "lightpink": "#ffb6c1",
	      "lightsalmon": "#ffa07a",
	      "lightseagreen": "#20b2aa",
	      "lightskyblue": "#87cefa",
	      "lightslategray": "#778899",
	      "lightsteelblue": "#b0c4de",
	      "lightyellow": "#ffffe0",
	      "lime": "#00ff00",
	      "limegreen": "#32cd32",
	      "linen": "#faf0e6",
	      "magenta": "#ff00ff",
	      "maroon": "#800000",
	      "mediumaquamarine": "#66cdaa",
	      "mediumblue": "#0000cd",
	      "mediumorchid": "#ba55d3",
	      "mediumpurple": "#9370d8",
	      "mediumseagreen": "#3cb371",
	      "mediumslateblue": "#7b68ee",
	      "mediumspringgreen": "#00fa9a",
	      "mediumturquoise": "#48d1cc",
	      "mediumvioletred": "#c71585",
	      "midnightblue": "#191970",
	      "mintcream": "#f5fffa",
	      "mistyrose": "#ffe4e1",
	      "moccasin": "#ffe4b5",
	      "navajowhite": "#ffdead",
	      "navy": "#000080",
	      "oldlace": "#fdf5e6",
	      "olive": "#808000",
	      "olivedrab": "#6b8e23",
	      "orange": "#ffa500",
	      "orangered": "#ff4500",
	      "orchid": "#da70d6",
	      "palegoldenrod": "#eee8aa",
	      "palegreen": "#98fb98",
	      "paleturquoise": "#afeeee",
	      "palevioletred": "#d87093",
	      "papayawhip": "#ffefd5",
	      "peachpuff": "#ffdab9",
	      "peru": "#cd853f",
	      "pink": "#ffc0cb",
	      "plum": "#dda0dd",
	      "powderblue": "#b0e0e6",
	      "purple": "#800080",
	      "red": "#ff0000",
	      "rosybrown": "#bc8f8f",
	      "royalblue": "#4169e1",
	      "saddlebrown": "#8b4513",
	      "salmon": "#fa8072",
	      "sandybrown": "#f4a460",
	      "seagreen": "#2e8b57",
	      "seashell": "#fff5ee",
	      "sienna": "#a0522d",
	      "silver": "#c0c0c0",
	      "skyblue": "#87ceeb",
	      "slateblue": "#6a5acd",
	      "slategray": "#708090",
	      "snow": "#fffafa",
	      "springgreen": "#00ff7f",
	      "steelblue": "#4682b4",
	      "tan": "#d2b48c",
	      "teal": "#008080",
	      "thistle": "#d8bfd8",
	      "tomato": "#ff6347",
	      "turquoise": "#40e0d0",
	      "violet": "#ee82ee",
	      "wheat": "#f5deb3",
	      "white": "#ffffff",
	      "whitesmoke": "#f5f5f5",
	      "yellow": "#ffff00",
	      "yellowgreen": "#9acd32",
	      "darkgrey": "#a9a9a9",
	      "darkslategrey": "#2f4f4f",
	      "dimgrey": "#696969",
	      "grey": "#808080",
	      "lightgray": "#d3d3d3",
	      "lightslategrey": "#778899",
	      "slategrey": "#708090"
	    };
	    return definedColorNames[colorName];
	  }
	};

	/**
	 * Make the target element movable by clicking and dragging on the handle.  This is not a general purprose function,
	 * it makes several options specific to igv dialogs, the primary one being that the
	 * target is absolutely positioned in pixel coordinates

	 */
	let dragData$1; // Its assumed we are only dragging one element at a time.

	function makeDraggable$1(target, handle) {
	  handle.addEventListener('mousedown', dragStart$1.bind(target));
	}

	function dragStart$1(event) {
	  event.stopPropagation();
	  event.preventDefault();
	  const pageCoords = offset$1(this);
	  const dragFunction = drag$1.bind(this);
	  const dragEndFunction = dragEnd$1.bind(this);
	  const computedStyle = getComputedStyle(this);
	  const top = parseInt(computedStyle.top.replace("px", ""));
	  const left = parseInt(computedStyle.left.replace("px", ""));
	  dragData$1 = {
	    dragFunction: dragFunction,
	    dragEndFunction: dragEndFunction,
	    screenX: event.screenX,
	    screenY: event.screenY,
	    top: top,
	    left: left
	  };
	  document.addEventListener('mousemove', dragFunction);
	  document.addEventListener('mouseup', dragEndFunction);
	  document.addEventListener('mouseleave', dragEndFunction);
	  document.addEventListener('mouseexit', dragEndFunction);
	}

	function drag$1(event) {
	  if (!dragData$1) {
	    return;
	  }

	  event.stopPropagation();
	  event.preventDefault();
	  const dx = event.screenX - dragData$1.screenX;
	  const dy = event.screenY - dragData$1.screenY;
	  this.style.left = `${dragData$1.left + dx}px`;
	  this.style.top = `${dragData$1.top + dy}px`;
	}

	function dragEnd$1(event) {
	  if (!dragData$1) {
	    return;
	  }

	  event.stopPropagation();
	  event.preventDefault();
	  const dragFunction = dragData$1.dragFunction;
	  const dragEndFunction = dragData$1.dragEndFunction;
	  document.removeEventListener('mousemove', dragFunction);
	  document.removeEventListener('mouseup', dragEndFunction);
	  document.removeEventListener('mouseleave', dragEndFunction);
	  document.removeEventListener('mouseexit', dragEndFunction);
	  dragData$1 = undefined;
	}

	// https://tc39.github.io/ecma262/#sec-object.keys

	var objectKeys = Object.keys || function keys(O) {
	  return objectKeysInternal(O, enumBugKeys);
	};

	// https://tc39.github.io/ecma262/#sec-object.defineproperties

	var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = objectKeys(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;

	  while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);

	  return O;
	};

	var html = getBuiltIn('document', 'documentElement');

	var GT = '>';
	var LT = '<';
	var PROTOTYPE = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO = sharedKey('IE_PROTO');

	var EmptyConstructor = function () {
	  /* empty */
	};

	var scriptTag = function (content) {
	  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	}; // Create object with fake `null` prototype: use ActiveX Object with cleared prototype


	var NullProtoObjectViaActiveX = function (activeXDocument) {
	  activeXDocument.write(scriptTag(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  activeXDocument = null; // avoid memory leak

	  return temp;
	}; // Create object with fake `null` prototype: use iframe Object with cleared prototype


	var NullProtoObjectViaIFrame = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement('iframe');
	  var JS = 'java' + SCRIPT + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe); // https://github.com/zloirock/core-js/issues/475

	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	}; // Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug


	var activeXDocument;

	var NullProtoObject = function () {
	  try {
	    /* global ActiveXObject */
	    activeXDocument = document.domain && new ActiveXObject('htmlfile');
	  } catch (error) {
	    /* ignore */
	  }

	  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
	  var length = enumBugKeys.length;

	  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];

	  return NullProtoObject();
	};

	hiddenKeys[IE_PROTO] = true; // `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create

	var objectCreate = Object.create || function create(O, Properties) {
	  var result;

	  if (O !== null) {
	    EmptyConstructor[PROTOTYPE] = anObject(O);
	    result = new EmptyConstructor();
	    EmptyConstructor[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

	    result[IE_PROTO] = O;
	  } else result = NullProtoObject();

	  return Properties === undefined ? result : objectDefineProperties(result, Properties);
	};

	var nativeGetOwnPropertyNames = objectGetOwnPropertyNames.f;
	var toString$1 = {}.toString;
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return nativeGetOwnPropertyNames(it);
	  } catch (error) {
	    return windowNames.slice();
	  }
	}; // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window


	var f$5 = function getOwnPropertyNames(it) {
	  return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : nativeGetOwnPropertyNames(toIndexedObject(it));
	};

	var objectGetOwnPropertyNamesExternal = {
	  f: f$5
	};

	var f$6 = wellKnownSymbol;
	var wellKnownSymbolWrapped = {
	  f: f$6
	};

	var defineProperty$1 = objectDefineProperty.f;

	var defineWellKnownSymbol = function (NAME) {
	  var Symbol = path.Symbol || (path.Symbol = {});
	  if (!has(Symbol, NAME)) defineProperty$1(Symbol, NAME, {
	    value: wellKnownSymbolWrapped.f(NAME)
	  });
	};

	var defineProperty$2 = objectDefineProperty.f;
	var TO_STRING_TAG = wellKnownSymbol('toStringTag');

	var setToStringTag = function (it, TAG, STATIC) {
	  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
	    defineProperty$2(it, TO_STRING_TAG, {
	      configurable: true,
	      value: TAG
	    });
	  }
	};

	var $forEach$1 = arrayIteration.forEach;
	var HIDDEN = sharedKey('hidden');
	var SYMBOL = 'Symbol';
	var PROTOTYPE$1 = 'prototype';
	var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
	var setInternalState = internalState.set;
	var getInternalState = internalState.getterFor(SYMBOL);
	var ObjectPrototype = Object[PROTOTYPE$1];
	var $Symbol = global_1.Symbol;
	var $stringify = getBuiltIn('JSON', 'stringify');
	var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	var nativeDefineProperty$1 = objectDefineProperty.f;
	var nativeGetOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f;
	var nativePropertyIsEnumerable$1 = objectPropertyIsEnumerable.f;
	var AllSymbols = shared('symbols');
	var ObjectPrototypeSymbols = shared('op-symbols');
	var StringToSymbolRegistry = shared('string-to-symbol-registry');
	var SymbolToStringRegistry = shared('symbol-to-string-registry');
	var WellKnownSymbolsStore$1 = shared('wks');
	var QObject = global_1.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

	var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

	var setSymbolDescriptor = descriptors && fails(function () {
	  return objectCreate(nativeDefineProperty$1({}, 'a', {
	    get: function () {
	      return nativeDefineProperty$1(this, 'a', {
	        value: 7
	      }).a;
	    }
	  })).a != 7;
	}) ? function (O, P, Attributes) {
	  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype, P);
	  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
	  nativeDefineProperty$1(O, P, Attributes);

	  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
	    nativeDefineProperty$1(ObjectPrototype, P, ObjectPrototypeDescriptor);
	  }
	} : nativeDefineProperty$1;

	var wrap = function (tag, description) {
	  var symbol = AllSymbols[tag] = objectCreate($Symbol[PROTOTYPE$1]);
	  setInternalState(symbol, {
	    type: SYMBOL,
	    tag: tag,
	    description: description
	  });
	  if (!descriptors) symbol.description = description;
	  return symbol;
	};

	var isSymbol = useSymbolAsUid ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return Object(it) instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(O, P, Attributes) {
	  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
	  anObject(O);
	  var key = toPrimitive(P, true);
	  anObject(Attributes);

	  if (has(AllSymbols, key)) {
	    if (!Attributes.enumerable) {
	      if (!has(O, HIDDEN)) nativeDefineProperty$1(O, HIDDEN, createPropertyDescriptor(1, {}));
	      O[HIDDEN][key] = true;
	    } else {
	      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
	      Attributes = objectCreate(Attributes, {
	        enumerable: createPropertyDescriptor(0, false)
	      });
	    }

	    return setSymbolDescriptor(O, key, Attributes);
	  }

	  return nativeDefineProperty$1(O, key, Attributes);
	};

	var $defineProperties = function defineProperties(O, Properties) {
	  anObject(O);
	  var properties = toIndexedObject(Properties);
	  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
	  $forEach$1(keys, function (key) {
	    if (!descriptors || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
	  });
	  return O;
	};

	var $create = function create(O, Properties) {
	  return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
	};

	var $propertyIsEnumerable = function propertyIsEnumerable(V) {
	  var P = toPrimitive(V, true);
	  var enumerable = nativePropertyIsEnumerable$1.call(this, P);
	  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
	  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
	};

	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
	  var it = toIndexedObject(O);
	  var key = toPrimitive(P, true);
	  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
	  var descriptor = nativeGetOwnPropertyDescriptor$1(it, key);

	  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
	    descriptor.enumerable = true;
	  }

	  return descriptor;
	};

	var $getOwnPropertyNames = function getOwnPropertyNames(O) {
	  var names = nativeGetOwnPropertyNames$1(toIndexedObject(O));
	  var result = [];
	  $forEach$1(names, function (key) {
	    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
	  });
	  return result;
	};

	var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
	  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
	  var names = nativeGetOwnPropertyNames$1(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
	  var result = [];
	  $forEach$1(names, function (key) {
	    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
	      result.push(AllSymbols[key]);
	    }
	  });
	  return result;
	}; // `Symbol` constructor
	// https://tc39.github.io/ecma262/#sec-symbol-constructor


	if (!nativeSymbol) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
	    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
	    var tag = uid(description);

	    var setter = function (value) {
	      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
	    };

	    if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, {
	      configurable: true,
	      set: setter
	    });
	    return wrap(tag, description);
	  };

	  redefine($Symbol[PROTOTYPE$1], 'toString', function toString() {
	    return getInternalState(this).tag;
	  });
	  redefine($Symbol, 'withoutSetter', function (description) {
	    return wrap(uid(description), description);
	  });
	  objectPropertyIsEnumerable.f = $propertyIsEnumerable;
	  objectDefineProperty.f = $defineProperty;
	  objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;
	  objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
	  objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;

	  wellKnownSymbolWrapped.f = function (name) {
	    return wrap(wellKnownSymbol(name), name);
	  };

	  if (descriptors) {
	    // https://github.com/tc39/proposal-Symbol-description
	    nativeDefineProperty$1($Symbol[PROTOTYPE$1], 'description', {
	      configurable: true,
	      get: function description() {
	        return getInternalState(this).description;
	      }
	    });

	    {
	      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, {
	        unsafe: true
	      });
	    }
	  }
	}

	_export({
	  global: true,
	  wrap: true,
	  forced: !nativeSymbol,
	  sham: !nativeSymbol
	}, {
	  Symbol: $Symbol
	});
	$forEach$1(objectKeys(WellKnownSymbolsStore$1), function (name) {
	  defineWellKnownSymbol(name);
	});
	_export({
	  target: SYMBOL,
	  stat: true,
	  forced: !nativeSymbol
	}, {
	  // `Symbol.for` method
	  // https://tc39.github.io/ecma262/#sec-symbol.for
	  'for': function (key) {
	    var string = String(key);
	    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
	    var symbol = $Symbol(string);
	    StringToSymbolRegistry[string] = symbol;
	    SymbolToStringRegistry[symbol] = string;
	    return symbol;
	  },
	  // `Symbol.keyFor` method
	  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
	    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
	  },
	  useSetter: function () {
	    USE_SETTER = true;
	  },
	  useSimple: function () {
	    USE_SETTER = false;
	  }
	});
	_export({
	  target: 'Object',
	  stat: true,
	  forced: !nativeSymbol,
	  sham: !descriptors
	}, {
	  // `Object.create` method
	  // https://tc39.github.io/ecma262/#sec-object.create
	  create: $create,
	  // `Object.defineProperty` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperty
	  defineProperty: $defineProperty,
	  // `Object.defineProperties` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperties
	  defineProperties: $defineProperties,
	  // `Object.getOwnPropertyDescriptor` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
	});
	_export({
	  target: 'Object',
	  stat: true,
	  forced: !nativeSymbol
	}, {
	  // `Object.getOwnPropertyNames` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // `Object.getOwnPropertySymbols` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
	  getOwnPropertySymbols: $getOwnPropertySymbols
	}); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443

	_export({
	  target: 'Object',
	  stat: true,
	  forced: fails(function () {
	    objectGetOwnPropertySymbols.f(1);
	  })
	}, {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return objectGetOwnPropertySymbols.f(toObject(it));
	  }
	}); // `JSON.stringify` method behavior with symbols
	// https://tc39.github.io/ecma262/#sec-json.stringify

	if ($stringify) {
	  var FORCED_JSON_STRINGIFY = !nativeSymbol || fails(function () {
	    var symbol = $Symbol(); // MS Edge converts symbol values to JSON as {}

	    return $stringify([symbol]) != '[null]' // WebKit converts symbol values to JSON as null
	    || $stringify({
	      a: symbol
	    }) != '{}' // V8 throws on boxed symbols
	    || $stringify(Object(symbol)) != '{}';
	  });
	  _export({
	    target: 'JSON',
	    stat: true,
	    forced: FORCED_JSON_STRINGIFY
	  }, {
	    // eslint-disable-next-line no-unused-vars
	    stringify: function stringify(it, replacer, space) {
	      var args = [it];
	      var index = 1;
	      var $replacer;

	      while (arguments.length > index) args.push(arguments[index++]);

	      $replacer = replacer;
	      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

	      if (!isArray(replacer)) replacer = function (key, value) {
	        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	        if (!isSymbol(value)) return value;
	      };
	      args[1] = replacer;
	      return $stringify.apply(null, args);
	    }
	  });
	} // `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive


	if (!$Symbol[PROTOTYPE$1][TO_PRIMITIVE]) {
	  createNonEnumerableProperty($Symbol[PROTOTYPE$1], TO_PRIMITIVE, $Symbol[PROTOTYPE$1].valueOf);
	} // `Symbol.prototype[@@toStringTag]` property
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag


	setToStringTag($Symbol, SYMBOL);
	hiddenKeys[HIDDEN] = true;

	var defineProperty$3 = objectDefineProperty.f;
	var NativeSymbol = global_1.Symbol;

	if (descriptors && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) || // Safari 12 bug
	NativeSymbol().description !== undefined)) {
	  var EmptyStringDescriptionStore = {}; // wrap Symbol constructor for correct work with undefined description

	  var SymbolWrapper = function Symbol() {
	    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
	    var result = this instanceof SymbolWrapper ? new NativeSymbol(description) // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
	    : description === undefined ? NativeSymbol() : NativeSymbol(description);
	    if (description === '') EmptyStringDescriptionStore[result] = true;
	    return result;
	  };

	  copyConstructorProperties(SymbolWrapper, NativeSymbol);
	  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
	  symbolPrototype.constructor = SymbolWrapper;
	  var symbolToString = symbolPrototype.toString;
	  var native = String(NativeSymbol('test')) == 'Symbol(test)';
	  var regexp = /^Symbol\((.*)\)[^)]+$/;
	  defineProperty$3(symbolPrototype, 'description', {
	    configurable: true,
	    get: function description() {
	      var symbol = isObject(this) ? this.valueOf() : this;
	      var string = symbolToString.call(symbol);
	      if (has(EmptyStringDescriptionStore, symbol)) return '';
	      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
	      return desc === '' ? undefined : desc;
	    }
	  });
	  _export({
	    global: true,
	    forced: true
	  }, {
	    Symbol: SymbolWrapper
	  });
	}

	// https://tc39.github.io/ecma262/#sec-symbol.iterator

	defineWellKnownSymbol('iterator');

	var createProperty = function (object, key, value) {
	  var propertyKey = toPrimitive(key);
	  if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));else object[propertyKey] = value;
	};

	var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
	var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded'; // We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679

	var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE] = false;
	  return array.concat()[0] !== array;
	});
	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

	var isConcatSpreadable = function (O) {
	  if (!isObject(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE];
	  return spreadable !== undefined ? !!spreadable : isArray(O);
	};

	var FORCED$1 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species

	_export({
	  target: 'Array',
	  proto: true,
	  forced: FORCED$1
	}, {
	  concat: function concat(arg) {
	    // eslint-disable-line no-unused-vars
	    var O = toObject(this);
	    var A = arraySpeciesCreate(O, 0);
	    var n = 0;
	    var i, k, length, len, E;

	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];

	      if (isConcatSpreadable(E)) {
	        len = toLength(E.length);
	        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);

	        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
	      } else {
	        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        createProperty(A, n++, E);
	      }
	    }

	    A.length = n;
	    return A;
	  }
	});

	var UNSCOPABLES = wellKnownSymbol('unscopables');
	var ArrayPrototype = Array.prototype; // Array.prototype[@@unscopables]
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

	if (ArrayPrototype[UNSCOPABLES] == undefined) {
	  objectDefineProperty.f(ArrayPrototype, UNSCOPABLES, {
	    configurable: true,
	    value: objectCreate(null)
	  });
	} // add a key to Array.prototype[@@unscopables]


	var addToUnscopables = function (key) {
	  ArrayPrototype[UNSCOPABLES][key] = true;
	};

	var $find = arrayIteration.find;
	var FIND = 'find';
	var SKIPS_HOLES = true;
	var USES_TO_LENGTH$4 = arrayMethodUsesToLength(FIND); // Shouldn't skip holes

	if (FIND in []) Array(1)[FIND](function () {
	  SKIPS_HOLES = false;
	}); // `Array.prototype.find` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.find

	_export({
	  target: 'Array',
	  proto: true,
	  forced: SKIPS_HOLES || !USES_TO_LENGTH$4
	}, {
	  find: function find(callbackfn
	  /* , that = undefined */
	  ) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	}); // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

	addToUnscopables(FIND);

	var iterators = {};

	var correctPrototypeGetter = !fails(function () {
	  function F() {
	    /* empty */
	  }

	  F.prototype.constructor = null;
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var IE_PROTO$1 = sharedKey('IE_PROTO');
	var ObjectPrototype$1 = Object.prototype; // `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof

	var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO$1)) return O[IE_PROTO$1];

	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  }

	  return O instanceof Object ? ObjectPrototype$1 : null;
	};

	var ITERATOR = wellKnownSymbol('iterator');
	var BUGGY_SAFARI_ITERATORS = false;

	var returnThis = function () {
	  return this;
	}; // `%IteratorPrototype%` object
	// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object


	var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

	if ([].keys) {
	  arrayIterator = [].keys(); // Safari 8 has buggy iterators w/o `next`

	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;else {
	    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
	  }
	}

	if (IteratorPrototype == undefined) IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

	if ( !has(IteratorPrototype, ITERATOR)) {
	  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
	}

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;

	var returnThis$1 = function () {
	  return this;
	};

	var createIteratorConstructor = function (IteratorConstructor, NAME, next) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, {
	    next: createPropertyDescriptor(1, next)
	  });
	  setToStringTag(IteratorConstructor, TO_STRING_TAG, false);
	  iterators[TO_STRING_TAG] = returnThis$1;
	  return IteratorConstructor;
	};

	var aPossiblePrototype = function (it) {
	  if (!isObject(it) && it !== null) {
	    throw TypeError("Can't set " + String(it) + ' as a prototype');
	  }

	  return it;
	};

	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.

	/* eslint-disable no-proto */

	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;

	  try {
	    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
	    setter.call(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) {
	    /* empty */
	  }

	  return function setPrototypeOf(O, proto) {
	    anObject(O);
	    aPossiblePrototype(proto);
	    if (CORRECT_SETTER) setter.call(O, proto);else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$1 = wellKnownSymbol('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis$2 = function () {
	  return this;
	};

	var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];

	    switch (KIND) {
	      case KEYS:
	        return function keys() {
	          return new IteratorConstructor(this, KIND);
	        };

	      case VALUES:
	        return function values() {
	          return new IteratorConstructor(this, KIND);
	        };

	      case ENTRIES:
	        return function entries() {
	          return new IteratorConstructor(this, KIND);
	        };
	    }

	    return function () {
	      return new IteratorConstructor(this);
	    };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$1] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY; // fix native

	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));

	    if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
	      if ( objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {
	        if (objectSetPrototypeOf) {
	          objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);
	        } else if (typeof CurrentIteratorPrototype[ITERATOR$1] != 'function') {
	          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR$1, returnThis$2);
	        }
	      } // Set @@toStringTag to native iterators


	      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);
	    }
	  } // fix Array#{values, @@iterator}.name in V8 / FF


	  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    INCORRECT_VALUES_NAME = true;

	    defaultIterator = function values() {
	      return nativeIterator.call(this);
	    };
	  } // define iterator


	  if ( IterablePrototype[ITERATOR$1] !== defaultIterator) {
	    createNonEnumerableProperty(IterablePrototype, ITERATOR$1, defaultIterator);
	  }

	  iterators[NAME] = defaultIterator; // export additional methods

	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else _export({
	      target: NAME,
	      proto: true,
	      forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME
	    }, methods);
	  }

	  return methods;
	};

	var ARRAY_ITERATOR = 'Array Iterator';
	var setInternalState$1 = internalState.set;
	var getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR); // `Array.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.github.io/ecma262/#sec-createarrayiterator

	var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
	  setInternalState$1(this, {
	    type: ARRAY_ITERATOR,
	    target: toIndexedObject(iterated),
	    // target
	    index: 0,
	    // next index
	    kind: kind // kind

	  }); // `%ArrayIteratorPrototype%.next` method
	  // https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
	  var state = getInternalState$1(this);
	  var target = state.target;
	  var kind = state.kind;
	  var index = state.index++;

	  if (!target || index >= target.length) {
	    state.target = undefined;
	    return {
	      value: undefined,
	      done: true
	    };
	  }

	  if (kind == 'keys') return {
	    value: index,
	    done: false
	  };
	  if (kind == 'values') return {
	    value: target[index],
	    done: false
	  };
	  return {
	    value: [index, target[index]],
	    done: false
	  };
	}, 'values'); // argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject

	iterators.Arguments = iterators.Array; // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

	var nativeJoin = [].join;
	var ES3_STRINGS = indexedObject != Object;
	var STRICT_METHOD$3 = arrayMethodIsStrict('join', ','); // `Array.prototype.join` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.join

	_export({
	  target: 'Array',
	  proto: true,
	  forced: ES3_STRINGS || !STRICT_METHOD$3
	}, {
	  join: function join(separator) {
	    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
	  }
	});

	var $map = arrayIteration.map;
	var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('map'); // FF49- issue

	var USES_TO_LENGTH$5 = arrayMethodUsesToLength('map'); // `Array.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.map
	// with adding support of @@species

	_export({
	  target: 'Array',
	  proto: true,
	  forced: !HAS_SPECIES_SUPPORT$1 || !USES_TO_LENGTH$5
	}, {
	  map: function map(callbackfn
	  /* , thisArg */
	  ) {
	    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('slice');
	var USES_TO_LENGTH$6 = arrayMethodUsesToLength('slice', {
	  ACCESSORS: true,
	  0: 0,
	  1: 2
	});
	var SPECIES$4 = wellKnownSymbol('species');
	var nativeSlice = [].slice;
	var max$1 = Math.max; // `Array.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects

	_export({
	  target: 'Array',
	  proto: true,
	  forced: !HAS_SPECIES_SUPPORT$2 || !USES_TO_LENGTH$6
	}, {
	  slice: function slice(start, end) {
	    var O = toIndexedObject(this);
	    var length = toLength(O.length);
	    var k = toAbsoluteIndex(start, length);
	    var fin = toAbsoluteIndex(end === undefined ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible

	    var Constructor, result, n;

	    if (isArray(O)) {
	      Constructor = O.constructor; // cross-realm fallback

	      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
	        Constructor = undefined;
	      } else if (isObject(Constructor)) {
	        Constructor = Constructor[SPECIES$4];
	        if (Constructor === null) Constructor = undefined;
	      }

	      if (Constructor === Array || Constructor === undefined) {
	        return nativeSlice.call(O, k, fin);
	      }
	    }

	    result = new (Constructor === undefined ? Array : Constructor)(max$1(fin - k, 0));

	    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);

	    result.length = n;
	    return result;
	  }
	});

	var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport('splice');
	var USES_TO_LENGTH$7 = arrayMethodUsesToLength('splice', {
	  ACCESSORS: true,
	  0: 0,
	  1: 2
	});
	var max$2 = Math.max;
	var min$5 = Math.min;
	var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded'; // `Array.prototype.splice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.splice
	// with adding support of @@species

	_export({
	  target: 'Array',
	  proto: true,
	  forced: !HAS_SPECIES_SUPPORT$3 || !USES_TO_LENGTH$7
	}, {
	  splice: function splice(start, deleteCount
	  /* , ...items */
	  ) {
	    var O = toObject(this);
	    var len = toLength(O.length);
	    var actualStart = toAbsoluteIndex(start, len);
	    var argumentsLength = arguments.length;
	    var insertCount, actualDeleteCount, A, k, from, to;

	    if (argumentsLength === 0) {
	      insertCount = actualDeleteCount = 0;
	    } else if (argumentsLength === 1) {
	      insertCount = 0;
	      actualDeleteCount = len - actualStart;
	    } else {
	      insertCount = argumentsLength - 2;
	      actualDeleteCount = min$5(max$2(toInteger(deleteCount), 0), len - actualStart);
	    }

	    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$1) {
	      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
	    }

	    A = arraySpeciesCreate(O, actualDeleteCount);

	    for (k = 0; k < actualDeleteCount; k++) {
	      from = actualStart + k;
	      if (from in O) createProperty(A, k, O[from]);
	    }

	    A.length = actualDeleteCount;

	    if (insertCount < actualDeleteCount) {
	      for (k = actualStart; k < len - actualDeleteCount; k++) {
	        from = k + actualDeleteCount;
	        to = k + insertCount;
	        if (from in O) O[to] = O[from];else delete O[to];
	      }

	      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
	    } else if (insertCount > actualDeleteCount) {
	      for (k = len - actualDeleteCount; k > actualStart; k--) {
	        from = k + actualDeleteCount - 1;
	        to = k + insertCount - 1;
	        if (from in O) O[to] = O[from];else delete O[to];
	      }
	    }

	    for (k = 0; k < insertCount; k++) {
	      O[k + actualStart] = arguments[k + 2];
	    }

	    O.length = len - actualDeleteCount + insertCount;
	    return A;
	  }
	});

	var defineProperty$4 = objectDefineProperty.f;
	var FunctionPrototype = Function.prototype;
	var FunctionPrototypeToString = FunctionPrototype.toString;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME = 'name'; // Function instances `.name` property
	// https://tc39.github.io/ecma262/#sec-function-instances-name

	if (descriptors && !(NAME in FunctionPrototype)) {
	  defineProperty$4(FunctionPrototype, NAME, {
	    configurable: true,
	    get: function () {
	      try {
	        return FunctionPrototypeToString.call(this).match(nameRE)[1];
	      } catch (error) {
	        return '';
	      }
	    }
	  });
	}

	var FAILS_ON_PRIMITIVES = fails(function () {
	  objectGetPrototypeOf(1);
	}); // `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof

	_export({
	  target: 'Object',
	  stat: true,
	  forced: FAILS_ON_PRIMITIVES,
	  sham: !correctPrototypeGetter
	}, {
	  getPrototypeOf: function getPrototypeOf(it) {
	    return objectGetPrototypeOf(toObject(it));
	  }
	});

	var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
	var test = {};
	test[TO_STRING_TAG$1] = 'z';
	var toStringTagSupport = String(test) === '[object z]';

	var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag'); // ES3 wrong here

	var CORRECT_ARGUMENTS = classofRaw(function () {
	  return arguments;
	}()) == 'Arguments'; // fallback for IE11 Script Access Denied error

	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) {
	    /* empty */
	  }
	}; // getting tag from ES6+ `Object.prototype.toString`


	var classof = toStringTagSupport ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
	  : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$2)) == 'string' ? tag // builtinTag case
	  : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback
	  : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
	};

	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring


	var objectToString = toStringTagSupport ? {}.toString : function toString() {
	  return '[object ' + classof(this) + ']';
	};

	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring

	if (!toStringTagSupport) {
	  redefine(Object.prototype, 'toString', objectToString, {
	    unsafe: true
	  });
	}

	var inheritIfRequired = function ($this, dummy, Wrapper) {
	  var NewTarget, NewTargetPrototype;
	  if ( // it can work only with native `setPrototypeOf`
	  objectSetPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
	  typeof (NewTarget = dummy.constructor) == 'function' && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) objectSetPrototypeOf($this, NewTargetPrototype);
	  return $this;
	};

	var SPECIES$5 = wellKnownSymbol('species');

	var setSpecies = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
	  var defineProperty = objectDefineProperty.f;

	  if (descriptors && Constructor && !Constructor[SPECIES$5]) {
	    defineProperty(Constructor, SPECIES$5, {
	      configurable: true,
	      get: function () {
	        return this;
	      }
	    });
	  }
	};

	var defineProperty$5 = objectDefineProperty.f;
	var getOwnPropertyNames = objectGetOwnPropertyNames.f;
	var setInternalState$2 = internalState.set;
	var MATCH$2 = wellKnownSymbol('match');
	var NativeRegExp = global_1.RegExp;
	var RegExpPrototype = NativeRegExp.prototype;
	var re1 = /a/g;
	var re2 = /a/g; // "new" should create a new object, old webkit bug

	var CORRECT_NEW = new NativeRegExp(re1) !== re1;
	var UNSUPPORTED_Y$2 = regexpStickyHelpers.UNSUPPORTED_Y;
	var FORCED$2 = descriptors && isForced_1('RegExp', !CORRECT_NEW || UNSUPPORTED_Y$2 || fails(function () {
	  re2[MATCH$2] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match

	  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
	})); // `RegExp` constructor
	// https://tc39.github.io/ecma262/#sec-regexp-constructor

	if (FORCED$2) {
	  var RegExpWrapper = function RegExp(pattern, flags) {
	    var thisIsRegExp = this instanceof RegExpWrapper;
	    var patternIsRegExp = isRegexp(pattern);
	    var flagsAreUndefined = flags === undefined;
	    var sticky;

	    if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
	      return pattern;
	    }

	    if (CORRECT_NEW) {
	      if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
	    } else if (pattern instanceof RegExpWrapper) {
	      if (flagsAreUndefined) flags = regexpFlags.call(pattern);
	      pattern = pattern.source;
	    }

	    if (UNSUPPORTED_Y$2) {
	      sticky = !!flags && flags.indexOf('y') > -1;
	      if (sticky) flags = flags.replace(/y/g, '');
	    }

	    var result = inheritIfRequired(CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);
	    if (UNSUPPORTED_Y$2 && sticky) setInternalState$2(result, {
	      sticky: sticky
	    });
	    return result;
	  };

	  var proxy = function (key) {
	    key in RegExpWrapper || defineProperty$5(RegExpWrapper, key, {
	      configurable: true,
	      get: function () {
	        return NativeRegExp[key];
	      },
	      set: function (it) {
	        NativeRegExp[key] = it;
	      }
	    });
	  };

	  var keys$1 = getOwnPropertyNames(NativeRegExp);
	  var index = 0;

	  while (keys$1.length > index) proxy(keys$1[index++]);

	  RegExpPrototype.constructor = RegExpWrapper;
	  RegExpWrapper.prototype = RegExpPrototype;
	  redefine(global_1, 'RegExp', RegExpWrapper);
	} // https://tc39.github.io/ecma262/#sec-get-regexp-@@species


	setSpecies('RegExp');

	var TO_STRING = 'toString';
	var RegExpPrototype$1 = RegExp.prototype;
	var nativeToString = RegExpPrototype$1[TO_STRING];
	var NOT_GENERIC = fails(function () {
	  return nativeToString.call({
	    source: 'a',
	    flags: 'b'
	  }) != '/a/b';
	}); // FF44- RegExp#toString has a wrong name

	var INCORRECT_NAME = nativeToString.name != TO_STRING; // `RegExp.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring

	if (NOT_GENERIC || INCORRECT_NAME) {
	  redefine(RegExp.prototype, TO_STRING, function toString() {
	    var R = anObject(this);
	    var p = String(R.source);
	    var rf = R.flags;
	    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype$1) ? regexpFlags.call(R) : rf);
	    return '/' + p + '/' + f;
	  }, {
	    unsafe: true
	  });
	}

	var charAt$1 = stringMultibyte.charAt;
	var STRING_ITERATOR = 'String Iterator';
	var setInternalState$3 = internalState.set;
	var getInternalState$2 = internalState.getterFor(STRING_ITERATOR); // `String.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator

	defineIterator(String, 'String', function (iterated) {
	  setInternalState$3(this, {
	    type: STRING_ITERATOR,
	    string: String(iterated),
	    index: 0
	  }); // `%StringIteratorPrototype%.next` method
	  // https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState$2(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return {
	    value: undefined,
	    done: true
	  };
	  point = charAt$1(string, index);
	  state.index += point.length;
	  return {
	    value: point,
	    done: false
	  };
	});

	fixRegexpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
	  return [// `String.prototype.match` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.match
	  function match(regexp) {
	    var O = requireObjectCoercible(this);
	    var matcher = regexp == undefined ? undefined : regexp[MATCH];
	    return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	  }, // `RegExp.prototype[@@match]` method
	  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
	  function (regexp) {
	    var res = maybeCallNative(nativeMatch, regexp, this);
	    if (res.done) return res.value;
	    var rx = anObject(regexp);
	    var S = String(this);
	    if (!rx.global) return regexpExecAbstract(rx, S);
	    var fullUnicode = rx.unicode;
	    rx.lastIndex = 0;
	    var A = [];
	    var n = 0;
	    var result;

	    while ((result = regexpExecAbstract(rx, S)) !== null) {
	      var matchStr = String(result[0]);
	      A[n] = matchStr;
	      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
	      n++;
	    }

	    return n === 0 ? null : A;
	  }];
	});

	var max$3 = Math.max;
	var min$6 = Math.min;
	var floor$1 = Math.floor;
	var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

	var maybeToString = function (it) {
	  return it === undefined ? it : String(it);
	}; // @@replace logic


	fixRegexpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
	  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
	  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
	  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';
	  return [// `String.prototype.replace` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.replace
	  function replace(searchValue, replaceValue) {
	    var O = requireObjectCoercible(this);
	    var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
	    return replacer !== undefined ? replacer.call(searchValue, O, replaceValue) : nativeReplace.call(String(O), searchValue, replaceValue);
	  }, // `RegExp.prototype[@@replace]` method
	  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
	  function (regexp, replaceValue) {
	    if (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0 || typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1) {
	      var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
	      if (res.done) return res.value;
	    }

	    var rx = anObject(regexp);
	    var S = String(this);
	    var functionalReplace = typeof replaceValue === 'function';
	    if (!functionalReplace) replaceValue = String(replaceValue);
	    var global = rx.global;

	    if (global) {
	      var fullUnicode = rx.unicode;
	      rx.lastIndex = 0;
	    }

	    var results = [];

	    while (true) {
	      var result = regexpExecAbstract(rx, S);
	      if (result === null) break;
	      results.push(result);
	      if (!global) break;
	      var matchStr = String(result[0]);
	      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
	    }

	    var accumulatedResult = '';
	    var nextSourcePosition = 0;

	    for (var i = 0; i < results.length; i++) {
	      result = results[i];
	      var matched = String(result[0]);
	      var position = max$3(min$6(toInteger(result.index), S.length), 0);
	      var captures = []; // NOTE: This is equivalent to
	      //   captures = result.slice(1).map(maybeToString)
	      // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
	      // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
	      // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

	      for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));

	      var namedCaptures = result.groups;

	      if (functionalReplace) {
	        var replacerArgs = [matched].concat(captures, position, S);
	        if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
	        var replacement = String(replaceValue.apply(undefined, replacerArgs));
	      } else {
	        replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
	      }

	      if (position >= nextSourcePosition) {
	        accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
	        nextSourcePosition = position + matched.length;
	      }
	    }

	    return accumulatedResult + S.slice(nextSourcePosition);
	  }]; // https://tc39.github.io/ecma262/#sec-getsubstitution

	  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
	    var tailPos = position + matched.length;
	    var m = captures.length;
	    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

	    if (namedCaptures !== undefined) {
	      namedCaptures = toObject(namedCaptures);
	      symbols = SUBSTITUTION_SYMBOLS;
	    }

	    return nativeReplace.call(replacement, symbols, function (match, ch) {
	      var capture;

	      switch (ch.charAt(0)) {
	        case '$':
	          return '$';

	        case '&':
	          return matched;

	        case '`':
	          return str.slice(0, position);

	        case "'":
	          return str.slice(tailPos);

	        case '<':
	          capture = namedCaptures[ch.slice(1, -1)];
	          break;

	        default:
	          // \d\d?
	          var n = +ch;
	          if (n === 0) return match;

	          if (n > m) {
	            var f = floor$1(n / 10);
	            if (f === 0) return match;
	            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
	            return match;
	          }

	          capture = captures[n - 1];
	      }

	      return capture === undefined ? '' : capture;
	    });
	  }
	});

	var ITERATOR$2 = wellKnownSymbol('iterator');
	var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');
	var ArrayValues = es_array_iterator.values;

	for (var COLLECTION_NAME$1 in domIterables) {
	  var Collection$1 = global_1[COLLECTION_NAME$1];
	  var CollectionPrototype$1 = Collection$1 && Collection$1.prototype;

	  if (CollectionPrototype$1) {
	    // some Chrome versions have non-configurable methods on DOMTokenList
	    if (CollectionPrototype$1[ITERATOR$2] !== ArrayValues) try {
	      createNonEnumerableProperty(CollectionPrototype$1, ITERATOR$2, ArrayValues);
	    } catch (error) {
	      CollectionPrototype$1[ITERATOR$2] = ArrayValues;
	    }

	    if (!CollectionPrototype$1[TO_STRING_TAG$3]) {
	      createNonEnumerableProperty(CollectionPrototype$1, TO_STRING_TAG$3, COLLECTION_NAME$1);
	    }

	    if (domIterables[COLLECTION_NAME$1]) for (var METHOD_NAME in es_array_iterator) {
	      // some Chrome versions have non-configurable methods on DOMTokenList
	      if (CollectionPrototype$1[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
	        createNonEnumerableProperty(CollectionPrototype$1, METHOD_NAME, es_array_iterator[METHOD_NAME]);
	      } catch (error) {
	        CollectionPrototype$1[METHOD_NAME] = es_array_iterator[METHOD_NAME];
	      }
	    }
	  }
	}

	/*!
	 * jQuery JavaScript Library v3.3.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright JS Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2018-01-20T17:24Z
	 */
	var arr = [];
	var document$2 = window.document;
	var getProto = Object.getPrototypeOf;
	var _slice = arr.slice;
	var concat = arr.concat;
	var push$1 = arr.push;
	var indexOf$1 = arr.indexOf;
	var class2type = {};
	var toString$2 = class2type.toString;
	var hasOwn = class2type.hasOwnProperty;
	var fnToString = hasOwn.toString;
	var ObjectFunctionString = fnToString.call(Object);
	var support = {};

	var isFunction = function isFunction(obj) {
	  // Support: Chrome <=57, Firefox <=52
	  // In some browsers, typeof returns "function" for HTML <object> elements
	  // (i.e., `typeof document.createElement( "object" ) === "function"`).
	  // We don't want to classify *any* DOM node as a function.
	  return typeof obj === "function" && typeof obj.nodeType !== "number";
	};

	var isWindow = function isWindow(obj) {
	  return obj != null && obj === obj.window;
	};

	var preservedScriptAttributes = {
	  type: true,
	  src: true,
	  noModule: true
	};

	function DOMEval(code, doc, node) {
	  doc = doc || document$2;
	  var i,
	      script = doc.createElement("script");
	  script.text = code;

	  if (node) {
	    for (i in preservedScriptAttributes) {
	      if (node[i]) {
	        script[i] = node[i];
	      }
	    }
	  }

	  doc.head.appendChild(script).parentNode.removeChild(script);
	}

	function toType(obj) {
	  if (obj == null) {
	    return obj + "";
	  } // Support: Android <=2.3 only (functionish RegExp)


	  return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString$2.call(obj)] || "object" : _typeof(obj);
	} // global Symbol
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module


	var version$1 = "3.3.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector",
	    // Define a local copy of jQuery
	jQuery = function jQuery(selector, context) {
	  // The jQuery object is actually just the init constructor 'enhanced'
	  // Need init if jQuery is called (just allow error to be thrown if not included)
	  return new jQuery.fn.init(selector, context);
	},
	    // Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

	jQuery.fn = jQuery.prototype = {
	  // The current version of jQuery being used
	  jquery: version$1,
	  constructor: jQuery,
	  // The default length of a jQuery object is 0
	  length: 0,
	  toArray: function toArray() {
	    return _slice.call(this);
	  },
	  // Get the Nth element in the matched element set OR
	  // Get the whole matched element set as a clean array
	  get: function get(num) {
	    // Return all the elements in a clean array
	    if (num == null) {
	      return _slice.call(this);
	    } // Return just the one element from the set


	    return num < 0 ? this[num + this.length] : this[num];
	  },
	  // Take an array of elements and push it onto the stack
	  // (returning the new matched element set)
	  pushStack: function pushStack(elems) {
	    // Build a new jQuery matched element set
	    var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)

	    ret.prevObject = this; // Return the newly-formed element set

	    return ret;
	  },
	  // Execute a callback for every element in the matched set.
	  each: function each(callback) {
	    return jQuery.each(this, callback);
	  },
	  map: function map(callback) {
	    return this.pushStack(jQuery.map(this, function (elem, i) {
	      return callback.call(elem, i, elem);
	    }));
	  },
	  slice: function slice() {
	    return this.pushStack(_slice.apply(this, arguments));
	  },
	  first: function first() {
	    return this.eq(0);
	  },
	  last: function last() {
	    return this.eq(-1);
	  },
	  eq: function eq(i) {
	    var len = this.length,
	        j = +i + (i < 0 ? len : 0);
	    return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
	  },
	  end: function end() {
	    return this.prevObject || this.constructor();
	  },
	  // For internal use only.
	  // Behaves like an Array's method, not like a jQuery method.
	  push: push$1,
	  sort: arr.sort,
	  splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function () {
	  var options,
	      name,
	      src,
	      copy,
	      copyIsArray,
	      clone,
	      target = arguments[0] || {},
	      i = 1,
	      length = arguments.length,
	      deep = false; // Handle a deep copy situation

	  if (typeof target === "boolean") {
	    deep = target; // Skip the boolean and the target

	    target = arguments[i] || {};
	    i++;
	  } // Handle case when target is a string or something (possible in deep copy)


	  if (_typeof(target) !== "object" && !isFunction(target)) {
	    target = {};
	  } // Extend jQuery itself if only one argument is passed


	  if (i === length) {
	    target = this;
	    i--;
	  }

	  for (; i < length; i++) {
	    // Only deal with non-null/undefined values
	    if ((options = arguments[i]) != null) {
	      // Extend the base object
	      for (name in options) {
	        src = target[name];
	        copy = options[name]; // Prevent never-ending loop

	        if (target === copy) {
	          continue;
	        } // Recurse if we're merging plain objects or arrays


	        if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
	          if (copyIsArray) {
	            copyIsArray = false;
	            clone = src && Array.isArray(src) ? src : [];
	          } else {
	            clone = src && jQuery.isPlainObject(src) ? src : {};
	          } // Never move original objects, clone them


	          target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values
	        } else if (copy !== undefined) {
	          target[name] = copy;
	        }
	      }
	    }
	  } // Return the modified object


	  return target;
	};

	jQuery.extend({
	  // Unique for each copy of jQuery on the page
	  expando: "jQuery" + (version$1 + Math.random()).replace(/\D/g, ""),
	  // Assume jQuery is ready without the ready module
	  isReady: true,
	  error: function error(msg) {
	    throw new Error(msg);
	  },
	  noop: function noop() {},
	  isPlainObject: function isPlainObject(obj) {
	    var proto, Ctor; // Detect obvious negatives
	    // Use toString instead of jQuery.type to catch host objects

	    if (!obj || toString$2.call(obj) !== "[object Object]") {
	      return false;
	    }

	    proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain

	    if (!proto) {
	      return true;
	    } // Objects with prototype are plain iff they were constructed by a global Object function


	    Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
	    return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
	  },
	  isEmptyObject: function isEmptyObject(obj) {
	    /* eslint-disable no-unused-vars */
	    // See https://github.com/eslint/eslint/issues/6125
	    var name;

	    for (name in obj) {
	      return false;
	    }

	    return true;
	  },
	  // Evaluates a script in a global context
	  globalEval: function globalEval(code) {
	    DOMEval(code);
	  },
	  each: function each(obj, callback) {
	    var length,
	        i = 0;

	    if (isArrayLike(obj)) {
	      length = obj.length;

	      for (; i < length; i++) {
	        if (callback.call(obj[i], i, obj[i]) === false) {
	          break;
	        }
	      }
	    } else {
	      for (i in obj) {
	        if (callback.call(obj[i], i, obj[i]) === false) {
	          break;
	        }
	      }
	    }

	    return obj;
	  },
	  // Support: Android <=4.0 only
	  trim: function trim(text) {
	    return text == null ? "" : (text + "").replace(rtrim, "");
	  },
	  // results is for internal usage only
	  makeArray: function makeArray(arr, results) {
	    var ret = results || [];

	    if (arr != null) {
	      if (isArrayLike(Object(arr))) {
	        jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
	      } else {
	        push$1.call(ret, arr);
	      }
	    }

	    return ret;
	  },
	  inArray: function inArray(elem, arr, i) {
	    return arr == null ? -1 : indexOf$1.call(arr, elem, i);
	  },
	  // Support: Android <=4.0 only, PhantomJS 1 only
	  // push.apply(_, arraylike) throws on ancient WebKit
	  merge: function merge(first, second) {
	    var len = +second.length,
	        j = 0,
	        i = first.length;

	    for (; j < len; j++) {
	      first[i++] = second[j];
	    }

	    first.length = i;
	    return first;
	  },
	  grep: function grep(elems, callback, invert) {
	    var callbackInverse,
	        matches = [],
	        i = 0,
	        length = elems.length,
	        callbackExpect = !invert; // Go through the array, only saving the items
	    // that pass the validator function

	    for (; i < length; i++) {
	      callbackInverse = !callback(elems[i], i);

	      if (callbackInverse !== callbackExpect) {
	        matches.push(elems[i]);
	      }
	    }

	    return matches;
	  },
	  // arg is for internal usage only
	  map: function map(elems, callback, arg) {
	    var length,
	        value,
	        i = 0,
	        ret = []; // Go through the array, translating each of the items to their new values

	    if (isArrayLike(elems)) {
	      length = elems.length;

	      for (; i < length; i++) {
	        value = callback(elems[i], i, arg);

	        if (value != null) {
	          ret.push(value);
	        }
	      } // Go through every key on the object,

	    } else {
	      for (i in elems) {
	        value = callback(elems[i], i, arg);

	        if (value != null) {
	          ret.push(value);
	        }
	      }
	    } // Flatten any nested arrays


	    return concat.apply([], ret);
	  },
	  // A global GUID counter for objects
	  guid: 1,
	  // jQuery.support is not used in Core but other projects attach their
	  // properties to it so it needs to exist.
	  support: support
	});

	if (typeof Symbol === "function") {
	  jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
	} // Populate the class2type map


	jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
	  class2type["[object " + name + "]"] = name.toLowerCase();
	});

	function isArrayLike(obj) {
	  // Support: real iOS 8.2 only (not reproducible in simulator)
	  // `in` check used to prevent JIT error (gh-2145)
	  // hasOwn isn't used here due to false negatives
	  // regarding Nodelist length in IE
	  var length = !!obj && "length" in obj && obj.length,
	      type = toType(obj);

	  if (isFunction(obj) || isWindow(obj)) {
	    return false;
	  }

	  return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
	}

	var Sizzle =
	/*!
	* Sizzle CSS Selector Engine v2.3.3
	* https://sizzlejs.com/
	*
	* Copyright jQuery Foundation and other contributors
	* Released under the MIT license
	* http://jquery.org/license
	*
	* Date: 2016-08-08
	*/
	function (window) {
	  var i,
	      support,
	      Expr,
	      getText,
	      isXML,
	      tokenize,
	      compile,
	      select,
	      outermostContext,
	      sortInput,
	      hasDuplicate,
	      // Local document vars
	  setDocument,
	      document,
	      docElem,
	      documentIsHTML,
	      rbuggyQSA,
	      rbuggyMatches,
	      matches,
	      contains,
	      // Instance-specific data
	  expando = "sizzle" + 1 * new Date(),
	      preferredDoc = window.document,
	      dirruns = 0,
	      done = 0,
	      classCache = createCache(),
	      tokenCache = createCache(),
	      compilerCache = createCache(),
	      sortOrder = function sortOrder(a, b) {
	    if (a === b) {
	      hasDuplicate = true;
	    }

	    return 0;
	  },
	      // Instance methods
	  hasOwn = {}.hasOwnProperty,
	      arr = [],
	      pop = arr.pop,
	      push_native = arr.push,
	      push = arr.push,
	      slice = arr.slice,
	      // Use a stripped-down indexOf as it's faster than native
	  // https://jsperf.com/thor-indexof-vs-for/5
	  indexOf = function indexOf(list, elem) {
	    var i = 0,
	        len = list.length;

	    for (; i < len; i++) {
	      if (list[i] === elem) {
	        return i;
	      }
	    }

	    return -1;
	  },
	      booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	      // Regular expressions
	  // http://www.w3.org/TR/css3-selectors/#whitespace
	  whitespace = "[\\x20\\t\\r\\n\\f]",
	      // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	  identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
	      // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	  attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
	  "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
	  "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
	      pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
	  // 1. quoted (capture 3; capture 4 or capture 5)
	  "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
	  "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
	  ".*" + ")\\)|)",
	      // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	  rwhitespace = new RegExp(whitespace + "+", "g"),
	      rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
	      rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
	      rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
	      rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
	      rpseudo = new RegExp(pseudos),
	      ridentifier = new RegExp("^" + identifier + "$"),
	      matchExpr = {
	    "ID": new RegExp("^#(" + identifier + ")"),
	    "CLASS": new RegExp("^\\.(" + identifier + ")"),
	    "TAG": new RegExp("^(" + identifier + "|[*])"),
	    "ATTR": new RegExp("^" + attributes),
	    "PSEUDO": new RegExp("^" + pseudos),
	    "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
	    "bool": new RegExp("^(?:" + booleans + ")$", "i"),
	    // For use in libraries implementing .is()
	    // We use this for POS matching in `select`
	    "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
	  },
	      rinputs = /^(?:input|select|textarea|button)$/i,
	      rheader = /^h\d$/i,
	      rnative = /^[^{]+\{\s*\[native \w/,
	      // Easily-parseable/retrievable ID or TAG or CLASS selectors
	  rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	      rsibling = /[+~]/,
	      // CSS escapes
	  // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	  runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
	      funescape = function funescape(_, escaped, escapedWhitespace) {
	    var high = "0x" + escaped - 0x10000; // NaN means non-codepoint
	    // Support: Firefox<24
	    // Workaround erroneous numeric interpretation of +"0x"

	    return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
	    String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)
	    String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
	  },
	      // CSS string/identifier serialization
	  // https://drafts.csswg.org/cssom/#common-serializing-idioms
	  // eslint-disable-next-line no-control-regex
	  rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	      fcssescape = function fcssescape(ch, asCodePoint) {
	    if (asCodePoint) {
	      // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
	      if (ch === "\0") {
	        return "\uFFFD";
	      } // Control characters and (dependent upon position) numbers get escaped as code points


	      return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
	    } // Other potentially-special ASCII characters get backslash-escaped


	    return "\\" + ch;
	  },
	      // Used for iframes
	  // See setDocument()
	  // Removing the function wrapper causes a "Permission Denied"
	  // error in IE
	  unloadHandler = function unloadHandler() {
	    setDocument();
	  },
	      disabledAncestor = addCombinator(function (elem) {
	    return elem.disabled === true && ("form" in elem || "label" in elem);
	  }, {
	    dir: "parentNode",
	    next: "legend"
	  }); // Optimize for push.apply( _, NodeList )


	  try {
	    push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0
	    // Detect silently failing push.apply

	    arr[preferredDoc.childNodes.length].nodeType;
	  } catch (e) {
	    push = {
	      apply: arr.length ? // Leverage slice if possible
	      function (target, els) {
	        push_native.apply(target, slice.call(els));
	      } : // Support: IE<9
	      // Otherwise append directly
	      function (target, els) {
	        var j = target.length,
	            i = 0; // Can't trust NodeList.length

	        while (target[j++] = els[i++]) {}

	        target.length = j - 1;
	      }
	    };
	  }

	  function Sizzle(selector, context, results, seed) {
	    var m,
	        i,
	        elem,
	        nid,
	        match,
	        groups,
	        newSelector,
	        newContext = context && context.ownerDocument,
	        // nodeType defaults to 9, since context defaults to document
	    nodeType = context ? context.nodeType : 9;
	    results = results || []; // Return early from calls with invalid selector or context

	    if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
	      return results;
	    } // Try to shortcut find operations (as opposed to filters) in HTML documents


	    if (!seed) {
	      if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
	        setDocument(context);
	      }

	      context = context || document;

	      if (documentIsHTML) {
	        // If the selector is sufficiently simple, try using a "get*By*" DOM method
	        // (excepting DocumentFragment context, where the methods don't exist)
	        if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
	          // ID selector
	          if (m = match[1]) {
	            // Document context
	            if (nodeType === 9) {
	              if (elem = context.getElementById(m)) {
	                // Support: IE, Opera, Webkit
	                // TODO: identify versions
	                // getElementById can match elements by name instead of ID
	                if (elem.id === m) {
	                  results.push(elem);
	                  return results;
	                }
	              } else {
	                return results;
	              } // Element context

	            } else {
	              // Support: IE, Opera, Webkit
	              // TODO: identify versions
	              // getElementById can match elements by name instead of ID
	              if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
	                results.push(elem);
	                return results;
	              }
	            } // Type selector

	          } else if (match[2]) {
	            push.apply(results, context.getElementsByTagName(selector));
	            return results; // Class selector
	          } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
	            push.apply(results, context.getElementsByClassName(m));
	            return results;
	          }
	        } // Take advantage of querySelectorAll


	        if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
	          if (nodeType !== 1) {
	            newContext = context;
	            newSelector = selector; // qSA looks outside Element context, which is not what we want
	            // Thanks to Andrew Dupont for this workaround technique
	            // Support: IE <=8
	            // Exclude object elements
	          } else if (context.nodeName.toLowerCase() !== "object") {
	            // Capture the context ID, setting it first if necessary
	            if (nid = context.getAttribute("id")) {
	              nid = nid.replace(rcssescape, fcssescape);
	            } else {
	              context.setAttribute("id", nid = expando);
	            } // Prefix every selector in the list


	            groups = tokenize(selector);
	            i = groups.length;

	            while (i--) {
	              groups[i] = "#" + nid + " " + toSelector(groups[i]);
	            }

	            newSelector = groups.join(","); // Expand context for sibling selectors

	            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
	          }

	          if (newSelector) {
	            try {
	              push.apply(results, newContext.querySelectorAll(newSelector));
	              return results;
	            } catch (qsaError) {} finally {
	              if (nid === expando) {
	                context.removeAttribute("id");
	              }
	            }
	          }
	        }
	      }
	    } // All others


	    return select(selector.replace(rtrim, "$1"), context, results, seed);
	  }
	  /**
	   * Create key-value caches of limited size
	   * @returns {function(string, object)} Returns the Object data after storing it on itself with
	   *    property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	   *    deleting the oldest entry
	   */


	  function createCache() {
	    var keys = [];

	    function cache(key, value) {
	      // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
	      if (keys.push(key + " ") > Expr.cacheLength) {
	        // Only keep the most recent entries
	        delete cache[keys.shift()];
	      }

	      return cache[key + " "] = value;
	    }

	    return cache;
	  }
	  /**
	   * Mark a function for special use by Sizzle
	   * @param {Function} fn The function to mark
	   */


	  function markFunction(fn) {
	    fn[expando] = true;
	    return fn;
	  }
	  /**
	   * Support testing using an element
	   * @param {Function} fn Passed the created element and returns a boolean result
	   */


	  function assert(fn) {
	    var el = document.createElement("fieldset");

	    try {
	      return !!fn(el);
	    } catch (e) {
	      return false;
	    } finally {
	      // Remove from its parent by default
	      if (el.parentNode) {
	        el.parentNode.removeChild(el);
	      } // release memory in IE


	      el = null;
	    }
	  }
	  /**
	   * Checks document order of two siblings
	   * @param {Element} a
	   * @param {Element} b
	   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	   */


	  function siblingCheck(a, b) {
	    var cur = b && a,
	        diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes

	    if (diff) {
	      return diff;
	    } // Check if b follows a


	    if (cur) {
	      while (cur = cur.nextSibling) {
	        if (cur === b) {
	          return -1;
	        }
	      }
	    }

	    return a ? 1 : -1;
	  }
	  /**
	   * Returns a function to use in pseudos for input types
	   * @param {String} type
	   */


	  function createInputPseudo(type) {
	    return function (elem) {
	      var name = elem.nodeName.toLowerCase();
	      return name === "input" && elem.type === type;
	    };
	  }
	  /**
	   * Returns a function to use in pseudos for buttons
	   * @param {String} type
	   */


	  function createButtonPseudo(type) {
	    return function (elem) {
	      var name = elem.nodeName.toLowerCase();
	      return (name === "input" || name === "button") && elem.type === type;
	    };
	  }
	  /**
	   * Returns a function to use in pseudos for :enabled/:disabled
	   * @param {Boolean} disabled true for :disabled; false for :enabled
	   */


	  function createDisabledPseudo(disabled) {
	    // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	    return function (elem) {
	      // Only certain elements can match :enabled or :disabled
	      // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
	      // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
	      if ("form" in elem) {
	        // Check for inherited disabledness on relevant non-disabled elements:
	        // * listed form-associated elements in a disabled fieldset
	        //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
	        //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
	        // * option elements in a disabled optgroup
	        //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
	        // All such elements have a "form" property.
	        if (elem.parentNode && elem.disabled === false) {
	          // Option elements defer to a parent optgroup if present
	          if ("label" in elem) {
	            if ("label" in elem.parentNode) {
	              return elem.parentNode.disabled === disabled;
	            } else {
	              return elem.disabled === disabled;
	            }
	          } // Support: IE 6 - 11
	          // Use the isDisabled shortcut property to check for disabled fieldset ancestors


	          return elem.isDisabled === disabled || // Where there is no isDisabled, check manually

	          /* jshint -W018 */
	          elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;
	        }

	        return elem.disabled === disabled; // Try to winnow out elements that can't be disabled before trusting the disabled property.
	        // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
	        // even exist on them, let alone have a boolean value.
	      } else if ("label" in elem) {
	        return elem.disabled === disabled;
	      } // Remaining elements are neither :enabled nor :disabled


	      return false;
	    };
	  }
	  /**
	   * Returns a function to use in pseudos for positionals
	   * @param {Function} fn
	   */


	  function createPositionalPseudo(fn) {
	    return markFunction(function (argument) {
	      argument = +argument;
	      return markFunction(function (seed, matches) {
	        var j,
	            matchIndexes = fn([], seed.length, argument),
	            i = matchIndexes.length; // Match elements found at the specified indexes

	        while (i--) {
	          if (seed[j = matchIndexes[i]]) {
	            seed[j] = !(matches[j] = seed[j]);
	          }
	        }
	      });
	    });
	  }
	  /**
	   * Checks a node for validity as a Sizzle context
	   * @param {Element|Object=} context
	   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	   */


	  function testContext(context) {
	    return context && typeof context.getElementsByTagName !== "undefined" && context;
	  } // Expose support vars for convenience


	  support = Sizzle.support = {};
	  /**
	   * Detects XML nodes
	   * @param {Element|Object} elem An element or a document
	   * @returns {Boolean} True iff elem is a non-HTML XML node
	   */

	  isXML = Sizzle.isXML = function (elem) {
	    // documentElement is verified for cases where it doesn't yet exist
	    // (such as loading iframes in IE - #4833)
	    var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	    return documentElement ? documentElement.nodeName !== "HTML" : false;
	  };
	  /**
	   * Sets document-related variables once based on the current document
	   * @param {Element|Object} [doc] An element or document object to use to set the document
	   * @returns {Object} Returns the current document
	   */


	  setDocument = Sizzle.setDocument = function (node) {
	    var hasCompare,
	        subWindow,
	        doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected

	    if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
	      return document;
	    } // Update global variables


	    document = doc;
	    docElem = document.documentElement;
	    documentIsHTML = !isXML(document); // Support: IE 9-11, Edge
	    // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)

	    if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
	      // Support: IE 11, Edge
	      if (subWindow.addEventListener) {
	        subWindow.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only
	      } else if (subWindow.attachEvent) {
	        subWindow.attachEvent("onunload", unloadHandler);
	      }
	    }
	    /* Attributes
	    ---------------------------------------------------------------------- */
	    // Support: IE<8
	    // Verify that getAttribute really returns attributes and not properties
	    // (excepting IE8 booleans)


	    support.attributes = assert(function (el) {
	      el.className = "i";
	      return !el.getAttribute("className");
	    });
	    /* getElement(s)By*
	    ---------------------------------------------------------------------- */
	    // Check if getElementsByTagName("*") returns only elements

	    support.getElementsByTagName = assert(function (el) {
	      el.appendChild(document.createComment(""));
	      return !el.getElementsByTagName("*").length;
	    }); // Support: IE<9

	    support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10
	    // Check if getElementById returns elements by name
	    // The broken getElementById methods don't pick up programmatically-set names,
	    // so use a roundabout getElementsByName test

	    support.getById = assert(function (el) {
	      docElem.appendChild(el).id = expando;
	      return !document.getElementsByName || !document.getElementsByName(expando).length;
	    }); // ID filter and find

	    if (support.getById) {
	      Expr.filter["ID"] = function (id) {
	        var attrId = id.replace(runescape, funescape);
	        return function (elem) {
	          return elem.getAttribute("id") === attrId;
	        };
	      };

	      Expr.find["ID"] = function (id, context) {
	        if (typeof context.getElementById !== "undefined" && documentIsHTML) {
	          var elem = context.getElementById(id);
	          return elem ? [elem] : [];
	        }
	      };
	    } else {
	      Expr.filter["ID"] = function (id) {
	        var attrId = id.replace(runescape, funescape);
	        return function (elem) {
	          var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
	          return node && node.value === attrId;
	        };
	      }; // Support: IE 6 - 7 only
	      // getElementById is not reliable as a find shortcut


	      Expr.find["ID"] = function (id, context) {
	        if (typeof context.getElementById !== "undefined" && documentIsHTML) {
	          var node,
	              i,
	              elems,
	              elem = context.getElementById(id);

	          if (elem) {
	            // Verify the id attribute
	            node = elem.getAttributeNode("id");

	            if (node && node.value === id) {
	              return [elem];
	            } // Fall back on getElementsByName


	            elems = context.getElementsByName(id);
	            i = 0;

	            while (elem = elems[i++]) {
	              node = elem.getAttributeNode("id");

	              if (node && node.value === id) {
	                return [elem];
	              }
	            }
	          }

	          return [];
	        }
	      };
	    } // Tag


	    Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
	      if (typeof context.getElementsByTagName !== "undefined") {
	        return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN
	      } else if (support.qsa) {
	        return context.querySelectorAll(tag);
	      }
	    } : function (tag, context) {
	      var elem,
	          tmp = [],
	          i = 0,
	          // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
	      results = context.getElementsByTagName(tag); // Filter out possible comments

	      if (tag === "*") {
	        while (elem = results[i++]) {
	          if (elem.nodeType === 1) {
	            tmp.push(elem);
	          }
	        }

	        return tmp;
	      }

	      return results;
	    }; // Class

	    Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
	      if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
	        return context.getElementsByClassName(className);
	      }
	    };
	    /* QSA/matchesSelector
	    ---------------------------------------------------------------------- */
	    // QSA and matchesSelector support
	    // matchesSelector(:active) reports false when true (IE9/Opera 11.5)


	    rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)
	    // We allow this because of a bug in IE8/9 that throws an error
	    // whenever `document.activeElement` is accessed on an iframe
	    // So, we allow :focus to pass through QSA all the time to avoid the IE error
	    // See https://bugs.jquery.com/ticket/13378

	    rbuggyQSA = [];

	    if (support.qsa = rnative.test(document.querySelectorAll)) {
	      // Build QSA regex
	      // Regex strategy adopted from Diego Perini
	      assert(function (el) {
	        // Select is set to empty string on purpose
	        // This is to test IE's treatment of not explicitly
	        // setting a boolean content attribute,
	        // since its presence should be enough
	        // https://bugs.jquery.com/ticket/12359
	        docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>"; // Support: IE8, Opera 11-12.16
	        // Nothing should be selected when empty strings follow ^= or $= or *=
	        // The test attribute must be unknown in Opera but "safe" for WinRT
	        // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

	        if (el.querySelectorAll("[msallowcapture^='']").length) {
	          rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
	        } // Support: IE8
	        // Boolean attributes and "value" are not treated correctly


	        if (!el.querySelectorAll("[selected]").length) {
	          rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
	        } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+


	        if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
	          rbuggyQSA.push("~=");
	        } // Webkit/Opera - :checked should return selected option elements
	        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
	        // IE8 throws error here and will not see later tests


	        if (!el.querySelectorAll(":checked").length) {
	          rbuggyQSA.push(":checked");
	        } // Support: Safari 8+, iOS 8+
	        // https://bugs.webkit.org/show_bug.cgi?id=136851
	        // In-page `selector#id sibling-combinator selector` fails


	        if (!el.querySelectorAll("a#" + expando + "+*").length) {
	          rbuggyQSA.push(".#.+[+~]");
	        }
	      });
	      assert(function (el) {
	        el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>"; // Support: Windows 8 Native Apps
	        // The type and name attributes are restricted during .innerHTML assignment

	        var input = document.createElement("input");
	        input.setAttribute("type", "hidden");
	        el.appendChild(input).setAttribute("name", "D"); // Support: IE8
	        // Enforce case-sensitivity of name attribute

	        if (el.querySelectorAll("[name=d]").length) {
	          rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
	        } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
	        // IE8 throws error here and will not see later tests


	        if (el.querySelectorAll(":enabled").length !== 2) {
	          rbuggyQSA.push(":enabled", ":disabled");
	        } // Support: IE9-11+
	        // IE's :disabled selector does not pick up the children of disabled fieldsets


	        docElem.appendChild(el).disabled = true;

	        if (el.querySelectorAll(":disabled").length !== 2) {
	          rbuggyQSA.push(":enabled", ":disabled");
	        } // Opera 10-11 does not throw on post-comma invalid pseudos


	        el.querySelectorAll("*,:x");
	        rbuggyQSA.push(",.*:");
	      });
	    }

	    if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
	      assert(function (el) {
	        // Check to see if it's possible to do matchesSelector
	        // on a disconnected node (IE 9)
	        support.disconnectedMatch = matches.call(el, "*"); // This should fail with an exception
	        // Gecko does not error, returns false instead

	        matches.call(el, "[s!='']:x");
	        rbuggyMatches.push("!=", pseudos);
	      });
	    }

	    rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
	    rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
	    /* Contains
	    ---------------------------------------------------------------------- */

	    hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another
	    // Purposefully self-exclusive
	    // As in, an element does not contain itself

	    contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
	      var adown = a.nodeType === 9 ? a.documentElement : a,
	          bup = b && b.parentNode;
	      return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
	    } : function (a, b) {
	      if (b) {
	        while (b = b.parentNode) {
	          if (b === a) {
	            return true;
	          }
	        }
	      }

	      return false;
	    };
	    /* Sorting
	    ---------------------------------------------------------------------- */
	    // Document order sorting

	    sortOrder = hasCompare ? function (a, b) {
	      // Flag for duplicate removal
	      if (a === b) {
	        hasDuplicate = true;
	        return 0;
	      } // Sort on method existence if only one input has compareDocumentPosition


	      var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;

	      if (compare) {
	        return compare;
	      } // Calculate position if both inputs belong to the same document


	      compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
	      1; // Disconnected nodes

	      if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
	        // Choose the first element that is related to our preferred document
	        if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
	          return -1;
	        }

	        if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
	          return 1;
	        } // Maintain original order


	        return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
	      }

	      return compare & 4 ? -1 : 1;
	    } : function (a, b) {
	      // Exit early if the nodes are identical
	      if (a === b) {
	        hasDuplicate = true;
	        return 0;
	      }

	      var cur,
	          i = 0,
	          aup = a.parentNode,
	          bup = b.parentNode,
	          ap = [a],
	          bp = [b]; // Parentless nodes are either documents or disconnected

	      if (!aup || !bup) {
	        return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check
	      } else if (aup === bup) {
	        return siblingCheck(a, b);
	      } // Otherwise we need full lists of their ancestors for comparison


	      cur = a;

	      while (cur = cur.parentNode) {
	        ap.unshift(cur);
	      }

	      cur = b;

	      while (cur = cur.parentNode) {
	        bp.unshift(cur);
	      } // Walk down the tree looking for a discrepancy


	      while (ap[i] === bp[i]) {
	        i++;
	      }

	      return i ? // Do a sibling check if the nodes have a common ancestor
	      siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
	      ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
	    };
	    return document;
	  };

	  Sizzle.matches = function (expr, elements) {
	    return Sizzle(expr, null, null, elements);
	  };

	  Sizzle.matchesSelector = function (elem, expr) {
	    // Set document vars if needed
	    if ((elem.ownerDocument || elem) !== document) {
	      setDocument(elem);
	    } // Make sure that attribute selectors are quoted


	    expr = expr.replace(rattributeQuotes, "='$1']");

	    if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
	      try {
	        var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes

	        if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
	        // fragment in IE 9
	        elem.document && elem.document.nodeType !== 11) {
	          return ret;
	        }
	      } catch (e) {}
	    }

	    return Sizzle(expr, document, null, [elem]).length > 0;
	  };

	  Sizzle.contains = function (context, elem) {
	    // Set document vars if needed
	    if ((context.ownerDocument || context) !== document) {
	      setDocument(context);
	    }

	    return contains(context, elem);
	  };

	  Sizzle.attr = function (elem, name) {
	    // Set document vars if needed
	    if ((elem.ownerDocument || elem) !== document) {
	      setDocument(elem);
	    }

	    var fn = Expr.attrHandle[name.toLowerCase()],
	        // Don't get fooled by Object.prototype properties (jQuery #13807)
	    val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
	    return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
	  };

	  Sizzle.escape = function (sel) {
	    return (sel + "").replace(rcssescape, fcssescape);
	  };

	  Sizzle.error = function (msg) {
	    throw new Error("Syntax error, unrecognized expression: " + msg);
	  };
	  /**
	   * Document sorting and removing duplicates
	   * @param {ArrayLike} results
	   */


	  Sizzle.uniqueSort = function (results) {
	    var elem,
	        duplicates = [],
	        j = 0,
	        i = 0; // Unless we *know* we can detect duplicates, assume their presence

	    hasDuplicate = !support.detectDuplicates;
	    sortInput = !support.sortStable && results.slice(0);
	    results.sort(sortOrder);

	    if (hasDuplicate) {
	      while (elem = results[i++]) {
	        if (elem === results[i]) {
	          j = duplicates.push(i);
	        }
	      }

	      while (j--) {
	        results.splice(duplicates[j], 1);
	      }
	    } // Clear input after sorting to release objects
	    // See https://github.com/jquery/sizzle/pull/225


	    sortInput = null;
	    return results;
	  };
	  /**
	   * Utility function for retrieving the text value of an array of DOM nodes
	   * @param {Array|Element} elem
	   */


	  getText = Sizzle.getText = function (elem) {
	    var node,
	        ret = "",
	        i = 0,
	        nodeType = elem.nodeType;

	    if (!nodeType) {
	      // If no nodeType, this is expected to be an array
	      while (node = elem[i++]) {
	        // Do not traverse comment nodes
	        ret += getText(node);
	      }
	    } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
	      // Use textContent for elements
	      // innerText usage removed for consistency of new lines (jQuery #11153)
	      if (typeof elem.textContent === "string") {
	        return elem.textContent;
	      } else {
	        // Traverse its children
	        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
	          ret += getText(elem);
	        }
	      }
	    } else if (nodeType === 3 || nodeType === 4) {
	      return elem.nodeValue;
	    } // Do not include comment or processing instruction nodes


	    return ret;
	  };

	  Expr = Sizzle.selectors = {
	    // Can be adjusted by the user
	    cacheLength: 50,
	    createPseudo: markFunction,
	    match: matchExpr,
	    attrHandle: {},
	    find: {},
	    relative: {
	      ">": {
	        dir: "parentNode",
	        first: true
	      },
	      " ": {
	        dir: "parentNode"
	      },
	      "+": {
	        dir: "previousSibling",
	        first: true
	      },
	      "~": {
	        dir: "previousSibling"
	      }
	    },
	    preFilter: {
	      "ATTR": function ATTR(match) {
	        match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted

	        match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

	        if (match[2] === "~=") {
	          match[3] = " " + match[3] + " ";
	        }

	        return match.slice(0, 4);
	      },
	      "CHILD": function CHILD(match) {
	        /* matches from matchExpr["CHILD"]
	        1 type (only|nth|...)
	        2 what (child|of-type)
	        3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
	        4 xn-component of xn+y argument ([+-]?\d*n|)
	        5 sign of xn-component
	        6 x of xn-component
	        7 sign of y-component
	        8 y of y-component
	        */
	        match[1] = match[1].toLowerCase();

	        if (match[1].slice(0, 3) === "nth") {
	          // nth-* requires argument
	          if (!match[3]) {
	            Sizzle.error(match[0]);
	          } // numeric x and y parameters for Expr.filter.CHILD
	          // remember that false/true cast respectively to 0/1


	          match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
	          match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments
	        } else if (match[3]) {
	          Sizzle.error(match[0]);
	        }

	        return match;
	      },
	      "PSEUDO": function PSEUDO(match) {
	        var excess,
	            unquoted = !match[6] && match[2];

	        if (matchExpr["CHILD"].test(match[0])) {
	          return null;
	        } // Accept quoted arguments as-is


	        if (match[3]) {
	          match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments
	        } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)
	        excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis
	        excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
	          // excess is a negative index
	          match[0] = match[0].slice(0, excess);
	          match[2] = unquoted.slice(0, excess);
	        } // Return only captures needed by the pseudo filter method (type and argument)


	        return match.slice(0, 3);
	      }
	    },
	    filter: {
	      "TAG": function TAG(nodeNameSelector) {
	        var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
	        return nodeNameSelector === "*" ? function () {
	          return true;
	        } : function (elem) {
	          return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
	        };
	      },
	      "CLASS": function CLASS(className) {
	        var pattern = classCache[className + " "];
	        return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
	          return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
	        });
	      },
	      "ATTR": function ATTR(name, operator, check) {
	        return function (elem) {
	          var result = Sizzle.attr(elem, name);

	          if (result == null) {
	            return operator === "!=";
	          }

	          if (!operator) {
	            return true;
	          }

	          result += "";
	          return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
	        };
	      },
	      "CHILD": function CHILD(type, what, argument, first, last) {
	        var simple = type.slice(0, 3) !== "nth",
	            forward = type.slice(-4) !== "last",
	            ofType = what === "of-type";
	        return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
	        function (elem) {
	          return !!elem.parentNode;
	        } : function (elem, context, xml) {
	          var cache,
	              uniqueCache,
	              outerCache,
	              node,
	              nodeIndex,
	              start,
	              dir = simple !== forward ? "nextSibling" : "previousSibling",
	              parent = elem.parentNode,
	              name = ofType && elem.nodeName.toLowerCase(),
	              useCache = !xml && !ofType,
	              diff = false;

	          if (parent) {
	            // :(first|last|only)-(child|of-type)
	            if (simple) {
	              while (dir) {
	                node = elem;

	                while (node = node[dir]) {
	                  if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
	                    return false;
	                  }
	                } // Reverse direction for :only-* (if we haven't yet done so)


	                start = dir = type === "only" && !start && "nextSibling";
	              }

	              return true;
	            }

	            start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`

	            if (forward && useCache) {
	              // Seek `elem` from a previously-cached index
	              // ...in a gzip-friendly way
	              node = parent;
	              outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
	              // Defend against cloned attroperties (jQuery gh-1709)

	              uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
	              cache = uniqueCache[type] || [];
	              nodeIndex = cache[0] === dirruns && cache[1];
	              diff = nodeIndex && cache[2];
	              node = nodeIndex && parent.childNodes[nodeIndex];

	              while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start
	              diff = nodeIndex = 0) || start.pop()) {
	                // When found, cache indexes on `parent` and break
	                if (node.nodeType === 1 && ++diff && node === elem) {
	                  uniqueCache[type] = [dirruns, nodeIndex, diff];
	                  break;
	                }
	              }
	            } else {
	              // Use previously-cached element index if available
	              if (useCache) {
	                // ...in a gzip-friendly way
	                node = elem;
	                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
	                // Defend against cloned attroperties (jQuery gh-1709)

	                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
	                cache = uniqueCache[type] || [];
	                nodeIndex = cache[0] === dirruns && cache[1];
	                diff = nodeIndex;
	              } // xml :nth-child(...)
	              // or :nth-last-child(...) or :nth(-last)?-of-type(...)


	              if (diff === false) {
	                // Use the same loop as above to seek `elem` from the start
	                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
	                  if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
	                    // Cache the index of each encountered element
	                    if (useCache) {
	                      outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
	                      // Defend against cloned attroperties (jQuery gh-1709)

	                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
	                      uniqueCache[type] = [dirruns, diff];
	                    }

	                    if (node === elem) {
	                      break;
	                    }
	                  }
	                }
	              }
	            } // Incorporate the offset, then check against cycle size


	            diff -= last;
	            return diff === first || diff % first === 0 && diff / first >= 0;
	          }
	        };
	      },
	      "PSEUDO": function PSEUDO(pseudo, argument) {
	        // pseudo-class names are case-insensitive
	        // http://www.w3.org/TR/selectors/#pseudo-classes
	        // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
	        // Remember that setFilters inherits from pseudos
	        var args,
	            fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that
	        // arguments are needed to create the filter function
	        // just as Sizzle does

	        if (fn[expando]) {
	          return fn(argument);
	        } // But maintain support for old signatures


	        if (fn.length > 1) {
	          args = [pseudo, pseudo, "", argument];
	          return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
	            var idx,
	                matched = fn(seed, argument),
	                i = matched.length;

	            while (i--) {
	              idx = indexOf(seed, matched[i]);
	              seed[idx] = !(matches[idx] = matched[i]);
	            }
	          }) : function (elem) {
	            return fn(elem, 0, args);
	          };
	        }

	        return fn;
	      }
	    },
	    pseudos: {
	      // Potentially complex pseudos
	      "not": markFunction(function (selector) {
	        // Trim the selector passed to compile
	        // to avoid treating leading and trailing
	        // spaces as combinators
	        var input = [],
	            results = [],
	            matcher = compile(selector.replace(rtrim, "$1"));
	        return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
	          var elem,
	              unmatched = matcher(seed, null, xml, []),
	              i = seed.length; // Match elements unmatched by `matcher`

	          while (i--) {
	            if (elem = unmatched[i]) {
	              seed[i] = !(matches[i] = elem);
	            }
	          }
	        }) : function (elem, context, xml) {
	          input[0] = elem;
	          matcher(input, null, xml, results); // Don't keep the element (issue #299)

	          input[0] = null;
	          return !results.pop();
	        };
	      }),
	      "has": markFunction(function (selector) {
	        return function (elem) {
	          return Sizzle(selector, elem).length > 0;
	        };
	      }),
	      "contains": markFunction(function (text) {
	        text = text.replace(runescape, funescape);
	        return function (elem) {
	          return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
	        };
	      }),
	      // "Whether an element is represented by a :lang() selector
	      // is based solely on the element's language value
	      // being equal to the identifier C,
	      // or beginning with the identifier C immediately followed by "-".
	      // The matching of C against the element's language value is performed case-insensitively.
	      // The identifier C does not have to be a valid language name."
	      // http://www.w3.org/TR/selectors/#lang-pseudo
	      "lang": markFunction(function (lang) {
	        // lang value must be a valid identifier
	        if (!ridentifier.test(lang || "")) {
	          Sizzle.error("unsupported lang: " + lang);
	        }

	        lang = lang.replace(runescape, funescape).toLowerCase();
	        return function (elem) {
	          var elemLang;

	          do {
	            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
	              elemLang = elemLang.toLowerCase();
	              return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
	            }
	          } while ((elem = elem.parentNode) && elem.nodeType === 1);

	          return false;
	        };
	      }),
	      // Miscellaneous
	      "target": function target(elem) {
	        var hash = window.location && window.location.hash;
	        return hash && hash.slice(1) === elem.id;
	      },
	      "root": function root(elem) {
	        return elem === docElem;
	      },
	      "focus": function focus(elem) {
	        return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
	      },
	      // Boolean properties
	      "enabled": createDisabledPseudo(false),
	      "disabled": createDisabledPseudo(true),
	      "checked": function checked(elem) {
	        // In CSS3, :checked should return both checked and selected elements
	        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
	        var nodeName = elem.nodeName.toLowerCase();
	        return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
	      },
	      "selected": function selected(elem) {
	        // Accessing this property makes selected-by-default
	        // options in Safari work properly
	        if (elem.parentNode) {
	          elem.parentNode.selectedIndex;
	        }

	        return elem.selected === true;
	      },
	      // Contents
	      "empty": function empty(elem) {
	        // http://www.w3.org/TR/selectors/#empty-pseudo
	        // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
	        //   but not by others (comment: 8; processing instruction: 7; etc.)
	        // nodeType < 6 works because attributes (2) do not appear as children
	        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
	          if (elem.nodeType < 6) {
	            return false;
	          }
	        }

	        return true;
	      },
	      "parent": function parent(elem) {
	        return !Expr.pseudos["empty"](elem);
	      },
	      // Element/input types
	      "header": function header(elem) {
	        return rheader.test(elem.nodeName);
	      },
	      "input": function input(elem) {
	        return rinputs.test(elem.nodeName);
	      },
	      "button": function button(elem) {
	        var name = elem.nodeName.toLowerCase();
	        return name === "input" && elem.type === "button" || name === "button";
	      },
	      "text": function text(elem) {
	        var attr;
	        return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8
	        // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
	        (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
	      },
	      // Position-in-collection
	      "first": createPositionalPseudo(function () {
	        return [0];
	      }),
	      "last": createPositionalPseudo(function (matchIndexes, length) {
	        return [length - 1];
	      }),
	      "eq": createPositionalPseudo(function (matchIndexes, length, argument) {
	        return [argument < 0 ? argument + length : argument];
	      }),
	      "even": createPositionalPseudo(function (matchIndexes, length) {
	        var i = 0;

	        for (; i < length; i += 2) {
	          matchIndexes.push(i);
	        }

	        return matchIndexes;
	      }),
	      "odd": createPositionalPseudo(function (matchIndexes, length) {
	        var i = 1;

	        for (; i < length; i += 2) {
	          matchIndexes.push(i);
	        }

	        return matchIndexes;
	      }),
	      "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
	        var i = argument < 0 ? argument + length : argument;

	        for (; --i >= 0;) {
	          matchIndexes.push(i);
	        }

	        return matchIndexes;
	      }),
	      "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
	        var i = argument < 0 ? argument + length : argument;

	        for (; ++i < length;) {
	          matchIndexes.push(i);
	        }

	        return matchIndexes;
	      })
	    }
	  };
	  Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos

	  for (i in {
	    radio: true,
	    checkbox: true,
	    file: true,
	    password: true,
	    image: true
	  }) {
	    Expr.pseudos[i] = createInputPseudo(i);
	  }

	  for (i in {
	    submit: true,
	    reset: true
	  }) {
	    Expr.pseudos[i] = createButtonPseudo(i);
	  } // Easy API for creating new setFilters


	  function setFilters() {}

	  setFilters.prototype = Expr.filters = Expr.pseudos;
	  Expr.setFilters = new setFilters();

	  tokenize = Sizzle.tokenize = function (selector, parseOnly) {
	    var matched,
	        match,
	        tokens,
	        type,
	        soFar,
	        groups,
	        preFilters,
	        cached = tokenCache[selector + " "];

	    if (cached) {
	      return parseOnly ? 0 : cached.slice(0);
	    }

	    soFar = selector;
	    groups = [];
	    preFilters = Expr.preFilter;

	    while (soFar) {
	      // Comma and first run
	      if (!matched || (match = rcomma.exec(soFar))) {
	        if (match) {
	          // Don't consume trailing commas as valid
	          soFar = soFar.slice(match[0].length) || soFar;
	        }

	        groups.push(tokens = []);
	      }

	      matched = false; // Combinators

	      if (match = rcombinators.exec(soFar)) {
	        matched = match.shift();
	        tokens.push({
	          value: matched,
	          // Cast descendant combinators to space
	          type: match[0].replace(rtrim, " ")
	        });
	        soFar = soFar.slice(matched.length);
	      } // Filters


	      for (type in Expr.filter) {
	        if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
	          matched = match.shift();
	          tokens.push({
	            value: matched,
	            type: type,
	            matches: match
	          });
	          soFar = soFar.slice(matched.length);
	        }
	      }

	      if (!matched) {
	        break;
	      }
	    } // Return the length of the invalid excess
	    // if we're just parsing
	    // Otherwise, throw an error or return tokens


	    return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
	    tokenCache(selector, groups).slice(0);
	  };

	  function toSelector(tokens) {
	    var i = 0,
	        len = tokens.length,
	        selector = "";

	    for (; i < len; i++) {
	      selector += tokens[i].value;
	    }

	    return selector;
	  }

	  function addCombinator(matcher, combinator, base) {
	    var dir = combinator.dir,
	        skip = combinator.next,
	        key = skip || dir,
	        checkNonElements = base && key === "parentNode",
	        doneName = done++;
	    return combinator.first ? // Check against closest ancestor/preceding element
	    function (elem, context, xml) {
	      while (elem = elem[dir]) {
	        if (elem.nodeType === 1 || checkNonElements) {
	          return matcher(elem, context, xml);
	        }
	      }

	      return false;
	    } : // Check against all ancestor/preceding elements
	    function (elem, context, xml) {
	      var oldCache,
	          uniqueCache,
	          outerCache,
	          newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

	      if (xml) {
	        while (elem = elem[dir]) {
	          if (elem.nodeType === 1 || checkNonElements) {
	            if (matcher(elem, context, xml)) {
	              return true;
	            }
	          }
	        }
	      } else {
	        while (elem = elem[dir]) {
	          if (elem.nodeType === 1 || checkNonElements) {
	            outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only
	            // Defend against cloned attroperties (jQuery gh-1709)

	            uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

	            if (skip && skip === elem.nodeName.toLowerCase()) {
	              elem = elem[dir] || elem;
	            } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
	              // Assign to newCache so results back-propagate to previous elements
	              return newCache[2] = oldCache[2];
	            } else {
	              // Reuse newcache so results back-propagate to previous elements
	              uniqueCache[key] = newCache; // A match means we're done; a fail means we have to keep checking

	              if (newCache[2] = matcher(elem, context, xml)) {
	                return true;
	              }
	            }
	          }
	        }
	      }

	      return false;
	    };
	  }

	  function elementMatcher(matchers) {
	    return matchers.length > 1 ? function (elem, context, xml) {
	      var i = matchers.length;

	      while (i--) {
	        if (!matchers[i](elem, context, xml)) {
	          return false;
	        }
	      }

	      return true;
	    } : matchers[0];
	  }

	  function multipleContexts(selector, contexts, results) {
	    var i = 0,
	        len = contexts.length;

	    for (; i < len; i++) {
	      Sizzle(selector, contexts[i], results);
	    }

	    return results;
	  }

	  function condense(unmatched, map, filter, context, xml) {
	    var elem,
	        newUnmatched = [],
	        i = 0,
	        len = unmatched.length,
	        mapped = map != null;

	    for (; i < len; i++) {
	      if (elem = unmatched[i]) {
	        if (!filter || filter(elem, context, xml)) {
	          newUnmatched.push(elem);

	          if (mapped) {
	            map.push(i);
	          }
	        }
	      }
	    }

	    return newUnmatched;
	  }

	  function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
	    if (postFilter && !postFilter[expando]) {
	      postFilter = setMatcher(postFilter);
	    }

	    if (postFinder && !postFinder[expando]) {
	      postFinder = setMatcher(postFinder, postSelector);
	    }

	    return markFunction(function (seed, results, context, xml) {
	      var temp,
	          i,
	          elem,
	          preMap = [],
	          postMap = [],
	          preexisting = results.length,
	          // Get initial elements from seed or context
	      elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
	          // Prefilter to get matcher input, preserving a map for seed-results synchronization
	      matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
	          matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
	      postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
	      [] : // ...otherwise use results directly
	      results : matcherIn; // Find primary matches

	      if (matcher) {
	        matcher(matcherIn, matcherOut, context, xml);
	      } // Apply postFilter


	      if (postFilter) {
	        temp = condense(matcherOut, postMap);
	        postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn

	        i = temp.length;

	        while (i--) {
	          if (elem = temp[i]) {
	            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
	          }
	        }
	      }

	      if (seed) {
	        if (postFinder || preFilter) {
	          if (postFinder) {
	            // Get the final matcherOut by condensing this intermediate into postFinder contexts
	            temp = [];
	            i = matcherOut.length;

	            while (i--) {
	              if (elem = matcherOut[i]) {
	                // Restore matcherIn since elem is not yet a final match
	                temp.push(matcherIn[i] = elem);
	              }
	            }

	            postFinder(null, matcherOut = [], temp, xml);
	          } // Move matched elements from seed to results to keep them synchronized


	          i = matcherOut.length;

	          while (i--) {
	            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
	              seed[temp] = !(results[temp] = elem);
	            }
	          }
	        } // Add elements to results, through postFinder if defined

	      } else {
	        matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);

	        if (postFinder) {
	          postFinder(null, results, matcherOut, xml);
	        } else {
	          push.apply(results, matcherOut);
	        }
	      }
	    });
	  }

	  function matcherFromTokens(tokens) {
	    var checkContext,
	        matcher,
	        j,
	        len = tokens.length,
	        leadingRelative = Expr.relative[tokens[0].type],
	        implicitRelative = leadingRelative || Expr.relative[" "],
	        i = leadingRelative ? 1 : 0,
	        // The foundational matcher ensures that elements are reachable from top-level context(s)
	    matchContext = addCombinator(function (elem) {
	      return elem === checkContext;
	    }, implicitRelative, true),
	        matchAnyContext = addCombinator(function (elem) {
	      return indexOf(checkContext, elem) > -1;
	    }, implicitRelative, true),
	        matchers = [function (elem, context, xml) {
	      var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)

	      checkContext = null;
	      return ret;
	    }];

	    for (; i < len; i++) {
	      if (matcher = Expr.relative[tokens[i].type]) {
	        matchers = [addCombinator(elementMatcher(matchers), matcher)];
	      } else {
	        matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher

	        if (matcher[expando]) {
	          // Find the next relative operator (if any) for proper handling
	          j = ++i;

	          for (; j < len; j++) {
	            if (Expr.relative[tokens[j].type]) {
	              break;
	            }
	          }

	          return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`
	          tokens.slice(0, i - 1).concat({
	            value: tokens[i - 2].type === " " ? "*" : ""
	          })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
	        }

	        matchers.push(matcher);
	      }
	    }

	    return elementMatcher(matchers);
	  }

	  function matcherFromGroupMatchers(elementMatchers, setMatchers) {
	    var bySet = setMatchers.length > 0,
	        byElement = elementMatchers.length > 0,
	        superMatcher = function superMatcher(seed, context, xml, results, outermost) {
	      var elem,
	          j,
	          matcher,
	          matchedCount = 0,
	          i = "0",
	          unmatched = seed && [],
	          setMatched = [],
	          contextBackup = outermostContext,
	          // We must always have either seed elements or outermost context
	      elems = seed || byElement && Expr.find["TAG"]("*", outermost),
	          // Use integer dirruns iff this is the outermost matcher
	      dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
	          len = elems.length;

	      if (outermost) {
	        outermostContext = context === document || context || outermost;
	      } // Add elements passing elementMatchers directly to results
	      // Support: IE<9, Safari
	      // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id


	      for (; i !== len && (elem = elems[i]) != null; i++) {
	        if (byElement && elem) {
	          j = 0;

	          if (!context && elem.ownerDocument !== document) {
	            setDocument(elem);
	            xml = !documentIsHTML;
	          }

	          while (matcher = elementMatchers[j++]) {
	            if (matcher(elem, context || document, xml)) {
	              results.push(elem);
	              break;
	            }
	          }

	          if (outermost) {
	            dirruns = dirrunsUnique;
	          }
	        } // Track unmatched elements for set filters


	        if (bySet) {
	          // They will have gone through all possible matchers
	          if (elem = !matcher && elem) {
	            matchedCount--;
	          } // Lengthen the array for every element, matched or not


	          if (seed) {
	            unmatched.push(elem);
	          }
	        }
	      } // `i` is now the count of elements visited above, and adding it to `matchedCount`
	      // makes the latter nonnegative.


	      matchedCount += i; // Apply set filters to unmatched elements
	      // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
	      // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
	      // no element matchers and no seed.
	      // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
	      // case, which will result in a "00" `matchedCount` that differs from `i` but is also
	      // numerically zero.

	      if (bySet && i !== matchedCount) {
	        j = 0;

	        while (matcher = setMatchers[j++]) {
	          matcher(unmatched, setMatched, context, xml);
	        }

	        if (seed) {
	          // Reintegrate element matches to eliminate the need for sorting
	          if (matchedCount > 0) {
	            while (i--) {
	              if (!(unmatched[i] || setMatched[i])) {
	                setMatched[i] = pop.call(results);
	              }
	            }
	          } // Discard index placeholder values to get only actual matches


	          setMatched = condense(setMatched);
	        } // Add matches to results


	        push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting

	        if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
	          Sizzle.uniqueSort(results);
	        }
	      } // Override manipulation of globals by nested matchers


	      if (outermost) {
	        dirruns = dirrunsUnique;
	        outermostContext = contextBackup;
	      }

	      return unmatched;
	    };

	    return bySet ? markFunction(superMatcher) : superMatcher;
	  }

	  compile = Sizzle.compile = function (selector, match
	  /* Internal Use Only */
	  ) {
	    var i,
	        setMatchers = [],
	        elementMatchers = [],
	        cached = compilerCache[selector + " "];

	    if (!cached) {
	      // Generate a function of recursive functions that can be used to check each element
	      if (!match) {
	        match = tokenize(selector);
	      }

	      i = match.length;

	      while (i--) {
	        cached = matcherFromTokens(match[i]);

	        if (cached[expando]) {
	          setMatchers.push(cached);
	        } else {
	          elementMatchers.push(cached);
	        }
	      } // Cache the compiled function


	      cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization

	      cached.selector = selector;
	    }

	    return cached;
	  };
	  /**
	   * A low-level selection function that works with Sizzle's compiled
	   *  selector functions
	   * @param {String|Function} selector A selector or a pre-compiled
	   *  selector function built with Sizzle.compile
	   * @param {Element} context
	   * @param {Array} [results]
	   * @param {Array} [seed] A set of elements to match against
	   */


	  select = Sizzle.select = function (selector, context, results, seed) {
	    var i,
	        tokens,
	        token,
	        type,
	        find,
	        compiled = typeof selector === "function" && selector,
	        match = !seed && tokenize(selector = compiled.selector || selector);
	    results = results || []; // Try to minimize operations if there is only one selector in the list and no seed
	    // (the latter of which guarantees us context)

	    if (match.length === 1) {
	      // Reduce context if the leading compound selector is an ID
	      tokens = match[0] = match[0].slice(0);

	      if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
	        context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];

	        if (!context) {
	          return results; // Precompiled matchers will still verify ancestry, so step up a level
	        } else if (compiled) {
	          context = context.parentNode;
	        }

	        selector = selector.slice(tokens.shift().value.length);
	      } // Fetch a seed set for right-to-left matching


	      i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;

	      while (i--) {
	        token = tokens[i]; // Abort if we hit a combinator

	        if (Expr.relative[type = token.type]) {
	          break;
	        }

	        if (find = Expr.find[type]) {
	          // Search, expanding context for leading sibling combinators
	          if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
	            // If seed is empty or no tokens remain, we can return early
	            tokens.splice(i, 1);
	            selector = seed.length && toSelector(tokens);

	            if (!selector) {
	              push.apply(results, seed);
	              return results;
	            }

	            break;
	          }
	        }
	      }
	    } // Compile and execute a filtering function if one is not provided
	    // Provide `match` to avoid retokenization if we modified the selector above


	    (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
	    return results;
	  }; // One-time assignments
	  // Sort stability


	  support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+
	  // Always assume duplicates if they aren't passed to the comparison function

	  support.detectDuplicates = !!hasDuplicate; // Initialize against the default document

	  setDocument();
	  return Sizzle;
	}(window);

	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors; // Deprecated

	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;

	var dir = function dir(elem, _dir, until) {
	  var matched = [],
	      truncate = until !== undefined;

	  while ((elem = elem[_dir]) && elem.nodeType !== 9) {
	    if (elem.nodeType === 1) {
	      if (truncate && jQuery(elem).is(until)) {
	        break;
	      }

	      matched.push(elem);
	    }
	  }

	  return matched;
	};

	var _siblings = function siblings(n, elem) {
	  var matched = [];

	  for (; n; n = n.nextSibling) {
	    if (n.nodeType === 1 && n !== elem) {
	      matched.push(n);
	    }
	  }

	  return matched;
	};

	var rneedsContext = jQuery.expr.match.needsContext;

	function nodeName(elem, name) {
	  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	}

	var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i; // Implement the identical functionality for filter and not

	function winnow(elements, qualifier, not) {
	  if (isFunction(qualifier)) {
	    return jQuery.grep(elements, function (elem, i) {
	      return !!qualifier.call(elem, i, elem) !== not;
	    });
	  } // Single element


	  if (qualifier.nodeType) {
	    return jQuery.grep(elements, function (elem) {
	      return elem === qualifier !== not;
	    });
	  } // Arraylike of elements (jQuery, arguments, Array)


	  if (typeof qualifier !== "string") {
	    return jQuery.grep(elements, function (elem) {
	      return indexOf$1.call(qualifier, elem) > -1 !== not;
	    });
	  } // Filtered directly for both simple and complex selectors


	  return jQuery.filter(qualifier, elements, not);
	}

	jQuery.filter = function (expr, elems, not) {
	  var elem = elems[0];

	  if (not) {
	    expr = ":not(" + expr + ")";
	  }

	  if (elems.length === 1 && elem.nodeType === 1) {
	    return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
	  }

	  return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
	    return elem.nodeType === 1;
	  }));
	};

	jQuery.fn.extend({
	  find: function find(selector) {
	    var i,
	        ret,
	        len = this.length,
	        self = this;

	    if (typeof selector !== "string") {
	      return this.pushStack(jQuery(selector).filter(function () {
	        for (i = 0; i < len; i++) {
	          if (jQuery.contains(self[i], this)) {
	            return true;
	          }
	        }
	      }));
	    }

	    ret = this.pushStack([]);

	    for (i = 0; i < len; i++) {
	      jQuery.find(selector, self[i], ret);
	    }

	    return len > 1 ? jQuery.uniqueSort(ret) : ret;
	  },
	  filter: function filter(selector) {
	    return this.pushStack(winnow(this, selector || [], false));
	  },
	  not: function not(selector) {
	    return this.pushStack(winnow(this, selector || [], true));
	  },
	  is: function is(selector) {
	    return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
	    // so $("p:first").is("p:last") won't return true for a doc with two "p".
	    typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
	  }
	}); // Initialize a jQuery object
	// A central reference to the root jQuery(document)

	var rootjQuery,
	    // A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
	    init$2 = jQuery.fn.init = function (selector, context, root) {
	  var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)

	  if (!selector) {
	    return this;
	  } // Method init() accepts an alternate rootjQuery
	  // so migrate can support jQuery.sub (gh-2101)


	  root = root || rootjQuery; // Handle HTML strings

	  if (typeof selector === "string") {
	    if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
	      // Assume that strings that start and end with <> are HTML and skip the regex check
	      match = [null, selector, null];
	    } else {
	      match = rquickExpr.exec(selector);
	    } // Match html or make sure no context is specified for #id


	    if (match && (match[1] || !context)) {
	      // HANDLE: $(html) -> $(array)
	      if (match[1]) {
	        context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat
	        // Intentionally let the error be thrown if parseHTML is not present

	        jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document$2, true)); // HANDLE: $(html, props)

	        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
	          for (match in context) {
	            // Properties of context are called as methods if possible
	            if (isFunction(this[match])) {
	              this[match](context[match]); // ...and otherwise set as attributes
	            } else {
	              this.attr(match, context[match]);
	            }
	          }
	        }

	        return this; // HANDLE: $(#id)
	      } else {
	        elem = document$2.getElementById(match[2]);

	        if (elem) {
	          // Inject the element directly into the jQuery object
	          this[0] = elem;
	          this.length = 1;
	        }

	        return this;
	      } // HANDLE: $(expr, $(...))

	    } else if (!context || context.jquery) {
	      return (context || root).find(selector); // HANDLE: $(expr, context)
	      // (which is just equivalent to: $(context).find(expr)
	    } else {
	      return this.constructor(context).find(selector);
	    } // HANDLE: $(DOMElement)

	  } else if (selector.nodeType) {
	    this[0] = selector;
	    this.length = 1;
	    return this; // HANDLE: $(function)
	    // Shortcut for document ready
	  } else if (isFunction(selector)) {
	    return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
	    selector(jQuery);
	  }

	  return jQuery.makeArray(selector, this);
	}; // Give the init function the jQuery prototype for later instantiation


	init$2.prototype = jQuery.fn; // Initialize central reference

	rootjQuery = jQuery(document$2);
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	    // Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
	  children: true,
	  contents: true,
	  next: true,
	  prev: true
	};
	jQuery.fn.extend({
	  has: function has(target) {
	    var targets = jQuery(target, this),
	        l = targets.length;
	    return this.filter(function () {
	      var i = 0;

	      for (; i < l; i++) {
	        if (jQuery.contains(this, targets[i])) {
	          return true;
	        }
	      }
	    });
	  },
	  closest: function closest(selectors, context) {
	    var cur,
	        i = 0,
	        l = this.length,
	        matched = [],
	        targets = typeof selectors !== "string" && jQuery(selectors); // Positional selectors never match, since there's no _selection_ context

	    if (!rneedsContext.test(selectors)) {
	      for (; i < l; i++) {
	        for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
	          // Always skip document fragments
	          if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
	          cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
	            matched.push(cur);
	            break;
	          }
	        }
	      }
	    }

	    return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
	  },
	  // Determine the position of an element within the set
	  index: function index(elem) {
	    // No argument, return index in parent
	    if (!elem) {
	      return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
	    } // Index in selector


	    if (typeof elem === "string") {
	      return indexOf$1.call(jQuery(elem), this[0]);
	    } // Locate the position of the desired element


	    return indexOf$1.call(this, // If it receives a jQuery object, the first element is used
	    elem.jquery ? elem[0] : elem);
	  },
	  add: function add(selector, context) {
	    return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
	  },
	  addBack: function addBack(selector) {
	    return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
	  }
	});

	function sibling(cur, dir) {
	  while ((cur = cur[dir]) && cur.nodeType !== 1) {}

	  return cur;
	}

	jQuery.each({
	  parent: function parent(elem) {
	    var parent = elem.parentNode;
	    return parent && parent.nodeType !== 11 ? parent : null;
	  },
	  parents: function parents(elem) {
	    return dir(elem, "parentNode");
	  },
	  parentsUntil: function parentsUntil(elem, i, until) {
	    return dir(elem, "parentNode", until);
	  },
	  next: function next(elem) {
	    return sibling(elem, "nextSibling");
	  },
	  prev: function prev(elem) {
	    return sibling(elem, "previousSibling");
	  },
	  nextAll: function nextAll(elem) {
	    return dir(elem, "nextSibling");
	  },
	  prevAll: function prevAll(elem) {
	    return dir(elem, "previousSibling");
	  },
	  nextUntil: function nextUntil(elem, i, until) {
	    return dir(elem, "nextSibling", until);
	  },
	  prevUntil: function prevUntil(elem, i, until) {
	    return dir(elem, "previousSibling", until);
	  },
	  siblings: function siblings(elem) {
	    return _siblings((elem.parentNode || {}).firstChild, elem);
	  },
	  children: function children(elem) {
	    return _siblings(elem.firstChild);
	  },
	  contents: function contents(elem) {
	    if (nodeName(elem, "iframe")) {
	      return elem.contentDocument;
	    } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
	    // Treat the template element as a regular one in browsers that
	    // don't support it.


	    if (nodeName(elem, "template")) {
	      elem = elem.content || elem;
	    }

	    return jQuery.merge([], elem.childNodes);
	  }
	}, function (name, fn) {
	  jQuery.fn[name] = function (until, selector) {
	    var matched = jQuery.map(this, fn, until);

	    if (name.slice(-5) !== "Until") {
	      selector = until;
	    }

	    if (selector && typeof selector === "string") {
	      matched = jQuery.filter(selector, matched);
	    }

	    if (this.length > 1) {
	      // Remove duplicates
	      if (!guaranteedUnique[name]) {
	        jQuery.uniqueSort(matched);
	      } // Reverse order for parents* and prev-derivatives


	      if (rparentsprev.test(name)) {
	        matched.reverse();
	      }
	    }

	    return this.pushStack(matched);
	  };
	});
	var rnothtmlwhite = /[^\x20\t\r\n\f]+/g; // Convert String-formatted options into Object-formatted ones

	function createOptions(options) {
	  var object = {};
	  jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
	    object[flag] = true;
	  });
	  return object;
	}
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */


	jQuery.Callbacks = function (options) {
	  // Convert options from String-formatted to Object-formatted if needed
	  // (we check in cache first)
	  options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

	  var // Flag to know if list is currently firing
	  firing,
	      // Last fire value for non-forgettable lists
	  memory,
	      // Flag to know if list was already fired
	  _fired,
	      // Flag to prevent firing
	  _locked,
	      // Actual callback list
	  list = [],
	      // Queue of execution data for repeatable lists
	  queue = [],
	      // Index of currently firing callback (modified by add/remove as needed)
	  firingIndex = -1,
	      // Fire callbacks
	  fire = function fire() {
	    // Enforce single-firing
	    _locked = _locked || options.once; // Execute callbacks for all pending executions,
	    // respecting firingIndex overrides and runtime changes

	    _fired = firing = true;

	    for (; queue.length; firingIndex = -1) {
	      memory = queue.shift();

	      while (++firingIndex < list.length) {
	        // Run callback and check for early termination
	        if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
	          // Jump to end and forget the data so .add doesn't re-fire
	          firingIndex = list.length;
	          memory = false;
	        }
	      }
	    } // Forget the data if we're done with it


	    if (!options.memory) {
	      memory = false;
	    }

	    firing = false; // Clean up if we're done firing for good

	    if (_locked) {
	      // Keep an empty list if we have data for future add calls
	      if (memory) {
	        list = []; // Otherwise, this object is spent
	      } else {
	        list = "";
	      }
	    }
	  },
	      // Actual Callbacks object
	  self = {
	    // Add a callback or a collection of callbacks to the list
	    add: function add() {
	      if (list) {
	        // If we have memory from a past run, we should fire after adding
	        if (memory && !firing) {
	          firingIndex = list.length - 1;
	          queue.push(memory);
	        }

	        (function add(args) {
	          jQuery.each(args, function (_, arg) {
	            if (isFunction(arg)) {
	              if (!options.unique || !self.has(arg)) {
	                list.push(arg);
	              }
	            } else if (arg && arg.length && toType(arg) !== "string") {
	              // Inspect recursively
	              add(arg);
	            }
	          });
	        })(arguments);

	        if (memory && !firing) {
	          fire();
	        }
	      }

	      return this;
	    },
	    // Remove a callback from the list
	    remove: function remove() {
	      jQuery.each(arguments, function (_, arg) {
	        var index;

	        while ((index = jQuery.inArray(arg, list, index)) > -1) {
	          list.splice(index, 1); // Handle firing indexes

	          if (index <= firingIndex) {
	            firingIndex--;
	          }
	        }
	      });
	      return this;
	    },
	    // Check if a given callback is in the list.
	    // If no argument is given, return whether or not list has callbacks attached.
	    has: function has(fn) {
	      return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
	    },
	    // Remove all callbacks from the list
	    empty: function empty() {
	      if (list) {
	        list = [];
	      }

	      return this;
	    },
	    // Disable .fire and .add
	    // Abort any current/pending executions
	    // Clear all callbacks and values
	    disable: function disable() {
	      _locked = queue = [];
	      list = memory = "";
	      return this;
	    },
	    disabled: function disabled() {
	      return !list;
	    },
	    // Disable .fire
	    // Also disable .add unless we have memory (since it would have no effect)
	    // Abort any pending executions
	    lock: function lock() {
	      _locked = queue = [];

	      if (!memory && !firing) {
	        list = memory = "";
	      }

	      return this;
	    },
	    locked: function locked() {
	      return !!_locked;
	    },
	    // Call all callbacks with the given context and arguments
	    fireWith: function fireWith(context, args) {
	      if (!_locked) {
	        args = args || [];
	        args = [context, args.slice ? args.slice() : args];
	        queue.push(args);

	        if (!firing) {
	          fire();
	        }
	      }

	      return this;
	    },
	    // Call all the callbacks with the given arguments
	    fire: function fire() {
	      self.fireWith(this, arguments);
	      return this;
	    },
	    // To know if the callbacks have already been called at least once
	    fired: function fired() {
	      return !!_fired;
	    }
	  };

	  return self;
	};

	function Identity(v) {
	  return v;
	}

	function Thrower(ex) {
	  throw ex;
	}

	function adoptValue(value, resolve, reject, noValue) {
	  var method;

	  try {
	    // Check for promise aspect first to privilege synchronous behavior
	    if (value && isFunction(method = value.promise)) {
	      method.call(value).done(resolve).fail(reject); // Other thenables
	    } else if (value && isFunction(method = value.then)) {
	      method.call(value, resolve, reject); // Other non-thenables
	    } else {
	      // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
	      // * false: [ value ].slice( 0 ) => resolve( value )
	      // * true: [ value ].slice( 1 ) => resolve()
	      resolve.apply(undefined, [value].slice(noValue));
	    } // For Promises/A+, convert exceptions into rejections
	    // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	    // Deferred#then to conditionally suppress rejection.

	  } catch (value) {
	    // Support: Android 4.0 only
	    // Strict mode functions invoked without .call/.apply get global-object context
	    reject.apply(undefined, [value]);
	  }
	}

	jQuery.extend({
	  Deferred: function Deferred(func) {
	    var tuples = [// action, add listener, callbacks,
	    // ... .then handlers, argument index, [final state]
	    ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
	        _state = "pending",
	        _promise = {
	      state: function state() {
	        return _state;
	      },
	      always: function always() {
	        deferred.done(arguments).fail(arguments);
	        return this;
	      },
	      "catch": function _catch(fn) {
	        return _promise.then(null, fn);
	      },
	      // Keep pipe for back-compat
	      pipe: function pipe()
	      /* fnDone, fnFail, fnProgress */
	      {
	        var fns = arguments;
	        return jQuery.Deferred(function (newDefer) {
	          jQuery.each(tuples, function (i, tuple) {
	            // Map tuples (progress, done, fail) to arguments (done, fail, progress)
	            var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })
	            // deferred.done(function() { bind to newDefer or newDefer.resolve })
	            // deferred.fail(function() { bind to newDefer or newDefer.reject })

	            deferred[tuple[1]](function () {
	              var returned = fn && fn.apply(this, arguments);

	              if (returned && isFunction(returned.promise)) {
	                returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
	              } else {
	                newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
	              }
	            });
	          });
	          fns = null;
	        }).promise();
	      },
	      then: function then(onFulfilled, onRejected, onProgress) {
	        var maxDepth = 0;

	        function resolve(depth, deferred, handler, special) {
	          return function () {
	            var that = this,
	                args = arguments,
	                mightThrow = function mightThrow() {
	              var returned, then; // Support: Promises/A+ section 2.3.3.3.3
	              // https://promisesaplus.com/#point-59
	              // Ignore double-resolution attempts

	              if (depth < maxDepth) {
	                return;
	              }

	              returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1
	              // https://promisesaplus.com/#point-48

	              if (returned === deferred.promise()) {
	                throw new TypeError("Thenable self-resolution");
	              } // Support: Promises/A+ sections 2.3.3.1, 3.5
	              // https://promisesaplus.com/#point-54
	              // https://promisesaplus.com/#point-75
	              // Retrieve `then` only once


	              then = returned && ( // Support: Promises/A+ section 2.3.4
	              // https://promisesaplus.com/#point-64
	              // Only check objects and functions for thenability
	              _typeof(returned) === "object" || typeof returned === "function") && returned.then; // Handle a returned thenable

	              if (isFunction(then)) {
	                // Special processors (notify) just wait for resolution
	                if (special) {
	                  then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress
	                } else {
	                  // ...and disregard older resolution values
	                  maxDepth++;
	                  then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
	                } // Handle all other returned values

	              } else {
	                // Only substitute handlers pass on context
	                // and multiple values (non-spec behavior)
	                if (handler !== Identity) {
	                  that = undefined;
	                  args = [returned];
	                } // Process the value(s)
	                // Default process is resolve


	                (special || deferred.resolveWith)(that, args);
	              }
	            },
	                // Only normal processors (resolve) catch and reject exceptions
	            process = special ? mightThrow : function () {
	              try {
	                mightThrow();
	              } catch (e) {
	                if (jQuery.Deferred.exceptionHook) {
	                  jQuery.Deferred.exceptionHook(e, process.stackTrace);
	                } // Support: Promises/A+ section 2.3.3.3.4.1
	                // https://promisesaplus.com/#point-61
	                // Ignore post-resolution exceptions


	                if (depth + 1 >= maxDepth) {
	                  // Only substitute handlers pass on context
	                  // and multiple values (non-spec behavior)
	                  if (handler !== Thrower) {
	                    that = undefined;
	                    args = [e];
	                  }

	                  deferred.rejectWith(that, args);
	                }
	              }
	            }; // Support: Promises/A+ section 2.3.3.3.1
	            // https://promisesaplus.com/#point-57
	            // Re-resolve promises immediately to dodge false rejection from
	            // subsequent errors


	            if (depth) {
	              process();
	            } else {
	              // Call an optional hook to record the stack, in case of exception
	              // since it's otherwise lost when execution goes async
	              if (jQuery.Deferred.getStackHook) {
	                process.stackTrace = jQuery.Deferred.getStackHook();
	              }

	              window.setTimeout(process);
	            }
	          };
	        }

	        return jQuery.Deferred(function (newDefer) {
	          // progress_handlers.add( ... )
	          tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )

	          tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )

	          tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
	        }).promise();
	      },
	      // Get a promise for this deferred
	      // If obj is provided, the promise aspect is added to the object
	      promise: function promise(obj) {
	        return obj != null ? jQuery.extend(obj, _promise) : _promise;
	      }
	    },
	        deferred = {}; // Add list-specific methods

	    jQuery.each(tuples, function (i, tuple) {
	      var list = tuple[2],
	          stateString = tuple[5]; // promise.progress = list.add
	      // promise.done = list.add
	      // promise.fail = list.add

	      _promise[tuple[1]] = list.add; // Handle state

	      if (stateString) {
	        list.add(function () {
	          // state = "resolved" (i.e., fulfilled)
	          // state = "rejected"
	          _state = stateString;
	        }, // rejected_callbacks.disable
	        // fulfilled_callbacks.disable
	        tuples[3 - i][2].disable, // rejected_handlers.disable
	        // fulfilled_handlers.disable
	        tuples[3 - i][3].disable, // progress_callbacks.lock
	        tuples[0][2].lock, // progress_handlers.lock
	        tuples[0][3].lock);
	      } // progress_handlers.fire
	      // fulfilled_handlers.fire
	      // rejected_handlers.fire


	      list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }
	      // deferred.resolve = function() { deferred.resolveWith(...) }
	      // deferred.reject = function() { deferred.rejectWith(...) }

	      deferred[tuple[0]] = function () {
	        deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
	        return this;
	      }; // deferred.notifyWith = list.fireWith
	      // deferred.resolveWith = list.fireWith
	      // deferred.rejectWith = list.fireWith


	      deferred[tuple[0] + "With"] = list.fireWith;
	    }); // Make the deferred a promise

	    _promise.promise(deferred); // Call given func if any


	    if (func) {
	      func.call(deferred, deferred);
	    } // All done!


	    return deferred;
	  },
	  // Deferred helper
	  when: function when(singleValue) {
	    var // count of uncompleted subordinates
	    remaining = arguments.length,
	        // count of unprocessed arguments
	    i = remaining,
	        // subordinate fulfillment data
	    resolveContexts = Array(i),
	        resolveValues = _slice.call(arguments),
	        // the master Deferred
	    master = jQuery.Deferred(),
	        // subordinate callback factory
	    updateFunc = function updateFunc(i) {
	      return function (value) {
	        resolveContexts[i] = this;
	        resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;

	        if (! --remaining) {
	          master.resolveWith(resolveContexts, resolveValues);
	        }
	      };
	    }; // Single- and empty arguments are adopted like Promise.resolve


	    if (remaining <= 1) {
	      adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)

	      if (master.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
	        return master.then();
	      }
	    } // Multiple arguments are aggregated like Promise.all array elements


	    while (i--) {
	      adoptValue(resolveValues[i], updateFunc(i), master.reject);
	    }

	    return master.promise();
	  }
	}); // These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.

	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function (error, stack) {
	  // Support: IE 8 - 9 only
	  // Console exists when dev tools are open, which can happen at any time
	  if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
	    window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
	  }
	};

	jQuery.readyException = function (error) {
	  window.setTimeout(function () {
	    throw error;
	  });
	}; // The deferred used on DOM ready


	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function (fn) {
	  readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup
	  // happens at the time of error handling instead of callback
	  // registration.
	  .catch(function (error) {
	    jQuery.readyException(error);
	  });
	  return this;
	};

	jQuery.extend({
	  // Is the DOM ready to be used? Set to true once it occurs.
	  isReady: false,
	  // A counter to track how many items to wait for before
	  // the ready event fires. See #6781
	  readyWait: 1,
	  // Handle when the DOM is ready
	  ready: function ready(wait) {
	    // Abort if there are pending holds or we're already ready
	    if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
	      return;
	    } // Remember that the DOM is ready


	    jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be

	    if (wait !== true && --jQuery.readyWait > 0) {
	      return;
	    } // If there are functions bound, to execute


	    readyList.resolveWith(document$2, [jQuery]);
	  }
	});
	jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method

	function completed() {
	  document$2.removeEventListener("DOMContentLoaded", completed);
	  window.removeEventListener("load", completed);
	  jQuery.ready();
	} // Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon


	if (document$2.readyState === "complete" || document$2.readyState !== "loading" && !document$2.documentElement.doScroll) {
	  // Handle it asynchronously to allow scripts the opportunity to delay ready
	  window.setTimeout(jQuery.ready);
	} else {
	  // Use the handy event callback
	  document$2.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work

	  window.addEventListener("load", completed);
	} // Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function


	var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
	  var i = 0,
	      len = elems.length,
	      bulk = key == null; // Sets many values

	  if (toType(key) === "object") {
	    chainable = true;

	    for (i in key) {
	      access(elems, fn, i, key[i], true, emptyGet, raw);
	    } // Sets one value

	  } else if (value !== undefined) {
	    chainable = true;

	    if (!isFunction(value)) {
	      raw = true;
	    }

	    if (bulk) {
	      // Bulk operations run against the entire set
	      if (raw) {
	        fn.call(elems, value);
	        fn = null; // ...except when executing function values
	      } else {
	        bulk = fn;

	        fn = function fn(elem, key, value) {
	          return bulk.call(jQuery(elem), value);
	        };
	      }
	    }

	    if (fn) {
	      for (; i < len; i++) {
	        fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
	      }
	    }
	  }

	  if (chainable) {
	    return elems;
	  } // Gets


	  if (bulk) {
	    return fn.call(elems);
	  }

	  return len ? fn(elems[0], key) : emptyGet;
	}; // Matches dashed string for camelizing


	var rmsPrefix = /^-ms-/,
	    rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()

	function fcamelCase(all, letter) {
	  return letter.toUpperCase();
	} // Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 15
	// Microsoft forgot to hump their vendor prefix (#9572)


	function camelCase(string) {
	  return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
	}

	var acceptData = function acceptData(owner) {
	  // Accepts only:
	  //  - Node
	  //    - Node.ELEMENT_NODE
	  //    - Node.DOCUMENT_NODE
	  //  - Object
	  //    - Any
	  return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
	};

	function Data() {
	  this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;
	Data.prototype = {
	  cache: function cache(owner) {
	    // Check if the owner object already has a cache
	    var value = owner[this.expando]; // If not, create one

	    if (!value) {
	      value = {}; // We can accept data for non-element nodes in modern browsers,
	      // but we should not, see #8335.
	      // Always return an empty object.

	      if (acceptData(owner)) {
	        // If it is a node unlikely to be stringify-ed or looped over
	        // use plain assignment
	        if (owner.nodeType) {
	          owner[this.expando] = value; // Otherwise secure it in a non-enumerable property
	          // configurable must be true to allow the property to be
	          // deleted when data is removed
	        } else {
	          Object.defineProperty(owner, this.expando, {
	            value: value,
	            configurable: true
	          });
	        }
	      }
	    }

	    return value;
	  },
	  set: function set(owner, data, value) {
	    var prop,
	        cache = this.cache(owner); // Handle: [ owner, key, value ] args
	    // Always use camelCase key (gh-2257)

	    if (typeof data === "string") {
	      cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args
	    } else {
	      // Copy the properties one-by-one to the cache object
	      for (prop in data) {
	        cache[camelCase(prop)] = data[prop];
	      }
	    }

	    return cache;
	  },
	  get: function get(owner, key) {
	    return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
	    owner[this.expando] && owner[this.expando][camelCase(key)];
	  },
	  access: function access(owner, key, value) {
	    // In cases where either:
	    //
	    //   1. No key was specified
	    //   2. A string key was specified, but no value provided
	    //
	    // Take the "read" path and allow the get method to determine
	    // which value to return, respectively either:
	    //
	    //   1. The entire cache object
	    //   2. The data stored at the key
	    //
	    if (key === undefined || key && typeof key === "string" && value === undefined) {
	      return this.get(owner, key);
	    } // When the key is not a string, or both a key and value
	    // are specified, set or extend (existing objects) with either:
	    //
	    //   1. An object of properties
	    //   2. A key and value
	    //


	    this.set(owner, key, value); // Since the "set" path can have two possible entry points
	    // return the expected data based on which path was taken[*]

	    return value !== undefined ? value : key;
	  },
	  remove: function remove(owner, key) {
	    var i,
	        cache = owner[this.expando];

	    if (cache === undefined) {
	      return;
	    }

	    if (key !== undefined) {
	      // Support array or space separated string of keys
	      if (Array.isArray(key)) {
	        // If key is an array of keys...
	        // We always set camelCase keys, so remove that.
	        key = key.map(camelCase);
	      } else {
	        key = camelCase(key); // If a key with the spaces exists, use it.
	        // Otherwise, create an array by matching non-whitespace

	        key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
	      }

	      i = key.length;

	      while (i--) {
	        delete cache[key[i]];
	      }
	    } // Remove the expando if there's no more data


	    if (key === undefined || jQuery.isEmptyObject(cache)) {
	      // Support: Chrome <=35 - 45
	      // Webkit & Blink performance suffers when deleting properties
	      // from DOM nodes, so set to undefined instead
	      // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
	      if (owner.nodeType) {
	        owner[this.expando] = undefined;
	      } else {
	        delete owner[this.expando];
	      }
	    }
	  },
	  hasData: function hasData(owner) {
	    var cache = owner[this.expando];
	    return cache !== undefined && !jQuery.isEmptyObject(cache);
	  }
	};
	var dataPriv = new Data();
	var dataUser = new Data(); //	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	    rmultiDash = /[A-Z]/g;

	function getData(data) {
	  if (data === "true") {
	    return true;
	  }

	  if (data === "false") {
	    return false;
	  }

	  if (data === "null") {
	    return null;
	  } // Only convert to a number if it doesn't change the string


	  if (data === +data + "") {
	    return +data;
	  }

	  if (rbrace.test(data)) {
	    return JSON.parse(data);
	  }

	  return data;
	}

	function dataAttr(elem, key, data) {
	  var name; // If nothing was found internally, try to fetch any
	  // data from the HTML5 data-* attribute

	  if (data === undefined && elem.nodeType === 1) {
	    name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
	    data = elem.getAttribute(name);

	    if (typeof data === "string") {
	      try {
	        data = getData(data);
	      } catch (e) {} // Make sure we set the data so it isn't changed later


	      dataUser.set(elem, key, data);
	    } else {
	      data = undefined;
	    }
	  }

	  return data;
	}

	jQuery.extend({
	  hasData: function hasData(elem) {
	    return dataUser.hasData(elem) || dataPriv.hasData(elem);
	  },
	  data: function data(elem, name, _data) {
	    return dataUser.access(elem, name, _data);
	  },
	  removeData: function removeData(elem, name) {
	    dataUser.remove(elem, name);
	  },
	  // TODO: Now that all calls to _data and _removeData have been replaced
	  // with direct calls to dataPriv methods, these can be deprecated.
	  _data: function _data(elem, name, data) {
	    return dataPriv.access(elem, name, data);
	  },
	  _removeData: function _removeData(elem, name) {
	    dataPriv.remove(elem, name);
	  }
	});
	jQuery.fn.extend({
	  data: function data(key, value) {
	    var i,
	        name,
	        data,
	        elem = this[0],
	        attrs = elem && elem.attributes; // Gets all values

	    if (key === undefined) {
	      if (this.length) {
	        data = dataUser.get(elem);

	        if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
	          i = attrs.length;

	          while (i--) {
	            // Support: IE 11 only
	            // The attrs elements can be null (#14894)
	            if (attrs[i]) {
	              name = attrs[i].name;

	              if (name.indexOf("data-") === 0) {
	                name = camelCase(name.slice(5));
	                dataAttr(elem, name, data[name]);
	              }
	            }
	          }

	          dataPriv.set(elem, "hasDataAttrs", true);
	        }
	      }

	      return data;
	    } // Sets multiple values


	    if (_typeof(key) === "object") {
	      return this.each(function () {
	        dataUser.set(this, key);
	      });
	    }

	    return access(this, function (value) {
	      var data; // The calling jQuery object (element matches) is not empty
	      // (and therefore has an element appears at this[ 0 ]) and the
	      // `value` parameter was not undefined. An empty jQuery object
	      // will result in `undefined` for elem = this[ 0 ] which will
	      // throw an exception if an attempt to read a data cache is made.

	      if (elem && value === undefined) {
	        // Attempt to get data from the cache
	        // The key will always be camelCased in Data
	        data = dataUser.get(elem, key);

	        if (data !== undefined) {
	          return data;
	        } // Attempt to "discover" the data in
	        // HTML5 custom data-* attrs


	        data = dataAttr(elem, key);

	        if (data !== undefined) {
	          return data;
	        } // We tried really hard, but the data doesn't exist.


	        return;
	      } // Set the data...


	      this.each(function () {
	        // We always store the camelCased key
	        dataUser.set(this, key, value);
	      });
	    }, null, value, arguments.length > 1, null, true);
	  },
	  removeData: function removeData(key) {
	    return this.each(function () {
	      dataUser.remove(this, key);
	    });
	  }
	});
	jQuery.extend({
	  queue: function queue(elem, type, data) {
	    var queue;

	    if (elem) {
	      type = (type || "fx") + "queue";
	      queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup

	      if (data) {
	        if (!queue || Array.isArray(data)) {
	          queue = dataPriv.access(elem, type, jQuery.makeArray(data));
	        } else {
	          queue.push(data);
	        }
	      }

	      return queue || [];
	    }
	  },
	  dequeue: function dequeue(elem, type) {
	    type = type || "fx";

	    var queue = jQuery.queue(elem, type),
	        startLength = queue.length,
	        fn = queue.shift(),
	        hooks = jQuery._queueHooks(elem, type),
	        next = function next() {
	      jQuery.dequeue(elem, type);
	    }; // If the fx queue is dequeued, always remove the progress sentinel


	    if (fn === "inprogress") {
	      fn = queue.shift();
	      startLength--;
	    }

	    if (fn) {
	      // Add a progress sentinel to prevent the fx queue from being
	      // automatically dequeued
	      if (type === "fx") {
	        queue.unshift("inprogress");
	      } // Clear up the last queue stop function


	      delete hooks.stop;
	      fn.call(elem, next, hooks);
	    }

	    if (!startLength && hooks) {
	      hooks.empty.fire();
	    }
	  },
	  // Not public - generate a queueHooks object, or return the current one
	  _queueHooks: function _queueHooks(elem, type) {
	    var key = type + "queueHooks";
	    return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
	      empty: jQuery.Callbacks("once memory").add(function () {
	        dataPriv.remove(elem, [type + "queue", key]);
	      })
	    });
	  }
	});
	jQuery.fn.extend({
	  queue: function queue(type, data) {
	    var setter = 2;

	    if (typeof type !== "string") {
	      data = type;
	      type = "fx";
	      setter--;
	    }

	    if (arguments.length < setter) {
	      return jQuery.queue(this[0], type);
	    }

	    return data === undefined ? this : this.each(function () {
	      var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue

	      jQuery._queueHooks(this, type);

	      if (type === "fx" && queue[0] !== "inprogress") {
	        jQuery.dequeue(this, type);
	      }
	    });
	  },
	  dequeue: function dequeue(type) {
	    return this.each(function () {
	      jQuery.dequeue(this, type);
	    });
	  },
	  clearQueue: function clearQueue(type) {
	    return this.queue(type || "fx", []);
	  },
	  // Get a promise resolved when queues of a certain type
	  // are emptied (fx is the type by default)
	  promise: function promise(type, obj) {
	    var tmp,
	        count = 1,
	        defer = jQuery.Deferred(),
	        elements = this,
	        i = this.length,
	        resolve = function resolve() {
	      if (! --count) {
	        defer.resolveWith(elements, [elements]);
	      }
	    };

	    if (typeof type !== "string") {
	      obj = type;
	      type = undefined;
	    }

	    type = type || "fx";

	    while (i--) {
	      tmp = dataPriv.get(elements[i], type + "queueHooks");

	      if (tmp && tmp.empty) {
	        count++;
	        tmp.empty.add(resolve);
	      }
	    }

	    resolve();
	    return defer.promise(obj);
	  }
	});
	var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
	var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
	var cssExpand = ["Top", "Right", "Bottom", "Left"];

	var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {
	  // isHiddenWithinTree might be called from jQuery#filter function;
	  // in that case, element will be second argument
	  elem = el || elem; // Inline style trumps all

	  return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
	  // Support: Firefox <=43 - 45
	  // Disconnected elements can have computed display: none, so first confirm that elem is
	  // in the document.
	  jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, "display") === "none";
	};

	var swap = function swap(elem, options, callback, args) {
	  var ret,
	      name,
	      old = {}; // Remember the old values, and insert the new ones

	  for (name in options) {
	    old[name] = elem.style[name];
	    elem.style[name] = options[name];
	  }

	  ret = callback.apply(elem, args || []); // Revert the old values

	  for (name in options) {
	    elem.style[name] = old[name];
	  }

	  return ret;
	};

	function adjustCSS(elem, prop, valueParts, tween) {
	  var adjusted,
	      scale,
	      maxIterations = 20,
	      currentValue = tween ? function () {
	    return tween.cur();
	  } : function () {
	    return jQuery.css(elem, prop, "");
	  },
	      initial = currentValue(),
	      unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
	      // Starting value computation is required for potential unit mismatches
	  initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

	  if (initialInUnit && initialInUnit[3] !== unit) {
	    // Support: Firefox <=54
	    // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
	    initial = initial / 2; // Trust units reported by jQuery.css

	    unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point

	    initialInUnit = +initial || 1;

	    while (maxIterations--) {
	      // Evaluate and update our best guess (doubling guesses that zero out).
	      // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
	      jQuery.style(elem, prop, initialInUnit + unit);

	      if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
	        maxIterations = 0;
	      }

	      initialInUnit = initialInUnit / scale;
	    }

	    initialInUnit = initialInUnit * 2;
	    jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on

	    valueParts = valueParts || [];
	  }

	  if (valueParts) {
	    initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified

	    adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];

	    if (tween) {
	      tween.unit = unit;
	      tween.start = initialInUnit;
	      tween.end = adjusted;
	    }
	  }

	  return adjusted;
	}

	var defaultDisplayMap = {};

	function getDefaultDisplay(elem) {
	  var temp,
	      doc = elem.ownerDocument,
	      nodeName = elem.nodeName,
	      display = defaultDisplayMap[nodeName];

	  if (display) {
	    return display;
	  }

	  temp = doc.body.appendChild(doc.createElement(nodeName));
	  display = jQuery.css(temp, "display");
	  temp.parentNode.removeChild(temp);

	  if (display === "none") {
	    display = "block";
	  }

	  defaultDisplayMap[nodeName] = display;
	  return display;
	}

	function showHide(elements, show) {
	  var display,
	      elem,
	      values = [],
	      index = 0,
	      length = elements.length; // Determine new display value for elements that need to change

	  for (; index < length; index++) {
	    elem = elements[index];

	    if (!elem.style) {
	      continue;
	    }

	    display = elem.style.display;

	    if (show) {
	      // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
	      // check is required in this first loop unless we have a nonempty display value (either
	      // inline or about-to-be-restored)
	      if (display === "none") {
	        values[index] = dataPriv.get(elem, "display") || null;

	        if (!values[index]) {
	          elem.style.display = "";
	        }
	      }

	      if (elem.style.display === "" && isHiddenWithinTree(elem)) {
	        values[index] = getDefaultDisplay(elem);
	      }
	    } else {
	      if (display !== "none") {
	        values[index] = "none"; // Remember what we're overwriting

	        dataPriv.set(elem, "display", display);
	      }
	    }
	  } // Set the display of the elements in a second loop to avoid constant reflow


	  for (index = 0; index < length; index++) {
	    if (values[index] != null) {
	      elements[index].style.display = values[index];
	    }
	  }

	  return elements;
	}

	jQuery.fn.extend({
	  show: function show() {
	    return showHide(this, true);
	  },
	  hide: function hide() {
	    return showHide(this);
	  },
	  toggle: function toggle(state) {
	    if (typeof state === "boolean") {
	      return state ? this.show() : this.hide();
	    }

	    return this.each(function () {
	      if (isHiddenWithinTree(this)) {
	        jQuery(this).show();
	      } else {
	        jQuery(this).hide();
	      }
	    });
	  }
	});
	var rcheckableType = /^(?:checkbox|radio)$/i;
	var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;
	var rscriptType = /^$|^module$|\/(?:java|ecma)script/i; // We have to close these tags to support XHTML (#13200)

	var wrapMap = {
	  // Support: IE <=9 only
	  option: [1, "<select multiple='multiple'>", "</select>"],
	  // XHTML parsers do not magically insert elements in the
	  // same way that tag soup parsers do. So we cannot shorten
	  // this by omitting <tbody> or other required elements.
	  thead: [1, "<table>", "</table>"],
	  col: [2, "<table><colgroup>", "</colgroup></table>"],
	  tr: [2, "<table><tbody>", "</tbody></table>"],
	  td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
	  _default: [0, "", ""]
	}; // Support: IE <=9 only

	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	function getAll(context, tag) {
	  // Support: IE <=9 - 11 only
	  // Use typeof to avoid zero-argument method invocation on host objects (#15151)
	  var ret;

	  if (typeof context.getElementsByTagName !== "undefined") {
	    ret = context.getElementsByTagName(tag || "*");
	  } else if (typeof context.querySelectorAll !== "undefined") {
	    ret = context.querySelectorAll(tag || "*");
	  } else {
	    ret = [];
	  }

	  if (tag === undefined || tag && nodeName(context, tag)) {
	    return jQuery.merge([context], ret);
	  }

	  return ret;
	} // Mark scripts as having already been evaluated


	function setGlobalEval(elems, refElements) {
	  var i = 0,
	      l = elems.length;

	  for (; i < l; i++) {
	    dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
	  }
	}

	var rhtml = /<|&#?\w+;/;

	function buildFragment(elems, context, scripts, selection, ignored) {
	  var elem,
	      tmp,
	      tag,
	      wrap,
	      contains,
	      j,
	      fragment = context.createDocumentFragment(),
	      nodes = [],
	      i = 0,
	      l = elems.length;

	  for (; i < l; i++) {
	    elem = elems[i];

	    if (elem || elem === 0) {
	      // Add nodes directly
	      if (toType(elem) === "object") {
	        // Support: Android <=4.0 only, PhantomJS 1 only
	        // push.apply(_, arraylike) throws on ancient WebKit
	        jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node
	      } else if (!rhtml.test(elem)) {
	        nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes
	      } else {
	        tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation

	        tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
	        wrap = wrapMap[tag] || wrapMap._default;
	        tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content

	        j = wrap[0];

	        while (j--) {
	          tmp = tmp.lastChild;
	        } // Support: Android <=4.0 only, PhantomJS 1 only
	        // push.apply(_, arraylike) throws on ancient WebKit


	        jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container

	        tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)

	        tmp.textContent = "";
	      }
	    }
	  } // Remove wrapper from fragment


	  fragment.textContent = "";
	  i = 0;

	  while (elem = nodes[i++]) {
	    // Skip elements already in the context collection (trac-4087)
	    if (selection && jQuery.inArray(elem, selection) > -1) {
	      if (ignored) {
	        ignored.push(elem);
	      }

	      continue;
	    }

	    contains = jQuery.contains(elem.ownerDocument, elem); // Append to fragment

	    tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history

	    if (contains) {
	      setGlobalEval(tmp);
	    } // Capture executables


	    if (scripts) {
	      j = 0;

	      while (elem = tmp[j++]) {
	        if (rscriptType.test(elem.type || "")) {
	          scripts.push(elem);
	        }
	      }
	    }
	  }

	  return fragment;
	}

	(function () {
	  var fragment = document$2.createDocumentFragment(),
	      div = fragment.appendChild(document$2.createElement("div")),
	      input = document$2.createElement("input"); // Support: Android 4.0 - 4.3 only
	  // Check state lost if the name is set (#11217)
	  // Support: Windows Web Apps (WWA)
	  // `name` and `type` must use .setAttribute for WWA (#14901)

	  input.setAttribute("type", "radio");
	  input.setAttribute("checked", "checked");
	  input.setAttribute("name", "t");
	  div.appendChild(input); // Support: Android <=4.1 only
	  // Older WebKit doesn't clone checked state correctly in fragments

	  support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only
	  // Make sure textarea (and checkbox) defaultValue is properly cloned

	  div.innerHTML = "<textarea>x</textarea>";
	  support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
	})();

	var documentElement = document$2.documentElement;
	var rkeyEvent = /^key/,
	    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
	  return true;
	}

	function returnFalse() {
	  return false;
	} // Support: IE <=9 only
	// See #13393 for more info


	function safeActiveElement() {
	  try {
	    return document$2.activeElement;
	  } catch (err) {}
	}

	function _on(elem, types, selector, data, fn, one) {
	  var origFn, type; // Types can be a map of types/handlers

	  if (_typeof(types) === "object") {
	    // ( types-Object, selector, data )
	    if (typeof selector !== "string") {
	      // ( types-Object, data )
	      data = data || selector;
	      selector = undefined;
	    }

	    for (type in types) {
	      _on(elem, type, selector, data, types[type], one);
	    }

	    return elem;
	  }

	  if (data == null && fn == null) {
	    // ( types, fn )
	    fn = selector;
	    data = selector = undefined;
	  } else if (fn == null) {
	    if (typeof selector === "string") {
	      // ( types, selector, fn )
	      fn = data;
	      data = undefined;
	    } else {
	      // ( types, data, fn )
	      fn = data;
	      data = selector;
	      selector = undefined;
	    }
	  }

	  if (fn === false) {
	    fn = returnFalse;
	  } else if (!fn) {
	    return elem;
	  }

	  if (one === 1) {
	    origFn = fn;

	    fn = function fn(event) {
	      // Can use an empty set, since event contains the info
	      jQuery().off(event);
	      return origFn.apply(this, arguments);
	    }; // Use same guid so caller can remove using origFn


	    fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
	  }

	  return elem.each(function () {
	    jQuery.event.add(this, types, fn, data, selector);
	  });
	}
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */


	jQuery.event = {
	  global: {},
	  add: function add(elem, types, handler, data, selector) {
	    var handleObjIn,
	        eventHandle,
	        tmp,
	        events,
	        t,
	        handleObj,
	        special,
	        handlers,
	        type,
	        namespaces,
	        origType,
	        elemData = dataPriv.get(elem); // Don't attach events to noData or text/comment nodes (but allow plain objects)

	    if (!elemData) {
	      return;
	    } // Caller can pass in an object of custom data in lieu of the handler


	    if (handler.handler) {
	      handleObjIn = handler;
	      handler = handleObjIn.handler;
	      selector = handleObjIn.selector;
	    } // Ensure that invalid selectors throw exceptions at attach time
	    // Evaluate against documentElement in case elem is a non-element node (e.g., document)


	    if (selector) {
	      jQuery.find.matchesSelector(documentElement, selector);
	    } // Make sure that the handler has a unique ID, used to find/remove it later


	    if (!handler.guid) {
	      handler.guid = jQuery.guid++;
	    } // Init the element's event structure and main handler, if this is the first


	    if (!(events = elemData.events)) {
	      events = elemData.events = {};
	    }

	    if (!(eventHandle = elemData.handle)) {
	      eventHandle = elemData.handle = function (e) {
	        // Discard the second event of a jQuery.event.trigger() and
	        // when an event is called after a page has unloaded
	        return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
	      };
	    } // Handle multiple events separated by a space


	    types = (types || "").match(rnothtmlwhite) || [""];
	    t = types.length;

	    while (t--) {
	      tmp = rtypenamespace.exec(types[t]) || [];
	      type = origType = tmp[1];
	      namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers

	      if (!type) {
	        continue;
	      } // If event changes its type, use the special event handlers for the changed type


	      special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type

	      type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type

	      special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers

	      handleObj = jQuery.extend({
	        type: type,
	        origType: origType,
	        data: data,
	        handler: handler,
	        guid: handler.guid,
	        selector: selector,
	        needsContext: selector && jQuery.expr.match.needsContext.test(selector),
	        namespace: namespaces.join(".")
	      }, handleObjIn); // Init the event handler queue if we're the first

	      if (!(handlers = events[type])) {
	        handlers = events[type] = [];
	        handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false

	        if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
	          if (elem.addEventListener) {
	            elem.addEventListener(type, eventHandle);
	          }
	        }
	      }

	      if (special.add) {
	        special.add.call(elem, handleObj);

	        if (!handleObj.handler.guid) {
	          handleObj.handler.guid = handler.guid;
	        }
	      } // Add to the element's handler list, delegates in front


	      if (selector) {
	        handlers.splice(handlers.delegateCount++, 0, handleObj);
	      } else {
	        handlers.push(handleObj);
	      } // Keep track of which events have ever been used, for event optimization


	      jQuery.event.global[type] = true;
	    }
	  },
	  // Detach an event or set of events from an element
	  remove: function remove(elem, types, handler, selector, mappedTypes) {
	    var j,
	        origCount,
	        tmp,
	        events,
	        t,
	        handleObj,
	        special,
	        handlers,
	        type,
	        namespaces,
	        origType,
	        elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

	    if (!elemData || !(events = elemData.events)) {
	      return;
	    } // Once for each type.namespace in types; type may be omitted


	    types = (types || "").match(rnothtmlwhite) || [""];
	    t = types.length;

	    while (t--) {
	      tmp = rtypenamespace.exec(types[t]) || [];
	      type = origType = tmp[1];
	      namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element

	      if (!type) {
	        for (type in events) {
	          jQuery.event.remove(elem, type + types[t], handler, selector, true);
	        }

	        continue;
	      }

	      special = jQuery.event.special[type] || {};
	      type = (selector ? special.delegateType : special.bindType) || type;
	      handlers = events[type] || [];
	      tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); // Remove matching events

	      origCount = j = handlers.length;

	      while (j--) {
	        handleObj = handlers[j];

	        if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
	          handlers.splice(j, 1);

	          if (handleObj.selector) {
	            handlers.delegateCount--;
	          }

	          if (special.remove) {
	            special.remove.call(elem, handleObj);
	          }
	        }
	      } // Remove generic event handler if we removed something and no more handlers exist
	      // (avoids potential for endless recursion during removal of special event handlers)


	      if (origCount && !handlers.length) {
	        if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
	          jQuery.removeEvent(elem, type, elemData.handle);
	        }

	        delete events[type];
	      }
	    } // Remove data and the expando if it's no longer used


	    if (jQuery.isEmptyObject(events)) {
	      dataPriv.remove(elem, "handle events");
	    }
	  },
	  dispatch: function dispatch(nativeEvent) {
	    // Make a writable jQuery.Event from the native event object
	    var event = jQuery.event.fix(nativeEvent);
	    var i,
	        j,
	        ret,
	        matched,
	        handleObj,
	        handlerQueue,
	        args = new Array(arguments.length),
	        handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
	        special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event

	    args[0] = event;

	    for (i = 1; i < arguments.length; i++) {
	      args[i] = arguments[i];
	    }

	    event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired

	    if (special.preDispatch && special.preDispatch.call(this, event) === false) {
	      return;
	    } // Determine handlers


	    handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us

	    i = 0;

	    while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
	      event.currentTarget = matched.elem;
	      j = 0;

	      while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
	        // Triggered event must either 1) have no namespace, or 2) have namespace(s)
	        // a subset or equal to those in the bound event (both can have no namespace).
	        if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
	          event.handleObj = handleObj;
	          event.data = handleObj.data;
	          ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

	          if (ret !== undefined) {
	            if ((event.result = ret) === false) {
	              event.preventDefault();
	              event.stopPropagation();
	            }
	          }
	        }
	      }
	    } // Call the postDispatch hook for the mapped type


	    if (special.postDispatch) {
	      special.postDispatch.call(this, event);
	    }

	    return event.result;
	  },
	  handlers: function handlers(event, _handlers) {
	    var i,
	        handleObj,
	        sel,
	        matchedHandlers,
	        matchedSelectors,
	        handlerQueue = [],
	        delegateCount = _handlers.delegateCount,
	        cur = event.target; // Find delegate handlers

	    if (delegateCount && // Support: IE <=9
	    // Black-hole SVG <use> instance trees (trac-13180)
	    cur.nodeType && // Support: Firefox <=42
	    // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
	    // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
	    // Support: IE 11 only
	    // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
	    !(event.type === "click" && event.button >= 1)) {
	      for (; cur !== this; cur = cur.parentNode || this) {
	        // Don't check non-elements (#13208)
	        // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
	        if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
	          matchedHandlers = [];
	          matchedSelectors = {};

	          for (i = 0; i < delegateCount; i++) {
	            handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)

	            sel = handleObj.selector + " ";

	            if (matchedSelectors[sel] === undefined) {
	              matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
	            }

	            if (matchedSelectors[sel]) {
	              matchedHandlers.push(handleObj);
	            }
	          }

	          if (matchedHandlers.length) {
	            handlerQueue.push({
	              elem: cur,
	              handlers: matchedHandlers
	            });
	          }
	        }
	      }
	    } // Add the remaining (directly-bound) handlers


	    cur = this;

	    if (delegateCount < _handlers.length) {
	      handlerQueue.push({
	        elem: cur,
	        handlers: _handlers.slice(delegateCount)
	      });
	    }

	    return handlerQueue;
	  },
	  addProp: function addProp(name, hook) {
	    Object.defineProperty(jQuery.Event.prototype, name, {
	      enumerable: true,
	      configurable: true,
	      get: isFunction(hook) ? function () {
	        if (this.originalEvent) {
	          return hook(this.originalEvent);
	        }
	      } : function () {
	        if (this.originalEvent) {
	          return this.originalEvent[name];
	        }
	      },
	      set: function set(value) {
	        Object.defineProperty(this, name, {
	          enumerable: true,
	          configurable: true,
	          writable: true,
	          value: value
	        });
	      }
	    });
	  },
	  fix: function fix(originalEvent) {
	    return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
	  },
	  special: {
	    load: {
	      // Prevent triggered image.load events from bubbling to window.load
	      noBubble: true
	    },
	    focus: {
	      // Fire native event if possible so blur/focus sequence is correct
	      trigger: function trigger() {
	        if (this !== safeActiveElement() && this.focus) {
	          this.focus();
	          return false;
	        }
	      },
	      delegateType: "focusin"
	    },
	    blur: {
	      trigger: function trigger() {
	        if (this === safeActiveElement() && this.blur) {
	          this.blur();
	          return false;
	        }
	      },
	      delegateType: "focusout"
	    },
	    click: {
	      // For checkbox, fire native event so checked state will be right
	      trigger: function trigger() {
	        if (this.type === "checkbox" && this.click && nodeName(this, "input")) {
	          this.click();
	          return false;
	        }
	      },
	      // For cross-browser consistency, don't fire native .click() on links
	      _default: function _default(event) {
	        return nodeName(event.target, "a");
	      }
	    },
	    beforeunload: {
	      postDispatch: function postDispatch(event) {
	        // Support: Firefox 20+
	        // Firefox doesn't alert if the returnValue field is not set.
	        if (event.result !== undefined && event.originalEvent) {
	          event.originalEvent.returnValue = event.result;
	        }
	      }
	    }
	  }
	};

	jQuery.removeEvent = function (elem, type, handle) {
	  // This "if" is needed for plain objects
	  if (elem.removeEventListener) {
	    elem.removeEventListener(type, handle);
	  }
	};

	jQuery.Event = function (src, props) {
	  // Allow instantiation without the 'new' keyword
	  if (!(this instanceof jQuery.Event)) {
	    return new jQuery.Event(src, props);
	  } // Event object


	  if (src && src.type) {
	    this.originalEvent = src;
	    this.type = src.type; // Events bubbling up the document may have been marked as prevented
	    // by a handler lower down the tree; reflect the correct value.

	    this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
	    src.returnValue === false ? returnTrue : returnFalse; // Create target properties
	    // Support: Safari <=6 - 7 only
	    // Target should not be a text node (#504, #13143)

	    this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
	    this.currentTarget = src.currentTarget;
	    this.relatedTarget = src.relatedTarget; // Event type
	  } else {
	    this.type = src;
	  } // Put explicitly provided properties onto the event object


	  if (props) {
	    jQuery.extend(this, props);
	  } // Create a timestamp if incoming event doesn't have one


	  this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed

	  this[jQuery.expando] = true;
	}; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


	jQuery.Event.prototype = {
	  constructor: jQuery.Event,
	  isDefaultPrevented: returnFalse,
	  isPropagationStopped: returnFalse,
	  isImmediatePropagationStopped: returnFalse,
	  isSimulated: false,
	  preventDefault: function preventDefault() {
	    var e = this.originalEvent;
	    this.isDefaultPrevented = returnTrue;

	    if (e && !this.isSimulated) {
	      e.preventDefault();
	    }
	  },
	  stopPropagation: function stopPropagation() {
	    var e = this.originalEvent;
	    this.isPropagationStopped = returnTrue;

	    if (e && !this.isSimulated) {
	      e.stopPropagation();
	    }
	  },
	  stopImmediatePropagation: function stopImmediatePropagation() {
	    var e = this.originalEvent;
	    this.isImmediatePropagationStopped = returnTrue;

	    if (e && !this.isSimulated) {
	      e.stopImmediatePropagation();
	    }

	    this.stopPropagation();
	  }
	}; // Includes all common event props including KeyEvent and MouseEvent specific props

	jQuery.each({
	  altKey: true,
	  bubbles: true,
	  cancelable: true,
	  changedTouches: true,
	  ctrlKey: true,
	  detail: true,
	  eventPhase: true,
	  metaKey: true,
	  pageX: true,
	  pageY: true,
	  shiftKey: true,
	  view: true,
	  "char": true,
	  charCode: true,
	  key: true,
	  keyCode: true,
	  button: true,
	  buttons: true,
	  clientX: true,
	  clientY: true,
	  offsetX: true,
	  offsetY: true,
	  pointerId: true,
	  pointerType: true,
	  screenX: true,
	  screenY: true,
	  targetTouches: true,
	  toElement: true,
	  touches: true,
	  which: function which(event) {
	    var button = event.button; // Add which for key events

	    if (event.which == null && rkeyEvent.test(event.type)) {
	      return event.charCode != null ? event.charCode : event.keyCode;
	    } // Add which for click: 1 === left; 2 === middle; 3 === right


	    if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
	      if (button & 1) {
	        return 1;
	      }

	      if (button & 2) {
	        return 3;
	      }

	      if (button & 4) {
	        return 2;
	      }

	      return 0;
	    }

	    return event.which;
	  }
	}, jQuery.event.addProp); // Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).

	jQuery.each({
	  mouseenter: "mouseover",
	  mouseleave: "mouseout",
	  pointerenter: "pointerover",
	  pointerleave: "pointerout"
	}, function (orig, fix) {
	  jQuery.event.special[orig] = {
	    delegateType: fix,
	    bindType: fix,
	    handle: function handle(event) {
	      var ret,
	          target = this,
	          related = event.relatedTarget,
	          handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.
	      // NB: No relatedTarget if the mouse left/entered the browser window

	      if (!related || related !== target && !jQuery.contains(target, related)) {
	        event.type = handleObj.origType;
	        ret = handleObj.handler.apply(this, arguments);
	        event.type = fix;
	      }

	      return ret;
	    }
	  };
	});
	jQuery.fn.extend({
	  on: function on(types, selector, data, fn) {
	    return _on(this, types, selector, data, fn);
	  },
	  one: function one(types, selector, data, fn) {
	    return _on(this, types, selector, data, fn, 1);
	  },
	  off: function off(types, selector, fn) {
	    var handleObj, type;

	    if (types && types.preventDefault && types.handleObj) {
	      // ( event )  dispatched jQuery.Event
	      handleObj = types.handleObj;
	      jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
	      return this;
	    }

	    if (_typeof(types) === "object") {
	      // ( types-object [, selector] )
	      for (type in types) {
	        this.off(type, selector, types[type]);
	      }

	      return this;
	    }

	    if (selector === false || typeof selector === "function") {
	      // ( types [, fn] )
	      fn = selector;
	      selector = undefined;
	    }

	    if (fn === false) {
	      fn = returnFalse;
	    }

	    return this.each(function () {
	      jQuery.event.remove(this, types, fn, selector);
	    });
	  }
	});
	var
	/* eslint-disable max-len */
	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */
	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,
	    // checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g; // Prefer a tbody over its parent table for containing new rows

	function manipulationTarget(elem, content) {
	  if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
	    return jQuery(elem).children("tbody")[0] || elem;
	  }

	  return elem;
	} // Replace/restore the type attribute of script elements for safe DOM manipulation


	function disableScript(elem) {
	  elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	  return elem;
	}

	function restoreScript(elem) {
	  if ((elem.type || "").slice(0, 5) === "true/") {
	    elem.type = elem.type.slice(5);
	  } else {
	    elem.removeAttribute("type");
	  }

	  return elem;
	}

	function cloneCopyEvent(src, dest) {
	  var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	  if (dest.nodeType !== 1) {
	    return;
	  } // 1. Copy private data: events, handlers, etc.


	  if (dataPriv.hasData(src)) {
	    pdataOld = dataPriv.access(src);
	    pdataCur = dataPriv.set(dest, pdataOld);
	    events = pdataOld.events;

	    if (events) {
	      delete pdataCur.handle;
	      pdataCur.events = {};

	      for (type in events) {
	        for (i = 0, l = events[type].length; i < l; i++) {
	          jQuery.event.add(dest, type, events[type][i]);
	        }
	      }
	    }
	  } // 2. Copy user data


	  if (dataUser.hasData(src)) {
	    udataOld = dataUser.access(src);
	    udataCur = jQuery.extend({}, udataOld);
	    dataUser.set(dest, udataCur);
	  }
	} // Fix IE bugs, see support tests


	function fixInput(src, dest) {
	  var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.

	  if (nodeName === "input" && rcheckableType.test(src.type)) {
	    dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options
	  } else if (nodeName === "input" || nodeName === "textarea") {
	    dest.defaultValue = src.defaultValue;
	  }
	}

	function domManip(collection, args, callback, ignored) {
	  // Flatten any nested arrays
	  args = concat.apply([], args);
	  var fragment,
	      first,
	      scripts,
	      hasScripts,
	      node,
	      doc,
	      i = 0,
	      l = collection.length,
	      iNoClone = l - 1,
	      value = args[0],
	      valueIsFunction = isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit

	  if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
	    return collection.each(function (index) {
	      var self = collection.eq(index);

	      if (valueIsFunction) {
	        args[0] = value.call(this, index, self.html());
	      }

	      domManip(self, args, callback, ignored);
	    });
	  }

	  if (l) {
	    fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
	    first = fragment.firstChild;

	    if (fragment.childNodes.length === 1) {
	      fragment = first;
	    } // Require either new content or an interest in ignored elements to invoke the callback


	    if (first || ignored) {
	      scripts = jQuery.map(getAll(fragment, "script"), disableScript);
	      hasScripts = scripts.length; // Use the original fragment for the last item
	      // instead of the first because it can end up
	      // being emptied incorrectly in certain situations (#8070).

	      for (; i < l; i++) {
	        node = fragment;

	        if (i !== iNoClone) {
	          node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration

	          if (hasScripts) {
	            // Support: Android <=4.0 only, PhantomJS 1 only
	            // push.apply(_, arraylike) throws on ancient WebKit
	            jQuery.merge(scripts, getAll(node, "script"));
	          }
	        }

	        callback.call(collection[i], node, i);
	      }

	      if (hasScripts) {
	        doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts

	        jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion

	        for (i = 0; i < hasScripts; i++) {
	          node = scripts[i];

	          if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
	            if (node.src && (node.type || "").toLowerCase() !== "module") {
	              // Optional AJAX dependency, but won't run scripts if not present
	              if (jQuery._evalUrl) {
	                jQuery._evalUrl(node.src);
	              }
	            } else {
	              DOMEval(node.textContent.replace(rcleanScript, ""), doc, node);
	            }
	          }
	        }
	      }
	    }
	  }

	  return collection;
	}

	function _remove(elem, selector, keepData) {
	  var node,
	      nodes = selector ? jQuery.filter(selector, elem) : elem,
	      i = 0;

	  for (; (node = nodes[i]) != null; i++) {
	    if (!keepData && node.nodeType === 1) {
	      jQuery.cleanData(getAll(node));
	    }

	    if (node.parentNode) {
	      if (keepData && jQuery.contains(node.ownerDocument, node)) {
	        setGlobalEval(getAll(node, "script"));
	      }

	      node.parentNode.removeChild(node);
	    }
	  }

	  return elem;
	}

	jQuery.extend({
	  htmlPrefilter: function htmlPrefilter(html) {
	    return html.replace(rxhtmlTag, "<$1></$2>");
	  },
	  clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
	    var i,
	        l,
	        srcElements,
	        destElements,
	        clone = elem.cloneNode(true),
	        inPage = jQuery.contains(elem.ownerDocument, elem); // Fix IE cloning issues

	    if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
	      // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
	      destElements = getAll(clone);
	      srcElements = getAll(elem);

	      for (i = 0, l = srcElements.length; i < l; i++) {
	        fixInput(srcElements[i], destElements[i]);
	      }
	    } // Copy the events from the original to the clone


	    if (dataAndEvents) {
	      if (deepDataAndEvents) {
	        srcElements = srcElements || getAll(elem);
	        destElements = destElements || getAll(clone);

	        for (i = 0, l = srcElements.length; i < l; i++) {
	          cloneCopyEvent(srcElements[i], destElements[i]);
	        }
	      } else {
	        cloneCopyEvent(elem, clone);
	      }
	    } // Preserve script evaluation history


	    destElements = getAll(clone, "script");

	    if (destElements.length > 0) {
	      setGlobalEval(destElements, !inPage && getAll(elem, "script"));
	    } // Return the cloned set


	    return clone;
	  },
	  cleanData: function cleanData(elems) {
	    var data,
	        elem,
	        type,
	        special = jQuery.event.special,
	        i = 0;

	    for (; (elem = elems[i]) !== undefined; i++) {
	      if (acceptData(elem)) {
	        if (data = elem[dataPriv.expando]) {
	          if (data.events) {
	            for (type in data.events) {
	              if (special[type]) {
	                jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead
	              } else {
	                jQuery.removeEvent(elem, type, data.handle);
	              }
	            }
	          } // Support: Chrome <=35 - 45+
	          // Assign undefined instead of using delete, see Data#remove


	          elem[dataPriv.expando] = undefined;
	        }

	        if (elem[dataUser.expando]) {
	          // Support: Chrome <=35 - 45+
	          // Assign undefined instead of using delete, see Data#remove
	          elem[dataUser.expando] = undefined;
	        }
	      }
	    }
	  }
	});
	jQuery.fn.extend({
	  detach: function detach(selector) {
	    return _remove(this, selector, true);
	  },
	  remove: function remove(selector) {
	    return _remove(this, selector);
	  },
	  text: function text(value) {
	    return access(this, function (value) {
	      return value === undefined ? jQuery.text(this) : this.empty().each(function () {
	        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
	          this.textContent = value;
	        }
	      });
	    }, null, value, arguments.length);
	  },
	  append: function append() {
	    return domManip(this, arguments, function (elem) {
	      if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
	        var target = manipulationTarget(this, elem);
	        target.appendChild(elem);
	      }
	    });
	  },
	  prepend: function prepend() {
	    return domManip(this, arguments, function (elem) {
	      if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
	        var target = manipulationTarget(this, elem);
	        target.insertBefore(elem, target.firstChild);
	      }
	    });
	  },
	  before: function before() {
	    return domManip(this, arguments, function (elem) {
	      if (this.parentNode) {
	        this.parentNode.insertBefore(elem, this);
	      }
	    });
	  },
	  after: function after() {
	    return domManip(this, arguments, function (elem) {
	      if (this.parentNode) {
	        this.parentNode.insertBefore(elem, this.nextSibling);
	      }
	    });
	  },
	  empty: function empty() {
	    var elem,
	        i = 0;

	    for (; (elem = this[i]) != null; i++) {
	      if (elem.nodeType === 1) {
	        // Prevent memory leaks
	        jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes

	        elem.textContent = "";
	      }
	    }

	    return this;
	  },
	  clone: function clone(dataAndEvents, deepDataAndEvents) {
	    dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
	    deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	    return this.map(function () {
	      return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
	    });
	  },
	  html: function html(value) {
	    return access(this, function (value) {
	      var elem = this[0] || {},
	          i = 0,
	          l = this.length;

	      if (value === undefined && elem.nodeType === 1) {
	        return elem.innerHTML;
	      } // See if we can take a shortcut and just use innerHTML


	      if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
	        value = jQuery.htmlPrefilter(value);

	        try {
	          for (; i < l; i++) {
	            elem = this[i] || {}; // Remove element nodes and prevent memory leaks

	            if (elem.nodeType === 1) {
	              jQuery.cleanData(getAll(elem, false));
	              elem.innerHTML = value;
	            }
	          }

	          elem = 0; // If using innerHTML throws an exception, use the fallback method
	        } catch (e) {}
	      }

	      if (elem) {
	        this.empty().append(value);
	      }
	    }, null, value, arguments.length);
	  },
	  replaceWith: function replaceWith() {
	    var ignored = []; // Make the changes, replacing each non-ignored context element with the new content

	    return domManip(this, arguments, function (elem) {
	      var parent = this.parentNode;

	      if (jQuery.inArray(this, ignored) < 0) {
	        jQuery.cleanData(getAll(this));

	        if (parent) {
	          parent.replaceChild(elem, this);
	        }
	      } // Force callback invocation

	    }, ignored);
	  }
	});
	jQuery.each({
	  appendTo: "append",
	  prependTo: "prepend",
	  insertBefore: "before",
	  insertAfter: "after",
	  replaceAll: "replaceWith"
	}, function (name, original) {
	  jQuery.fn[name] = function (selector) {
	    var elems,
	        ret = [],
	        insert = jQuery(selector),
	        last = insert.length - 1,
	        i = 0;

	    for (; i <= last; i++) {
	      elems = i === last ? this : this.clone(true);
	      jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only
	      // .get() because push.apply(_, arraylike) throws on ancient WebKit

	      push$1.apply(ret, elems.get());
	    }

	    return this.pushStack(ret);
	  };
	});
	var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

	var getStyles = function getStyles(elem) {
	  // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
	  // IE throws on elements created in popups
	  // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
	  var view = elem.ownerDocument.defaultView;

	  if (!view || !view.opener) {
	    view = window;
	  }

	  return view.getComputedStyle(elem);
	};

	var rboxStyle = new RegExp(cssExpand.join("|"), "i");

	(function () {
	  // Executing both pixelPosition & boxSizingReliable tests require only one layout
	  // so they're executed at the same time to save the second computation.
	  function computeStyleTests() {
	    // This is a singleton, we need to execute it only once
	    if (!div) {
	      return;
	    }

	    container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
	    div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
	    documentElement.appendChild(container).appendChild(div);
	    var divStyle = window.getComputedStyle(div);
	    pixelPositionVal = divStyle.top !== "1%"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

	    reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
	    // Some styles come back with percentage values, even though they shouldn't

	    div.style.right = "60%";
	    pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only
	    // Detect misreporting of content dimensions for box-sizing:border-box elements

	    boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only
	    // Detect overflow:scroll screwiness (gh-3699)

	    div.style.position = "absolute";
	    scrollboxSizeVal = div.offsetWidth === 36 || "absolute";
	    documentElement.removeChild(container); // Nullify the div so it wouldn't be stored in the memory and
	    // it will also be a sign that checks already performed

	    div = null;
	  }

	  function roundPixelMeasures(measure) {
	    return Math.round(parseFloat(measure));
	  }

	  var pixelPositionVal,
	      boxSizingReliableVal,
	      scrollboxSizeVal,
	      pixelBoxStylesVal,
	      reliableMarginLeftVal,
	      container = document$2.createElement("div"),
	      div = document$2.createElement("div"); // Finish early in limited (non-browser) environments

	  if (!div.style) {
	    return;
	  } // Support: IE <=9 - 11 only
	  // Style of cloned element affects source element cloned (#8908)


	  div.style.backgroundClip = "content-box";
	  div.cloneNode(true).style.backgroundClip = "";
	  support.clearCloneStyle = div.style.backgroundClip === "content-box";
	  jQuery.extend(support, {
	    boxSizingReliable: function boxSizingReliable() {
	      computeStyleTests();
	      return boxSizingReliableVal;
	    },
	    pixelBoxStyles: function pixelBoxStyles() {
	      computeStyleTests();
	      return pixelBoxStylesVal;
	    },
	    pixelPosition: function pixelPosition() {
	      computeStyleTests();
	      return pixelPositionVal;
	    },
	    reliableMarginLeft: function reliableMarginLeft() {
	      computeStyleTests();
	      return reliableMarginLeftVal;
	    },
	    scrollboxSize: function scrollboxSize() {
	      computeStyleTests();
	      return scrollboxSizeVal;
	    }
	  });
	})();

	function curCSS(elem, name, computed) {
	  var width,
	      minWidth,
	      maxWidth,
	      ret,
	      // Support: Firefox 51+
	  // Retrieving style before computed somehow
	  // fixes an issue with getting wrong values
	  // on detached elements
	  style = elem.style;
	  computed = computed || getStyles(elem); // getPropertyValue is needed for:
	  //   .css('filter') (IE 9 only, #12537)
	  //   .css('--customProperty) (#3144)

	  if (computed) {
	    ret = computed.getPropertyValue(name) || computed[name];

	    if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
	      ret = jQuery.style(elem, name);
	    } // A tribute to the "awesome hack by Dean Edwards"
	    // Android Browser returns percentage for some values,
	    // but width seems to be reliably pixels.
	    // This is against the CSSOM draft spec:
	    // https://drafts.csswg.org/cssom/#resolved-values


	    if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
	      // Remember the original values
	      width = style.width;
	      minWidth = style.minWidth;
	      maxWidth = style.maxWidth; // Put in the new values to get a computed value out

	      style.minWidth = style.maxWidth = style.width = ret;
	      ret = computed.width; // Revert the changed values

	      style.width = width;
	      style.minWidth = minWidth;
	      style.maxWidth = maxWidth;
	    }
	  }

	  return ret !== undefined ? // Support: IE <=9 - 11 only
	  // IE returns zIndex value as an integer.
	  ret + "" : ret;
	}

	function addGetHookIf(conditionFn, hookFn) {
	  // Define the hook, we'll check on the first run if it's really needed.
	  return {
	    get: function get() {
	      if (conditionFn()) {
	        // Hook not needed (or it's not possible to use it due
	        // to missing dependency), remove it.
	        delete this.get;
	        return;
	      } // Hook needed; redefine it so that the support test is not executed again.


	      return (this.get = hookFn).apply(this, arguments);
	    }
	  };
	}

	var // Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	    rcustomProp = /^--/,
	    cssShow = {
	  position: "absolute",
	  visibility: "hidden",
	  display: "block"
	},
	    cssNormalTransform = {
	  letterSpacing: "0",
	  fontWeight: "400"
	},
	    cssPrefixes = ["Webkit", "Moz", "ms"],
	    emptyStyle = document$2.createElement("div").style; // Return a css property mapped to a potentially vendor prefixed property

	function vendorPropName(name) {
	  // Shortcut for names that are not vendor prefixed
	  if (name in emptyStyle) {
	    return name;
	  } // Check for vendor prefixed names


	  var capName = name[0].toUpperCase() + name.slice(1),
	      i = cssPrefixes.length;

	  while (i--) {
	    name = cssPrefixes[i] + capName;

	    if (name in emptyStyle) {
	      return name;
	    }
	  }
	} // Return a property mapped along what jQuery.cssProps suggests or to
	// a vendor prefixed property.


	function finalPropName(name) {
	  var ret = jQuery.cssProps[name];

	  if (!ret) {
	    ret = jQuery.cssProps[name] = vendorPropName(name) || name;
	  }

	  return ret;
	}

	function setPositiveNumber(elem, value, subtract) {
	  // Any relative (+/-) values have already been
	  // normalized at this point
	  var matches = rcssNum.exec(value);
	  return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
	  Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
	}

	function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
	  var i = dimension === "width" ? 1 : 0,
	      extra = 0,
	      delta = 0; // Adjustment may not be necessary

	  if (box === (isBorderBox ? "border" : "content")) {
	    return 0;
	  }

	  for (; i < 4; i += 2) {
	    // Both box models exclude margin
	    if (box === "margin") {
	      delta += jQuery.css(elem, box + cssExpand[i], true, styles);
	    } // If we get here with a content-box, we're seeking "padding" or "border" or "margin"


	    if (!isBorderBox) {
	      // Add padding
	      delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // For "border" or "margin", add border

	      if (box !== "padding") {
	        delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // But still keep track of it otherwise
	      } else {
	        extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
	      } // If we get here with a border-box (content + padding + border), we're seeking "content" or
	      // "padding" or "margin"

	    } else {
	      // For "content", subtract padding
	      if (box === "content") {
	        delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
	      } // For "content" or "padding", subtract border


	      if (box !== "margin") {
	        delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
	      }
	    }
	  } // Account for positive content-box scroll gutter when requested by providing computedVal


	  if (!isBorderBox && computedVal >= 0) {
	    // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
	    // Assuming integer scroll gutter, subtract the rest and round down
	    delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5));
	  }

	  return delta;
	}

	function getWidthOrHeight(elem, dimension, extra) {
	  // Start with computed style
	  var styles = getStyles(elem),
	      val = curCSS(elem, dimension, styles),
	      isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box",
	      valueIsBorderBox = isBorderBox; // Support: Firefox <=54
	  // Return a confounding non-pixel value or feign ignorance, as appropriate.

	  if (rnumnonpx.test(val)) {
	    if (!extra) {
	      return val;
	    }

	    val = "auto";
	  } // Check for style in case a browser which returns unreliable values
	  // for getComputedStyle silently falls back to the reliable elem.style


	  valueIsBorderBox = valueIsBorderBox && (support.boxSizingReliable() || val === elem.style[dimension]); // Fall back to offsetWidth/offsetHeight when value is "auto"
	  // This happens for inline elements with no explicit setting (gh-3571)
	  // Support: Android <=4.1 - 4.3 only
	  // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)

	  if (val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") {
	    val = elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)]; // offsetWidth/offsetHeight provide border-box values

	    valueIsBorderBox = true;
	  } // Normalize "" and auto


	  val = parseFloat(val) || 0; // Adjust for the element's box model

	  return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)
	  val) + "px";
	}

	jQuery.extend({
	  // Add in style property hooks for overriding the default
	  // behavior of getting and setting a style property
	  cssHooks: {
	    opacity: {
	      get: function get(elem, computed) {
	        if (computed) {
	          // We should always get a number back from opacity
	          var ret = curCSS(elem, "opacity");
	          return ret === "" ? "1" : ret;
	        }
	      }
	    }
	  },
	  // Don't automatically add "px" to these possibly-unitless properties
	  cssNumber: {
	    "animationIterationCount": true,
	    "columnCount": true,
	    "fillOpacity": true,
	    "flexGrow": true,
	    "flexShrink": true,
	    "fontWeight": true,
	    "lineHeight": true,
	    "opacity": true,
	    "order": true,
	    "orphans": true,
	    "widows": true,
	    "zIndex": true,
	    "zoom": true
	  },
	  // Add in properties whose names you wish to fix before
	  // setting or getting the value
	  cssProps: {},
	  // Get and set the style property on a DOM Node
	  style: function style(elem, name, value, extra) {
	    // Don't set styles on text and comment nodes
	    if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
	      return;
	    } // Make sure that we're working with the right name


	    var ret,
	        type,
	        hooks,
	        origName = camelCase(name),
	        isCustomProp = rcustomProp.test(name),
	        style = elem.style; // Make sure that we're working with the right name. We don't
	    // want to query the value if it is a CSS custom property
	    // since they are user-defined.

	    if (!isCustomProp) {
	      name = finalPropName(origName);
	    } // Gets hook for the prefixed version, then unprefixed version


	    hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value

	    if (value !== undefined) {
	      type = _typeof(value); // Convert "+=" or "-=" to relative numbers (#7345)

	      if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
	        value = adjustCSS(elem, name, ret); // Fixes bug #9237

	        type = "number";
	      } // Make sure that null and NaN values aren't set (#7116)


	      if (value == null || value !== value) {
	        return;
	      } // If a number was passed in, add the unit (except for certain CSS properties)


	      if (type === "number") {
	        value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
	      } // background-* props affect original clone's values


	      if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
	        style[name] = "inherit";
	      } // If a hook was provided, use that value, otherwise just set the specified value


	      if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
	        if (isCustomProp) {
	          style.setProperty(name, value);
	        } else {
	          style[name] = value;
	        }
	      }
	    } else {
	      // If a hook was provided get the non-computed value from there
	      if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
	        return ret;
	      } // Otherwise just get the value from the style object


	      return style[name];
	    }
	  },
	  css: function css(elem, name, extra, styles) {
	    var val,
	        num,
	        hooks,
	        origName = camelCase(name),
	        isCustomProp = rcustomProp.test(name); // Make sure that we're working with the right name. We don't
	    // want to modify the value if it is a CSS custom property
	    // since they are user-defined.

	    if (!isCustomProp) {
	      name = finalPropName(origName);
	    } // Try prefixed name followed by the unprefixed name


	    hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there

	    if (hooks && "get" in hooks) {
	      val = hooks.get(elem, true, extra);
	    } // Otherwise, if a way to get the computed value exists, use that


	    if (val === undefined) {
	      val = curCSS(elem, name, styles);
	    } // Convert "normal" to computed value


	    if (val === "normal" && name in cssNormalTransform) {
	      val = cssNormalTransform[name];
	    } // Make numeric if forced or a qualifier was provided and val looks numeric


	    if (extra === "" || extra) {
	      num = parseFloat(val);
	      return extra === true || isFinite(num) ? num || 0 : val;
	    }

	    return val;
	  }
	});
	jQuery.each(["height", "width"], function (i, dimension) {
	  jQuery.cssHooks[dimension] = {
	    get: function get(elem, computed, extra) {
	      if (computed) {
	        // Certain elements can have dimension info if we invisibly show them
	        // but it must have a current display style that would benefit
	        return rdisplayswap.test(jQuery.css(elem, "display")) && ( // Support: Safari 8+
	        // Table columns in Safari have non-zero offsetWidth & zero
	        // getBoundingClientRect().width unless display is changed.
	        // Support: IE <=11 only
	        // Running getBoundingClientRect on a disconnected node
	        // in IE throws an error.
	        !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
	          return getWidthOrHeight(elem, dimension, extra);
	        }) : getWidthOrHeight(elem, dimension, extra);
	      }
	    },
	    set: function set(elem, value, extra) {
	      var matches,
	          styles = getStyles(elem),
	          isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box",
	          subtract = extra && boxModelAdjustment(elem, dimension, extra, isBorderBox, styles); // Account for unreliable border-box dimensions by comparing offset* to computed and
	      // faking a content-box to get border and padding (gh-3699)

	      if (isBorderBox && support.scrollboxSize() === styles.position) {
	        subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
	      } // Convert to pixels if value adjustment is needed


	      if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
	        elem.style[dimension] = value;
	        value = jQuery.css(elem, dimension);
	      }

	      return setPositiveNumber(elem, value, subtract);
	    }
	  };
	});
	jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
	  if (computed) {
	    return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
	      marginLeft: 0
	    }, function () {
	      return elem.getBoundingClientRect().left;
	    })) + "px";
	  }
	}); // These hooks are used by animate to expand properties

	jQuery.each({
	  margin: "",
	  padding: "",
	  border: "Width"
	}, function (prefix, suffix) {
	  jQuery.cssHooks[prefix + suffix] = {
	    expand: function expand(value) {
	      var i = 0,
	          expanded = {},
	          // Assumes a single number if not a string
	      parts = typeof value === "string" ? value.split(" ") : [value];

	      for (; i < 4; i++) {
	        expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
	      }

	      return expanded;
	    }
	  };

	  if (prefix !== "margin") {
	    jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
	  }
	});
	jQuery.fn.extend({
	  css: function css(name, value) {
	    return access(this, function (elem, name, value) {
	      var styles,
	          len,
	          map = {},
	          i = 0;

	      if (Array.isArray(name)) {
	        styles = getStyles(elem);
	        len = name.length;

	        for (; i < len; i++) {
	          map[name[i]] = jQuery.css(elem, name[i], false, styles);
	        }

	        return map;
	      }

	      return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
	    }, name, value, arguments.length > 1);
	  }
	}); // Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

	jQuery.fn.delay = function (time, type) {
	  time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
	  type = type || "fx";
	  return this.queue(type, function (next, hooks) {
	    var timeout = window.setTimeout(next, time);

	    hooks.stop = function () {
	      window.clearTimeout(timeout);
	    };
	  });
	};

	(function () {
	  var input = document$2.createElement("input"),
	      select = document$2.createElement("select"),
	      opt = select.appendChild(document$2.createElement("option"));
	  input.type = "checkbox"; // Support: Android <=4.3 only
	  // Default value for a checkbox should be "on"

	  support.checkOn = input.value !== ""; // Support: IE <=11 only
	  // Must access selectedIndex to make default options select

	  support.optSelected = opt.selected; // Support: IE <=11 only
	  // An input loses its value after becoming a radio

	  input = document$2.createElement("input");
	  input.value = "t";
	  input.type = "radio";
	  support.radioValue = input.value === "t";
	})();

	var boolHook,
	    attrHandle = jQuery.expr.attrHandle;
	jQuery.fn.extend({
	  attr: function attr(name, value) {
	    return access(this, jQuery.attr, name, value, arguments.length > 1);
	  },
	  removeAttr: function removeAttr(name) {
	    return this.each(function () {
	      jQuery.removeAttr(this, name);
	    });
	  }
	});
	jQuery.extend({
	  attr: function attr(elem, name, value) {
	    var ret,
	        hooks,
	        nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes

	    if (nType === 3 || nType === 8 || nType === 2) {
	      return;
	    } // Fallback to prop when attributes are not supported


	    if (typeof elem.getAttribute === "undefined") {
	      return jQuery.prop(elem, name, value);
	    } // Attribute hooks are determined by the lowercase version
	    // Grab necessary hook if one is defined


	    if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
	      hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
	    }

	    if (value !== undefined) {
	      if (value === null) {
	        jQuery.removeAttr(elem, name);
	        return;
	      }

	      if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
	        return ret;
	      }

	      elem.setAttribute(name, value + "");
	      return value;
	    }

	    if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
	      return ret;
	    }

	    ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined

	    return ret == null ? undefined : ret;
	  },
	  attrHooks: {
	    type: {
	      set: function set(elem, value) {
	        if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
	          var val = elem.value;
	          elem.setAttribute("type", value);

	          if (val) {
	            elem.value = val;
	          }

	          return value;
	        }
	      }
	    }
	  },
	  removeAttr: function removeAttr(elem, value) {
	    var name,
	        i = 0,
	        // Attribute names can contain non-HTML whitespace characters
	    // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
	    attrNames = value && value.match(rnothtmlwhite);

	    if (attrNames && elem.nodeType === 1) {
	      while (name = attrNames[i++]) {
	        elem.removeAttribute(name);
	      }
	    }
	  }
	}); // Hooks for boolean attributes

	boolHook = {
	  set: function set(elem, value, name) {
	    if (value === false) {
	      // Remove boolean attributes when set to false
	      jQuery.removeAttr(elem, name);
	    } else {
	      elem.setAttribute(name, name);
	    }

	    return name;
	  }
	};
	jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
	  var getter = attrHandle[name] || jQuery.find.attr;

	  attrHandle[name] = function (elem, name, isXML) {
	    var ret,
	        handle,
	        lowercaseName = name.toLowerCase();

	    if (!isXML) {
	      // Avoid an infinite loop by temporarily removing this function from the getter
	      handle = attrHandle[lowercaseName];
	      attrHandle[lowercaseName] = ret;
	      ret = getter(elem, name, isXML) != null ? lowercaseName : null;
	      attrHandle[lowercaseName] = handle;
	    }

	    return ret;
	  };
	});
	var rfocusable = /^(?:input|select|textarea|button)$/i,
	    rclickable = /^(?:a|area)$/i;
	jQuery.fn.extend({
	  prop: function prop(name, value) {
	    return access(this, jQuery.prop, name, value, arguments.length > 1);
	  },
	  removeProp: function removeProp(name) {
	    return this.each(function () {
	      delete this[jQuery.propFix[name] || name];
	    });
	  }
	});
	jQuery.extend({
	  prop: function prop(elem, name, value) {
	    var ret,
	        hooks,
	        nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes

	    if (nType === 3 || nType === 8 || nType === 2) {
	      return;
	    }

	    if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
	      // Fix name and attach hooks
	      name = jQuery.propFix[name] || name;
	      hooks = jQuery.propHooks[name];
	    }

	    if (value !== undefined) {
	      if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
	        return ret;
	      }

	      return elem[name] = value;
	    }

	    if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
	      return ret;
	    }

	    return elem[name];
	  },
	  propHooks: {
	    tabIndex: {
	      get: function get(elem) {
	        // Support: IE <=9 - 11 only
	        // elem.tabIndex doesn't always return the
	        // correct value when it hasn't been explicitly set
	        // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
	        // Use proper attribute retrieval(#12072)
	        var tabindex = jQuery.find.attr(elem, "tabindex");

	        if (tabindex) {
	          return parseInt(tabindex, 10);
	        }

	        if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
	          return 0;
	        }

	        return -1;
	      }
	    }
	  },
	  propFix: {
	    "for": "htmlFor",
	    "class": "className"
	  }
	}); // Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop

	if (!support.optSelected) {
	  jQuery.propHooks.selected = {
	    get: function get(elem) {
	      /* eslint no-unused-expressions: "off" */
	      var parent = elem.parentNode;

	      if (parent && parent.parentNode) {
	        parent.parentNode.selectedIndex;
	      }

	      return null;
	    },
	    set: function set(elem) {
	      /* eslint no-unused-expressions: "off" */
	      var parent = elem.parentNode;

	      if (parent) {
	        parent.selectedIndex;

	        if (parent.parentNode) {
	          parent.parentNode.selectedIndex;
	        }
	      }
	    }
	  };
	}

	jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
	  jQuery.propFix[this.toLowerCase()] = this;
	}); // Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

	function stripAndCollapse(value) {
	  var tokens = value.match(rnothtmlwhite) || [];
	  return tokens.join(" ");
	}

	function getClass(elem) {
	  return elem.getAttribute && elem.getAttribute("class") || "";
	}

	function classesToArray(value) {
	  if (Array.isArray(value)) {
	    return value;
	  }

	  if (typeof value === "string") {
	    return value.match(rnothtmlwhite) || [];
	  }

	  return [];
	}

	jQuery.fn.extend({
	  addClass: function addClass(value) {
	    var classes,
	        elem,
	        cur,
	        curValue,
	        clazz,
	        j,
	        finalValue,
	        i = 0;

	    if (isFunction(value)) {
	      return this.each(function (j) {
	        jQuery(this).addClass(value.call(this, j, getClass(this)));
	      });
	    }

	    classes = classesToArray(value);

	    if (classes.length) {
	      while (elem = this[i++]) {
	        curValue = getClass(elem);
	        cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

	        if (cur) {
	          j = 0;

	          while (clazz = classes[j++]) {
	            if (cur.indexOf(" " + clazz + " ") < 0) {
	              cur += clazz + " ";
	            }
	          } // Only assign if different to avoid unneeded rendering.


	          finalValue = stripAndCollapse(cur);

	          if (curValue !== finalValue) {
	            elem.setAttribute("class", finalValue);
	          }
	        }
	      }
	    }

	    return this;
	  },
	  removeClass: function removeClass(value) {
	    var classes,
	        elem,
	        cur,
	        curValue,
	        clazz,
	        j,
	        finalValue,
	        i = 0;

	    if (isFunction(value)) {
	      return this.each(function (j) {
	        jQuery(this).removeClass(value.call(this, j, getClass(this)));
	      });
	    }

	    if (!arguments.length) {
	      return this.attr("class", "");
	    }

	    classes = classesToArray(value);

	    if (classes.length) {
	      while (elem = this[i++]) {
	        curValue = getClass(elem); // This expression is here for better compressibility (see addClass)

	        cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

	        if (cur) {
	          j = 0;

	          while (clazz = classes[j++]) {
	            // Remove *all* instances
	            while (cur.indexOf(" " + clazz + " ") > -1) {
	              cur = cur.replace(" " + clazz + " ", " ");
	            }
	          } // Only assign if different to avoid unneeded rendering.


	          finalValue = stripAndCollapse(cur);

	          if (curValue !== finalValue) {
	            elem.setAttribute("class", finalValue);
	          }
	        }
	      }
	    }

	    return this;
	  },
	  toggleClass: function toggleClass(value, stateVal) {
	    var type = _typeof(value),
	        isValidValue = type === "string" || Array.isArray(value);

	    if (typeof stateVal === "boolean" && isValidValue) {
	      return stateVal ? this.addClass(value) : this.removeClass(value);
	    }

	    if (isFunction(value)) {
	      return this.each(function (i) {
	        jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
	      });
	    }

	    return this.each(function () {
	      var className, i, self, classNames;

	      if (isValidValue) {
	        // Toggle individual class names
	        i = 0;
	        self = jQuery(this);
	        classNames = classesToArray(value);

	        while (className = classNames[i++]) {
	          // Check each className given, space separated list
	          if (self.hasClass(className)) {
	            self.removeClass(className);
	          } else {
	            self.addClass(className);
	          }
	        } // Toggle whole class name

	      } else if (value === undefined || type === "boolean") {
	        className = getClass(this);

	        if (className) {
	          // Store className if set
	          dataPriv.set(this, "__className__", className);
	        } // If the element has a class name or if we're passed `false`,
	        // then remove the whole classname (if there was one, the above saved it).
	        // Otherwise bring back whatever was previously saved (if anything),
	        // falling back to the empty string if nothing was stored.


	        if (this.setAttribute) {
	          this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
	        }
	      }
	    });
	  },
	  hasClass: function hasClass(selector) {
	    var className,
	        elem,
	        i = 0;
	    className = " " + selector + " ";

	    while (elem = this[i++]) {
	      if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
	        return true;
	      }
	    }

	    return false;
	  }
	});
	var rreturn = /\r/g;
	jQuery.fn.extend({
	  val: function val(value) {
	    var hooks,
	        ret,
	        valueIsFunction,
	        elem = this[0];

	    if (!arguments.length) {
	      if (elem) {
	        hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

	        if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
	          return ret;
	        }

	        ret = elem.value; // Handle most common string cases

	        if (typeof ret === "string") {
	          return ret.replace(rreturn, "");
	        } // Handle cases where value is null/undef or number


	        return ret == null ? "" : ret;
	      }

	      return;
	    }

	    valueIsFunction = isFunction(value);
	    return this.each(function (i) {
	      var val;

	      if (this.nodeType !== 1) {
	        return;
	      }

	      if (valueIsFunction) {
	        val = value.call(this, i, jQuery(this).val());
	      } else {
	        val = value;
	      } // Treat null/undefined as ""; convert numbers to string


	      if (val == null) {
	        val = "";
	      } else if (typeof val === "number") {
	        val += "";
	      } else if (Array.isArray(val)) {
	        val = jQuery.map(val, function (value) {
	          return value == null ? "" : value + "";
	        });
	      }

	      hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting

	      if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
	        this.value = val;
	      }
	    });
	  }
	});
	jQuery.extend({
	  valHooks: {
	    option: {
	      get: function get(elem) {
	        var val = jQuery.find.attr(elem, "value");
	        return val != null ? val : // Support: IE <=10 - 11 only
	        // option.text throws exceptions (#14686, #14858)
	        // Strip and collapse whitespace
	        // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
	        stripAndCollapse(jQuery.text(elem));
	      }
	    },
	    select: {
	      get: function get(elem) {
	        var value,
	            option,
	            i,
	            options = elem.options,
	            index = elem.selectedIndex,
	            one = elem.type === "select-one",
	            values = one ? null : [],
	            max = one ? index + 1 : options.length;

	        if (index < 0) {
	          i = max;
	        } else {
	          i = one ? index : 0;
	        } // Loop through all the selected options


	        for (; i < max; i++) {
	          option = options[i]; // Support: IE <=9 only
	          // IE8-9 doesn't update selected after form reset (#2551)

	          if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
	          !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
	            // Get the specific value for the option
	            value = jQuery(option).val(); // We don't need an array for one selects

	            if (one) {
	              return value;
	            } // Multi-Selects return an array


	            values.push(value);
	          }
	        }

	        return values;
	      },
	      set: function set(elem, value) {
	        var optionSet,
	            option,
	            options = elem.options,
	            values = jQuery.makeArray(value),
	            i = options.length;

	        while (i--) {
	          option = options[i];
	          /* eslint-disable no-cond-assign */

	          if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
	            optionSet = true;
	          }
	          /* eslint-enable no-cond-assign */

	        } // Force browsers to behave consistently when non-matching value is set


	        if (!optionSet) {
	          elem.selectedIndex = -1;
	        }

	        return values;
	      }
	    }
	  }
	}); // Radios and checkboxes getter/setter

	jQuery.each(["radio", "checkbox"], function () {
	  jQuery.valHooks[this] = {
	    set: function set(elem, value) {
	      if (Array.isArray(value)) {
	        return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
	      }
	    }
	  };

	  if (!support.checkOn) {
	    jQuery.valHooks[this].get = function (elem) {
	      return elem.getAttribute("value") === null ? "on" : elem.value;
	    };
	  }
	}); // Return jQuery for attributes-only inclusion

	support.focusin = "onfocusin" in window;

	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	    stopPropagationCallback = function stopPropagationCallback(e) {
	  e.stopPropagation();
	};

	jQuery.extend(jQuery.event, {
	  trigger: function trigger(event, data, elem, onlyHandlers) {
	    var i,
	        cur,
	        tmp,
	        bubbleType,
	        ontype,
	        handle,
	        special,
	        lastElement,
	        eventPath = [elem || document$2],
	        type = hasOwn.call(event, "type") ? event.type : event,
	        namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
	    cur = lastElement = tmp = elem = elem || document$2; // Don't do events on text and comment nodes

	    if (elem.nodeType === 3 || elem.nodeType === 8) {
	      return;
	    } // focus/blur morphs to focusin/out; ensure we're not firing them right now


	    if (rfocusMorph.test(type + jQuery.event.triggered)) {
	      return;
	    }

	    if (type.indexOf(".") > -1) {
	      // Namespaced trigger; create a regexp to match event type in handle()
	      namespaces = type.split(".");
	      type = namespaces.shift();
	      namespaces.sort();
	    }

	    ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string

	    event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

	    event.isTrigger = onlyHandlers ? 2 : 3;
	    event.namespace = namespaces.join(".");
	    event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null; // Clean up the event in case it is being reused

	    event.result = undefined;

	    if (!event.target) {
	      event.target = elem;
	    } // Clone any incoming data and prepend the event, creating the handler arg list


	    data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines

	    special = jQuery.event.special[type] || {};

	    if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
	      return;
	    } // Determine event propagation path in advance, per W3C events spec (#9951)
	    // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)


	    if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
	      bubbleType = special.delegateType || type;

	      if (!rfocusMorph.test(bubbleType + type)) {
	        cur = cur.parentNode;
	      }

	      for (; cur; cur = cur.parentNode) {
	        eventPath.push(cur);
	        tmp = cur;
	      } // Only add window if we got to document (e.g., not plain obj or detached DOM)


	      if (tmp === (elem.ownerDocument || document$2)) {
	        eventPath.push(tmp.defaultView || tmp.parentWindow || window);
	      }
	    } // Fire handlers on the event path


	    i = 0;

	    while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
	      lastElement = cur;
	      event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler

	      handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");

	      if (handle) {
	        handle.apply(cur, data);
	      } // Native handler


	      handle = ontype && cur[ontype];

	      if (handle && handle.apply && acceptData(cur)) {
	        event.result = handle.apply(cur, data);

	        if (event.result === false) {
	          event.preventDefault();
	        }
	      }
	    }

	    event.type = type; // If nobody prevented the default action, do it now

	    if (!onlyHandlers && !event.isDefaultPrevented()) {
	      if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
	        // Call a native DOM method on the target with the same name as the event.
	        // Don't do default actions on window, that's where global variables be (#6170)
	        if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
	          // Don't re-trigger an onFOO event when we call its FOO() method
	          tmp = elem[ontype];

	          if (tmp) {
	            elem[ontype] = null;
	          } // Prevent re-triggering of the same event, since we already bubbled it above


	          jQuery.event.triggered = type;

	          if (event.isPropagationStopped()) {
	            lastElement.addEventListener(type, stopPropagationCallback);
	          }

	          elem[type]();

	          if (event.isPropagationStopped()) {
	            lastElement.removeEventListener(type, stopPropagationCallback);
	          }

	          jQuery.event.triggered = undefined;

	          if (tmp) {
	            elem[ontype] = tmp;
	          }
	        }
	      }
	    }

	    return event.result;
	  },
	  // Piggyback on a donor event to simulate a different one
	  // Used only for `focus(in | out)` events
	  simulate: function simulate(type, elem, event) {
	    var e = jQuery.extend(new jQuery.Event(), event, {
	      type: type,
	      isSimulated: true
	    });
	    jQuery.event.trigger(e, null, elem);
	  }
	});
	jQuery.fn.extend({
	  trigger: function trigger(type, data) {
	    return this.each(function () {
	      jQuery.event.trigger(type, data, this);
	    });
	  },
	  triggerHandler: function triggerHandler(type, data) {
	    var elem = this[0];

	    if (elem) {
	      return jQuery.event.trigger(type, data, elem, true);
	    }
	  }
	}); // Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

	if (!support.focusin) {
	  jQuery.each({
	    focus: "focusin",
	    blur: "focusout"
	  }, function (orig, fix) {
	    // Attach a single capturing handler on the document while someone wants focusin/focusout
	    var handler = function handler(event) {
	      jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
	    };

	    jQuery.event.special[fix] = {
	      setup: function setup() {
	        var doc = this.ownerDocument || this,
	            attaches = dataPriv.access(doc, fix);

	        if (!attaches) {
	          doc.addEventListener(orig, handler, true);
	        }

	        dataPriv.access(doc, fix, (attaches || 0) + 1);
	      },
	      teardown: function teardown() {
	        var doc = this.ownerDocument || this,
	            attaches = dataPriv.access(doc, fix) - 1;

	        if (!attaches) {
	          doc.removeEventListener(orig, handler, true);
	          dataPriv.remove(doc, fix);
	        } else {
	          dataPriv.access(doc, fix, attaches);
	        }
	      }
	    };
	  });
	}

	var rbracket = /\[\]$/,
	    rCRLF = /\r?\n/g,
	    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	    rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams(prefix, obj, traditional, add) {
	  var name;

	  if (Array.isArray(obj)) {
	    // Serialize array item.
	    jQuery.each(obj, function (i, v) {
	      if (traditional || rbracket.test(prefix)) {
	        // Treat each array item as a scalar.
	        add(prefix, v);
	      } else {
	        // Item is non-scalar (array or object), encode its numeric index.
	        buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
	      }
	    });
	  } else if (!traditional && toType(obj) === "object") {
	    // Serialize object item.
	    for (name in obj) {
	      buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
	    }
	  } else {
	    // Serialize scalar item.
	    add(prefix, obj);
	  }
	} // Serialize an array of form elements or a set of
	// key/values into a query string


	jQuery.param = function (a, traditional) {
	  var prefix,
	      s = [],
	      add = function add(key, valueOrFunction) {
	    // If value is a function, invoke it and use its return value
	    var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
	    s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
	  }; // If an array was passed in, assume that it is an array of form elements.


	  if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
	    // Serialize the form elements
	    jQuery.each(a, function () {
	      add(this.name, this.value);
	    });
	  } else {
	    // If traditional, encode the "old" way (the way 1.3.2 or older
	    // did it), otherwise encode params recursively.
	    for (prefix in a) {
	      buildParams(prefix, a[prefix], traditional, add);
	    }
	  } // Return the resulting serialization


	  return s.join("&");
	};

	jQuery.fn.extend({
	  serialize: function serialize() {
	    return jQuery.param(this.serializeArray());
	  },
	  serializeArray: function serializeArray() {
	    return this.map(function () {
	      // Can add propHook for "elements" to filter or add form elements
	      var elements = jQuery.prop(this, "elements");
	      return elements ? jQuery.makeArray(elements) : this;
	    }).filter(function () {
	      var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works

	      return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
	    }).map(function (i, elem) {
	      var val = jQuery(this).val();

	      if (val == null) {
	        return null;
	      }

	      if (Array.isArray(val)) {
	        return jQuery.map(val, function (val) {
	          return {
	            name: elem.name,
	            value: val.replace(rCRLF, "\r\n")
	          };
	        });
	      }

	      return {
	        name: elem.name,
	        value: val.replace(rCRLF, "\r\n")
	      };
	    }).get();
	  }
	});
	jQuery.fn.extend({
	  wrapAll: function wrapAll(html) {
	    var wrap;

	    if (this[0]) {
	      if (isFunction(html)) {
	        html = html.call(this[0]);
	      } // The elements to wrap the target around


	      wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

	      if (this[0].parentNode) {
	        wrap.insertBefore(this[0]);
	      }

	      wrap.map(function () {
	        var elem = this;

	        while (elem.firstElementChild) {
	          elem = elem.firstElementChild;
	        }

	        return elem;
	      }).append(this);
	    }

	    return this;
	  },
	  wrapInner: function wrapInner(html) {
	    if (isFunction(html)) {
	      return this.each(function (i) {
	        jQuery(this).wrapInner(html.call(this, i));
	      });
	    }

	    return this.each(function () {
	      var self = jQuery(this),
	          contents = self.contents();

	      if (contents.length) {
	        contents.wrapAll(html);
	      } else {
	        self.append(html);
	      }
	    });
	  },
	  wrap: function wrap(html) {
	    var htmlIsFunction = isFunction(html);
	    return this.each(function (i) {
	      jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
	    });
	  },
	  unwrap: function unwrap(selector) {
	    this.parent(selector).not("body").each(function () {
	      jQuery(this).replaceWith(this.childNodes);
	    });
	    return this;
	  }
	});

	jQuery.expr.pseudos.hidden = function (elem) {
	  return !jQuery.expr.pseudos.visible(elem);
	};

	jQuery.expr.pseudos.visible = function (elem) {
	  return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
	}; // Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337


	support.createHTMLDocument = function () {
	  var body = document$2.implementation.createHTMLDocument("").body;
	  body.innerHTML = "<form></form><form></form>";
	  return body.childNodes.length === 2;
	}(); // Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string


	jQuery.parseHTML = function (data, context, keepScripts) {
	  if (typeof data !== "string") {
	    return [];
	  }

	  if (typeof context === "boolean") {
	    keepScripts = context;
	    context = false;
	  }

	  var base, parsed, scripts;

	  if (!context) {
	    // Stop scripts or inline event handlers from being executed immediately
	    // by using document.implementation
	    if (support.createHTMLDocument) {
	      context = document$2.implementation.createHTMLDocument(""); // Set the base href for the created document
	      // so any parsed elements with URLs
	      // are based on the document's URL (gh-2965)

	      base = context.createElement("base");
	      base.href = document$2.location.href;
	      context.head.appendChild(base);
	    } else {
	      context = document$2;
	    }
	  }

	  parsed = rsingleTag.exec(data);
	  scripts = !keepScripts && []; // Single tag

	  if (parsed) {
	    return [context.createElement(parsed[1])];
	  }

	  parsed = buildFragment([data], context, scripts);

	  if (scripts && scripts.length) {
	    jQuery(scripts).remove();
	  }

	  return jQuery.merge([], parsed.childNodes);
	};

	jQuery.offset = {
	  setOffset: function setOffset(elem, options, i) {
	    var curPosition,
	        curLeft,
	        curCSSTop,
	        curTop,
	        curOffset,
	        curCSSLeft,
	        calculatePosition,
	        position = jQuery.css(elem, "position"),
	        curElem = jQuery(elem),
	        props = {}; // Set position first, in-case top/left are set even on static elem

	    if (position === "static") {
	      elem.style.position = "relative";
	    }

	    curOffset = curElem.offset();
	    curCSSTop = jQuery.css(elem, "top");
	    curCSSLeft = jQuery.css(elem, "left");
	    calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either
	    // top or left is auto and position is either absolute or fixed

	    if (calculatePosition) {
	      curPosition = curElem.position();
	      curTop = curPosition.top;
	      curLeft = curPosition.left;
	    } else {
	      curTop = parseFloat(curCSSTop) || 0;
	      curLeft = parseFloat(curCSSLeft) || 0;
	    }

	    if (isFunction(options)) {
	      // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
	      options = options.call(elem, i, jQuery.extend({}, curOffset));
	    }

	    if (options.top != null) {
	      props.top = options.top - curOffset.top + curTop;
	    }

	    if (options.left != null) {
	      props.left = options.left - curOffset.left + curLeft;
	    }

	    if ("using" in options) {
	      options.using.call(elem, props);
	    } else {
	      curElem.css(props);
	    }
	  }
	};
	jQuery.fn.extend({
	  // offset() relates an element's border box to the document origin
	  offset: function offset(options) {
	    // Preserve chaining for setter
	    if (arguments.length) {
	      return options === undefined ? this : this.each(function (i) {
	        jQuery.offset.setOffset(this, options, i);
	      });
	    }

	    var rect,
	        win,
	        elem = this[0];

	    if (!elem) {
	      return;
	    } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
	    // Support: IE <=11 only
	    // Running getBoundingClientRect on a
	    // disconnected node in IE throws an error


	    if (!elem.getClientRects().length) {
	      return {
	        top: 0,
	        left: 0
	      };
	    } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


	    rect = elem.getBoundingClientRect();
	    win = elem.ownerDocument.defaultView;
	    return {
	      top: rect.top + win.pageYOffset,
	      left: rect.left + win.pageXOffset
	    };
	  },
	  // position() relates an element's margin box to its offset parent's padding box
	  // This corresponds to the behavior of CSS absolute positioning
	  position: function position() {
	    if (!this[0]) {
	      return;
	    }

	    var offsetParent,
	        offset,
	        doc,
	        elem = this[0],
	        parentOffset = {
	      top: 0,
	      left: 0
	    }; // position:fixed elements are offset from the viewport, which itself always has zero offset

	    if (jQuery.css(elem, "position") === "fixed") {
	      // Assume position:fixed implies availability of getBoundingClientRect
	      offset = elem.getBoundingClientRect();
	    } else {
	      offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element
	      // when a statically positioned element is identified

	      doc = elem.ownerDocument;
	      offsetParent = elem.offsetParent || doc.documentElement;

	      while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
	        offsetParent = offsetParent.parentNode;
	      }

	      if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
	        // Incorporate borders into its offset, since they are outside its content origin
	        parentOffset = jQuery(offsetParent).offset();
	        parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
	        parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
	      }
	    } // Subtract parent offsets and element margins


	    return {
	      top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
	      left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
	    };
	  },
	  // This method will return documentElement in the following cases:
	  // 1) For the element inside the iframe without offsetParent, this method will return
	  //    documentElement of the parent window
	  // 2) For the hidden or detached element
	  // 3) For body or html element, i.e. in case of the html node - it will return itself
	  //
	  // but those exceptions were never presented as a real life use-cases
	  // and might be considered as more preferable results.
	  //
	  // This logic, however, is not guaranteed and can change at any point in the future
	  offsetParent: function offsetParent() {
	    return this.map(function () {
	      var offsetParent = this.offsetParent;

	      while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
	        offsetParent = offsetParent.offsetParent;
	      }

	      return offsetParent || documentElement;
	    });
	  }
	}); // Create scrollLeft and scrollTop methods

	jQuery.each({
	  scrollLeft: "pageXOffset",
	  scrollTop: "pageYOffset"
	}, function (method, prop) {
	  var top = "pageYOffset" === prop;

	  jQuery.fn[method] = function (val) {
	    return access(this, function (elem, method, val) {
	      // Coalesce documents and windows
	      var win;

	      if (isWindow(elem)) {
	        win = elem;
	      } else if (elem.nodeType === 9) {
	        win = elem.defaultView;
	      }

	      if (val === undefined) {
	        return win ? win[prop] : elem[method];
	      }

	      if (win) {
	        win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
	      } else {
	        elem[method] = val;
	      }
	    }, method, val, arguments.length);
	  };
	}); // Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here

	jQuery.each(["top", "left"], function (i, prop) {
	  jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
	    if (computed) {
	      computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset

	      return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
	    }
	  });
	}); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

	jQuery.each({
	  Height: "height",
	  Width: "width"
	}, function (name, type) {
	  jQuery.each({
	    padding: "inner" + name,
	    content: type,
	    "": "outer" + name
	  }, function (defaultExtra, funcName) {
	    // Margin is only for outerHeight, outerWidth
	    jQuery.fn[funcName] = function (margin, value) {
	      var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
	          extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
	      return access(this, function (elem, type, value) {
	        var doc;

	        if (isWindow(elem)) {
	          // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
	          return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
	        } // Get document width or height


	        if (elem.nodeType === 9) {
	          doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
	          // whichever is greatest

	          return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
	        }

	        return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
	        jQuery.css(elem, type, extra) : // Set width or height on the element
	        jQuery.style(elem, type, value, extra);
	      }, type, chainable ? margin : undefined, chainable);
	    };
	  });
	});
	jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {
	  // Handle event binding
	  jQuery.fn[name] = function (data, fn) {
	    return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
	  };
	});
	jQuery.fn.extend({
	  hover: function hover(fnOver, fnOut) {
	    return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
	  }
	});
	jQuery.fn.extend({
	  bind: function bind(types, data, fn) {
	    return this.on(types, null, data, fn);
	  },
	  unbind: function unbind(types, fn) {
	    return this.off(types, null, fn);
	  },
	  delegate: function delegate(selector, types, data, fn) {
	    return this.on(types, selector, data, fn);
	  },
	  undelegate: function undelegate(selector, types, fn) {
	    // ( namespace ) or ( selector, types [, fn] )
	    return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
	  }
	}); // Bind a function to a context, optionally partially applying any
	// arguments.
	// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
	// However, it is not slated for removal any time soon

	jQuery.proxy = function (fn, context) {
	  var tmp, args, proxy;

	  if (typeof context === "string") {
	    tmp = fn[context];
	    context = fn;
	    fn = tmp;
	  } // Quick check to determine if target is callable, in the spec
	  // this throws a TypeError, but we will just return undefined.


	  if (!isFunction(fn)) {
	    return undefined;
	  } // Simulated bind


	  args = _slice.call(arguments, 2);

	  proxy = function proxy() {
	    return fn.apply(context || this, args.concat(_slice.call(arguments)));
	  }; // Set the guid of unique handler to the same of original handler, so it can be removed


	  proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	  return proxy;
	};

	jQuery.holdReady = function (hold) {
	  if (hold) {
	    jQuery.readyWait++;
	  } else {
	    jQuery.ready(true);
	  }
	};

	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;
	jQuery.isFunction = isFunction;
	jQuery.isWindow = isWindow;
	jQuery.camelCase = camelCase;
	jQuery.type = toType;
	jQuery.now = Date.now;

	jQuery.isNumeric = function (obj) {
	  // As of jQuery 3.0, isNumeric is limited to
	  // strings and numbers (primitives or objects)
	  // that can be coerced to finite numbers (gh-2662)
	  var type = jQuery.type(obj);
	  return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
	  // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
	  // subtraction forces infinities to NaN
	  !isNaN(obj - parseFloat(obj));
	};

	var $ = jQuery;

	// a string of all valid unicode whitespaces
	// eslint-disable-next-line max-len
	var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var whitespace = '[' + whitespaces + ']';
	var ltrim = RegExp('^' + whitespace + whitespace + '*');
	var rtrim$1 = RegExp(whitespace + whitespace + '*$'); // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation

	var createMethod$3 = function (TYPE) {
	  return function ($this) {
	    var string = String(requireObjectCoercible($this));
	    if (TYPE & 1) string = string.replace(ltrim, '');
	    if (TYPE & 2) string = string.replace(rtrim$1, '');
	    return string;
	  };
	};

	var stringTrim = {
	  // `String.prototype.{ trimLeft, trimStart }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
	  start: createMethod$3(1),
	  // `String.prototype.{ trimRight, trimEnd }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
	  end: createMethod$3(2),
	  // `String.prototype.trim` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trim
	  trim: createMethod$3(3)
	};

	var getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
	var getOwnPropertyDescriptor$3 = objectGetOwnPropertyDescriptor.f;
	var defineProperty$6 = objectDefineProperty.f;
	var trim = stringTrim.trim;
	var NUMBER = 'Number';
	var NativeNumber = global_1[NUMBER];
	var NumberPrototype = NativeNumber.prototype; // Opera ~12 has broken Object#toString

	var BROKEN_CLASSOF = classofRaw(objectCreate(NumberPrototype)) == NUMBER; // `ToNumber` abstract operation
	// https://tc39.github.io/ecma262/#sec-tonumber

	var toNumber = function (argument) {
	  var it = toPrimitive(argument, false);
	  var first, third, radix, maxCode, digits, length, index, code;

	  if (typeof it == 'string' && it.length > 2) {
	    it = trim(it);
	    first = it.charCodeAt(0);

	    if (first === 43 || first === 45) {
	      third = it.charCodeAt(2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (it.charCodeAt(1)) {
	        case 66:
	        case 98:
	          radix = 2;
	          maxCode = 49;
	          break;
	        // fast equal of /^0b[01]+$/i

	        case 79:
	        case 111:
	          radix = 8;
	          maxCode = 55;
	          break;
	        // fast equal of /^0o[0-7]+$/i

	        default:
	          return +it;
	      }

	      digits = it.slice(2);
	      length = digits.length;

	      for (index = 0; index < length; index++) {
	        code = digits.charCodeAt(index); // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols

	        if (code < 48 || code > maxCode) return NaN;
	      }

	      return parseInt(digits, radix);
	    }
	  }

	  return +it;
	}; // `Number` constructor
	// https://tc39.github.io/ecma262/#sec-number-constructor


	if (isForced_1(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
	  var NumberWrapper = function Number(value) {
	    var it = arguments.length < 1 ? 0 : value;
	    var dummy = this;
	    return dummy instanceof NumberWrapper // check on 1..constructor(foo) case
	    && (BROKEN_CLASSOF ? fails(function () {
	      NumberPrototype.valueOf.call(dummy);
	    }) : classofRaw(dummy) != NUMBER) ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
	  };

	  for (var keys$2 = descriptors ? getOwnPropertyNames$1(NativeNumber) : ( // ES3:
	  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES2015 (in case, if modules with ES2015 Number statics required before):
	  'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys$2.length > j; j++) {
	    if (has(NativeNumber, key = keys$2[j]) && !has(NumberWrapper, key)) {
	      defineProperty$6(NumberWrapper, key, getOwnPropertyDescriptor$3(NativeNumber, key));
	    }
	  }

	  NumberWrapper.prototype = NumberPrototype;
	  NumberPrototype.constructor = NumberWrapper;
	  redefine(global_1, NUMBER, NumberWrapper);
	}

	// https://tc39.github.io/ecma262/#sec-number.max_safe_integer

	_export({
	  target: 'Number',
	  stat: true
	}, {
	  MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
	});

	var nativeGetOwnPropertyNames$2 = objectGetOwnPropertyNamesExternal.f;
	var FAILS_ON_PRIMITIVES$1 = fails(function () {
	  return !Object.getOwnPropertyNames(1);
	}); // `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames

	_export({
	  target: 'Object',
	  stat: true,
	  forced: FAILS_ON_PRIMITIVES$1
	}, {
	  getOwnPropertyNames: nativeGetOwnPropertyNames$2
	});

	var FAILS_ON_PRIMITIVES$2 = fails(function () {
	  objectKeys(1);
	}); // `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys

	_export({
	  target: 'Object',
	  stat: true,
	  forced: FAILS_ON_PRIMITIVES$2
	}, {
	  keys: function keys(it) {
	    return objectKeys(toObject(it));
	  }
	});

	var nativePromiseConstructor = global_1.Promise;

	var redefineAll = function (target, src, options) {
	  for (var key in src) redefine(target, key, src[key], options);

	  return target;
	};

	var anInstance = function (it, Constructor, name) {
	  if (!(it instanceof Constructor)) {
	    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
	  }

	  return it;
	};

	var ITERATOR$3 = wellKnownSymbol('iterator');
	var ArrayPrototype$1 = Array.prototype; // check on default Array iterator

	var isArrayIteratorMethod = function (it) {
	  return it !== undefined && (iterators.Array === it || ArrayPrototype$1[ITERATOR$3] === it);
	};

	var ITERATOR$4 = wellKnownSymbol('iterator');

	var getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$4] || it['@@iterator'] || iterators[classof(it)];
	};

	var iteratorClose = function (iterator) {
	  var returnMethod = iterator['return'];

	  if (returnMethod !== undefined) {
	    return anObject(returnMethod.call(iterator)).value;
	  }
	};

	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var iterate = function (iterable, unboundFunction, options) {
	  var that = options && options.that;
	  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
	  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
	  var INTERRUPTED = !!(options && options.INTERRUPTED);
	  var fn = functionBindContext(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
	  var iterator, iterFn, index, length, result, next, step;

	  var stop = function (condition) {
	    if (iterator) iteratorClose(iterator);
	    return new Result(true, condition);
	  };

	  var callFn = function (value) {
	    if (AS_ENTRIES) {
	      anObject(value);
	      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
	    }

	    return INTERRUPTED ? fn(value, stop) : fn(value);
	  };

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod(iterable);
	    if (typeof iterFn != 'function') throw TypeError('Target is not iterable'); // optimisation for array iterators

	    if (isArrayIteratorMethod(iterFn)) {
	      for (index = 0, length = toLength(iterable.length); length > index; index++) {
	        result = callFn(iterable[index]);
	        if (result && result instanceof Result) return result;
	      }

	      return new Result(false);
	    }

	    iterator = iterFn.call(iterable);
	  }

	  next = iterator.next;

	  while (!(step = next.call(iterator)).done) {
	    try {
	      result = callFn(step.value);
	    } catch (error) {
	      iteratorClose(iterator);
	      throw error;
	    }

	    if (typeof result == 'object' && result && result instanceof Result) return result;
	  }

	  return new Result(false);
	};

	var ITERATOR$5 = wellKnownSymbol('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return {
	        done: !!called++
	      };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };

	  iteratorWithReturn[ITERATOR$5] = function () {
	    return this;
	  }; // eslint-disable-next-line no-throw-literal


	  Array.from(iteratorWithReturn, function () {
	    throw 2;
	  });
	} catch (error) {
	  /* empty */
	}

	var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;

	  try {
	    var object = {};

	    object[ITERATOR$5] = function () {
	      return {
	        next: function () {
	          return {
	            done: ITERATION_SUPPORT = true
	          };
	        }
	      };
	    };

	    exec(object);
	  } catch (error) {
	    /* empty */
	  }

	  return ITERATION_SUPPORT;
	};

	var engineIsIos = /(iphone|ipod|ipad).*applewebkit/i.test(engineUserAgent);

	var engineIsNode = classofRaw(global_1.process) == 'process';

	var location = global_1.location;
	var set$1 = global_1.setImmediate;
	var clear = global_1.clearImmediate;
	var process$2 = global_1.process;
	var MessageChannel$1 = global_1.MessageChannel;
	var Dispatch = global_1.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;

	var run = function (id) {
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};

	var runner = function (id) {
	  return function () {
	    run(id);
	  };
	};

	var listener = function (event) {
	  run(event.data);
	};

	var post = function (id) {
	  // old engines have not location.origin
	  global_1.postMessage(id + '', location.protocol + '//' + location.host);
	}; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


	if (!set$1 || !clear) {
	  set$1 = function setImmediate(fn) {
	    var args = [];
	    var i = 1;

	    while (arguments.length > i) args.push(arguments[i++]);

	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
	    };

	    defer(counter);
	    return counter;
	  };

	  clear = function clearImmediate(id) {
	    delete queue[id];
	  }; // Node.js 0.8-


	  if (engineIsNode) {
	    defer = function (id) {
	      process$2.nextTick(runner(id));
	    }; // Sphere (JS game engine) Dispatch API

	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(runner(id));
	    }; // Browsers with MessageChannel, includes WebWorkers
	    // except iOS - https://github.com/zloirock/core-js/issues/624

	  } else if (MessageChannel$1 && !engineIsIos) {
	    channel = new MessageChannel$1();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = functionBindContext(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers
	    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global_1.addEventListener && typeof postMessage == 'function' && !global_1.importScripts && location && location.protocol !== 'file:' && !fails(post)) {
	    defer = post;
	    global_1.addEventListener('message', listener, false); // IE8-
	  } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
	    defer = function (id) {
	      html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run(id);
	      };
	    }; // Rest old browsers

	  } else {
	    defer = function (id) {
	      setTimeout(runner(id), 0);
	    };
	  }
	}

	var task = {
	  set: set$1,
	  clear: clear
	};

	var getOwnPropertyDescriptor$4 = objectGetOwnPropertyDescriptor.f;
	var macrotask = task.set;
	var MutationObserver = global_1.MutationObserver || global_1.WebKitMutationObserver;
	var document$3 = global_1.document;
	var process$3 = global_1.process;
	var Promise$1 = global_1.Promise; // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`

	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$4(global_1, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
	var flush, head, last, notify, toggle, node, promise, then; // modern engines have queueMicrotask method

	if (!queueMicrotask) {
	  flush = function () {
	    var parent, fn;
	    if (engineIsNode && (parent = process$3.domain)) parent.exit();

	    while (head) {
	      fn = head.fn;
	      head = head.next;

	      try {
	        fn();
	      } catch (error) {
	        if (head) notify();else last = undefined;
	        throw error;
	      }
	    }

	    last = undefined;
	    if (parent) parent.enter();
	  }; // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339


	  if (!engineIsIos && !engineIsNode && MutationObserver && document$3) {
	    toggle = true;
	    node = document$3.createTextNode('');
	    new MutationObserver(flush).observe(node, {
	      characterData: true
	    });

	    notify = function () {
	      node.data = toggle = !toggle;
	    }; // environments with maybe non-completely correct, but existent Promise

	  } else if (Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise$1.resolve(undefined);
	    then = promise.then;

	    notify = function () {
	      then.call(promise, flush);
	    }; // Node.js without promises

	  } else if (engineIsNode) {
	    notify = function () {
	      process$3.nextTick(flush);
	    }; // for other environments - macrotask based on:
	    // - setImmediate
	    // - MessageChannel
	    // - window.postMessag
	    // - onreadystatechange
	    // - setTimeout

	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global_1, flush);
	    };
	  }
	}

	var microtask = queueMicrotask || function (fn) {
	  var task = {
	    fn: fn,
	    next: undefined
	  };
	  if (last) last.next = task;

	  if (!head) {
	    head = task;
	    notify();
	  }

	  last = task;
	};

	var PromiseCapability = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction$1(resolve);
	  this.reject = aFunction$1(reject);
	}; // 25.4.1.5 NewPromiseCapability(C)


	var f$7 = function (C) {
	  return new PromiseCapability(C);
	};

	var newPromiseCapability = {
	  f: f$7
	};

	var promiseResolve = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var hostReportErrors = function (a, b) {
	  var console = global_1.console;

	  if (console && console.error) {
	    arguments.length === 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform = function (exec) {
	  try {
	    return {
	      error: false,
	      value: exec()
	    };
	  } catch (error) {
	    return {
	      error: true,
	      value: error
	    };
	  }
	};

	var task$1 = task.set;
	var SPECIES$6 = wellKnownSymbol('species');
	var PROMISE = 'Promise';
	var getInternalState$3 = internalState.get;
	var setInternalState$4 = internalState.set;
	var getInternalPromiseState = internalState.getterFor(PROMISE);
	var PromiseConstructor = nativePromiseConstructor;
	var TypeError$1 = global_1.TypeError;
	var document$4 = global_1.document;
	var process$4 = global_1.process;
	var $fetch = getBuiltIn('fetch');
	var newPromiseCapability$1 = newPromiseCapability.f;
	var newGenericPromiseCapability = newPromiseCapability$1;
	var DISPATCH_EVENT = !!(document$4 && document$4.createEvent && global_1.dispatchEvent);
	var NATIVE_REJECTION_EVENT = typeof PromiseRejectionEvent == 'function';
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;
	var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;
	var FORCED$3 = isForced_1(PROMISE, function () {
	  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);

	  if (!GLOBAL_CORE_JS_PROMISE) {
	    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	    // We can't detect it synchronously, so just check versions
	    if (engineV8Version === 66) return true; // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test

	    if (!engineIsNode && !NATIVE_REJECTION_EVENT) return true;
	  } // We need Promise#finally in the pure version for preventing prototype pollution
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679

	  if (engineV8Version >= 51 && /native code/.test(PromiseConstructor)) return false; // Detect correctness of subclassing with @@species support

	  var promise = PromiseConstructor.resolve(1);

	  var FakePromise = function (exec) {
	    exec(function () {
	      /* empty */
	    }, function () {
	      /* empty */
	    });
	  };

	  var constructor = promise.constructor = {};
	  constructor[SPECIES$6] = FakePromise;
	  return !(promise.then(function () {
	    /* empty */
	  }) instanceof FakePromise);
	});
	var INCORRECT_ITERATION = FORCED$3 || !checkCorrectnessOfIteration(function (iterable) {
	  PromiseConstructor.all(iterable)['catch'](function () {
	    /* empty */
	  });
	}); // helpers

	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};

	var notify$1 = function (state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  var chain = state.reactions;
	  microtask(function () {
	    var value = state.value;
	    var ok = state.state == FULFILLED;
	    var index = 0; // variable length - can't use forEach

	    while (chain.length > index) {
	      var reaction = chain[index++];
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;

	      try {
	        if (handler) {
	          if (!ok) {
	            if (state.rejection === UNHANDLED) onHandleUnhandled(state);
	            state.rejection = HANDLED;
	          }

	          if (handler === true) result = value;else {
	            if (domain) domain.enter();
	            result = handler(value); // can throw

	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }

	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (error) {
	        if (domain && !exited) domain.exit();
	        reject(error);
	      }
	    }

	    state.reactions = [];
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(state);
	  });
	};

	var dispatchEvent = function (name, promise, reason) {
	  var event, handler;

	  if (DISPATCH_EVENT) {
	    event = document$4.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global_1.dispatchEvent(event);
	  } else event = {
	    promise: promise,
	    reason: reason
	  };

	  if (!NATIVE_REJECTION_EVENT && (handler = global_1['on' + name])) handler(event);else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (state) {
	  task$1.call(global_1, function () {
	    var promise = state.facade;
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;

	    if (IS_UNHANDLED) {
	      result = perform(function () {
	        if (engineIsNode) {
	          process$4.emit('unhandledRejection', value, promise);
	        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
	      }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

	      state.rejection = engineIsNode || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function (state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (state) {
	  task$1.call(global_1, function () {
	    var promise = state.facade;

	    if (engineIsNode) {
	      process$4.emit('rejectionHandled', promise);
	    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind = function (fn, state, unwrap) {
	  return function (value) {
	    fn(state, value, unwrap);
	  };
	};

	var internalReject = function (state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify$1(state, true);
	};

	var internalResolve = function (state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;

	  try {
	    if (state.facade === value) throw TypeError$1("Promise can't be resolved itself");
	    var then = isThenable(value);

	    if (then) {
	      microtask(function () {
	        var wrapper = {
	          done: false
	        };

	        try {
	          then.call(value, bind(internalResolve, wrapper, state), bind(internalReject, wrapper, state));
	        } catch (error) {
	          internalReject(wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify$1(state, false);
	    }
	  } catch (error) {
	    internalReject({
	      done: false
	    }, error, state);
	  }
	}; // constructor polyfill


	if (FORCED$3) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance(this, PromiseConstructor, PROMISE);
	    aFunction$1(executor);
	    Internal.call(this);
	    var state = getInternalState$3(this);

	    try {
	      executor(bind(internalResolve, state), bind(internalReject, state));
	    } catch (error) {
	      internalReject(state, error);
	    }
	  }; // eslint-disable-next-line no-unused-vars


	  Internal = function Promise(executor) {
	    setInternalState$4(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: [],
	      rejection: false,
	      state: PENDING,
	      value: undefined
	    });
	  };

	  Internal.prototype = redefineAll(PromiseConstructor.prototype, {
	    // `Promise.prototype.then` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
	    then: function then(onFulfilled, onRejected) {
	      var state = getInternalPromiseState(this);
	      var reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = engineIsNode ? process$4.domain : undefined;
	      state.parent = true;
	      state.reactions.push(reaction);
	      if (state.state != PENDING) notify$1(state, false);
	      return reaction.promise;
	    },
	    // `Promise.prototype.catch` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });

	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    var state = getInternalState$3(promise);
	    this.promise = promise;
	    this.resolve = bind(internalResolve, state);
	    this.reject = bind(internalReject, state);
	  };

	  newPromiseCapability.f = newPromiseCapability$1 = function (C) {
	    return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
	  };

	  if ( typeof nativePromiseConstructor == 'function') {
	    nativeThen = nativePromiseConstructor.prototype.then; // wrap native Promise#then for native async functions

	    redefine(nativePromiseConstructor.prototype, 'then', function then(onFulfilled, onRejected) {
	      var that = this;
	      return new PromiseConstructor(function (resolve, reject) {
	        nativeThen.call(that, resolve, reject);
	      }).then(onFulfilled, onRejected); // https://github.com/zloirock/core-js/issues/640
	    }, {
	      unsafe: true
	    }); // wrap fetch result

	    if (typeof $fetch == 'function') _export({
	      global: true,
	      enumerable: true,
	      forced: true
	    }, {
	      // eslint-disable-next-line no-unused-vars
	      fetch: function fetch(input
	      /* , init */
	      ) {
	        return promiseResolve(PromiseConstructor, $fetch.apply(global_1, arguments));
	      }
	    });
	  }
	}

	_export({
	  global: true,
	  wrap: true,
	  forced: FORCED$3
	}, {
	  Promise: PromiseConstructor
	});
	setToStringTag(PromiseConstructor, PROMISE, false);
	setSpecies(PROMISE);
	PromiseWrapper = getBuiltIn(PROMISE); // statics

	_export({
	  target: PROMISE,
	  stat: true,
	  forced: FORCED$3
	}, {
	  // `Promise.reject` method
	  // https://tc39.github.io/ecma262/#sec-promise.reject
	  reject: function reject(r) {
	    var capability = newPromiseCapability$1(this);
	    capability.reject.call(undefined, r);
	    return capability.promise;
	  }
	});
	_export({
	  target: PROMISE,
	  stat: true,
	  forced:  FORCED$3
	}, {
	  // `Promise.resolve` method
	  // https://tc39.github.io/ecma262/#sec-promise.resolve
	  resolve: function resolve(x) {
	    return promiseResolve( this, x);
	  }
	});
	_export({
	  target: PROMISE,
	  stat: true,
	  forced: INCORRECT_ITERATION
	}, {
	  // `Promise.all` method
	  // https://tc39.github.io/ecma262/#sec-promise.all
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$1(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        $promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  },
	  // `Promise.race` method
	  // https://tc39.github.io/ecma262/#sec-promise.race
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$1(C.resolve);
	      iterate(iterable, function (promise) {
	        $promiseResolve.call(C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var getOwnPropertyDescriptor$5 = objectGetOwnPropertyDescriptor.f;
	var nativeStartsWith = ''.startsWith;
	var min$7 = Math.min;
	var CORRECT_IS_REGEXP_LOGIC$1 = correctIsRegexpLogic('startsWith'); // https://github.com/zloirock/core-js/pull/702

	var MDN_POLYFILL_BUG$1 =  !CORRECT_IS_REGEXP_LOGIC$1 && !!function () {
	  var descriptor = getOwnPropertyDescriptor$5(String.prototype, 'startsWith');
	  return descriptor && !descriptor.writable;
	}(); // `String.prototype.startsWith` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.startswith

	_export({
	  target: 'String',
	  proto: true,
	  forced: !MDN_POLYFILL_BUG$1 && !CORRECT_IS_REGEXP_LOGIC$1
	}, {
	  startsWith: function startsWith(searchString
	  /* , position = 0 */
	  ) {
	    var that = String(requireObjectCoercible(this));
	    notARegexp(searchString);
	    var index = toLength(min$7(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = String(searchString);
	    return nativeStartsWith ? nativeStartsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
	  }
	});

	var non = '\u200B\u0085\u180E'; // check that a method works with the correct list
	// of whitespaces and has a correct name

	var stringTrimForced = function (METHOD_NAME) {
	  return fails(function () {
	    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
	  });
	};

	var $trim = stringTrim.trim; // `String.prototype.trim` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.trim

	_export({
	  target: 'String',
	  proto: true,
	  forced: stringTrimForced('trim')
	}, {
	  trim: function trim() {
	    return $trim(this);
	  }
	});

	var ITERATOR$6 = wellKnownSymbol('iterator');
	var nativeUrl = !fails(function () {
	  var url = new URL('b?a=1&b=2&c=3', 'http://a');
	  var searchParams = url.searchParams;
	  var result = '';
	  url.pathname = 'c%20d';
	  searchParams.forEach(function (value, key) {
	    searchParams['delete']('b');
	    result += key + value;
	  });
	  return isPure && !url.toJSON || !searchParams.sort || url.href !== 'http://a/c%20d?a=1&c=3' || searchParams.get('c') !== '3' || String(new URLSearchParams('?a=1')) !== 'a=1' || !searchParams[ITERATOR$6] // throws in Edge
	  || new URL('https://a@b').username !== 'a' || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b' // not punycoded in Edge
	  || new URL('http://ÑÐµÑÑ').host !== 'xn--e1aybc' // not escaped in Chrome 62-
	  || new URL('http://a#Ð±').hash !== '#%D0%B1' // fails in Chrome 66-
	  || result !== 'a1c3' // throws in Safari
	  || new URL('http://x', undefined).host !== 'x';
	});

	var nativeAssign = Object.assign;
	var defineProperty$7 = Object.defineProperty; // `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign

	var objectAssign = !nativeAssign || fails(function () {
	  // should have correct order of operations (Edge bug)
	  if (descriptors && nativeAssign({
	    b: 1
	  }, nativeAssign(defineProperty$7({}, 'a', {
	    enumerable: true,
	    get: function () {
	      defineProperty$7(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), {
	    b: 2
	  })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)

	  var A = {};
	  var B = {}; // eslint-disable-next-line no-undef

	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) {
	    B[chr] = chr;
	  });
	  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) {
	  // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  var propertyIsEnumerable = objectPropertyIsEnumerable.f;

	  while (argumentsLength > index) {
	    var S = indexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;

	    while (length > j) {
	      key = keys[j++];
	      if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];
	    }
	  }

	  return T;
	} : nativeAssign;

	var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
	  } catch (error) {
	    iteratorClose(iterator);
	    throw error;
	  }
	};

	// https://tc39.github.io/ecma262/#sec-array.from


	var arrayFrom = function from(arrayLike
	/* , mapfn = undefined, thisArg = undefined */
	) {
	  var O = toObject(arrayLike);
	  var C = typeof this == 'function' ? this : Array;
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod(O);
	  var index = 0;
	  var length, result, step, iterator, next, value;
	  if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2); // if the target is not iterable or it's an array with the default iterator - use a simple case

	  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
	    iterator = iteratorMethod.call(O);
	    next = iterator.next;
	    result = new C();

	    for (; !(step = next.call(iterator)).done; index++) {
	      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
	      createProperty(result, index, value);
	    }
	  } else {
	    length = toLength(O.length);
	    result = new C(length);

	    for (; length > index; index++) {
	      value = mapping ? mapfn(O[index], index) : O[index];
	      createProperty(result, index, value);
	    }
	  }

	  result.length = index;
	  return result;
	};

	var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

	var base = 36;
	var tMin = 1;
	var tMax = 26;
	var skew = 38;
	var damp = 700;
	var initialBias = 72;
	var initialN = 128; // 0x80

	var delimiter = '-'; // '\x2D'

	var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars

	var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

	var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
	var baseMinusTMin = base - tMin;
	var floor$2 = Math.floor;
	var stringFromCharCode = String.fromCharCode;
	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 */

	var ucs2decode = function (string) {
	  var output = [];
	  var counter = 0;
	  var length = string.length;

	  while (counter < length) {
	    var value = string.charCodeAt(counter++);

	    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
	      // It's a high surrogate, and there is a next character.
	      var extra = string.charCodeAt(counter++);

	      if ((extra & 0xFC00) == 0xDC00) {
	        // Low surrogate.
	        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
	      } else {
	        // It's an unmatched surrogate; only append this code unit, in case the
	        // next code unit is the high surrogate of a surrogate pair.
	        output.push(value);
	        counter--;
	      }
	    } else {
	      output.push(value);
	    }
	  }

	  return output;
	};
	/**
	 * Converts a digit/integer into a basic code point.
	 */


	var digitToBasic = function (digit) {
	  //  0..25 map to ASCII a..z or A..Z
	  // 26..35 map to ASCII 0..9
	  return digit + 22 + 75 * (digit < 26);
	};
	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 */


	var adapt = function (delta, numPoints, firstTime) {
	  var k = 0;
	  delta = firstTime ? floor$2(delta / damp) : delta >> 1;
	  delta += floor$2(delta / numPoints);

	  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
	    delta = floor$2(delta / baseMinusTMin);
	  }

	  return floor$2(k + (baseMinusTMin + 1) * delta / (delta + skew));
	};
	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 */
	// eslint-disable-next-line  max-statements


	var encode = function (input) {
	  var output = []; // Convert the input in UCS-2 to an array of Unicode code points.

	  input = ucs2decode(input); // Cache the length.

	  var inputLength = input.length; // Initialize the state.

	  var n = initialN;
	  var delta = 0;
	  var bias = initialBias;
	  var i, currentValue; // Handle the basic code points.

	  for (i = 0; i < input.length; i++) {
	    currentValue = input[i];

	    if (currentValue < 0x80) {
	      output.push(stringFromCharCode(currentValue));
	    }
	  }

	  var basicLength = output.length; // number of basic code points.

	  var handledCPCount = basicLength; // number of code points that have been handled;
	  // Finish the basic string with a delimiter unless it's empty.

	  if (basicLength) {
	    output.push(delimiter);
	  } // Main encoding loop:


	  while (handledCPCount < inputLength) {
	    // All non-basic code points < n have been handled already. Find the next larger one:
	    var m = maxInt;

	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];

	      if (currentValue >= n && currentValue < m) {
	        m = currentValue;
	      }
	    } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.


	    var handledCPCountPlusOne = handledCPCount + 1;

	    if (m - n > floor$2((maxInt - delta) / handledCPCountPlusOne)) {
	      throw RangeError(OVERFLOW_ERROR);
	    }

	    delta += (m - n) * handledCPCountPlusOne;
	    n = m;

	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];

	      if (currentValue < n && ++delta > maxInt) {
	        throw RangeError(OVERFLOW_ERROR);
	      }

	      if (currentValue == n) {
	        // Represent delta as a generalized variable-length integer.
	        var q = delta;

	        for (var k = base;;
	        /* no condition */
	        k += base) {
	          var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
	          if (q < t) break;
	          var qMinusT = q - t;
	          var baseMinusT = base - t;
	          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
	          q = floor$2(qMinusT / baseMinusT);
	        }

	        output.push(stringFromCharCode(digitToBasic(q)));
	        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
	        delta = 0;
	        ++handledCPCount;
	      }
	    }

	    ++delta;
	    ++n;
	  }

	  return output.join('');
	};

	var stringPunycodeToAscii = function (input) {
	  var encoded = [];
	  var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
	  var i, label;

	  for (i = 0; i < labels.length; i++) {
	    label = labels[i];
	    encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
	  }

	  return encoded.join('.');
	};

	var getIterator = function (it) {
	  var iteratorMethod = getIteratorMethod(it);

	  if (typeof iteratorMethod != 'function') {
	    throw TypeError(String(it) + ' is not iterable');
	  }

	  return anObject(iteratorMethod.call(it));
	};

	var $fetch$1 = getBuiltIn('fetch');
	var Headers = getBuiltIn('Headers');
	var ITERATOR$7 = wellKnownSymbol('iterator');
	var URL_SEARCH_PARAMS = 'URLSearchParams';
	var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
	var setInternalState$5 = internalState.set;
	var getInternalParamsState = internalState.getterFor(URL_SEARCH_PARAMS);
	var getInternalIteratorState = internalState.getterFor(URL_SEARCH_PARAMS_ITERATOR);
	var plus = /\+/g;
	var sequences = Array(4);

	var percentSequence = function (bytes) {
	  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
	};

	var percentDecode = function (sequence) {
	  try {
	    return decodeURIComponent(sequence);
	  } catch (error) {
	    return sequence;
	  }
	};

	var deserialize = function (it) {
	  var result = it.replace(plus, ' ');
	  var bytes = 4;

	  try {
	    return decodeURIComponent(result);
	  } catch (error) {
	    while (bytes) {
	      result = result.replace(percentSequence(bytes--), percentDecode);
	    }

	    return result;
	  }
	};

	var find = /[!'()~]|%20/g;
	var replace = {
	  '!': '%21',
	  "'": '%27',
	  '(': '%28',
	  ')': '%29',
	  '~': '%7E',
	  '%20': '+'
	};

	var replacer = function (match) {
	  return replace[match];
	};

	var serialize = function (it) {
	  return encodeURIComponent(it).replace(find, replacer);
	};

	var parseSearchParams = function (result, query) {
	  if (query) {
	    var attributes = query.split('&');
	    var index = 0;
	    var attribute, entry;

	    while (index < attributes.length) {
	      attribute = attributes[index++];

	      if (attribute.length) {
	        entry = attribute.split('=');
	        result.push({
	          key: deserialize(entry.shift()),
	          value: deserialize(entry.join('='))
	        });
	      }
	    }
	  }
	};

	var updateSearchParams = function (query) {
	  this.entries.length = 0;
	  parseSearchParams(this.entries, query);
	};

	var validateArgumentsLength = function (passed, required) {
	  if (passed < required) throw TypeError('Not enough arguments');
	};

	var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
	  setInternalState$5(this, {
	    type: URL_SEARCH_PARAMS_ITERATOR,
	    iterator: getIterator(getInternalParamsState(params).entries),
	    kind: kind
	  });
	}, 'Iterator', function next() {
	  var state = getInternalIteratorState(this);
	  var kind = state.kind;
	  var step = state.iterator.next();
	  var entry = step.value;

	  if (!step.done) {
	    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
	  }

	  return step;
	}); // `URLSearchParams` constructor
	// https://url.spec.whatwg.org/#interface-urlsearchparams

	var URLSearchParamsConstructor = function URLSearchParams()
	/* init */
	{
	  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
	  var init = arguments.length > 0 ? arguments[0] : undefined;
	  var that = this;
	  var entries = [];
	  var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;
	  setInternalState$5(that, {
	    type: URL_SEARCH_PARAMS,
	    entries: entries,
	    updateURL: function () {
	      /* empty */
	    },
	    updateSearchParams: updateSearchParams
	  });

	  if (init !== undefined) {
	    if (isObject(init)) {
	      iteratorMethod = getIteratorMethod(init);

	      if (typeof iteratorMethod === 'function') {
	        iterator = iteratorMethod.call(init);
	        next = iterator.next;

	        while (!(step = next.call(iterator)).done) {
	          entryIterator = getIterator(anObject(step.value));
	          entryNext = entryIterator.next;
	          if ((first = entryNext.call(entryIterator)).done || (second = entryNext.call(entryIterator)).done || !entryNext.call(entryIterator).done) throw TypeError('Expected sequence with length 2');
	          entries.push({
	            key: first.value + '',
	            value: second.value + ''
	          });
	        }
	      } else for (key in init) if (has(init, key)) entries.push({
	        key: key,
	        value: init[key] + ''
	      });
	    } else {
	      parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
	    }
	  }
	};

	var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;
	redefineAll(URLSearchParamsPrototype, {
	  // `URLSearchParams.prototype.append` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
	  append: function append(name, value) {
	    validateArgumentsLength(arguments.length, 2);
	    var state = getInternalParamsState(this);
	    state.entries.push({
	      key: name + '',
	      value: value + ''
	    });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.delete` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
	  'delete': function (name) {
	    validateArgumentsLength(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var key = name + '';
	    var index = 0;

	    while (index < entries.length) {
	      if (entries[index].key === key) entries.splice(index, 1);else index++;
	    }

	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.get` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
	  get: function get(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var index = 0;

	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) return entries[index].value;
	    }

	    return null;
	  },
	  // `URLSearchParams.prototype.getAll` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
	  getAll: function getAll(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var result = [];
	    var index = 0;

	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) result.push(entries[index].value);
	    }

	    return result;
	  },
	  // `URLSearchParams.prototype.has` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
	  has: function has(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var index = 0;

	    while (index < entries.length) {
	      if (entries[index++].key === key) return true;
	    }

	    return false;
	  },
	  // `URLSearchParams.prototype.set` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
	  set: function set(name, value) {
	    validateArgumentsLength(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var found = false;
	    var key = name + '';
	    var val = value + '';
	    var index = 0;
	    var entry;

	    for (; index < entries.length; index++) {
	      entry = entries[index];

	      if (entry.key === key) {
	        if (found) entries.splice(index--, 1);else {
	          found = true;
	          entry.value = val;
	        }
	      }
	    }

	    if (!found) entries.push({
	      key: key,
	      value: val
	    });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.sort` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
	  sort: function sort() {
	    var state = getInternalParamsState(this);
	    var entries = state.entries; // Array#sort is not stable in some engines

	    var slice = entries.slice();
	    var entry, entriesIndex, sliceIndex;
	    entries.length = 0;

	    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
	      entry = slice[sliceIndex];

	      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
	        if (entries[entriesIndex].key > entry.key) {
	          entries.splice(entriesIndex, 0, entry);
	          break;
	        }
	      }

	      if (entriesIndex === sliceIndex) entries.push(entry);
	    }

	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.forEach` method
	  forEach: function forEach(callback
	  /* , thisArg */
	  ) {
	    var entries = getInternalParamsState(this).entries;
	    var boundFunction = functionBindContext(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
	    var index = 0;
	    var entry;

	    while (index < entries.length) {
	      entry = entries[index++];
	      boundFunction(entry.value, entry.key, this);
	    }
	  },
	  // `URLSearchParams.prototype.keys` method
	  keys: function keys() {
	    return new URLSearchParamsIterator(this, 'keys');
	  },
	  // `URLSearchParams.prototype.values` method
	  values: function values() {
	    return new URLSearchParamsIterator(this, 'values');
	  },
	  // `URLSearchParams.prototype.entries` method
	  entries: function entries() {
	    return new URLSearchParamsIterator(this, 'entries');
	  }
	}, {
	  enumerable: true
	}); // `URLSearchParams.prototype[@@iterator]` method

	redefine(URLSearchParamsPrototype, ITERATOR$7, URLSearchParamsPrototype.entries); // `URLSearchParams.prototype.toString` method
	// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior

	redefine(URLSearchParamsPrototype, 'toString', function toString() {
	  var entries = getInternalParamsState(this).entries;
	  var result = [];
	  var index = 0;
	  var entry;

	  while (index < entries.length) {
	    entry = entries[index++];
	    result.push(serialize(entry.key) + '=' + serialize(entry.value));
	  }

	  return result.join('&');
	}, {
	  enumerable: true
	});
	setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);
	_export({
	  global: true,
	  forced: !nativeUrl
	}, {
	  URLSearchParams: URLSearchParamsConstructor
	}); // Wrap `fetch` for correct work with polyfilled `URLSearchParams`
	// https://github.com/zloirock/core-js/issues/674

	if (!nativeUrl && typeof $fetch$1 == 'function' && typeof Headers == 'function') {
	  _export({
	    global: true,
	    enumerable: true,
	    forced: true
	  }, {
	    fetch: function fetch(input
	    /* , init */
	    ) {
	      var args = [input];
	      var init, body, headers;

	      if (arguments.length > 1) {
	        init = arguments[1];

	        if (isObject(init)) {
	          body = init.body;

	          if (classof(body) === URL_SEARCH_PARAMS) {
	            headers = init.headers ? new Headers(init.headers) : new Headers();

	            if (!headers.has('content-type')) {
	              headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	            }

	            init = objectCreate(init, {
	              body: createPropertyDescriptor(0, String(body)),
	              headers: createPropertyDescriptor(0, headers)
	            });
	          }
	        }

	        args.push(init);
	      }

	      return $fetch$1.apply(this, args);
	    }
	  });
	}

	var web_urlSearchParams = {
	  URLSearchParams: URLSearchParamsConstructor,
	  getState: getInternalParamsState
	};

	var codeAt = stringMultibyte.codeAt;
	var NativeURL = global_1.URL;
	var URLSearchParams$1 = web_urlSearchParams.URLSearchParams;
	var getInternalSearchParamsState = web_urlSearchParams.getState;
	var setInternalState$6 = internalState.set;
	var getInternalURLState = internalState.getterFor('URL');
	var floor$3 = Math.floor;
	var pow = Math.pow;
	var INVALID_AUTHORITY = 'Invalid authority';
	var INVALID_SCHEME = 'Invalid scheme';
	var INVALID_HOST = 'Invalid host';
	var INVALID_PORT = 'Invalid port';
	var ALPHA = /[A-Za-z]/;
	var ALPHANUMERIC = /[\d+-.A-Za-z]/;
	var DIGIT = /\d/;
	var HEX_START = /^(0x|0X)/;
	var OCT = /^[0-7]+$/;
	var DEC = /^\d+$/;
	var HEX = /^[\dA-Fa-f]+$/; // eslint-disable-next-line no-control-regex

	var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/; // eslint-disable-next-line no-control-regex

	var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/; // eslint-disable-next-line no-control-regex

	var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g; // eslint-disable-next-line no-control-regex

	var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
	var EOF;

	var parseHost = function (url, input) {
	  var result, codePoints, index;

	  if (input.charAt(0) == '[') {
	    if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
	    result = parseIPv6(input.slice(1, -1));
	    if (!result) return INVALID_HOST;
	    url.host = result; // opaque host
	  } else if (!isSpecial(url)) {
	    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
	    result = '';
	    codePoints = arrayFrom(input);

	    for (index = 0; index < codePoints.length; index++) {
	      result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
	    }

	    url.host = result;
	  } else {
	    input = stringPunycodeToAscii(input);
	    if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
	    result = parseIPv4(input);
	    if (result === null) return INVALID_HOST;
	    url.host = result;
	  }
	};

	var parseIPv4 = function (input) {
	  var parts = input.split('.');
	  var partsLength, numbers, index, part, radix, number, ipv4;

	  if (parts.length && parts[parts.length - 1] == '') {
	    parts.pop();
	  }

	  partsLength = parts.length;
	  if (partsLength > 4) return input;
	  numbers = [];

	  for (index = 0; index < partsLength; index++) {
	    part = parts[index];
	    if (part == '') return input;
	    radix = 10;

	    if (part.length > 1 && part.charAt(0) == '0') {
	      radix = HEX_START.test(part) ? 16 : 8;
	      part = part.slice(radix == 8 ? 1 : 2);
	    }

	    if (part === '') {
	      number = 0;
	    } else {
	      if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
	      number = parseInt(part, radix);
	    }

	    numbers.push(number);
	  }

	  for (index = 0; index < partsLength; index++) {
	    number = numbers[index];

	    if (index == partsLength - 1) {
	      if (number >= pow(256, 5 - partsLength)) return null;
	    } else if (number > 255) return null;
	  }

	  ipv4 = numbers.pop();

	  for (index = 0; index < numbers.length; index++) {
	    ipv4 += numbers[index] * pow(256, 3 - index);
	  }

	  return ipv4;
	}; // eslint-disable-next-line max-statements


	var parseIPv6 = function (input) {
	  var address = [0, 0, 0, 0, 0, 0, 0, 0];
	  var pieceIndex = 0;
	  var compress = null;
	  var pointer = 0;
	  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

	  var char = function () {
	    return input.charAt(pointer);
	  };

	  if (char() == ':') {
	    if (input.charAt(1) != ':') return;
	    pointer += 2;
	    pieceIndex++;
	    compress = pieceIndex;
	  }

	  while (char()) {
	    if (pieceIndex == 8) return;

	    if (char() == ':') {
	      if (compress !== null) return;
	      pointer++;
	      pieceIndex++;
	      compress = pieceIndex;
	      continue;
	    }

	    value = length = 0;

	    while (length < 4 && HEX.test(char())) {
	      value = value * 16 + parseInt(char(), 16);
	      pointer++;
	      length++;
	    }

	    if (char() == '.') {
	      if (length == 0) return;
	      pointer -= length;
	      if (pieceIndex > 6) return;
	      numbersSeen = 0;

	      while (char()) {
	        ipv4Piece = null;

	        if (numbersSeen > 0) {
	          if (char() == '.' && numbersSeen < 4) pointer++;else return;
	        }

	        if (!DIGIT.test(char())) return;

	        while (DIGIT.test(char())) {
	          number = parseInt(char(), 10);
	          if (ipv4Piece === null) ipv4Piece = number;else if (ipv4Piece == 0) return;else ipv4Piece = ipv4Piece * 10 + number;
	          if (ipv4Piece > 255) return;
	          pointer++;
	        }

	        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
	        numbersSeen++;
	        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
	      }

	      if (numbersSeen != 4) return;
	      break;
	    } else if (char() == ':') {
	      pointer++;
	      if (!char()) return;
	    } else if (char()) return;

	    address[pieceIndex++] = value;
	  }

	  if (compress !== null) {
	    swaps = pieceIndex - compress;
	    pieceIndex = 7;

	    while (pieceIndex != 0 && swaps > 0) {
	      swap = address[pieceIndex];
	      address[pieceIndex--] = address[compress + swaps - 1];
	      address[compress + --swaps] = swap;
	    }
	  } else if (pieceIndex != 8) return;

	  return address;
	};

	var findLongestZeroSequence = function (ipv6) {
	  var maxIndex = null;
	  var maxLength = 1;
	  var currStart = null;
	  var currLength = 0;
	  var index = 0;

	  for (; index < 8; index++) {
	    if (ipv6[index] !== 0) {
	      if (currLength > maxLength) {
	        maxIndex = currStart;
	        maxLength = currLength;
	      }

	      currStart = null;
	      currLength = 0;
	    } else {
	      if (currStart === null) currStart = index;
	      ++currLength;
	    }
	  }

	  if (currLength > maxLength) {
	    maxIndex = currStart;
	    maxLength = currLength;
	  }

	  return maxIndex;
	};

	var serializeHost = function (host) {
	  var result, index, compress, ignore0; // ipv4

	  if (typeof host == 'number') {
	    result = [];

	    for (index = 0; index < 4; index++) {
	      result.unshift(host % 256);
	      host = floor$3(host / 256);
	    }

	    return result.join('.'); // ipv6
	  } else if (typeof host == 'object') {
	    result = '';
	    compress = findLongestZeroSequence(host);

	    for (index = 0; index < 8; index++) {
	      if (ignore0 && host[index] === 0) continue;
	      if (ignore0) ignore0 = false;

	      if (compress === index) {
	        result += index ? ':' : '::';
	        ignore0 = true;
	      } else {
	        result += host[index].toString(16);
	        if (index < 7) result += ':';
	      }
	    }

	    return '[' + result + ']';
	  }

	  return host;
	};

	var C0ControlPercentEncodeSet = {};
	var fragmentPercentEncodeSet = objectAssign({}, C0ControlPercentEncodeSet, {
	  ' ': 1,
	  '"': 1,
	  '<': 1,
	  '>': 1,
	  '`': 1
	});
	var pathPercentEncodeSet = objectAssign({}, fragmentPercentEncodeSet, {
	  '#': 1,
	  '?': 1,
	  '{': 1,
	  '}': 1
	});
	var userinfoPercentEncodeSet = objectAssign({}, pathPercentEncodeSet, {
	  '/': 1,
	  ':': 1,
	  ';': 1,
	  '=': 1,
	  '@': 1,
	  '[': 1,
	  '\\': 1,
	  ']': 1,
	  '^': 1,
	  '|': 1
	});

	var percentEncode = function (char, set) {
	  var code = codeAt(char, 0);
	  return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
	};

	var specialSchemes = {
	  ftp: 21,
	  file: null,
	  http: 80,
	  https: 443,
	  ws: 80,
	  wss: 443
	};

	var isSpecial = function (url) {
	  return has(specialSchemes, url.scheme);
	};

	var includesCredentials = function (url) {
	  return url.username != '' || url.password != '';
	};

	var cannotHaveUsernamePasswordPort = function (url) {
	  return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
	};

	var isWindowsDriveLetter = function (string, normalized) {
	  var second;
	  return string.length == 2 && ALPHA.test(string.charAt(0)) && ((second = string.charAt(1)) == ':' || !normalized && second == '|');
	};

	var startsWithWindowsDriveLetter = function (string) {
	  var third;
	  return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (string.length == 2 || (third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#');
	};

	var shortenURLsPath = function (url) {
	  var path = url.path;
	  var pathSize = path.length;

	  if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
	    path.pop();
	  }
	};

	var isSingleDot = function (segment) {
	  return segment === '.' || segment.toLowerCase() === '%2e';
	};

	var isDoubleDot = function (segment) {
	  segment = segment.toLowerCase();
	  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
	}; // States:


	var SCHEME_START = {};
	var SCHEME = {};
	var NO_SCHEME = {};
	var SPECIAL_RELATIVE_OR_AUTHORITY = {};
	var PATH_OR_AUTHORITY = {};
	var RELATIVE = {};
	var RELATIVE_SLASH = {};
	var SPECIAL_AUTHORITY_SLASHES = {};
	var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
	var AUTHORITY = {};
	var HOST = {};
	var HOSTNAME = {};
	var PORT = {};
	var FILE = {};
	var FILE_SLASH = {};
	var FILE_HOST = {};
	var PATH_START = {};
	var PATH = {};
	var CANNOT_BE_A_BASE_URL_PATH = {};
	var QUERY = {};
	var FRAGMENT = {}; // eslint-disable-next-line max-statements

	var parseURL = function (url, input, stateOverride, base) {
	  var state = stateOverride || SCHEME_START;
	  var pointer = 0;
	  var buffer = '';
	  var seenAt = false;
	  var seenBracket = false;
	  var seenPasswordToken = false;
	  var codePoints, char, bufferCodePoints, failure;

	  if (!stateOverride) {
	    url.scheme = '';
	    url.username = '';
	    url.password = '';
	    url.host = null;
	    url.port = null;
	    url.path = [];
	    url.query = null;
	    url.fragment = null;
	    url.cannotBeABaseURL = false;
	    input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
	  }

	  input = input.replace(TAB_AND_NEW_LINE, '');
	  codePoints = arrayFrom(input);

	  while (pointer <= codePoints.length) {
	    char = codePoints[pointer];

	    switch (state) {
	      case SCHEME_START:
	        if (char && ALPHA.test(char)) {
	          buffer += char.toLowerCase();
	          state = SCHEME;
	        } else if (!stateOverride) {
	          state = NO_SCHEME;
	          continue;
	        } else return INVALID_SCHEME;

	        break;

	      case SCHEME:
	        if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
	          buffer += char.toLowerCase();
	        } else if (char == ':') {
	          if (stateOverride && (isSpecial(url) != has(specialSchemes, buffer) || buffer == 'file' && (includesCredentials(url) || url.port !== null) || url.scheme == 'file' && !url.host)) return;
	          url.scheme = buffer;

	          if (stateOverride) {
	            if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
	            return;
	          }

	          buffer = '';

	          if (url.scheme == 'file') {
	            state = FILE;
	          } else if (isSpecial(url) && base && base.scheme == url.scheme) {
	            state = SPECIAL_RELATIVE_OR_AUTHORITY;
	          } else if (isSpecial(url)) {
	            state = SPECIAL_AUTHORITY_SLASHES;
	          } else if (codePoints[pointer + 1] == '/') {
	            state = PATH_OR_AUTHORITY;
	            pointer++;
	          } else {
	            url.cannotBeABaseURL = true;
	            url.path.push('');
	            state = CANNOT_BE_A_BASE_URL_PATH;
	          }
	        } else if (!stateOverride) {
	          buffer = '';
	          state = NO_SCHEME;
	          pointer = 0;
	          continue;
	        } else return INVALID_SCHEME;

	        break;

	      case NO_SCHEME:
	        if (!base || base.cannotBeABaseURL && char != '#') return INVALID_SCHEME;

	        if (base.cannotBeABaseURL && char == '#') {
	          url.scheme = base.scheme;
	          url.path = base.path.slice();
	          url.query = base.query;
	          url.fragment = '';
	          url.cannotBeABaseURL = true;
	          state = FRAGMENT;
	          break;
	        }

	        state = base.scheme == 'file' ? FILE : RELATIVE;
	        continue;

	      case SPECIAL_RELATIVE_OR_AUTHORITY:
	        if (char == '/' && codePoints[pointer + 1] == '/') {
	          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	          pointer++;
	        } else {
	          state = RELATIVE;
	          continue;
	        }

	        break;

	      case PATH_OR_AUTHORITY:
	        if (char == '/') {
	          state = AUTHORITY;
	          break;
	        } else {
	          state = PATH;
	          continue;
	        }

	      case RELATIVE:
	        url.scheme = base.scheme;

	        if (char == EOF) {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = base.query;
	        } else if (char == '/' || char == '\\' && isSpecial(url)) {
	          state = RELATIVE_SLASH;
	        } else if (char == '?') {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = '';
	          state = QUERY;
	        } else if (char == '#') {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = base.query;
	          url.fragment = '';
	          state = FRAGMENT;
	        } else {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.path.pop();
	          state = PATH;
	          continue;
	        }

	        break;

	      case RELATIVE_SLASH:
	        if (isSpecial(url) && (char == '/' || char == '\\')) {
	          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	        } else if (char == '/') {
	          state = AUTHORITY;
	        } else {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          state = PATH;
	          continue;
	        }

	        break;

	      case SPECIAL_AUTHORITY_SLASHES:
	        state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	        if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
	        pointer++;
	        break;

	      case SPECIAL_AUTHORITY_IGNORE_SLASHES:
	        if (char != '/' && char != '\\') {
	          state = AUTHORITY;
	          continue;
	        }

	        break;

	      case AUTHORITY:
	        if (char == '@') {
	          if (seenAt) buffer = '%40' + buffer;
	          seenAt = true;
	          bufferCodePoints = arrayFrom(buffer);

	          for (var i = 0; i < bufferCodePoints.length; i++) {
	            var codePoint = bufferCodePoints[i];

	            if (codePoint == ':' && !seenPasswordToken) {
	              seenPasswordToken = true;
	              continue;
	            }

	            var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
	            if (seenPasswordToken) url.password += encodedCodePoints;else url.username += encodedCodePoints;
	          }

	          buffer = '';
	        } else if (char == EOF || char == '/' || char == '?' || char == '#' || char == '\\' && isSpecial(url)) {
	          if (seenAt && buffer == '') return INVALID_AUTHORITY;
	          pointer -= arrayFrom(buffer).length + 1;
	          buffer = '';
	          state = HOST;
	        } else buffer += char;

	        break;

	      case HOST:
	      case HOSTNAME:
	        if (stateOverride && url.scheme == 'file') {
	          state = FILE_HOST;
	          continue;
	        } else if (char == ':' && !seenBracket) {
	          if (buffer == '') return INVALID_HOST;
	          failure = parseHost(url, buffer);
	          if (failure) return failure;
	          buffer = '';
	          state = PORT;
	          if (stateOverride == HOSTNAME) return;
	        } else if (char == EOF || char == '/' || char == '?' || char == '#' || char == '\\' && isSpecial(url)) {
	          if (isSpecial(url) && buffer == '') return INVALID_HOST;
	          if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
	          failure = parseHost(url, buffer);
	          if (failure) return failure;
	          buffer = '';
	          state = PATH_START;
	          if (stateOverride) return;
	          continue;
	        } else {
	          if (char == '[') seenBracket = true;else if (char == ']') seenBracket = false;
	          buffer += char;
	        }

	        break;

	      case PORT:
	        if (DIGIT.test(char)) {
	          buffer += char;
	        } else if (char == EOF || char == '/' || char == '?' || char == '#' || char == '\\' && isSpecial(url) || stateOverride) {
	          if (buffer != '') {
	            var port = parseInt(buffer, 10);
	            if (port > 0xFFFF) return INVALID_PORT;
	            url.port = isSpecial(url) && port === specialSchemes[url.scheme] ? null : port;
	            buffer = '';
	          }

	          if (stateOverride) return;
	          state = PATH_START;
	          continue;
	        } else return INVALID_PORT;

	        break;

	      case FILE:
	        url.scheme = 'file';
	        if (char == '/' || char == '\\') state = FILE_SLASH;else if (base && base.scheme == 'file') {
	          if (char == EOF) {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = base.query;
	          } else if (char == '?') {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = '';
	            state = QUERY;
	          } else if (char == '#') {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = base.query;
	            url.fragment = '';
	            state = FRAGMENT;
	          } else {
	            if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
	              url.host = base.host;
	              url.path = base.path.slice();
	              shortenURLsPath(url);
	            }

	            state = PATH;
	            continue;
	          }
	        } else {
	          state = PATH;
	          continue;
	        }
	        break;

	      case FILE_SLASH:
	        if (char == '/' || char == '\\') {
	          state = FILE_HOST;
	          break;
	        }

	        if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
	          if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);else url.host = base.host;
	        }

	        state = PATH;
	        continue;

	      case FILE_HOST:
	        if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
	          if (!stateOverride && isWindowsDriveLetter(buffer)) {
	            state = PATH;
	          } else if (buffer == '') {
	            url.host = '';
	            if (stateOverride) return;
	            state = PATH_START;
	          } else {
	            failure = parseHost(url, buffer);
	            if (failure) return failure;
	            if (url.host == 'localhost') url.host = '';
	            if (stateOverride) return;
	            buffer = '';
	            state = PATH_START;
	          }

	          continue;
	        } else buffer += char;

	        break;

	      case PATH_START:
	        if (isSpecial(url)) {
	          state = PATH;
	          if (char != '/' && char != '\\') continue;
	        } else if (!stateOverride && char == '?') {
	          url.query = '';
	          state = QUERY;
	        } else if (!stateOverride && char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          state = PATH;
	          if (char != '/') continue;
	        }

	        break;

	      case PATH:
	        if (char == EOF || char == '/' || char == '\\' && isSpecial(url) || !stateOverride && (char == '?' || char == '#')) {
	          if (isDoubleDot(buffer)) {
	            shortenURLsPath(url);

	            if (char != '/' && !(char == '\\' && isSpecial(url))) {
	              url.path.push('');
	            }
	          } else if (isSingleDot(buffer)) {
	            if (char != '/' && !(char == '\\' && isSpecial(url))) {
	              url.path.push('');
	            }
	          } else {
	            if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
	              if (url.host) url.host = '';
	              buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
	            }

	            url.path.push(buffer);
	          }

	          buffer = '';

	          if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
	            while (url.path.length > 1 && url.path[0] === '') {
	              url.path.shift();
	            }
	          }

	          if (char == '?') {
	            url.query = '';
	            state = QUERY;
	          } else if (char == '#') {
	            url.fragment = '';
	            state = FRAGMENT;
	          }
	        } else {
	          buffer += percentEncode(char, pathPercentEncodeSet);
	        }

	        break;

	      case CANNOT_BE_A_BASE_URL_PATH:
	        if (char == '?') {
	          url.query = '';
	          state = QUERY;
	        } else if (char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
	        }

	        break;

	      case QUERY:
	        if (!stateOverride && char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          if (char == "'" && isSpecial(url)) url.query += '%27';else if (char == '#') url.query += '%23';else url.query += percentEncode(char, C0ControlPercentEncodeSet);
	        }

	        break;

	      case FRAGMENT:
	        if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
	        break;
	    }

	    pointer++;
	  }
	}; // `URL` constructor
	// https://url.spec.whatwg.org/#url-class


	var URLConstructor = function URL(url
	/* , base */
	) {
	  var that = anInstance(this, URLConstructor, 'URL');
	  var base = arguments.length > 1 ? arguments[1] : undefined;
	  var urlString = String(url);
	  var state = setInternalState$6(that, {
	    type: 'URL'
	  });
	  var baseState, failure;

	  if (base !== undefined) {
	    if (base instanceof URLConstructor) baseState = getInternalURLState(base);else {
	      failure = parseURL(baseState = {}, String(base));
	      if (failure) throw TypeError(failure);
	    }
	  }

	  failure = parseURL(state, urlString, null, baseState);
	  if (failure) throw TypeError(failure);
	  var searchParams = state.searchParams = new URLSearchParams$1();
	  var searchParamsState = getInternalSearchParamsState(searchParams);
	  searchParamsState.updateSearchParams(state.query);

	  searchParamsState.updateURL = function () {
	    state.query = String(searchParams) || null;
	  };

	  if (!descriptors) {
	    that.href = serializeURL.call(that);
	    that.origin = getOrigin.call(that);
	    that.protocol = getProtocol.call(that);
	    that.username = getUsername.call(that);
	    that.password = getPassword.call(that);
	    that.host = getHost.call(that);
	    that.hostname = getHostname.call(that);
	    that.port = getPort.call(that);
	    that.pathname = getPathname.call(that);
	    that.search = getSearch.call(that);
	    that.searchParams = getSearchParams.call(that);
	    that.hash = getHash.call(that);
	  }
	};

	var URLPrototype = URLConstructor.prototype;

	var serializeURL = function () {
	  var url = getInternalURLState(this);
	  var scheme = url.scheme;
	  var username = url.username;
	  var password = url.password;
	  var host = url.host;
	  var port = url.port;
	  var path = url.path;
	  var query = url.query;
	  var fragment = url.fragment;
	  var output = scheme + ':';

	  if (host !== null) {
	    output += '//';

	    if (includesCredentials(url)) {
	      output += username + (password ? ':' + password : '') + '@';
	    }

	    output += serializeHost(host);
	    if (port !== null) output += ':' + port;
	  } else if (scheme == 'file') output += '//';

	  output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
	  if (query !== null) output += '?' + query;
	  if (fragment !== null) output += '#' + fragment;
	  return output;
	};

	var getOrigin = function () {
	  var url = getInternalURLState(this);
	  var scheme = url.scheme;
	  var port = url.port;
	  if (scheme == 'blob') try {
	    return new URL(scheme.path[0]).origin;
	  } catch (error) {
	    return 'null';
	  }
	  if (scheme == 'file' || !isSpecial(url)) return 'null';
	  return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
	};

	var getProtocol = function () {
	  return getInternalURLState(this).scheme + ':';
	};

	var getUsername = function () {
	  return getInternalURLState(this).username;
	};

	var getPassword = function () {
	  return getInternalURLState(this).password;
	};

	var getHost = function () {
	  var url = getInternalURLState(this);
	  var host = url.host;
	  var port = url.port;
	  return host === null ? '' : port === null ? serializeHost(host) : serializeHost(host) + ':' + port;
	};

	var getHostname = function () {
	  var host = getInternalURLState(this).host;
	  return host === null ? '' : serializeHost(host);
	};

	var getPort = function () {
	  var port = getInternalURLState(this).port;
	  return port === null ? '' : String(port);
	};

	var getPathname = function () {
	  var url = getInternalURLState(this);
	  var path = url.path;
	  return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
	};

	var getSearch = function () {
	  var query = getInternalURLState(this).query;
	  return query ? '?' + query : '';
	};

	var getSearchParams = function () {
	  return getInternalURLState(this).searchParams;
	};

	var getHash = function () {
	  var fragment = getInternalURLState(this).fragment;
	  return fragment ? '#' + fragment : '';
	};

	var accessorDescriptor = function (getter, setter) {
	  return {
	    get: getter,
	    set: setter,
	    configurable: true,
	    enumerable: true
	  };
	};

	if (descriptors) {
	  objectDefineProperties(URLPrototype, {
	    // `URL.prototype.href` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-href
	    href: accessorDescriptor(serializeURL, function (href) {
	      var url = getInternalURLState(this);
	      var urlString = String(href);
	      var failure = parseURL(url, urlString);
	      if (failure) throw TypeError(failure);
	      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
	    }),
	    // `URL.prototype.origin` getter
	    // https://url.spec.whatwg.org/#dom-url-origin
	    origin: accessorDescriptor(getOrigin),
	    // `URL.prototype.protocol` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-protocol
	    protocol: accessorDescriptor(getProtocol, function (protocol) {
	      var url = getInternalURLState(this);
	      parseURL(url, String(protocol) + ':', SCHEME_START);
	    }),
	    // `URL.prototype.username` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-username
	    username: accessorDescriptor(getUsername, function (username) {
	      var url = getInternalURLState(this);
	      var codePoints = arrayFrom(String(username));
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      url.username = '';

	      for (var i = 0; i < codePoints.length; i++) {
	        url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	      }
	    }),
	    // `URL.prototype.password` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-password
	    password: accessorDescriptor(getPassword, function (password) {
	      var url = getInternalURLState(this);
	      var codePoints = arrayFrom(String(password));
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      url.password = '';

	      for (var i = 0; i < codePoints.length; i++) {
	        url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	      }
	    }),
	    // `URL.prototype.host` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-host
	    host: accessorDescriptor(getHost, function (host) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      parseURL(url, String(host), HOST);
	    }),
	    // `URL.prototype.hostname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hostname
	    hostname: accessorDescriptor(getHostname, function (hostname) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      parseURL(url, String(hostname), HOSTNAME);
	    }),
	    // `URL.prototype.port` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-port
	    port: accessorDescriptor(getPort, function (port) {
	      var url = getInternalURLState(this);
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      port = String(port);
	      if (port == '') url.port = null;else parseURL(url, port, PORT);
	    }),
	    // `URL.prototype.pathname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-pathname
	    pathname: accessorDescriptor(getPathname, function (pathname) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      url.path = [];
	      parseURL(url, pathname + '', PATH_START);
	    }),
	    // `URL.prototype.search` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-search
	    search: accessorDescriptor(getSearch, function (search) {
	      var url = getInternalURLState(this);
	      search = String(search);

	      if (search == '') {
	        url.query = null;
	      } else {
	        if ('?' == search.charAt(0)) search = search.slice(1);
	        url.query = '';
	        parseURL(url, search, QUERY);
	      }

	      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
	    }),
	    // `URL.prototype.searchParams` getter
	    // https://url.spec.whatwg.org/#dom-url-searchparams
	    searchParams: accessorDescriptor(getSearchParams),
	    // `URL.prototype.hash` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hash
	    hash: accessorDescriptor(getHash, function (hash) {
	      var url = getInternalURLState(this);
	      hash = String(hash);

	      if (hash == '') {
	        url.fragment = null;
	        return;
	      }

	      if ('#' == hash.charAt(0)) hash = hash.slice(1);
	      url.fragment = '';
	      parseURL(url, hash, FRAGMENT);
	    })
	  });
	} // `URL.prototype.toJSON` method
	// https://url.spec.whatwg.org/#dom-url-tojson


	redefine(URLPrototype, 'toJSON', function toJSON() {
	  return serializeURL.call(this);
	}, {
	  enumerable: true
	}); // `URL.prototype.toString` method
	// https://url.spec.whatwg.org/#URL-stringification-behavior

	redefine(URLPrototype, 'toString', function toString() {
	  return serializeURL.call(this);
	}, {
	  enumerable: true
	});

	if (NativeURL) {
	  var nativeCreateObjectURL = NativeURL.createObjectURL;
	  var nativeRevokeObjectURL = NativeURL.revokeObjectURL; // `URL.createObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
	  // eslint-disable-next-line no-unused-vars

	  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
	    return nativeCreateObjectURL.apply(NativeURL, arguments);
	  }); // `URL.revokeObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
	  // eslint-disable-next-line no-unused-vars

	  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
	    return nativeRevokeObjectURL.apply(NativeURL, arguments);
	  });
	}

	setToStringTag(URLConstructor, 'URL');
	_export({
	  global: true,
	  forced: !nativeUrl,
	  sham: !descriptors
	}, {
	  URL: URLConstructor
	});

	// https://url.spec.whatwg.org/#dom-url-tojson


	_export({
	  target: 'URL',
	  proto: true,
	  enumerable: true
	}, {
	  toJSON: function toJSON() {
	    return URL.prototype.toString.call(this);
	  }
	});

	var freezing = !fails(function () {
	  return Object.isExtensible(Object.preventExtensions({}));
	});

	var internalMetadata = createCommonjsModule(function (module) {
	  var defineProperty = objectDefineProperty.f;
	  var METADATA = uid('meta');
	  var id = 0;

	  var isExtensible = Object.isExtensible || function () {
	    return true;
	  };

	  var setMetadata = function (it) {
	    defineProperty(it, METADATA, {
	      value: {
	        objectID: 'O' + ++id,
	        // object ID
	        weakData: {} // weak collections IDs

	      }
	    });
	  };

	  var fastKey = function (it, create) {
	    // return a primitive with prefix
	    if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

	    if (!has(it, METADATA)) {
	      // can't set metadata to uncaught frozen object
	      if (!isExtensible(it)) return 'F'; // not necessary to add metadata

	      if (!create) return 'E'; // add missing metadata

	      setMetadata(it); // return object ID
	    }

	    return it[METADATA].objectID;
	  };

	  var getWeakData = function (it, create) {
	    if (!has(it, METADATA)) {
	      // can't set metadata to uncaught frozen object
	      if (!isExtensible(it)) return true; // not necessary to add metadata

	      if (!create) return false; // add missing metadata

	      setMetadata(it); // return the store of weak collections IDs
	    }

	    return it[METADATA].weakData;
	  }; // add metadata on freeze-family methods calling


	  var onFreeze = function (it) {
	    if (freezing && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
	    return it;
	  };

	  var meta = module.exports = {
	    REQUIRED: false,
	    fastKey: fastKey,
	    getWeakData: getWeakData,
	    onFreeze: onFreeze
	  };
	  hiddenKeys[METADATA] = true;
	});
	var internalMetadata_1 = internalMetadata.REQUIRED;
	var internalMetadata_2 = internalMetadata.fastKey;
	var internalMetadata_3 = internalMetadata.getWeakData;
	var internalMetadata_4 = internalMetadata.onFreeze;

	var collection = function (CONSTRUCTOR_NAME, wrapper, common) {
	  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
	  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var NativeConstructor = global_1[CONSTRUCTOR_NAME];
	  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
	  var Constructor = NativeConstructor;
	  var exported = {};

	  var fixMethod = function (KEY) {
	    var nativeMethod = NativePrototype[KEY];
	    redefine(NativePrototype, KEY, KEY == 'add' ? function add(value) {
	      nativeMethod.call(this, value === 0 ? 0 : value);
	      return this;
	    } : KEY == 'delete' ? function (key) {
	      return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
	    } : KEY == 'get' ? function get(key) {
	      return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
	    } : KEY == 'has' ? function has(key) {
	      return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
	    } : function set(key, value) {
	      nativeMethod.call(this, key === 0 ? 0 : key, value);
	      return this;
	    });
	  }; // eslint-disable-next-line max-len


	  if (isForced_1(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
	    new NativeConstructor().entries().next();
	  })))) {
	    // create collection constructor
	    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
	    internalMetadata.REQUIRED = true;
	  } else if (isForced_1(CONSTRUCTOR_NAME, true)) {
	    var instance = new Constructor(); // early implementations not supports chaining

	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false

	    var THROWS_ON_PRIMITIVES = fails(function () {
	      instance.has(1);
	    }); // most early implementations doesn't supports iterables, most modern - not close it correctly
	    // eslint-disable-next-line no-new

	    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) {
	      new NativeConstructor(iterable);
	    }); // for early implementations -0 and +0 not the same

	    var BUGGY_ZERO = !IS_WEAK && fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new NativeConstructor();
	      var index = 5;

	      while (index--) $instance[ADDER](index, index);

	      return !$instance.has(-0);
	    });

	    if (!ACCEPT_ITERABLES) {
	      Constructor = wrapper(function (dummy, iterable) {
	        anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
	        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
	        if (iterable != undefined) iterate(iterable, that[ADDER], {
	          that: that,
	          AS_ENTRIES: IS_MAP
	        });
	        return that;
	      });
	      Constructor.prototype = NativePrototype;
	      NativePrototype.constructor = Constructor;
	    }

	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }

	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method

	    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
	  }

	  exported[CONSTRUCTOR_NAME] = Constructor;
	  _export({
	    global: true,
	    forced: Constructor != NativeConstructor
	  }, exported);
	  setToStringTag(Constructor, CONSTRUCTOR_NAME);
	  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
	  return Constructor;
	};

	var defineProperty$8 = objectDefineProperty.f;
	var fastKey = internalMetadata.fastKey;
	var setInternalState$7 = internalState.set;
	var internalStateGetterFor = internalState.getterFor;
	var collectionStrong = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, CONSTRUCTOR_NAME);
	      setInternalState$7(that, {
	        type: CONSTRUCTOR_NAME,
	        index: objectCreate(null),
	        first: undefined,
	        last: undefined,
	        size: 0
	      });
	      if (!descriptors) that.size = 0;
	      if (iterable != undefined) iterate(iterable, that[ADDER], {
	        that: that,
	        AS_ENTRIES: IS_MAP
	      });
	    });
	    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var entry = getEntry(that, key);
	      var previous, index; // change existing entry

	      if (entry) {
	        entry.value = value; // create new entry
	      } else {
	        state.last = entry = {
	          index: index = fastKey(key, true),
	          key: key,
	          value: value,
	          previous: previous = state.last,
	          next: undefined,
	          removed: false
	        };
	        if (!state.first) state.first = entry;
	        if (previous) previous.next = entry;
	        if (descriptors) state.size++;else that.size++; // add to index

	        if (index !== 'F') state.index[index] = entry;
	      }

	      return that;
	    };

	    var getEntry = function (that, key) {
	      var state = getInternalState(that); // fast case

	      var index = fastKey(key);
	      var entry;
	      if (index !== 'F') return state.index[index]; // frozen object case

	      for (entry = state.first; entry; entry = entry.next) {
	        if (entry.key == key) return entry;
	      }
	    };

	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        var that = this;
	        var state = getInternalState(that);
	        var data = state.index;
	        var entry = state.first;

	        while (entry) {
	          entry.removed = true;
	          if (entry.previous) entry.previous = entry.previous.next = undefined;
	          delete data[entry.index];
	          entry = entry.next;
	        }

	        state.first = state.last = undefined;
	        if (descriptors) state.size = 0;else that.size = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = this;
	        var state = getInternalState(that);
	        var entry = getEntry(that, key);

	        if (entry) {
	          var next = entry.next;
	          var prev = entry.previous;
	          delete state.index[entry.index];
	          entry.removed = true;
	          if (prev) prev.next = next;
	          if (next) next.previous = prev;
	          if (state.first == entry) state.first = next;
	          if (state.last == entry) state.last = prev;
	          if (descriptors) state.size--;else that.size--;
	        }

	        return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn
	      /* , that = undefined */
	      ) {
	        var state = getInternalState(this);
	        var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;

	        while (entry = entry ? entry.next : state.first) {
	          boundFunction(entry.value, entry.key, this); // revert to the last existing entry

	          while (entry && entry.removed) entry = entry.previous;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(this, key);
	      }
	    });
	    redefineAll(C.prototype, IS_MAP ? {
	      // 23.1.3.6 Map.prototype.get(key)
	      get: function get(key) {
	        var entry = getEntry(this, key);
	        return entry && entry.value;
	      },
	      // 23.1.3.9 Map.prototype.set(key, value)
	      set: function set(key, value) {
	        return define(this, key === 0 ? 0 : key, value);
	      }
	    } : {
	      // 23.2.3.1 Set.prototype.add(value)
	      add: function add(value) {
	        return define(this, value = value === 0 ? 0 : value, value);
	      }
	    });
	    if (descriptors) defineProperty$8(C.prototype, 'size', {
	      get: function () {
	        return getInternalState(this).size;
	      }
	    });
	    return C;
	  },
	  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
	    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
	    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
	    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME); // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11

	    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
	      setInternalState$7(this, {
	        type: ITERATOR_NAME,
	        target: iterated,
	        state: getInternalCollectionState(iterated),
	        kind: kind,
	        last: undefined
	      });
	    }, function () {
	      var state = getInternalIteratorState(this);
	      var kind = state.kind;
	      var entry = state.last; // revert to the last existing entry

	      while (entry && entry.removed) entry = entry.previous; // get next entry


	      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
	        // or finish the iteration
	        state.target = undefined;
	        return {
	          value: undefined,
	          done: true
	        };
	      } // return step by kind


	      if (kind == 'keys') return {
	        value: entry.key,
	        done: false
	      };
	      if (kind == 'values') return {
	        value: entry.value,
	        done: false
	      };
	      return {
	        value: [entry.key, entry.value],
	        done: false
	      };
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2

	    setSpecies(CONSTRUCTOR_NAME);
	  }
	};

	// https://tc39.github.io/ecma262/#sec-set-objects


	var es_set = collection('Set', function (init) {
	  return function Set() {
	    return init(this, arguments.length ? arguments[0] : undefined);
	  };
	}, collectionStrong);

	// https://tc39.github.io/ecma262/#sec-array.prototype.fill


	var arrayFill = function fill(value
	/* , start = 0, end = @length */
	) {
	  var O = toObject(this);
	  var length = toLength(O.length);
	  var argumentsLength = arguments.length;
	  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
	  var end = argumentsLength > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);

	  while (endPos > index) O[index++] = value;

	  return O;
	};

	// https://tc39.github.io/ecma262/#sec-array.prototype.fill

	_export({
	  target: 'Array',
	  proto: true
	}, {
	  fill: arrayFill
	}); // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

	addToUnscopables('fill');

	var IGVGraphics = {
	  setProperties: function setProperties(ctx, properties) {
	    for (var key in properties) {
	      if (properties.hasOwnProperty(key)) {
	        var value = properties[key];
	        ctx[key] = value;
	      }
	    }
	  },
	  strokeLine: function strokeLine(ctx, x1, y1, x2, y2, properties) {
	    x1 = Math.floor(x1) + 0.5;
	    y1 = Math.floor(y1) + 0.5;
	    x2 = Math.floor(x2) + 0.5;
	    y2 = Math.floor(y2) + 0.5;

	    if (properties) {
	      ctx.save();
	      IGVGraphics.setProperties(ctx, properties);
	    }

	    ctx.beginPath();
	    ctx.moveTo(x1, y1);
	    ctx.lineTo(x2, y2);
	    ctx.stroke();
	    if (properties) ctx.restore();
	  },
	  fillRect: function fillRect(ctx, x, y, w, h, properties) {
	    x = Math.round(x);
	    y = Math.round(y);

	    if (properties) {
	      ctx.save();
	      IGVGraphics.setProperties(ctx, properties);
	    }

	    ctx.fillRect(x, y, w, h);

	    if (properties && properties.strokeStyle) {
	      ctx.strokeRect(x, y, w, h);
	    }

	    if (properties) ctx.restore();
	  },
	  fillPolygon: function fillPolygon(ctx, x, y, properties) {
	    if (properties) {
	      ctx.save();
	      IGVGraphics.setProperties(ctx, properties);
	    }

	    doPath(ctx, x, y);
	    ctx.fill();

	    if (properties && properties.strokeStyle) {
	      ctx.stroke();
	    }

	    if (properties) ctx.restore();
	  },
	  strokePolygon: function strokePolygon(ctx, x, y, properties) {
	    if (properties) {
	      ctx.save();
	      IGVGraphics.setProperties(ctx, properties);
	    }

	    doPath(ctx, x, y);
	    ctx.stroke();
	    if (properties) ctx.restore();
	  },
	  fillText: function fillText(ctx, text, x, y, properties, transforms) {
	    if (properties || transforms) {
	      ctx.save();
	    }

	    if (properties) {
	      IGVGraphics.setProperties(ctx, properties);
	    }

	    if (transforms) {
	      // Slow path with context saving and extra translate
	      ctx.translate(x, y);

	      for (var transform in transforms) {
	        var value = transforms[transform]; // TODO: Add error checking for robustness

	        if (transform === 'translate') {
	          ctx.translate(value['x'], value['y']);
	        }

	        if (transform === 'rotate') {
	          ctx.rotate(value['angle'] * Math.PI / 180);
	        }
	      }

	      ctx.fillText(text, 0, 0);
	    } else {
	      ctx.fillText(text, x, y);
	    }

	    if (properties || transforms) ctx.restore();
	  },
	  strokeText: function strokeText(ctx, text, x, y, properties, transforms) {
	    if (properties || transforms) {
	      ctx.save();
	    }

	    if (properties) {
	      IGVGraphics.setProperties(ctx, properties);
	    }

	    if (transforms) {
	      ctx.translate(x, y);

	      for (var transform in transforms) {
	        var value = transforms[transform]; // TODO: Add error checking for robustness

	        if (transform === 'translate') {
	          ctx.translate(value['x'], value['y']);
	        }

	        if (transform === 'rotate') {
	          ctx.rotate(value['angle'] * Math.PI / 180);
	        }
	      }

	      ctx.strokeText(text, 0, 0);
	    } else {
	      ctx.strokeText(text, x, y);
	    }

	    if (properties || transforms) ctx.restore();
	  },
	  strokeCircle: function strokeCircle(ctx, x, y, radius, properties) {
	    if (properties) {
	      ctx.save();
	      IGVGraphics.setProperties(ctx, properties);
	    }

	    ctx.beginPath();
	    ctx.arc(x, y, radius, 0, 2 * Math.PI);
	    ctx.stroke();
	    if (properties) ctx.restore();
	  },
	  fillCircle: function fillCircle(ctx, x, y, radius, properties) {
	    if (properties) {
	      ctx.save();
	      IGVGraphics.setProperties(ctx, properties);
	    }

	    ctx.beginPath();
	    ctx.arc(x, y, radius, 0, 2 * Math.PI);
	    ctx.fill();
	    if (properties) ctx.restore();
	  },
	  drawArrowhead: function drawArrowhead(ctx, x, y, size, lineWidth) {
	    ctx.save();

	    if (!size) {
	      size = 5;
	    }

	    if (lineWidth) {
	      ctx.lineWidth = lineWidth;
	    }

	    ctx.beginPath();
	    ctx.moveTo(x, y - size / 2);
	    ctx.lineTo(x, y + size / 2);
	    ctx.lineTo(x + size, y);
	    ctx.lineTo(x, y - size / 2);
	    ctx.closePath();
	    ctx.fill();
	    ctx.restore();
	  },
	  dashedLine: function dashedLine(ctx, x1, y1, x2, y2, dashLen) {
	    var properties = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};
	    if (dashLen === undefined) dashLen = 2;
	    ctx.setLineDash([dashLen, dashLen]);
	    IGVGraphics.strokeLine(ctx, x1, y1, x2, y2, properties);
	    ctx.setLineDash([]);
	  },
	  roundRect: function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
	    if (typeof stroke == "undefined") {
	      stroke = true;
	    }

	    if (typeof radius === "undefined") {
	      radius = 5;
	    }

	    ctx.beginPath();
	    ctx.moveTo(x + radius, y);
	    ctx.lineTo(x + width - radius, y);
	    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
	    ctx.lineTo(x + width, y + height - radius);
	    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
	    ctx.lineTo(x + radius, y + height);
	    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
	    ctx.lineTo(x, y + radius);
	    ctx.quadraticCurveTo(x, y, x + radius, y);
	    ctx.closePath();

	    if (stroke) {
	      ctx.stroke();
	    }

	    if (fill) {
	      ctx.fill();
	    }
	  },
	  polygon: function polygon(ctx, x, y, fill, stroke) {
	    if (typeof stroke == "undefined") {
	      stroke = true;
	    }

	    ctx.beginPath();
	    var len = x.length;
	    ctx.moveTo(x[0], y[0]);

	    for (var i = 1; i < len; i++) {
	      ctx.lineTo(x[i], y[i]); // this.moveTo(x[i], y[i]);
	    }

	    ctx.closePath();

	    if (stroke) {
	      ctx.stroke();
	    }

	    if (fill) {
	      ctx.fill();
	    }
	  }
	};

	function doPath(ctx, x, y) {
	  var i,
	      len = x.length;

	  for (i = 0; i < len; i++) {
	    x[i] = Math.round(x[i]);
	    y[i] = Math.round(y[i]);
	  }

	  ctx.beginPath();
	  ctx.moveTo(x[0], y[0]);

	  for (i = 1; i < len; i++) {
	    ctx.lineTo(x[i], y[i]);
	  }

	  ctx.closePath();
	}

	var ViewportBase = /*#__PURE__*/function () {
	  function ViewportBase(trackView, $viewportContainer, referenceFrame, width) {
	    _classCallCheck(this, ViewportBase);

	    this.guid = guid();
	    this.trackView = trackView;
	    this.referenceFrame = referenceFrame;
	    this.browser = trackView.browser;
	    this.$viewport = $('<div class="igv-viewport">');
	    $viewportContainer.append(this.$viewport); // store the viewport GUID for later use

	    this.$viewport.data('viewportGUID', this.guid);
	    this.$content = $("<div>", {
	      class: 'igv-viewport-content'
	    });
	    this.$viewport.append(this.$content);
	    this.$content.height(this.$viewport.height());
	    this.contentDiv = this.$content.get(0);
	    this.$canvas = $('<canvas class ="igv-canvas">');
	    this.$content.append(this.$canvas);
	    this.canvas = this.$canvas.get(0);
	    this.ctx = this.canvas.getContext("2d");
	    this.setWidth(width);
	    this.initializationHelper();
	  }

	  _createClass(ViewportBase, [{
	    key: "initializationHelper",
	    value: function initializationHelper() {}
	  }, {
	    key: "setTrackLabel",
	    value: function setTrackLabel(label) {}
	  }, {
	    key: "startSpinner",
	    value: function startSpinner() {}
	  }, {
	    key: "stopSpinner",
	    value: function stopSpinner() {}
	  }, {
	    key: "checkZoomIn",
	    value: function checkZoomIn() {
	      return true;
	    }
	  }, {
	    key: "showMessage",
	    value: function showMessage(message) {
	      if (!this.messageDiv) {
	        this.messageDiv = document.createElement('div');
	        this.messageDiv.className = 'igv-viewport-message';
	        this.contentDiv.append(this.messageDiv);
	      }

	      this.messageDiv.textContent = message;
	      this.messageDiv.style.display = 'inline-block';
	    }
	  }, {
	    key: "hideMessage",
	    value: function hideMessage(message) {
	      if (this.messageDiv) this.messageDiv.style.display = 'none';
	    }
	  }, {
	    key: "renderSVGContext",
	    value: function () {
	      var _renderSVGContext = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(context, offset) {
	        var str, index, id, bbox, yScrollDelta, dx, dy, _this$$viewport$get$g, width, height;

	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (!(this.$zoomInNotice && this.$zoomInNotice.is(":visible"))) {
	                  _context.next = 2;
	                  break;
	                }

	                return _context.abrupt("return");

	              case 2:
	                str = this.trackView.track.name || this.trackView.track.id;
	                str = str.replace(/\W/g, '');
	                index = this.browser.referenceFrameList.indexOf(this.referenceFrame);
	                id = str.toLowerCase() + '_genomic_state_index_' + index; // If present, paint axis canvas. Only in first multi-locus panel.

	                if (0 === index && typeof this.trackView.track.paintAxis === 'function') {
	                  bbox = this.trackView.controlCanvas.getBoundingClientRect();
	                  context.addTrackGroupWithTranslationAndClipRect(id + '_axis', offset.deltaX - bbox.width, offset.deltaY, bbox.width, bbox.height, 0);
	                  context.save();
	                  this.trackView.track.paintAxis(context, bbox.width, bbox.height);
	                  context.restore();
	                }

	                yScrollDelta = $(this.contentDiv).position().top;
	                dx = offset.deltaX + index * context.multiLocusGap;
	                dy = offset.deltaY + yScrollDelta;
	                _this$$viewport$get$g = this.$viewport.get(0).getBoundingClientRect(), width = _this$$viewport$get$g.width, height = _this$$viewport$get$g.height;
	                context.addTrackGroupWithTranslationAndClipRect(id, dx, dy, width, height, -yScrollDelta); // console.log(`ViewportBase render SVG. context.addGroup( id ${ id } dx ${ dx } dy ${ dy } width ${ width } height ${ height } -yScrollDelta ${ -yScrollDelta })`)

	                this.drawSVGWithContect(context, width, height);

	              case 13:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function renderSVGContext(_x, _x2) {
	        return _renderSVGContext.apply(this, arguments);
	      }

	      return renderSVGContext;
	    }()
	  }, {
	    key: "drawSVGWithContect",
	    value: function drawSVGWithContect(context) {}
	  }, {
	    key: "saveSVG",
	    value: function saveSVG() {}
	  }, {
	    key: "isVisible",
	    value: function isVisible() {
	      return this.$viewport.width();
	    }
	  }, {
	    key: "setWidth",
	    value: function setWidth(width) {
	      this.$viewport.width(width);
	      this.canvas.style.width = "".concat(width, "px");
	      this.canvas.setAttribute('width', width);
	    }
	  }, {
	    key: "getWidth",
	    value: function getWidth() {
	      return this.$viewport.width();
	    }
	  }, {
	    key: "shift",
	    value: function shift() {}
	  }, {
	    key: "setTop",
	    value: function setTop(contentTop) {}
	  }, {
	    key: "loadFeatures",
	    value: function () {
	      var _loadFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                return _context2.abrupt("return", undefined);

	              case 1:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2);
	      }));

	      function loadFeatures() {
	        return _loadFeatures.apply(this, arguments);
	      }

	      return loadFeatures;
	    }()
	  }, {
	    key: "setContentHeight",
	    value: function setContentHeight(contentHeight) {}
	  }, {
	    key: "isLoading",
	    value: function isLoading() {
	      return false;
	    }
	  }, {
	    key: "getContentHeight",
	    value: function getContentHeight() {
	      return this.$content.height();
	    }
	  }, {
	    key: "getContentTop",
	    value: function getContentTop() {
	      return this.contentDiv.offsetTop;
	    }
	  }, {
	    key: "containsPosition",
	    value: function containsPosition(chr, position) {
	      if (this.referenceFrame.chr === chr && position >= this.referenceFrame.start) {
	        return position <= this.referenceFrame.calculateEnd(this.getWidth());
	      } else {
	        return false;
	      }
	    }
	    /**
	     * Called when the associated track is removed.  Do any needed cleanup here.
	     */

	  }, {
	    key: "dispose",
	    value: function dispose() {
	      if (this.popover) {
	        this.popover.dispose();
	      }

	      this.$canvas.off();
	      this.$canvas.empty();
	      this.$content.off();
	      this.$content.empty();
	      this.$viewport.off();
	      this.$viewport.empty(); // Null out all properties -- this should not be neccessary, but just in case there is a
	      // reference to self somewhere we want to free memory.

	      for (var _i = 0, _Object$keys = Object.keys(this); _i < _Object$keys.length; _i++) {
	        var key = _Object$keys[_i];
	        this[key] = undefined;
	      }
	    }
	  }]);

	  return ViewportBase;
	}();

	/*!!
	 *  Canvas 2 Svg v1.0.19
	 *  A low level canvas to SVG converter. Uses a mock canvas context to build an SVG document.
	 *
	 *  Licensed under the MIT license:
	 *  http://www.opensource.org/licenses/mit-license.php
	 *
	 *  Author:
	 *  Kerry Liu
	 *
	 *  Copyright (c) 2014 Gliffy Inc.
	 */

	var STYLES, _ctx, CanvasGradient, CanvasPattern, namedEntities; //helper function to format a string


	function format(str, args) {
	  var keys = Object.keys(args),
	      i;

	  for (i = 0; i < keys.length; i++) {
	    str = str.replace(new RegExp("\\{" + keys[i] + "\\}", "gi"), args[keys[i]]);
	  }

	  return str;
	} //helper function that generates a random string


	function randomString(holder) {
	  var chars, randomstring, i;

	  if (!holder) {
	    throw new Error("cannot create a random attribute name for an undefined object");
	  }

	  chars = "ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
	  randomstring = "";

	  do {
	    randomstring = "";

	    for (i = 0; i < 12; i++) {
	      randomstring += chars[Math.floor(Math.random() * chars.length)];
	    }
	  } while (holder[randomstring]);

	  return randomstring;
	} //helper function to map named to numbered entities


	function createNamedToNumberedLookup(items, radix) {
	  var i,
	      entity,
	      lookup = {},
	      base10;
	  items = items.split(',');
	  radix = radix || 10; // Map from named to numbered entities.

	  for (i = 0; i < items.length; i += 2) {
	    entity = '&' + items[i + 1] + ';';
	    base10 = parseInt(items[i], radix);
	    lookup[entity] = '&#' + base10 + ';';
	  } //FF and IE need to create a regex from hex values ie &nbsp; == \xa0


	  lookup["\\xa0"] = '&#160;';
	  return lookup;
	} //helper function to map canvas-textAlign to svg-textAnchor


	function getTextAnchor(textAlign) {
	  //TODO: support rtl languages
	  var mapping = {
	    "left": "start",
	    "right": "end",
	    "center": "middle",
	    "start": "start",
	    "end": "end"
	  };
	  return mapping[textAlign] || mapping.start;
	} //helper function to map canvas-textBaseline to svg-dominantBaseline


	function getDominantBaseline(textBaseline) {
	  //INFO: not supported in all browsers
	  var mapping = {
	    "alphabetic": "alphabetic",
	    "hanging": "hanging",
	    "top": "text-before-edge",
	    "bottom": "text-after-edge",
	    "middle": "central"
	  };
	  return mapping[textBaseline] || mapping.alphabetic;
	} // Unpack entities lookup where the numbers are in radix 32 to reduce the size
	// entity mapping courtesy of tinymce


	namedEntities = createNamedToNumberedLookup('50,nbsp,51,iexcl,52,cent,53,pound,54,curren,55,yen,56,brvbar,57,sect,58,uml,59,copy,' + '5a,ordf,5b,laquo,5c,not,5d,shy,5e,reg,5f,macr,5g,deg,5h,plusmn,5i,sup2,5j,sup3,5k,acute,' + '5l,micro,5m,para,5n,middot,5o,cedil,5p,sup1,5q,ordm,5r,raquo,5s,frac14,5t,frac12,5u,frac34,' + '5v,iquest,60,Agrave,61,Aacute,62,Acirc,63,Atilde,64,Auml,65,Aring,66,AElig,67,Ccedil,' + '68,Egrave,69,Eacute,6a,Ecirc,6b,Euml,6c,Igrave,6d,Iacute,6e,Icirc,6f,Iuml,6g,ETH,6h,Ntilde,' + '6i,Ograve,6j,Oacute,6k,Ocirc,6l,Otilde,6m,Ouml,6n,times,6o,Oslash,6p,Ugrave,6q,Uacute,' + '6r,Ucirc,6s,Uuml,6t,Yacute,6u,THORN,6v,szlig,70,agrave,71,aacute,72,acirc,73,atilde,74,auml,' + '75,aring,76,aelig,77,ccedil,78,egrave,79,eacute,7a,ecirc,7b,euml,7c,igrave,7d,iacute,7e,icirc,' + '7f,iuml,7g,eth,7h,ntilde,7i,ograve,7j,oacute,7k,ocirc,7l,otilde,7m,ouml,7n,divide,7o,oslash,' + '7p,ugrave,7q,uacute,7r,ucirc,7s,uuml,7t,yacute,7u,thorn,7v,yuml,ci,fnof,sh,Alpha,si,Beta,' + 'sj,Gamma,sk,Delta,sl,Epsilon,sm,Zeta,sn,Eta,so,Theta,sp,Iota,sq,Kappa,sr,Lambda,ss,Mu,' + 'st,Nu,su,Xi,sv,Omicron,t0,Pi,t1,Rho,t3,Sigma,t4,Tau,t5,Upsilon,t6,Phi,t7,Chi,t8,Psi,' + 't9,Omega,th,alpha,ti,beta,tj,gamma,tk,delta,tl,epsilon,tm,zeta,tn,eta,to,theta,tp,iota,' + 'tq,kappa,tr,lambda,ts,mu,tt,nu,tu,xi,tv,omicron,u0,pi,u1,rho,u2,sigmaf,u3,sigma,u4,tau,' + 'u5,upsilon,u6,phi,u7,chi,u8,psi,u9,omega,uh,thetasym,ui,upsih,um,piv,812,bull,816,hellip,' + '81i,prime,81j,Prime,81u,oline,824,frasl,88o,weierp,88h,image,88s,real,892,trade,89l,alefsym,' + '8cg,larr,8ch,uarr,8ci,rarr,8cj,darr,8ck,harr,8dl,crarr,8eg,lArr,8eh,uArr,8ei,rArr,8ej,dArr,' + '8ek,hArr,8g0,forall,8g2,part,8g3,exist,8g5,empty,8g7,nabla,8g8,isin,8g9,notin,8gb,ni,8gf,prod,' + '8gh,sum,8gi,minus,8gn,lowast,8gq,radic,8gt,prop,8gu,infin,8h0,ang,8h7,and,8h8,or,8h9,cap,8ha,cup,' + '8hb,int,8hk,there4,8hs,sim,8i5,cong,8i8,asymp,8j0,ne,8j1,equiv,8j4,le,8j5,ge,8k2,sub,8k3,sup,8k4,' + 'nsub,8k6,sube,8k7,supe,8kl,oplus,8kn,otimes,8l5,perp,8m5,sdot,8o8,lceil,8o9,rceil,8oa,lfloor,8ob,' + 'rfloor,8p9,lang,8pa,rang,9ea,loz,9j0,spades,9j3,clubs,9j5,hearts,9j6,diams,ai,OElig,aj,oelig,b0,' + 'Scaron,b1,scaron,bo,Yuml,m6,circ,ms,tilde,802,ensp,803,emsp,809,thinsp,80c,zwnj,80d,zwj,80e,lrm,' + '80f,rlm,80j,ndash,80k,mdash,80o,lsquo,80p,rsquo,80q,sbquo,80s,ldquo,80t,rdquo,80u,bdquo,810,dagger,' + '811,Dagger,81g,permil,81p,lsaquo,81q,rsaquo,85c,euro', 32); //Some basic mappings for attributes and default values.

	STYLES = {
	  "strokeStyle": {
	    svgAttr: "stroke",
	    //corresponding svg attribute
	    canvas: "#000000",
	    //canvas default
	    svg: "none",
	    //svg default
	    apply: "stroke" //apply on stroke() or fill()

	  },
	  "fillStyle": {
	    svgAttr: "fill",
	    canvas: "#000000",
	    svg: null,
	    //svg default is black, but we need to special case this to handle canvas stroke without fill
	    apply: "fill"
	  },
	  "lineCap": {
	    svgAttr: "stroke-linecap",
	    canvas: "butt",
	    svg: "butt",
	    apply: "stroke"
	  },
	  "lineJoin": {
	    svgAttr: "stroke-linejoin",
	    canvas: "miter",
	    svg: "miter",
	    apply: "stroke"
	  },
	  "miterLimit": {
	    svgAttr: "stroke-miterlimit",
	    canvas: 10,
	    svg: 4,
	    apply: "stroke"
	  },
	  "lineWidth": {
	    svgAttr: "stroke-width",
	    canvas: 1,
	    svg: 1,
	    apply: "stroke"
	  },
	  "globalAlpha": {
	    svgAttr: "opacity",
	    canvas: 1,
	    svg: 1,
	    apply: "fill stroke"
	  },
	  "font": {
	    //font converts to multiple svg attributes, there is custom logic for this
	    canvas: "10px sans-serif"
	  },
	  "shadowColor": {
	    canvas: "#000000"
	  },
	  "shadowOffsetX": {
	    canvas: 0
	  },
	  "shadowOffsetY": {
	    canvas: 0
	  },
	  "shadowBlur": {
	    canvas: 0
	  },
	  "textAlign": {
	    canvas: "start"
	  },
	  "textBaseline": {
	    canvas: "alphabetic"
	  },
	  "lineDash": {
	    svgAttr: "stroke-dasharray",
	    canvas: [],
	    svg: null,
	    apply: "stroke"
	  }
	};
	/**
	 *
	 * @param gradientNode - reference to the gradient
	 * @constructor
	 */

	CanvasGradient = function CanvasGradient(gradientNode, ctx) {
	  this.__root = gradientNode;
	  this.__ctx = ctx;
	};
	/**
	 * Adds a color stop to the gradient root
	 */


	CanvasGradient.prototype.addColorStop = function (offset, color) {
	  var stop = this.__ctx.__createElement("stop"),
	      regex,
	      matches;

	  stop.setAttribute("offset", offset);

	  if (color && color.indexOf("rgba") !== -1) {
	    //separate alpha value, since webkit can't handle it
	    regex = /rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d?\.?\d*)\s*\)/gi;
	    matches = regex.exec(color);
	    stop.setAttribute("stop-color", format("rgb({r},{g},{b})", {
	      r: matches[1],
	      g: matches[2],
	      b: matches[3]
	    }));
	    stop.setAttribute("stop-opacity", matches[4]);
	  } else {
	    stop.setAttribute("stop-color", color);
	  }

	  this.__root.appendChild(stop);
	};

	CanvasPattern = function CanvasPattern(pattern, ctx) {
	  this.__root = pattern;
	  this.__ctx = ctx;
	};
	/**
	 * The mock canvas context
	 * @param config - options include:
	 * ctx - existing Context2D to wrap around
	 * width - width of your canvas (defaults to 500)
	 * height - height of your canvas (defaults to 500)
	 * enableMirroring - enables canvas mirroring (get image data) (defaults to false)
	 * document - the document object (defaults to the current document)
	 */


	_ctx = function ctx(config) {
	  if (!(this instanceof _ctx)) {
	    //did someone call this without new?
	    return new _ctx(config);
	  } // clone config


	  this.config = config; //setup options

	  this.width = config.width;
	  this.height = config.height;
	  this.enableMirroring = config.enableMirroring || false;
	  this.canvas = this; ///point back to this instance!

	  this.__document = document; // allow passing in an existing context to wrap around
	  // if a context is passed in, we know a canvas already exist

	  if (config.ctx) {
	    this.__ctx = config.ctx;
	  } else {
	    this.__canvas = this.__document.createElement("canvas");
	    this.__ctx = this.__canvas.getContext("2d");
	  } // give this canvas a type


	  this.isSVG = true;

	  this.__setDefaultStyles();

	  this.__stack = [this.__getStyleState()];
	  this.__groupStack = []; // root svg element

	  this.__root = this.__createElement("svg");

	  this.__root.setAttribute("width", this.width);

	  this.__root.setAttribute("height", this.height); // allow contents to overflow svg bbox


	  this.__root.setAttribute('overflow', 'visible'); // viewbox


	  if (config.viewbox) {
	    var str = config.viewbox.x + ' ' + config.viewbox.y + ' ' + config.viewbox.width + ' ' + config.viewbox.height;

	    this.__root.setAttribute("viewBox", str);

	    this.viewbox = config.viewbox;
	  } // make sure we don't generate the same ids in defs


	  this.__ids = {}; // defs

	  this.__defs = this.__createElement("defs");

	  this.__root.appendChild(this.__defs);

	  this.multiLocusGap = config.multiLocusGap; // svg background color

	  var backdropConfig = {
	    id: 'svg_output_backdrop',
	    width: '100%',
	    height: '100%',
	    fill: config.backdropColor || 'white'
	  };

	  var backdropRect = this.__createElement('rect', backdropConfig);

	  this.__root.appendChild(backdropRect); // root group


	  this.__rootGroup = this.__createElement('g', {
	    id: 'root-group'
	  });

	  this.__root.appendChild(this.__rootGroup); // point current element to root group


	  this.__currentElement = this.__rootGroup;
	};

	_ctx.prototype.setWidth = function (width) {
	  this.width = width;

	  this.__root.setAttribute("width", this.width);

	  var str = this.config.viewbox.x + ' ' + this.config.viewbox.y + ' ' + width + ' ' + this.config.viewbox.height;

	  this.__root.setAttribute("viewBox", str);
	};

	_ctx.prototype.setHeight = function (height) {
	  this.height = height;

	  this.__root.setAttribute("height", this.height);

	  var str = this.config.viewbox.x + ' ' + this.config.viewbox.y + ' ' + this.config.viewbox.width + ' ' + height;

	  this.__root.setAttribute("viewBox", str);
	};
	/**
	 * Creates the specified svg element
	 * @private
	 */


	_ctx.prototype.__createElement = function (elementName, properties, resetFill) {
	  if (typeof properties === "undefined") {
	    properties = {};
	  }

	  var element = this.__document.createElementNS("http://www.w3.org/2000/svg", elementName);

	  if (resetFill) {
	    //if fill or stroke is not specified, the svg element should not display. By default SVG's fill is black.
	    element.setAttribute("fill", "none");
	    element.setAttribute("stroke", "none");
	  }

	  for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {
	    var key = _Object$keys[_i];
	    element.setAttribute(key, properties[key]);
	  }

	  return element;
	};
	/**
	 * Applies default canvas styles to the context
	 * @private
	 */


	_ctx.prototype.__setDefaultStyles = function () {
	  //default 2d canvas context properties see:http://www.w3.org/TR/2dcontext/
	  var keys = Object.keys(STYLES),
	      i,
	      key;

	  for (i = 0; i < keys.length; i++) {
	    key = keys[i];
	    this[key] = STYLES[key].canvas;
	  }
	};
	/**
	 * Applies styles on restore
	 * @param styleState
	 * @private
	 */


	_ctx.prototype.__applyStyleState = function (styleState) {
	  var keys = Object.keys(styleState),
	      i,
	      key;

	  for (i = 0; i < keys.length; i++) {
	    key = keys[i];
	    this[key] = styleState[key];
	  }
	};
	/**
	 * Gets the current style state
	 * @return {Object}
	 * @private
	 */


	_ctx.prototype.__getStyleState = function () {
	  var i,
	      styleState = {},
	      keys = Object.keys(STYLES),
	      key;

	  for (i = 0; i < keys.length; i++) {
	    key = keys[i];
	    styleState[key] = this[key];
	  }

	  return styleState;
	};
	/**
	 * Apples the current styles to the current SVG element. On "ctx.fill" or "ctx.stroke"
	 * @param type
	 * @private
	 */


	_ctx.prototype.__applyStyleToCurrentElement = function (type) {
	  var currentElement = this.__currentElement;
	  var currentStyleGroup = this.__currentElementsToStyle;

	  if (currentStyleGroup) {
	    currentElement.setAttribute(type, "");
	    currentElement = currentStyleGroup.element;
	    currentStyleGroup.children.forEach(function (node) {
	      node.setAttribute(type, "");
	    });
	  }

	  var keys = Object.keys(STYLES),
	      i,
	      style,
	      value,
	      id,
	      regex,
	      matches;

	  for (i = 0; i < keys.length; i++) {
	    style = STYLES[keys[i]];
	    value = this[keys[i]];

	    if (style.apply) {
	      //is this a gradient or pattern?
	      if (value instanceof CanvasPattern) {
	        //pattern
	        if (value.__ctx) {
	          //copy over defs
	          while (value.__ctx.__defs.childNodes.length) {
	            id = value.__ctx.__defs.childNodes[0].getAttribute("id");
	            this.__ids[id] = id;

	            this.__defs.appendChild(value.__ctx.__defs.childNodes[0]);
	          }
	        }

	        currentElement.setAttribute(style.apply, format("url(#{id})", {
	          id: value.__root.getAttribute("id")
	        }));
	      } else if (value instanceof CanvasGradient) {
	        //gradient
	        currentElement.setAttribute(style.apply, format("url(#{id})", {
	          id: value.__root.getAttribute("id")
	        }));
	      } else if (style && style.apply.indexOf(type) !== -1 && style.svg !== value) {
	        if ((style.svgAttr === "stroke" || style.svgAttr === "fill") && value && value.indexOf("rgba") !== -1) {
	          //separate alpha value, since illustrator can't handle it
	          regex = /rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d?\.?\d*)\s*\)/gi;
	          matches = regex.exec(value);
	          currentElement.setAttribute(style.svgAttr, format("rgb({r},{g},{b})", {
	            r: matches[1],
	            g: matches[2],
	            b: matches[3]
	          })); //should take globalAlpha here

	          var opacity = matches[4];
	          var globalAlpha = this.globalAlpha;

	          if (globalAlpha != null) {
	            opacity *= globalAlpha;
	          }

	          currentElement.setAttribute(style.svgAttr + "-opacity", opacity);
	        } else {
	          var attr = style.svgAttr;

	          if (keys[i] === 'globalAlpha') {
	            attr = type + '-' + style.svgAttr;

	            if (currentElement.getAttribute(attr)) {
	              //fill-opacity or stroke-opacity has already been set by stroke or fill.
	              continue;
	            }
	          } //otherwise only update attribute if right type, and not svg default


	          currentElement.setAttribute(attr, value);
	        }
	      }
	    }
	  }
	};
	/**
	 * Will return the closest group or svg node. May return the current element.
	 * @private
	 */


	_ctx.prototype.__closestGroupOrSvg = function (node) {
	  node = node || this.__currentElement;

	  if (node.nodeName === "g" || node.nodeName === "svg") {
	    return node;
	  } else {
	    return this.__closestGroupOrSvg(node.parentNode);
	  }
	};
	/**
	 * Returns the serialized value of the svg so far
	 * @param fixNamedEntities - Standalone SVG doesn't support named entities, which document.createTextNode encodes.
	 *                           If true, we attempt to find all named entities and encode it as a numeric entity.
	 * @return serialized svg
	 */


	_ctx.prototype.getSerializedSvg = function (fixNamedEntities) {
	  var serialized = new XMLSerializer().serializeToString(this.__root),
	      keys,
	      i,
	      key,
	      value,
	      regexp;
	 //IE search for a duplicate xmnls because they didn't implement setAttributeNS correctly
	  // xmlns = /xmlns="http:\/\/www\.w3\.org\/2000\/svg".+xmlns="http:\/\/www\.w3\.org\/2000\/svg/gi;
	  // if (xmlns.test(serialized)) {
	  //     serialized = serialized.replace('xmlns="http://www.w3.org/2000/svg','xmlns:xlink="http://www.w3.org/1999/xlink');
	  // }

	  if (fixNamedEntities) {
	    keys = Object.keys(namedEntities); //loop over each named entity and replace with the proper equivalent.

	    for (i = 0; i < keys.length; i++) {
	      key = keys[i];
	      value = namedEntities[key];
	      regexp = new RegExp(key, "gi");

	      if (regexp.test(serialized)) {
	        serialized = serialized.replace(regexp, value);
	      }
	    }
	  }

	  return serialized;
	};
	/**
	 * Returns the root svg
	 * @return
	 */


	_ctx.prototype.getSvg = function () {
	  return this.__root;
	};
	/**
	 * Will generate a group tag.
	 */


	_ctx.prototype.save = function () {
	  var group = this.__createElement("g");

	  var parent = this.__closestGroupOrSvg();

	  this.__groupStack.push(parent);

	  parent.appendChild(group);
	  this.__currentElement = group;

	  this.__stack.push(this.__getStyleState());
	};
	/**
	 * Sets current element to parent, or just root if already root
	 */


	_ctx.prototype.restore = function () {
	  this.__currentElement = this.__groupStack.pop();
	  this.__currentElementsToStyle = null; //Clearing canvas will make the poped group invalid, currentElement is set to the root group node.

	  if (!this.__currentElement) {
	    this.__currentElement = this.__root.childNodes[1];
	  }

	  var state = this.__stack.pop();

	  this.__applyStyleState(state);
	};
	/**
	 * Helper method to add transform
	 * @private
	 */


	_ctx.prototype.__addTransform = function (t) {
	  //if the current element has siblings, add another group
	  var parent = this.__closestGroupOrSvg();

	  if (parent.childNodes.length > 0) {
	    if (this.__currentElement.nodeName === "path") {
	      if (!this.__currentElementsToStyle) this.__currentElementsToStyle = {
	        element: parent,
	        children: []
	      };

	      this.__currentElementsToStyle.children.push(this.__currentElement);

	      this.__applyCurrentDefaultPath();
	    }

	    var group = this.__createElement("g");

	    parent.appendChild(group);
	    this.__currentElement = group;
	  }

	  var transform = this.__currentElement.getAttribute("transform");

	  if (transform) {
	    transform += " ";
	  } else {
	    transform = "";
	  }

	  transform += t;

	  this.__currentElement.setAttribute("transform", transform);
	};

	_ctx.prototype.addTrackGroupWithTranslationAndClipRect = function (id, tx, ty, width, height, clipYOffset) {
	  // clip rect
	  var clip_id = id + '_clip_rect';

	  var clipPath = this.__createElement('clipPath', {
	    id: clip_id
	  });

	  this.__defs.appendChild(clipPath);

	  clipPath.appendChild(this.__createElement('rect', {
	    x: '0',
	    y: clipYOffset.toString(),
	    width: width.toString(),
	    height: height.toString()
	  }));

	  var group = this.__createElement('g');

	  this.__rootGroup.appendChild(group);

	  group.setAttribute('transform', format('translate({x},{y})', {
	    x: tx,
	    y: ty
	  }));
	  group.setAttribute('id', id + '_group'); // add clip rect

	  group.setAttribute('clip-path', format('url(#{id})', {
	    id: clip_id
	  }));
	  this.__currentElement = group;
	};
	/**
	 *  scales the current element
	 */


	_ctx.prototype.scale = function (x, y) {
	  if (y === undefined) {
	    y = x;
	  }

	  this.__addTransform(format("scale({x},{y})", {
	    x: x,
	    y: y
	  }));
	};
	/**
	 * rotates the current element
	 */


	_ctx.prototype.rotate = function (angle) {
	  var degrees = angle * 180 / Math.PI;

	  this.__addTransform(format("rotate({angle},{cx},{cy})", {
	    angle: degrees,
	    cx: 0,
	    cy: 0
	  }));
	};
	/**
	 * translates the current element
	 */


	_ctx.prototype.translate = function (x, y) {
	  this.__addTransform(format("translate({x},{y})", {
	    x: x,
	    y: y
	  }));
	};
	/**
	 * applies a transform to the current element
	 */


	_ctx.prototype.transform = function (a, b, c, d, e, f) {
	  this.__addTransform(format("matrix({a},{b},{c},{d},{e},{f})", {
	    a: a,
	    b: b,
	    c: c,
	    d: d,
	    e: e,
	    f: f
	  }));
	};
	/**
	 * Create a new Path Element
	 */


	_ctx.prototype.beginPath = function () {
	  var path, parent; // Note that there is only one current default path, it is not part of the drawing state.
	  // See also: https://html.spec.whatwg.org/multipage/scripting.html#current-default-path

	  this.__currentDefaultPath = "";
	  this.__currentPosition = {};
	  path = this.__createElement("path", {}, true);
	  parent = this.__closestGroupOrSvg();
	  parent.appendChild(path);
	  this.__currentElement = path;
	};
	/**
	 * Helper function to apply currentDefaultPath to current path element
	 * @private
	 */


	_ctx.prototype.__applyCurrentDefaultPath = function () {
	  var currentElement = this.__currentElement;

	  if (currentElement.nodeName === "path") {
	    currentElement.setAttribute("d", this.__currentDefaultPath);
	  } else {
	    console.error("Attempted to apply path command to node", currentElement.nodeName);
	  }
	};
	/**
	 * Helper function to add path command
	 * @private
	 */


	_ctx.prototype.__addPathCommand = function (command) {
	  this.__currentDefaultPath += " ";
	  this.__currentDefaultPath += command;
	};
	/**
	 * Adds the move command to the current path element,
	 * if the currentPathElement is not empty create a new path element
	 */


	_ctx.prototype.moveTo = function (x, y) {
	  if (this.__currentElement.nodeName !== "path") {
	    this.beginPath();
	  } // creates a new subpath with the given point


	  this.__currentPosition = {
	    x: x,
	    y: y
	  };

	  this.__addPathCommand(format("M {x} {y}", {
	    x: x,
	    y: y
	  }));
	};
	/**
	 * Closes the current path
	 */


	_ctx.prototype.closePath = function () {
	  if (this.__currentDefaultPath) {
	    this.__addPathCommand("Z");
	  }
	};
	/**
	 * Adds a line to command
	 */


	_ctx.prototype.lineTo = function (x, y) {
	  this.__currentPosition = {
	    x: x,
	    y: y
	  };

	  if (this.__currentDefaultPath && this.__currentDefaultPath.indexOf('M') > -1) {
	    this.__addPathCommand(format("L {x} {y}", {
	      x: x,
	      y: y
	    }));
	  } else {
	    this.__addPathCommand(format("M {x} {y}", {
	      x: x,
	      y: y
	    }));
	  }
	};
	/**
	 * Add a bezier command
	 */


	_ctx.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
	  this.__currentPosition = {
	    x: x,
	    y: y
	  };

	  this.__addPathCommand(format("C {cp1x} {cp1y} {cp2x} {cp2y} {x} {y}", {
	    cp1x: cp1x,
	    cp1y: cp1y,
	    cp2x: cp2x,
	    cp2y: cp2y,
	    x: x,
	    y: y
	  }));
	};
	/**
	 * Adds a quadratic curve to command
	 */


	_ctx.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {
	  this.__currentPosition = {
	    x: x,
	    y: y
	  };

	  this.__addPathCommand(format("Q {cpx} {cpy} {x} {y}", {
	    cpx: cpx,
	    cpy: cpy,
	    x: x,
	    y: y
	  }));
	};
	/**
	 * Return a new normalized vector of given vector
	 */


	var normalize$1 = function normalize(vector) {
	  var len = Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1]);
	  return [vector[0] / len, vector[1] / len];
	};
	/**
	 * Adds the arcTo to the current path
	 *
	 * @see http://www.w3.org/TR/2015/WD-2dcontext-20150514/#dom-context-2d-arcto
	 */


	_ctx.prototype.arcTo = function (x1, y1, x2, y2, radius) {
	  // Let the point (x0, y0) be the last point in the subpath.
	  var x0 = this.__currentPosition && this.__currentPosition.x;
	  var y0 = this.__currentPosition && this.__currentPosition.y; // First ensure there is a subpath for (x1, y1).

	  if (typeof x0 == "undefined" || typeof y0 == "undefined") {
	    return;
	  } // Negative values for radius must cause the implementation to throw an IndexSizeError exception.


	  if (radius < 0) {
	    throw new Error("IndexSizeError: The radius provided (" + radius + ") is negative.");
	  } // If the point (x0, y0) is equal to the point (x1, y1),
	  // or if the point (x1, y1) is equal to the point (x2, y2),
	  // or if the radius radius is zero,
	  // then the method must add the point (x1, y1) to the subpath,
	  // and connect that point to the previous point (x0, y0) by a straight line.


	  if (x0 === x1 && y0 === y1 || x1 === x2 && y1 === y2 || radius === 0) {
	    this.lineTo(x1, y1);
	    return;
	  } // Otherwise, if the points (x0, y0), (x1, y1), and (x2, y2) all lie on a single straight line,
	  // then the method must add the point (x1, y1) to the subpath,
	  // and connect that point to the previous point (x0, y0) by a straight line.


	  var unit_vec_p1_p0 = normalize$1([x0 - x1, y0 - y1]);
	  var unit_vec_p1_p2 = normalize$1([x2 - x1, y2 - y1]);

	  if (unit_vec_p1_p0[0] * unit_vec_p1_p2[1] === unit_vec_p1_p0[1] * unit_vec_p1_p2[0]) {
	    this.lineTo(x1, y1);
	    return;
	  } // Otherwise, let The Arc be the shortest arc given by circumference of the circle that has radius radius,
	  // and that has one point tangent to the half-infinite line that crosses the point (x0, y0) and ends at the point (x1, y1),
	  // and that has a different point tangent to the half-infinite line that ends at the point (x1, y1), and crosses the point (x2, y2).
	  // The points at which this circle touches these two lines are called the start and end tangent points respectively.
	  // note that both vectors are unit vectors, so the length is 1


	  var cos = unit_vec_p1_p0[0] * unit_vec_p1_p2[0] + unit_vec_p1_p0[1] * unit_vec_p1_p2[1];
	  var theta = Math.acos(Math.abs(cos)); // Calculate origin

	  var unit_vec_p1_origin = normalize$1([unit_vec_p1_p0[0] + unit_vec_p1_p2[0], unit_vec_p1_p0[1] + unit_vec_p1_p2[1]]);
	  var len_p1_origin = radius / Math.sin(theta / 2);
	  var x = x1 + len_p1_origin * unit_vec_p1_origin[0];
	  var y = y1 + len_p1_origin * unit_vec_p1_origin[1]; // Calculate start angle and end angle
	  // rotate 90deg clockwise (note that y axis points to its down)

	  var unit_vec_origin_start_tangent = [-unit_vec_p1_p0[1], unit_vec_p1_p0[0]]; // rotate 90deg counter clockwise (note that y axis points to its down)

	  var unit_vec_origin_end_tangent = [unit_vec_p1_p2[1], -unit_vec_p1_p2[0]];

	  var getAngle = function getAngle(vector) {
	    // get angle (clockwise) between vector and (1, 0)
	    var x = vector[0];
	    var y = vector[1];

	    if (y >= 0) {
	      // note that y axis points to its down
	      return Math.acos(x);
	    } else {
	      return -Math.acos(x);
	    }
	  };

	  var startAngle = getAngle(unit_vec_origin_start_tangent);
	  var endAngle = getAngle(unit_vec_origin_end_tangent); // Connect the point (x0, y0) to the start tangent point by a straight line

	  this.lineTo(x + unit_vec_origin_start_tangent[0] * radius, y + unit_vec_origin_start_tangent[1] * radius); // Connect the start tangent point to the end tangent point by arc
	  // and adding the end tangent point to the subpath.

	  this.arc(x, y, radius, startAngle, endAngle);
	};
	/**
	 * Sets the stroke property on the current element
	 */


	_ctx.prototype.stroke = function () {
	  if (this.__currentElement.nodeName === "path") {
	    this.__currentElement.setAttribute("paint-order", "fill stroke markers");
	  }

	  this.__applyCurrentDefaultPath();

	  this.__applyStyleToCurrentElement("stroke");
	};
	/**
	 * Sets fill properties on the current element
	 */


	_ctx.prototype.fill = function () {
	  if (this.__currentElement.nodeName === "path") {
	    this.__currentElement.setAttribute("paint-order", "stroke fill markers");
	  }

	  this.__applyCurrentDefaultPath();

	  this.__applyStyleToCurrentElement("fill");
	};
	/**
	 *  Adds a rectangle to the path.
	 */


	_ctx.prototype.rect = function (x, y, width, height) {
	  if (this.__currentElement.nodeName !== "path") {
	    this.beginPath();
	  }

	  this.moveTo(x, y);
	  this.lineTo(x + width, y);
	  this.lineTo(x + width, y + height);
	  this.lineTo(x, y + height);
	  this.lineTo(x, y);
	  this.closePath();
	};
	/**
	 * adds a rectangle element
	 */


	_ctx.prototype.fillRect = function (x, y, width, height) {
	  if (height < 0) {
	    y += height;
	    height = -height;
	  }

	  if (width < 0) {
	    x += width;
	    width = -width;
	  } // See if rect instersects current viewbox


	  var r2 = {
	    x: x,
	    y: y,
	    width: width,
	    height: height
	  };

	  if (this.viewbox) {
	    if (!intersectRect(this.viewbox, r2)) {
	      return;
	    }
	  }

	  var rect, parent;
	  rect = this.__createElement("rect", r2, true);
	  parent = this.__closestGroupOrSvg();
	  parent.appendChild(rect);
	  this.__currentElement = rect;

	  this.__applyStyleToCurrentElement("fill");
	};

	function intersectRect(rect1, rect2) {
	  return rect1.x < rect2.x + rect2.width && rect1.x + rect1.width > rect2.x && rect1.y < rect2.y + rect2.height && rect1.y + rect1.height > rect2.y;
	}
	/**
	 * Draws a rectangle with no fill
	 * @param x
	 * @param y
	 * @param width
	 * @param height
	 */


	_ctx.prototype.strokeRect = function (x, y, width, height) {
	  var rect, parent;
	  rect = this.__createElement("rect", {
	    x: x,
	    y: y,
	    width: width,
	    height: height
	  }, true);
	  parent = this.__closestGroupOrSvg();
	  parent.appendChild(rect);
	  this.__currentElement = rect;

	  this.__applyStyleToCurrentElement("stroke");
	};
	/**
	 * Clear entire canvas:
	 * 1. save current transforms
	 * 2. remove all the childNodes of the root g element
	 */


	_ctx.prototype.__clearCanvas = function () {
	  var current = this.__closestGroupOrSvg(),
	      transform = current.getAttribute("transform");

	  var rootGroup = this.__root.childNodes[1];
	  var childNodes = rootGroup.childNodes;

	  for (var i = childNodes.length - 1; i >= 0; i--) {
	    if (childNodes[i]) {
	      rootGroup.removeChild(childNodes[i]);
	    }
	  }

	  this.__currentElement = rootGroup; //reset __groupStack as all the child group nodes are all removed.

	  this.__groupStack = [];

	  if (transform) {
	    this.__addTransform(transform);
	  }
	};
	/**
	 * "Clears" a canvas by just drawing a white rectangle in the current group.
	 */


	_ctx.prototype.clearRect = function (x, y, width, height) {
	  //clear entire canvas
	  if (x === 0 && y === 0 && width === this.width && height === this.height) {
	    this.__clearCanvas();

	    return;
	  }

	  var rect,
	      parent = this.__closestGroupOrSvg();

	  rect = this.__createElement("rect", {
	    x: x,
	    y: y,
	    width: width,
	    height: height,
	    fill: "#FFFFFF"
	  }, true);
	  parent.appendChild(rect);
	};
	/**
	 * Adds a linear gradient to a defs tag.
	 * Returns a canvas gradient object that has a reference to it's parent def
	 */


	_ctx.prototype.createLinearGradient = function (x1, y1, x2, y2) {
	  var grad = this.__createElement("linearGradient", {
	    id: randomString(this.__ids),
	    x1: x1 + "px",
	    x2: x2 + "px",
	    y1: y1 + "px",
	    y2: y2 + "px",
	    "gradientUnits": "userSpaceOnUse"
	  }, false);

	  this.__defs.appendChild(grad);

	  return new CanvasGradient(grad, this);
	};
	/**
	 * Adds a radial gradient to a defs tag.
	 * Returns a canvas gradient object that has a reference to it's parent def
	 */


	_ctx.prototype.createRadialGradient = function (x0, y0, r0, x1, y1, r1) {
	  var grad = this.__createElement("radialGradient", {
	    id: randomString(this.__ids),
	    cx: x1 + "px",
	    cy: y1 + "px",
	    r: r1 + "px",
	    fx: x0 + "px",
	    fy: y0 + "px",
	    "gradientUnits": "userSpaceOnUse"
	  }, false);

	  this.__defs.appendChild(grad);

	  return new CanvasGradient(grad, this);
	};
	/**
	 * Parses the font string and returns svg mapping
	 * @private
	 */


	_ctx.prototype.__parseFont = function () {
	  var regex = /^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-,\'\"\sa-z0-9]+?)\s*$/i;
	  var fontPart = regex.exec(this.font);
	  var data = {
	    style: fontPart[1] || 'normal',
	    size: fontPart[4] || '10px',
	    family: fontPart[6] || 'sans-serif',
	    weight: fontPart[3] || 'normal',
	    decoration: fontPart[2] || 'normal',
	    href: null
	  }; //canvas doesn't support underline natively, but we can pass this attribute

	  if (this.__fontUnderline === "underline") {
	    data.decoration = "underline";
	  } //canvas also doesn't support linking, but we can pass this as well


	  if (this.__fontHref) {
	    data.href = this.__fontHref;
	  }

	  return data;
	};
	/**
	 * Helper to link text fragments
	 * @param font
	 * @param element
	 * @return {*}
	 * @private
	 */


	_ctx.prototype.__wrapTextLink = function (font, element) {
	  if (font.href) {
	    var a = this.__createElement("a");

	    a.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", font.href);
	    a.appendChild(element);
	    return a;
	  }

	  return element;
	};
	/**
	 * Fills or strokes text
	 * @param text
	 * @param x
	 * @param y
	 * @param action - stroke or fill
	 * @private
	 */


	_ctx.prototype.__applyText = function (text, x, y, action) {
	  var font = this.__parseFont(),
	      parent = this.__closestGroupOrSvg(),
	      textElement = this.__createElement("text", {
	    "font-family": font.family,
	    "font-size": font.size,
	    "font-style": font.style,
	    "font-weight": font.weight,
	    "text-decoration": font.decoration,
	    "x": x,
	    "y": y,
	    "text-anchor": getTextAnchor(this.textAlign),
	    "dominant-baseline": getDominantBaseline(this.textBaseline)
	  }, true);

	  textElement.appendChild(this.__document.createTextNode(text));
	  this.__currentElement = textElement;

	  this.__applyStyleToCurrentElement(action);

	  parent.appendChild(this.__wrapTextLink(font, textElement));
	};
	/**
	 * Creates a text element
	 * @param text
	 * @param x
	 * @param y
	 */


	_ctx.prototype.fillText = function (text, x, y) {
	  this.__applyText(text, x, y, "fill");
	};
	/**
	 * Strokes text
	 * @param text
	 * @param x
	 * @param y
	 */


	_ctx.prototype.strokeText = function (text, x, y) {
	  this.__applyText(text, x, y, "stroke");
	};
	/**
	 * No need to implement this for svg.
	 * @param text
	 * @return {TextMetrics}
	 */


	_ctx.prototype.measureText = function (text) {
	  this.__ctx.font = this.font;
	  return this.__ctx.measureText(text);
	};
	/**
	 *  Arc command!
	 */


	_ctx.prototype.arc = function (x, y, radius, startAngle, endAngle, counterClockwise) {
	  // in canvas no circle is drawn if no angle is provided.
	  if (startAngle === endAngle) {
	    return;
	  }

	  startAngle = startAngle % (2 * Math.PI);
	  endAngle = endAngle % (2 * Math.PI);

	  if (startAngle === endAngle) {
	    //circle time! subtract some of the angle so svg is happy (svg elliptical arc can't draw a full circle)
	    endAngle = (endAngle + 2 * Math.PI - 0.001 * (counterClockwise ? -1 : 1)) % (2 * Math.PI);
	  }

	  var endX = x + radius * Math.cos(endAngle),
	      endY = y + radius * Math.sin(endAngle),
	      startX = x + radius * Math.cos(startAngle),
	      startY = y + radius * Math.sin(startAngle),
	      sweepFlag = counterClockwise ? 0 : 1,
	      largeArcFlag = 0,
	      diff = endAngle - startAngle; // https://github.com/gliffy/canvas2svg/issues/4

	  if (diff < 0) {
	    diff += 2 * Math.PI;
	  }

	  if (counterClockwise) {
	    largeArcFlag = diff > Math.PI ? 0 : 1;
	  } else {
	    largeArcFlag = diff > Math.PI ? 1 : 0;
	  }

	  this.lineTo(startX, startY);

	  this.__addPathCommand(format("A {rx} {ry} {xAxisRotation} {largeArcFlag} {sweepFlag} {endX} {endY}", {
	    rx: radius,
	    ry: radius,
	    xAxisRotation: 0,
	    largeArcFlag: largeArcFlag,
	    sweepFlag: sweepFlag,
	    endX: endX,
	    endY: endY
	  }));

	  this.__currentPosition = {
	    x: endX,
	    y: endY
	  };
	};
	/**
	 * Generates a ClipPath from the clip command.
	 */


	_ctx.prototype.clip = function () {
	  var group = this.__closestGroupOrSvg(),
	      clipPath = this.__createElement("clipPath"),
	      id = randomString(this.__ids),
	      newGroup = this.__createElement("g");

	  this.__applyCurrentDefaultPath();

	  group.removeChild(this.__currentElement);
	  clipPath.setAttribute("id", id);
	  clipPath.appendChild(this.__currentElement);

	  this.__defs.appendChild(clipPath); //set the clip path to this group


	  group.setAttribute("clip-path", format("url(#{id})", {
	    id: id
	  })); //clip paths can be scaled and transformed, we need to add another wrapper group to avoid later transformations
	  // to this path

	  group.appendChild(newGroup);
	  this.__currentElement = newGroup;
	};
	/**
	 * Draws a canvas, image or mock context to this canvas.
	 * Note that all svg dom manipulation uses node.childNodes rather than node.children for IE support.
	 * http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-drawimage
	 */


	_ctx.prototype.drawImage = function () {
	  //convert arguments to a real array
	  var args = Array.prototype.slice.call(arguments),
	      image = args[0],
	      dx,
	      dy,
	      dw,
	      dh,
	      sx = 0,
	      sy = 0,
	      sw,
	      sh,
	      parent,
	      svg,
	      defs,
	      group,
	      currentElement,
	      svgImage,
	      canvas,
	      context,
	      id;

	  if (args.length === 3) {
	    dx = args[1];
	    dy = args[2];
	    sw = image.width;
	    sh = image.height;
	    dw = sw;
	    dh = sh;
	  } else if (args.length === 5) {
	    dx = args[1];
	    dy = args[2];
	    dw = args[3];
	    dh = args[4];
	    sw = image.width;
	    sh = image.height;
	  } else if (args.length === 9) {
	    sx = args[1];
	    sy = args[2];
	    sw = args[3];
	    sh = args[4];
	    dx = args[5];
	    dy = args[6];
	    dw = args[7];
	    dh = args[8];
	  } else {
	    throw new Error("Invalid number of arguments passed to drawImage: " + arguments.length);
	  }

	  parent = this.__closestGroupOrSvg();
	  currentElement = this.__currentElement;
	  var translateDirective = "translate(" + dx + ", " + dy + ")";

	  if (image instanceof _ctx) {
	    //canvas2svg mock canvas context. In the future we may want to clone nodes instead.
	    //also I'm currently ignoring dw, dh, sw, sh, sx, sy for a mock context.
	    svg = image.getSvg().cloneNode(true);

	    if (svg.childNodes && svg.childNodes.length > 1) {
	      defs = svg.childNodes[0];

	      while (defs.childNodes.length) {
	        id = defs.childNodes[0].getAttribute("id");
	        this.__ids[id] = id;

	        this.__defs.appendChild(defs.childNodes[0]);
	      }

	      group = svg.childNodes[1];

	      if (group) {
	        //save original transform
	        var originTransform = group.getAttribute("transform");
	        var transformDirective;

	        if (originTransform) {
	          transformDirective = originTransform + " " + translateDirective;
	        } else {
	          transformDirective = translateDirective;
	        }

	        group.setAttribute("transform", transformDirective);
	        parent.appendChild(group);
	      }
	    }
	  } else if (image.nodeName === "CANVAS" || image.nodeName === "IMG") {
	    //canvas or image
	    svgImage = this.__createElement("image");
	    svgImage.setAttribute("width", dw);
	    svgImage.setAttribute("height", dh);
	    svgImage.setAttribute("preserveAspectRatio", "none");

	    if (sx || sy || sw !== image.width || sh !== image.height) {
	      //crop the image using a temporary canvas
	      canvas = this.__document.createElement("canvas");
	      canvas.width = dw;
	      canvas.height = dh;
	      context = canvas.getContext("2d");
	      context.drawImage(image, sx, sy, sw, sh, 0, 0, dw, dh);
	      image = canvas;
	    }

	    svgImage.setAttribute("transform", translateDirective);
	    svgImage.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", image.nodeName === "CANVAS" ? image.toDataURL() : image.getAttribute("src"));
	    parent.appendChild(svgImage);
	  }
	};
	/**
	 * Generates a pattern tag
	 */


	_ctx.prototype.createPattern = function (image, repetition) {
	  var pattern = this.__document.__createElement("pattern");

	  var id = randomString(this.__ids);
	  var img;
	  pattern.setAttribute("id", id);
	  pattern.setAttribute("width", image.width);
	  pattern.setAttribute("height", image.height);

	  if (image.nodeName === "CANVAS" || image.nodeName === "IMG") {
	    img = this.__createElement("image");
	    img.setAttribute("width", image.width);
	    img.setAttribute("height", image.height);
	    img.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", image.nodeName === "CANVAS" ? image.toDataURL() : image.getAttribute("src"));
	    pattern.appendChild(img);

	    this.__defs.appendChild(pattern);
	  } else if (image instanceof _ctx) {
	    pattern.appendChild(image.__root.childNodes[1]);

	    this.__defs.appendChild(pattern);
	  }

	  return new CanvasPattern(pattern, this);
	};

	_ctx.prototype.setLineDash = function (dashArray) {
	  if (dashArray && dashArray.length > 0) {
	    this.lineDash = dashArray.join(",");
	  } else {
	    this.lineDash = null;
	  }
	};
	/**
	 * Not yet implemented
	 */


	_ctx.prototype.drawFocusRing = function () {};

	_ctx.prototype.createImageData = function () {};

	_ctx.prototype.getImageData = function () {};

	_ctx.prototype.putImageData = function () {};

	_ctx.prototype.globalCompositeOperation = function () {};

	_ctx.prototype.setTransform = function () {};

	var C2S = _ctx;

	var IdeogramViewport = /*#__PURE__*/function (_ViewportBase) {
	  _inherits(IdeogramViewport, _ViewportBase);

	  var _super = _createSuper(IdeogramViewport);

	  function IdeogramViewport(trackView, $viewportContainer, referenceFrame, width) {
	    var _this;

	    _classCallCheck(this, IdeogramViewport);

	    _this = _super.call(this, trackView, $viewportContainer, referenceFrame, width);

	    _this.$canvas.on('click', function (e) {
	      return _this.handleClick(e, _this.canvas);
	    });

	    return _this;
	  }

	  _createClass(IdeogramViewport, [{
	    key: "setWidth",
	    value: function setWidth(width) {
	      this.$viewport.width(width);
	      this.ctx.canvas.style.width = "".concat(width, "px");
	      this.ctx.canvas.width = window.devicePixelRatio * width;
	      this.ctx.canvas.style.height = "".concat(this.$viewport.height(), "px");
	      this.ctx.canvas.height = window.devicePixelRatio * this.$viewport.height();
	      this.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
	    }
	  }, {
	    key: "handleClick",
	    value: function handleClick(e, canvas) {
	      var _DOMUtils$translateMo = translateMouseCoordinates$1(e, canvas),
	          xNormalized = _DOMUtils$translateMo.xNormalized,
	          width = _DOMUtils$translateMo.width;

	      var _this$browser$genome$ = this.browser.genome.getChromosome(this.referenceFrame.chr),
	          bpLength = _this$browser$genome$.bpLength;

	      var locusLength = this.referenceFrame.bpPerPixel * width;
	      var chrCoveragePercentage = locusLength / bpLength;
	      var xPercentage = xNormalized;

	      if (xPercentage - chrCoveragePercentage / 2.0 < 0) {
	        xPercentage = chrCoveragePercentage / 2.0;
	      }

	      if (xPercentage + chrCoveragePercentage / 2.0 > 1.0) {
	        xPercentage = 1.0 - chrCoveragePercentage / 2.0;
	      }

	      var ss = Math.round((xPercentage - chrCoveragePercentage / 2.0) * bpLength);
	      var ee = Math.round((xPercentage + chrCoveragePercentage / 2.0) * bpLength);
	      this.referenceFrame.start = ss;
	      this.referenceFrame.initialEnd = ee;
	      this.referenceFrame.bpPerPixel = (ee - ss) / width;
	      this.browser.updateLocusSearchWidget(this.referenceFrame);
	      this.browser.updateViews();
	    }
	  }, {
	    key: "checkZoomIn",
	    value: function checkZoomIn() {
	      return true;
	    }
	  }, {
	    key: "setTop",
	    value: function setTop(contentTop) {} // TODO: Not needed. No menus on ideogram track

	  }, {
	    key: "saveSVG",
	    value: function saveSVG() {
	      var _this$$viewport$get$g = this.$viewport.get(0).getBoundingClientRect(),
	          width = _this$$viewport$get$g.width,
	          height = _this$$viewport$get$g.height;

	      var context = new C2S({
	        width: width,
	        height: height,
	        viewbox: {
	          x: 0,
	          y: -$(this.contentDiv).position().top,
	          width: width,
	          height: height
	        }
	      });
	      this.drawSVGWithContect(context, width, height);
	      var svg = context.getSerializedSvg(true);
	      var data = URL.createObjectURL(new Blob([svg], {
	        type: "application/octet-stream"
	      }));
	      download("".concat(this.trackView.track.id, ".svg"), data);
	    }
	  }, {
	    key: "drawSVGWithContect",
	    value: function drawSVGWithContect(context, width, height) {
	      var config = {
	        ctx: context,
	        width: width,
	        height: height,
	        genome: this.browser.genome,
	        referenceFrame: this.referenceFrame,
	        ideogramWidth: this.$content.width()
	      };
	      context.save();
	      repaintContext(config);
	      context.restore();
	    }
	  }, {
	    key: "repaint",
	    value: function repaint() {
	      var config = {
	        ctx: this.ctx,
	        width: this.$canvas.width(),
	        height: this.$canvas.height(),
	        genome: this.browser.genome,
	        referenceFrame: this.referenceFrame,
	        ideogramWidth: this.$content.width()
	      };
	      repaintContext(config);
	    }
	  }]);

	  return IdeogramViewport;
	}(ViewportBase);

	function repaintContext(_ref) {
	  var ctx = _ref.ctx,
	      width = _ref.width,
	      height = _ref.height,
	      genome = _ref.genome,
	      referenceFrame = _ref.referenceFrame,
	      ideogramWidth = _ref.ideogramWidth;
	  var chr = referenceFrame.chr;
	  var chromosome = genome.getChromosome(chr);

	  if (!chromosome || width <= 0 || height <= 0 || chr.toLowerCase() === "all") {
	    return;
	  }

	  var stainColors = [];
	  IGVGraphics.fillRect(ctx, 0, 0, width, height, {
	    fillStyle: IGVColor.greyScale(255)
	  });
	  drawIdeogram({
	    ctx: ctx,
	    chr: chr,
	    referenceFrame: referenceFrame,
	    genome: genome,
	    width: width,
	    height: height,
	    stainColors: stainColors
	  });
	  var widthBP = Math.round(referenceFrame.bpPerPixel * ideogramWidth);
	  var xBP = referenceFrame.start; // Total chromosome length can be > chromosome.bpLength for partial fastas.

	  var chrLength = chromosome.bpLength;
	  var cytobands = genome.getCytobands(chr);

	  if (cytobands && cytobands.length > 0) {
	    chrLength = Math.max(chrLength, cytobands[cytobands.length - 1].end);
	  }

	  if (widthBP < chrLength) {
	    var percentWidth = widthBP / chrLength;
	    var percentX = xBP / chrLength;
	    var x = Math.floor(percentX * width);
	    var ww = Math.floor(percentWidth * width);
	    x = Math.max(0, x);
	    x = Math.min(width - ww, x); // Push current context

	    ctx.save(); // Draw red box

	    ctx.strokeStyle = "red";
	    ctx.lineWidth = ww < 2 ? 1 : 2;
	    var xx = x + ctx.lineWidth / 2;
	    ww = ww < 2 ? 1 : ww - ctx.lineWidth;
	    var yy = ctx.lineWidth / 2;
	    var hh = height - ctx.lineWidth;
	    ctx.strokeRect(xx, yy, ww, hh); // Pop current context

	    ctx.restore();
	  }
	}

	function drawIdeogram(_ref2) {
	  var ctx = _ref2.ctx,
	      chr = _ref2.chr,
	      referenceFrame = _ref2.referenceFrame,
	      genome = _ref2.genome,
	      width = _ref2.width,
	      height = _ref2.height,
	      stainColors = _ref2.stainColors;
	  var shim, shim2, ideogramTop, cytobands, cytoband, center, xC, yC, chrLength, scale, start, end, i;
	  shim = 1;
	  shim2 = 0.5 * shim;
	  ideogramTop = 0;

	  if (undefined === genome) {
	    return;
	  }

	  IGVGraphics.fillRect(ctx, 0, 0, width, height, {
	    fillStyle: IGVColor.greyScale(255)
	  });
	  cytobands = genome.getCytobands(chr);

	  if (cytobands) {
	    center = ideogramTop + height / 2;
	    xC = [];
	    yC = [];

	    if (0 === cytobands.length) {
	      return;
	    }

	    chrLength = referenceFrame.genome.getChromosome(chr).bpLength;
	    scale = width / chrLength; // round rect clipping path

	    ctx.beginPath();
	    IGVGraphics.roundRect(ctx, shim2, shim2 + ideogramTop, width - 2 * shim2, height - 2 * shim2, (height - 2 * shim2) / 2, 0, 1);
	    ctx.clip();

	    for (i = 0; i < cytobands.length; i++) {
	      cytoband = cytobands[i];
	      start = scale * cytoband.start;
	      end = scale * cytoband.end;

	      if (cytoband.type === 'c') {
	        if (cytoband.name.charAt(0) === 'p') {
	          xC[0] = start;
	          yC[0] = height + ideogramTop;
	          xC[1] = start;
	          yC[1] = ideogramTop;
	          xC[2] = end;
	          yC[2] = center;
	        } else {
	          xC[0] = end;
	          yC[0] = height + ideogramTop;
	          xC[1] = end;
	          yC[1] = ideogramTop;
	          xC[2] = start;
	          yC[2] = center;
	        }

	        ctx.fillStyle = "rgb(150, 0, 0)";
	        ctx.strokeStyle = "rgb(150, 0, 0)";
	        IGVGraphics.polygon(ctx, xC, yC, 1, 0);
	      } else {
	        ctx.fillStyle = getCytobandColor(stainColors, cytoband);
	        IGVGraphics.fillRect(ctx, start, shim + ideogramTop, end - start, height - 2 * shim);
	      }
	    }
	  } // round rect border


	  ctx.strokeStyle = IGVColor.greyScale(41);
	  IGVGraphics.roundRect(ctx, shim2, shim2 + ideogramTop, width - 2 * shim2, height - 2 * shim2, (height - 2 * shim2) / 2, 0, 1);
	}

	function getCytobandColor(colors, data) {
	  if (data.type === 'c') {
	    // centermere: "acen"
	    return "rgb(150, 10, 10)";
	  } else {
	    var stain = data.stain; // + 4;

	    var shade = 230;

	    if (data.type === 'p') {
	      shade = Math.floor(230 - stain / 100.0 * 230);
	    }

	    var c = colors[shade];

	    if (!c) {
	      c = "rgb(" + shade + "," + shade + "," + shade + ")";
	      colors[shade] = c;
	    }

	    return c;
	  }
	}

	var createMethod$4 = function (IS_RIGHT) {
	  return function (that, callbackfn, argumentsLength, memo) {
	    aFunction$1(callbackfn);
	    var O = toObject(that);
	    var self = indexedObject(O);
	    var length = toLength(O.length);
	    var index = IS_RIGHT ? length - 1 : 0;
	    var i = IS_RIGHT ? -1 : 1;
	    if (argumentsLength < 2) while (true) {
	      if (index in self) {
	        memo = self[index];
	        index += i;
	        break;
	      }

	      index += i;

	      if (IS_RIGHT ? index < 0 : length <= index) {
	        throw TypeError('Reduce of empty array with no initial value');
	      }
	    }

	    for (; IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
	      memo = callbackfn(memo, self[index], index, O);
	    }

	    return memo;
	  };
	};

	var arrayReduce = {
	  // `Array.prototype.reduce` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
	  left: createMethod$4(false),
	  // `Array.prototype.reduceRight` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
	  right: createMethod$4(true)
	};

	var $reduce = arrayReduce.left;
	var STRICT_METHOD$4 = arrayMethodIsStrict('reduce');
	var USES_TO_LENGTH$8 = arrayMethodUsesToLength('reduce', {
	  1: 0
	}); // Chrome 80-82 has a critical bug
	// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

	var CHROME_BUG = !engineIsNode && engineV8Version > 79 && engineV8Version < 83; // `Array.prototype.reduce` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.reduce

	_export({
	  target: 'Array',
	  proto: true,
	  forced: !STRICT_METHOD$4 || !USES_TO_LENGTH$8 || CHROME_BUG
	}, {
	  reduce: function reduce(callbackfn
	  /* , initialValue */
	  ) {
	    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var trim$1 = stringTrim.trim;
	var $parseInt = global_1.parseInt;
	var hex = /^[+-]?0[Xx]/;
	var FORCED$4 = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22; // `parseInt` method
	// https://tc39.github.io/ecma262/#sec-parseint-string-radix

	var numberParseInt = FORCED$4 ? function parseInt(string, radix) {
	  var S = trim$1(String(string));
	  return $parseInt(S, radix >>> 0 || (hex.test(S) ? 16 : 10));
	} : $parseInt;

	// https://tc39.github.io/ecma262/#sec-number.parseint

	_export({
	  target: 'Number',
	  stat: true,
	  forced: Number.parseInt != numberParseInt
	}, {
	  parseInt: numberParseInt
	});

	// https://tc39.github.io/ecma262/#sec-object.assign

	_export({
	  target: 'Object',
	  stat: true,
	  forced: Object.assign !== objectAssign
	}, {
	  assign: objectAssign
	});

	var propertyIsEnumerable = objectPropertyIsEnumerable.f; // `Object.{ entries, values }` methods implementation

	var createMethod$5 = function (TO_ENTRIES) {
	  return function (it) {
	    var O = toIndexedObject(it);
	    var keys = objectKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;

	    while (length > i) {
	      key = keys[i++];

	      if (!descriptors || propertyIsEnumerable.call(O, key)) {
	        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
	      }
	    }

	    return result;
	  };
	};

	var objectToArray = {
	  // `Object.entries` method
	  // https://tc39.github.io/ecma262/#sec-object.entries
	  entries: createMethod$5(true),
	  // `Object.values` method
	  // https://tc39.github.io/ecma262/#sec-object.values
	  values: createMethod$5(false)
	};

	var $values = objectToArray.values; // `Object.values` method
	// https://tc39.github.io/ecma262/#sec-object.values

	_export({
	  target: 'Object',
	  stat: true
	}, {
	  values: function values(O) {
	    return $values(O);
	  }
	});

	var arrayBufferNative = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';

	var defineProperty$9 = objectDefineProperty.f;
	var Int8Array$1 = global_1.Int8Array;
	var Int8ArrayPrototype = Int8Array$1 && Int8Array$1.prototype;
	var Uint8ClampedArray = global_1.Uint8ClampedArray;
	var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
	var TypedArray = Int8Array$1 && objectGetPrototypeOf(Int8Array$1);
	var TypedArrayPrototype = Int8ArrayPrototype && objectGetPrototypeOf(Int8ArrayPrototype);
	var ObjectPrototype$2 = Object.prototype;
	var isPrototypeOf = ObjectPrototype$2.isPrototypeOf;
	var TO_STRING_TAG$4 = wellKnownSymbol('toStringTag');
	var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG'); // Fixing native typed arrays in Opera Presto crashes the browser, see #595

	var NATIVE_ARRAY_BUFFER_VIEWS = arrayBufferNative && !!objectSetPrototypeOf && classof(global_1.opera) !== 'Opera';
	var TYPED_ARRAY_TAG_REQIRED = false;
	var NAME$1;
	var TypedArrayConstructorsList = {
	  Int8Array: 1,
	  Uint8Array: 1,
	  Uint8ClampedArray: 1,
	  Int16Array: 2,
	  Uint16Array: 2,
	  Int32Array: 4,
	  Uint32Array: 4,
	  Float32Array: 4,
	  Float64Array: 8
	};

	var isView = function isView(it) {
	  var klass = classof(it);
	  return klass === 'DataView' || has(TypedArrayConstructorsList, klass);
	};

	var isTypedArray = function (it) {
	  return isObject(it) && has(TypedArrayConstructorsList, classof(it));
	};

	var aTypedArray = function (it) {
	  if (isTypedArray(it)) return it;
	  throw TypeError('Target is not a typed array');
	};

	var aTypedArrayConstructor = function (C) {
	  if (objectSetPrototypeOf) {
	    if (isPrototypeOf.call(TypedArray, C)) return C;
	  } else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME$1)) {
	    var TypedArrayConstructor = global_1[ARRAY];

	    if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
	      return C;
	    }
	  }

	  throw TypeError('Target is not a typed array constructor');
	};

	var exportTypedArrayMethod = function (KEY, property, forced) {
	  if (!descriptors) return;
	  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
	    var TypedArrayConstructor = global_1[ARRAY];

	    if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
	      delete TypedArrayConstructor.prototype[KEY];
	    }
	  }

	  if (!TypedArrayPrototype[KEY] || forced) {
	    redefine(TypedArrayPrototype, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
	  }
	};

	var exportTypedArrayStaticMethod = function (KEY, property, forced) {
	  var ARRAY, TypedArrayConstructor;
	  if (!descriptors) return;

	  if (objectSetPrototypeOf) {
	    if (forced) for (ARRAY in TypedArrayConstructorsList) {
	      TypedArrayConstructor = global_1[ARRAY];

	      if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
	        delete TypedArrayConstructor[KEY];
	      }
	    }

	    if (!TypedArray[KEY] || forced) {
	      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
	      try {
	        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array$1[KEY] || property);
	      } catch (error) {
	        /* empty */
	      }
	    } else return;
	  }

	  for (ARRAY in TypedArrayConstructorsList) {
	    TypedArrayConstructor = global_1[ARRAY];

	    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
	      redefine(TypedArrayConstructor, KEY, property);
	    }
	  }
	};

	for (NAME$1 in TypedArrayConstructorsList) {
	  if (!global_1[NAME$1]) NATIVE_ARRAY_BUFFER_VIEWS = false;
	} // WebKit bug - typed arrays constructors prototype is Object.prototype


	if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
	  // eslint-disable-next-line no-shadow
	  TypedArray = function TypedArray() {
	    throw TypeError('Incorrect invocation');
	  };

	  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME$1 in TypedArrayConstructorsList) {
	    if (global_1[NAME$1]) objectSetPrototypeOf(global_1[NAME$1], TypedArray);
	  }
	}

	if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype$2) {
	  TypedArrayPrototype = TypedArray.prototype;
	  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME$1 in TypedArrayConstructorsList) {
	    if (global_1[NAME$1]) objectSetPrototypeOf(global_1[NAME$1].prototype, TypedArrayPrototype);
	  }
	} // WebKit bug - one more object in Uint8ClampedArray prototype chain


	if (NATIVE_ARRAY_BUFFER_VIEWS && objectGetPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
	  objectSetPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
	}

	if (descriptors && !has(TypedArrayPrototype, TO_STRING_TAG$4)) {
	  TYPED_ARRAY_TAG_REQIRED = true;
	  defineProperty$9(TypedArrayPrototype, TO_STRING_TAG$4, {
	    get: function () {
	      return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
	    }
	  });

	  for (NAME$1 in TypedArrayConstructorsList) if (global_1[NAME$1]) {
	    createNonEnumerableProperty(global_1[NAME$1], TYPED_ARRAY_TAG, NAME$1);
	  }
	}

	var arrayBufferViewCore = {
	  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
	  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
	  aTypedArray: aTypedArray,
	  aTypedArrayConstructor: aTypedArrayConstructor,
	  exportTypedArrayMethod: exportTypedArrayMethod,
	  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
	  isView: isView,
	  isTypedArray: isTypedArray,
	  TypedArray: TypedArray,
	  TypedArrayPrototype: TypedArrayPrototype
	};

	/* eslint-disable no-new */

	var NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
	var ArrayBuffer$1 = global_1.ArrayBuffer;
	var Int8Array$2 = global_1.Int8Array;
	var typedArrayConstructorsRequireWrappers = !NATIVE_ARRAY_BUFFER_VIEWS$1 || !fails(function () {
	  Int8Array$2(1);
	}) || !fails(function () {
	  new Int8Array$2(-1);
	}) || !checkCorrectnessOfIteration(function (iterable) {
	  new Int8Array$2();
	  new Int8Array$2(null);
	  new Int8Array$2(1.5);
	  new Int8Array$2(iterable);
	}, true) || fails(function () {
	  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
	  return new Int8Array$2(new ArrayBuffer$1(2), 1, undefined).length !== 1;
	});

	// https://tc39.github.io/ecma262/#sec-toindex

	var toIndex = function (it) {
	  if (it === undefined) return 0;
	  var number = toInteger(it);
	  var length = toLength(number);
	  if (number !== length) throw RangeError('Wrong length or index');
	  return length;
	};

	// IEEE754 conversions based on https://github.com/feross/ieee754
	// eslint-disable-next-line no-shadow-restricted-names
	var Infinity$1 = 1 / 0;
	var abs = Math.abs;
	var pow$1 = Math.pow;
	var floor$4 = Math.floor;
	var log = Math.log;
	var LN2 = Math.LN2;

	var pack = function (number, mantissaLength, bytes) {
	  var buffer = new Array(bytes);
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var rt = mantissaLength === 23 ? pow$1(2, -24) - pow$1(2, -77) : 0;
	  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
	  var index = 0;
	  var exponent, mantissa, c;
	  number = abs(number); // eslint-disable-next-line no-self-compare

	  if (number != number || number === Infinity$1) {
	    // eslint-disable-next-line no-self-compare
	    mantissa = number != number ? 1 : 0;
	    exponent = eMax;
	  } else {
	    exponent = floor$4(log(number) / LN2);

	    if (number * (c = pow$1(2, -exponent)) < 1) {
	      exponent--;
	      c *= 2;
	    }

	    if (exponent + eBias >= 1) {
	      number += rt / c;
	    } else {
	      number += rt * pow$1(2, 1 - eBias);
	    }

	    if (number * c >= 2) {
	      exponent++;
	      c /= 2;
	    }

	    if (exponent + eBias >= eMax) {
	      mantissa = 0;
	      exponent = eMax;
	    } else if (exponent + eBias >= 1) {
	      mantissa = (number * c - 1) * pow$1(2, mantissaLength);
	      exponent = exponent + eBias;
	    } else {
	      mantissa = number * pow$1(2, eBias - 1) * pow$1(2, mantissaLength);
	      exponent = 0;
	    }
	  }

	  for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);

	  exponent = exponent << mantissaLength | mantissa;
	  exponentLength += mantissaLength;

	  for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);

	  buffer[--index] |= sign * 128;
	  return buffer;
	};

	var unpack = function (buffer, mantissaLength) {
	  var bytes = buffer.length;
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var nBits = exponentLength - 7;
	  var index = bytes - 1;
	  var sign = buffer[index--];
	  var exponent = sign & 127;
	  var mantissa;
	  sign >>= 7;

	  for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);

	  mantissa = exponent & (1 << -nBits) - 1;
	  exponent >>= -nBits;
	  nBits += mantissaLength;

	  for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);

	  if (exponent === 0) {
	    exponent = 1 - eBias;
	  } else if (exponent === eMax) {
	    return mantissa ? NaN : sign ? -Infinity$1 : Infinity$1;
	  } else {
	    mantissa = mantissa + pow$1(2, mantissaLength);
	    exponent = exponent - eBias;
	  }

	  return (sign ? -1 : 1) * mantissa * pow$1(2, exponent - mantissaLength);
	};

	var ieee754 = {
	  pack: pack,
	  unpack: unpack
	};

	var getOwnPropertyNames$2 = objectGetOwnPropertyNames.f;
	var defineProperty$a = objectDefineProperty.f;
	var getInternalState$4 = internalState.get;
	var setInternalState$8 = internalState.set;
	var ARRAY_BUFFER = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE$2 = 'prototype';
	var WRONG_LENGTH = 'Wrong length';
	var WRONG_INDEX = 'Wrong index';
	var NativeArrayBuffer = global_1[ARRAY_BUFFER];
	var $ArrayBuffer = NativeArrayBuffer;
	var $DataView = global_1[DATA_VIEW];
	var $DataViewPrototype = $DataView && $DataView[PROTOTYPE$2];
	var ObjectPrototype$3 = Object.prototype;
	var RangeError$1 = global_1.RangeError;
	var packIEEE754 = ieee754.pack;
	var unpackIEEE754 = ieee754.unpack;

	var packInt8 = function (number) {
	  return [number & 0xFF];
	};

	var packInt16 = function (number) {
	  return [number & 0xFF, number >> 8 & 0xFF];
	};

	var packInt32 = function (number) {
	  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
	};

	var unpackInt32 = function (buffer) {
	  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
	};

	var packFloat32 = function (number) {
	  return packIEEE754(number, 23, 4);
	};

	var packFloat64 = function (number) {
	  return packIEEE754(number, 52, 8);
	};

	var addGetter = function (Constructor, key) {
	  defineProperty$a(Constructor[PROTOTYPE$2], key, {
	    get: function () {
	      return getInternalState$4(this)[key];
	    }
	  });
	};

	var get$1 = function (view, count, index, isLittleEndian) {
	  var intIndex = toIndex(index);
	  var store = getInternalState$4(view);
	  if (intIndex + count > store.byteLength) throw RangeError$1(WRONG_INDEX);
	  var bytes = getInternalState$4(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = bytes.slice(start, start + count);
	  return isLittleEndian ? pack : pack.reverse();
	};

	var set$2 = function (view, count, index, conversion, value, isLittleEndian) {
	  var intIndex = toIndex(index);
	  var store = getInternalState$4(view);
	  if (intIndex + count > store.byteLength) throw RangeError$1(WRONG_INDEX);
	  var bytes = getInternalState$4(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = conversion(+value);

	  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
	};

	if (!arrayBufferNative) {
	  $ArrayBuffer = function ArrayBuffer(length) {
	    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
	    var byteLength = toIndex(length);
	    setInternalState$8(this, {
	      bytes: arrayFill.call(new Array(byteLength), 0),
	      byteLength: byteLength
	    });
	    if (!descriptors) this.byteLength = byteLength;
	  };

	  $DataView = function DataView(buffer, byteOffset, byteLength) {
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = getInternalState$4(buffer).byteLength;
	    var offset = toInteger(byteOffset);
	    if (offset < 0 || offset > bufferLength) throw RangeError$1('Wrong offset');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if (offset + byteLength > bufferLength) throw RangeError$1(WRONG_LENGTH);
	    setInternalState$8(this, {
	      buffer: buffer,
	      byteLength: byteLength,
	      byteOffset: offset
	    });

	    if (!descriptors) {
	      this.buffer = buffer;
	      this.byteLength = byteLength;
	      this.byteOffset = offset;
	    }
	  };

	  if (descriptors) {
	    addGetter($ArrayBuffer, 'byteLength');
	    addGetter($DataView, 'buffer');
	    addGetter($DataView, 'byteLength');
	    addGetter($DataView, 'byteOffset');
	  }

	  redefineAll($DataView[PROTOTYPE$2], {
	    getInt8: function getInt8(byteOffset) {
	      return get$1(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset) {
	      return get$1(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset
	    /* , littleEndian */
	    ) {
	      var bytes = get$1(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset
	    /* , littleEndian */
	    ) {
	      var bytes = get$1(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset
	    /* , littleEndian */
	    ) {
	      return unpackInt32(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
	    },
	    getUint32: function getUint32(byteOffset
	    /* , littleEndian */
	    ) {
	      return unpackInt32(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset
	    /* , littleEndian */
	    ) {
	      return unpackIEEE754(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
	    },
	    getFloat64: function getFloat64(byteOffset
	    /* , littleEndian */
	    ) {
	      return unpackIEEE754(get$1(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
	    },
	    setInt8: function setInt8(byteOffset, value) {
	      set$2(this, 1, byteOffset, packInt8, value);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      set$2(this, 1, byteOffset, packInt8, value);
	    },
	    setInt16: function setInt16(byteOffset, value
	    /* , littleEndian */
	    ) {
	      set$2(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint16: function setUint16(byteOffset, value
	    /* , littleEndian */
	    ) {
	      set$2(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setInt32: function setInt32(byteOffset, value
	    /* , littleEndian */
	    ) {
	      set$2(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint32: function setUint32(byteOffset, value
	    /* , littleEndian */
	    ) {
	      set$2(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat32: function setFloat32(byteOffset, value
	    /* , littleEndian */
	    ) {
	      set$2(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat64: function setFloat64(byteOffset, value
	    /* , littleEndian */
	    ) {
	      set$2(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
	    }
	  });
	} else {
	  if (!fails(function () {
	    NativeArrayBuffer(1);
	  }) || !fails(function () {
	    new NativeArrayBuffer(-1); // eslint-disable-line no-new
	  }) || fails(function () {
	    new NativeArrayBuffer(); // eslint-disable-line no-new

	    new NativeArrayBuffer(1.5); // eslint-disable-line no-new

	    new NativeArrayBuffer(NaN); // eslint-disable-line no-new

	    return NativeArrayBuffer.name != ARRAY_BUFFER;
	  })) {
	    $ArrayBuffer = function ArrayBuffer(length) {
	      anInstance(this, $ArrayBuffer);
	      return new NativeArrayBuffer(toIndex(length));
	    };

	    var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE$2] = NativeArrayBuffer[PROTOTYPE$2];

	    for (var keys$3 = getOwnPropertyNames$2(NativeArrayBuffer), j$1 = 0, key$1; keys$3.length > j$1;) {
	      if (!((key$1 = keys$3[j$1++]) in $ArrayBuffer)) {
	        createNonEnumerableProperty($ArrayBuffer, key$1, NativeArrayBuffer[key$1]);
	      }
	    }

	    ArrayBufferPrototype.constructor = $ArrayBuffer;
	  } // WebKit bug - the same parent prototype for typed arrays and data view


	  if (objectSetPrototypeOf && objectGetPrototypeOf($DataViewPrototype) !== ObjectPrototype$3) {
	    objectSetPrototypeOf($DataViewPrototype, ObjectPrototype$3);
	  } // iOS Safari 7.x bug


	  var testView = new $DataView(new $ArrayBuffer(2));
	  var nativeSetInt8 = $DataViewPrototype.setInt8;
	  testView.setInt8(0, 2147483648);
	  testView.setInt8(1, 2147483649);
	  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {
	    setInt8: function setInt8(byteOffset, value) {
	      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, {
	    unsafe: true
	  });
	}

	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);
	var arrayBuffer = {
	  ArrayBuffer: $ArrayBuffer,
	  DataView: $DataView
	};

	var toPositiveInteger = function (it) {
	  var result = toInteger(it);
	  if (result < 0) throw RangeError("The argument can't be less than 0");
	  return result;
	};

	var toOffset = function (it, BYTES) {
	  var offset = toPositiveInteger(it);
	  if (offset % BYTES) throw RangeError('Wrong offset');
	  return offset;
	};

	var aTypedArrayConstructor$1 = arrayBufferViewCore.aTypedArrayConstructor;

	var typedArrayFrom = function from(source
	/* , mapfn, thisArg */
	) {
	  var O = toObject(source);
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod(O);
	  var i, length, result, step, iterator, next;

	  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
	    iterator = iteratorMethod.call(O);
	    next = iterator.next;
	    O = [];

	    while (!(step = next.call(iterator)).done) {
	      O.push(step.value);
	    }
	  }

	  if (mapping && argumentsLength > 2) {
	    mapfn = functionBindContext(mapfn, arguments[2], 2);
	  }

	  length = toLength(O.length);
	  result = new (aTypedArrayConstructor$1(this))(length);

	  for (i = 0; length > i; i++) {
	    result[i] = mapping ? mapfn(O[i], i) : O[i];
	  }

	  return result;
	};

	var typedArrayConstructor = createCommonjsModule(function (module) {

	  var getOwnPropertyNames = objectGetOwnPropertyNames.f;
	  var forEach = arrayIteration.forEach;
	  var getInternalState = internalState.get;
	  var setInternalState = internalState.set;
	  var nativeDefineProperty = objectDefineProperty.f;
	  var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	  var round = Math.round;
	  var RangeError = global_1.RangeError;
	  var ArrayBuffer = arrayBuffer.ArrayBuffer;
	  var DataView = arrayBuffer.DataView;
	  var NATIVE_ARRAY_BUFFER_VIEWS = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
	  var TYPED_ARRAY_TAG = arrayBufferViewCore.TYPED_ARRAY_TAG;
	  var TypedArray = arrayBufferViewCore.TypedArray;
	  var TypedArrayPrototype = arrayBufferViewCore.TypedArrayPrototype;
	  var aTypedArrayConstructor = arrayBufferViewCore.aTypedArrayConstructor;
	  var isTypedArray = arrayBufferViewCore.isTypedArray;
	  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	  var WRONG_LENGTH = 'Wrong length';

	  var fromList = function (C, list) {
	    var index = 0;
	    var length = list.length;
	    var result = new (aTypedArrayConstructor(C))(length);

	    while (length > index) result[index] = list[index++];

	    return result;
	  };

	  var addGetter = function (it, key) {
	    nativeDefineProperty(it, key, {
	      get: function () {
	        return getInternalState(this)[key];
	      }
	    });
	  };

	  var isArrayBuffer = function (it) {
	    var klass;
	    return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
	  };

	  var isTypedArrayIndex = function (target, key) {
	    return isTypedArray(target) && typeof key != 'symbol' && key in target && String(+key) == String(key);
	  };

	  var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
	    return isTypedArrayIndex(target, key = toPrimitive(key, true)) ? createPropertyDescriptor(2, target[key]) : nativeGetOwnPropertyDescriptor(target, key);
	  };

	  var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
	    if (isTypedArrayIndex(target, key = toPrimitive(key, true)) && isObject(descriptor) && has(descriptor, 'value') && !has(descriptor, 'get') && !has(descriptor, 'set') // TODO: add validation descriptor w/o calling accessors
	    && !descriptor.configurable && (!has(descriptor, 'writable') || descriptor.writable) && (!has(descriptor, 'enumerable') || descriptor.enumerable)) {
	      target[key] = descriptor.value;
	      return target;
	    }

	    return nativeDefineProperty(target, key, descriptor);
	  };

	  if (descriptors) {
	    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	      objectGetOwnPropertyDescriptor.f = wrappedGetOwnPropertyDescriptor;
	      objectDefineProperty.f = wrappedDefineProperty;
	      addGetter(TypedArrayPrototype, 'buffer');
	      addGetter(TypedArrayPrototype, 'byteOffset');
	      addGetter(TypedArrayPrototype, 'byteLength');
	      addGetter(TypedArrayPrototype, 'length');
	    }

	    _export({
	      target: 'Object',
	      stat: true,
	      forced: !NATIVE_ARRAY_BUFFER_VIEWS
	    }, {
	      getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
	      defineProperty: wrappedDefineProperty
	    });

	    module.exports = function (TYPE, wrapper, CLAMPED) {
	      var BYTES = TYPE.match(/\d+$/)[0] / 8;
	      var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
	      var GETTER = 'get' + TYPE;
	      var SETTER = 'set' + TYPE;
	      var NativeTypedArrayConstructor = global_1[CONSTRUCTOR_NAME];
	      var TypedArrayConstructor = NativeTypedArrayConstructor;
	      var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
	      var exported = {};

	      var getter = function (that, index) {
	        var data = getInternalState(that);
	        return data.view[GETTER](index * BYTES + data.byteOffset, true);
	      };

	      var setter = function (that, index, value) {
	        var data = getInternalState(that);
	        if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
	        data.view[SETTER](index * BYTES + data.byteOffset, value, true);
	      };

	      var addElement = function (that, index) {
	        nativeDefineProperty(that, index, {
	          get: function () {
	            return getter(this, index);
	          },
	          set: function (value) {
	            return setter(this, index, value);
	          },
	          enumerable: true
	        });
	      };

	      if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	        TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
	          anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
	          var index = 0;
	          var byteOffset = 0;
	          var buffer, byteLength, length;

	          if (!isObject(data)) {
	            length = toIndex(data);
	            byteLength = length * BYTES;
	            buffer = new ArrayBuffer(byteLength);
	          } else if (isArrayBuffer(data)) {
	            buffer = data;
	            byteOffset = toOffset(offset, BYTES);
	            var $len = data.byteLength;

	            if ($length === undefined) {
	              if ($len % BYTES) throw RangeError(WRONG_LENGTH);
	              byteLength = $len - byteOffset;
	              if (byteLength < 0) throw RangeError(WRONG_LENGTH);
	            } else {
	              byteLength = toLength($length) * BYTES;
	              if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
	            }

	            length = byteLength / BYTES;
	          } else if (isTypedArray(data)) {
	            return fromList(TypedArrayConstructor, data);
	          } else {
	            return typedArrayFrom.call(TypedArrayConstructor, data);
	          }

	          setInternalState(that, {
	            buffer: buffer,
	            byteOffset: byteOffset,
	            byteLength: byteLength,
	            length: length,
	            view: new DataView(buffer)
	          });

	          while (index < length) addElement(that, index++);
	        });
	        if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
	        TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = objectCreate(TypedArrayPrototype);
	      } else if (typedArrayConstructorsRequireWrappers) {
	        TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
	          anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
	          return inheritIfRequired(function () {
	            if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
	            if (isArrayBuffer(data)) return $length !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length) : typedArrayOffset !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES)) : new NativeTypedArrayConstructor(data);
	            if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
	            return typedArrayFrom.call(TypedArrayConstructor, data);
	          }(), dummy, TypedArrayConstructor);
	        });
	        if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
	        forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
	          if (!(key in TypedArrayConstructor)) {
	            createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
	          }
	        });
	        TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
	      }

	      if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
	        createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
	      }

	      if (TYPED_ARRAY_TAG) {
	        createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
	      }

	      exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;
	      _export({
	        global: true,
	        forced: TypedArrayConstructor != NativeTypedArrayConstructor,
	        sham: !NATIVE_ARRAY_BUFFER_VIEWS
	      }, exported);

	      if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
	        createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
	      }

	      if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
	        createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
	      }

	      setSpecies(CONSTRUCTOR_NAME);
	    };
	  } else module.exports = function () {
	    /* empty */
	  };
	});

	// https://tc39.github.io/ecma262/#sec-typedarray-objects

	typedArrayConstructor('Uint8', function (init) {
	  return function Uint8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var min$8 = Math.min; // `Array.prototype.copyWithin` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin

	var arrayCopyWithin = [].copyWithin || function copyWithin(target
	/* = 0 */
	, start
	/* = 0, end = @length */
	) {
	  var O = toObject(this);
	  var len = toLength(O.length);
	  var to = toAbsoluteIndex(target, len);
	  var from = toAbsoluteIndex(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = min$8((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
	  var inc = 1;

	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }

	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];else delete O[to];
	    to += inc;
	    from += inc;
	  }

	  return O;
	};

	var aTypedArray$1 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$1 = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.copyWithin` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin

	exportTypedArrayMethod$1('copyWithin', function copyWithin(target, start
	/* , end */
	) {
	  return arrayCopyWithin.call(aTypedArray$1(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	});

	var $every = arrayIteration.every;
	var aTypedArray$2 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$2 = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.every` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every

	exportTypedArrayMethod$2('every', function every(callbackfn
	/* , thisArg */
	) {
	  return $every(aTypedArray$2(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$3 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$3 = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.fill` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
	// eslint-disable-next-line no-unused-vars

	exportTypedArrayMethod$3('fill', function fill(value
	/* , start, end */
	) {
	  return arrayFill.apply(aTypedArray$3(this), arguments);
	});

	var $filter$1 = arrayIteration.filter;
	var aTypedArray$4 = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$2 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayMethod$4 = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter

	exportTypedArrayMethod$4('filter', function filter(callbackfn
	/* , thisArg */
	) {
	  var list = $filter$1(aTypedArray$4(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  var C = speciesConstructor(this, this.constructor);
	  var index = 0;
	  var length = list.length;
	  var result = new (aTypedArrayConstructor$2(C))(length);

	  while (length > index) result[index] = list[index++];

	  return result;
	});

	var $find$1 = arrayIteration.find;
	var aTypedArray$5 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$5 = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.find` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find

	exportTypedArrayMethod$5('find', function find(predicate
	/* , thisArg */
	) {
	  return $find$1(aTypedArray$5(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $findIndex = arrayIteration.findIndex;
	var aTypedArray$6 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$6 = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.findIndex` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex

	exportTypedArrayMethod$6('findIndex', function findIndex(predicate
	/* , thisArg */
	) {
	  return $findIndex(aTypedArray$6(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $forEach$2 = arrayIteration.forEach;
	var aTypedArray$7 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$7 = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach

	exportTypedArrayMethod$7('forEach', function forEach(callbackfn
	/* , thisArg */
	) {
	  $forEach$2(aTypedArray$7(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $includes = arrayIncludes.includes;
	var aTypedArray$8 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$8 = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes

	exportTypedArrayMethod$8('includes', function includes(searchElement
	/* , fromIndex */
	) {
	  return $includes(aTypedArray$8(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $indexOf$1 = arrayIncludes.indexOf;
	var aTypedArray$9 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$9 = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof

	exportTypedArrayMethod$9('indexOf', function indexOf(searchElement
	/* , fromIndex */
	) {
	  return $indexOf$1(aTypedArray$9(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ITERATOR$8 = wellKnownSymbol('iterator');
	var Uint8Array$1 = global_1.Uint8Array;
	var arrayValues = es_array_iterator.values;
	var arrayKeys = es_array_iterator.keys;
	var arrayEntries = es_array_iterator.entries;
	var aTypedArray$a = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$a = arrayBufferViewCore.exportTypedArrayMethod;
	var nativeTypedArrayIterator = Uint8Array$1 && Uint8Array$1.prototype[ITERATOR$8];
	var CORRECT_ITER_NAME = !!nativeTypedArrayIterator && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

	var typedArrayValues = function values() {
	  return arrayValues.call(aTypedArray$a(this));
	}; // `%TypedArray%.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries


	exportTypedArrayMethod$a('entries', function entries() {
	  return arrayEntries.call(aTypedArray$a(this));
	}); // `%TypedArray%.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys

	exportTypedArrayMethod$a('keys', function keys() {
	  return arrayKeys.call(aTypedArray$a(this));
	}); // `%TypedArray%.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values

	exportTypedArrayMethod$a('values', typedArrayValues, !CORRECT_ITER_NAME); // `%TypedArray%.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator

	exportTypedArrayMethod$a(ITERATOR$8, typedArrayValues, !CORRECT_ITER_NAME);

	var aTypedArray$b = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$b = arrayBufferViewCore.exportTypedArrayMethod;
	var $join = [].join; // `%TypedArray%.prototype.join` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
	// eslint-disable-next-line no-unused-vars

	exportTypedArrayMethod$b('join', function join(separator) {
	  return $join.apply(aTypedArray$b(this), arguments);
	});

	var aTypedArray$c = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$c = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.lastIndexOf` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
	// eslint-disable-next-line no-unused-vars

	exportTypedArrayMethod$c('lastIndexOf', function lastIndexOf(searchElement
	/* , fromIndex */
	) {
	  return arrayLastIndexOf.apply(aTypedArray$c(this), arguments);
	});

	var $map$1 = arrayIteration.map;
	var aTypedArray$d = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$3 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayMethod$d = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map

	exportTypedArrayMethod$d('map', function map(mapfn
	/* , thisArg */
	) {
	  return $map$1(aTypedArray$d(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
	    return new (aTypedArrayConstructor$3(speciesConstructor(O, O.constructor)))(length);
	  });
	});

	var $reduce$1 = arrayReduce.left;
	var aTypedArray$e = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$e = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.reduce` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce

	exportTypedArrayMethod$e('reduce', function reduce(callbackfn
	/* , initialValue */
	) {
	  return $reduce$1(aTypedArray$e(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $reduceRight = arrayReduce.right;
	var aTypedArray$f = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$f = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.reduceRicht` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright

	exportTypedArrayMethod$f('reduceRight', function reduceRight(callbackfn
	/* , initialValue */
	) {
	  return $reduceRight(aTypedArray$f(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$g = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$g = arrayBufferViewCore.exportTypedArrayMethod;
	var floor$5 = Math.floor; // `%TypedArray%.prototype.reverse` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse

	exportTypedArrayMethod$g('reverse', function reverse() {
	  var that = this;
	  var length = aTypedArray$g(that).length;
	  var middle = floor$5(length / 2);
	  var index = 0;
	  var value;

	  while (index < middle) {
	    value = that[index];
	    that[index++] = that[--length];
	    that[length] = value;
	  }

	  return that;
	});

	var aTypedArray$h = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$h = arrayBufferViewCore.exportTypedArrayMethod;
	var FORCED$5 = fails(function () {
	  // eslint-disable-next-line no-undef
	  new Int8Array(1).set({});
	}); // `%TypedArray%.prototype.set` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set

	exportTypedArrayMethod$h('set', function set(arrayLike
	/* , offset */
	) {
	  aTypedArray$h(this);
	  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
	  var length = this.length;
	  var src = toObject(arrayLike);
	  var len = toLength(src.length);
	  var index = 0;
	  if (len + offset > length) throw RangeError('Wrong length');

	  while (index < len) this[offset + index] = src[index++];
	}, FORCED$5);

	var aTypedArray$i = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$4 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayMethod$i = arrayBufferViewCore.exportTypedArrayMethod;
	var $slice = [].slice;
	var FORCED$6 = fails(function () {
	  // eslint-disable-next-line no-undef
	  new Int8Array(1).slice();
	}); // `%TypedArray%.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice

	exportTypedArrayMethod$i('slice', function slice(start, end) {
	  var list = $slice.call(aTypedArray$i(this), start, end);
	  var C = speciesConstructor(this, this.constructor);
	  var index = 0;
	  var length = list.length;
	  var result = new (aTypedArrayConstructor$4(C))(length);

	  while (length > index) result[index] = list[index++];

	  return result;
	}, FORCED$6);

	var $some = arrayIteration.some;
	var aTypedArray$j = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$j = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.some` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some

	exportTypedArrayMethod$j('some', function some(callbackfn
	/* , thisArg */
	) {
	  return $some(aTypedArray$j(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$k = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$k = arrayBufferViewCore.exportTypedArrayMethod;
	var $sort = [].sort; // `%TypedArray%.prototype.sort` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort

	exportTypedArrayMethod$k('sort', function sort(comparefn) {
	  return $sort.call(aTypedArray$k(this), comparefn);
	});

	var aTypedArray$l = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$l = arrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.subarray` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray

	exportTypedArrayMethod$l('subarray', function subarray(begin, end) {
	  var O = aTypedArray$l(this);
	  var length = O.length;
	  var beginIndex = toAbsoluteIndex(begin, length);
	  return new (speciesConstructor(O, O.constructor))(O.buffer, O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex));
	});

	var Int8Array$3 = global_1.Int8Array;
	var aTypedArray$m = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$m = arrayBufferViewCore.exportTypedArrayMethod;
	var $toLocaleString = [].toLocaleString;
	var $slice$1 = [].slice; // iOS Safari 6.x fails here

	var TO_LOCALE_STRING_BUG = !!Int8Array$3 && fails(function () {
	  $toLocaleString.call(new Int8Array$3(1));
	});
	var FORCED$7 = fails(function () {
	  return [1, 2].toLocaleString() != new Int8Array$3([1, 2]).toLocaleString();
	}) || !fails(function () {
	  Int8Array$3.prototype.toLocaleString.call([1, 2]);
	}); // `%TypedArray%.prototype.toLocaleString` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring

	exportTypedArrayMethod$m('toLocaleString', function toLocaleString() {
	  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice$1.call(aTypedArray$m(this)) : aTypedArray$m(this), arguments);
	}, FORCED$7);

	var exportTypedArrayMethod$n = arrayBufferViewCore.exportTypedArrayMethod;
	var Uint8Array$2 = global_1.Uint8Array;
	var Uint8ArrayPrototype = Uint8Array$2 && Uint8Array$2.prototype || {};
	var arrayToString = [].toString;
	var arrayJoin = [].join;

	if (fails(function () {
	  arrayToString.call({});
	})) {
	  arrayToString = function toString() {
	    return arrayJoin.call(this);
	  };
	}

	var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString; // `%TypedArray%.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring

	exportTypedArrayMethod$n('toString', arrayToString, IS_NOT_ARRAY_METHOD);

	var Cytoband = function Cytoband(start, end, name, typestain) {
	  this.start = start;
	  this.end = end;
	  this.name = name;
	  this.stain = 0; // Set the type, either p, n, or c

	  if (typestain === 'acen') {
	    this.type = 'c';
	  } else {
	    this.type = typestain.charAt(1);

	    if (this.type === 'p') {
	      this.stain = parseInt(typestain.substring(4));
	    }
	  }
	};

	var GenomicInterval = function GenomicInterval(chr, start, end, features) {
	  this.chr = chr;
	  this.start = start;
	  this.end = end;
	  this.features = features;
	};

	GenomicInterval.prototype.contains = function (chr, start, end) {
	  return this.chr === chr && this.start <= start && this.end >= end;
	};

	GenomicInterval.prototype.containsRange = function (range) {
	  return this.chr === range.chr && this.start <= range.start && this.end >= range.end;
	};

	var Chromosome = function Chromosome(name, order, bpStart, bpLength, rangeLocus) {
	  this.name = name;
	  this.order = order;
	  this.bpStart = bpStart;
	  this.bpLength = bpLength;
	  this.rangeLocus = rangeLocus;
	};

	var $includes$1 = arrayIncludes.includes;
	var USES_TO_LENGTH$9 = arrayMethodUsesToLength('indexOf', {
	  ACCESSORS: true,
	  1: 0
	}); // `Array.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.includes

	_export({
	  target: 'Array',
	  proto: true,
	  forced: !USES_TO_LENGTH$9
	}, {
	  includes: function includes(el
	  /* , fromIndex = 0 */
	  ) {
	    return $includes$1(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	}); // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

	addToUnscopables('includes');

	var fromCharCode = String.fromCharCode;
	var nativeFromCodePoint = String.fromCodePoint; // length should be 1, old FF problem

	var INCORRECT_LENGTH = !!nativeFromCodePoint && nativeFromCodePoint.length != 1; // `String.fromCodePoint` method
	// https://tc39.github.io/ecma262/#sec-string.fromcodepoint

	_export({
	  target: 'String',
	  stat: true,
	  forced: INCORRECT_LENGTH
	}, {
	  fromCodePoint: function fromCodePoint(x) {
	    // eslint-disable-line no-unused-vars
	    var elements = [];
	    var length = arguments.length;
	    var i = 0;
	    var code;

	    while (length > i) {
	      code = +arguments[i++];
	      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');
	      elements.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00));
	    }

	    return elements.join('');
	  }
	});

	// https://tc39.github.io/ecma262/#sec-string.prototype.includes


	_export({
	  target: 'String',
	  proto: true,
	  forced: !correctIsRegexpLogic('includes')
	}, {
	  includes: function includes(searchString
	  /* , position = 0 */
	  ) {
	    return !!~String(requireObjectCoercible(this)).indexOf(notARegexp(searchString), arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// Support for oauth token based authorization
	// This class supports explicit setting of an oauth token either globally or for specific hosts.
	//
	// The variable oauth.google.access_token, which becomes igv.oauth.google.access_token on ES5 conversion is
	// supported for backward compatibility
	var DEFAULT_HOST = "googleapis";
	var oauth = {
	  oauthTokens: {},
	  setToken: function setToken(token, host) {
	    host = host || DEFAULT_HOST;
	    this.oauthTokens[host] = token;

	    if (host === DEFAULT_HOST) {
	      this.google.access_token = token; // legacy support
	    }
	  },
	  getToken: function getToken(host) {
	    host = host || DEFAULT_HOST;
	    var token;

	    for (var _i = 0, _Object$keys = Object.keys(this.oauthTokens); _i < _Object$keys.length; _i++) {
	      var key = _Object$keys[_i];
	      var regex = wildcardToRegExp(key);

	      if (regex.test(host)) {
	        token = this.oauthTokens[key];
	        break;
	      }
	    }

	    return token;
	  },
	  removeToken: function removeToken(host) {
	    host = host || DEFAULT_HOST;

	    for (var _i2 = 0, _Object$keys2 = Object.keys(this.oauthTokens); _i2 < _Object$keys2.length; _i2++) {
	      var key = _Object$keys2[_i2];
	      var regex = wildcardToRegExp(key);

	      if (regex.test(host)) {
	        this.oauthTokens[key] = undefined;
	      }
	    }

	    if (host === DEFAULT_HOST) {
	      this.google.access_token = undefined; // legacy support
	    }
	  },
	  // Special object for google -- legacy support
	  google: {
	    setToken: function setToken(token) {
	      oauth.setToken(token);
	    }
	  }
	};
	/**
	 * Creates a RegExp from the given string, converting asterisks to .* expressions,
	 * and escaping all other characters.
	 *
	 * credit https://gist.github.com/donmccurdy/6d073ce2c6f3951312dfa45da14a420f
	 */

	function wildcardToRegExp(s) {
	  return new RegExp('^' + s.split(/\*+/).map(regExpEscape).join('.*') + '$');
	}
	/**
	 * RegExp-escapes all characters in the given string.
	 *
	 * credit https://gist.github.com/donmccurdy/6d073ce2c6f3951312dfa45da14a420f
	 */


	function regExpEscape(s) {
	  return s.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
	}

	// Uncompress data,  assumed to be series of bgzipped blocks

	function unbgzf(data, lim) {
	  var oBlockList = [];
	  var ptr = 0;
	  var totalSize = 0;
	  lim = lim || data.byteLength - 18;

	  while (ptr < lim) {
	    try {
	      var ba = new Uint8Array(data, ptr, 18);
	      var xlen = ba[11] << 8 | ba[10];
	      var si1 = ba[12];
	      var si2 = ba[13];
	      var slen = ba[15] << 8 | ba[14];
	      var bsize = (ba[17] << 8 | ba[16]) + 1;
	      var start = 12 + xlen + ptr; // Start of CDATA

	      var bytesLeft = data.byteLength - start;
	      var cDataSize = bsize - xlen - 19;
	      if (bytesLeft < cDataSize || cDataSize <= 0) break;
	      var a = new Uint8Array(data, start, cDataSize);
	      var inflate = new Zlib$1.RawInflate(a);
	      var unc = inflate.decompress();
	      ptr += inflate.ip + 26;
	      totalSize += unc.byteLength;
	      oBlockList.push(unc);
	    } catch (e) {
	      console.error(e);
	      break;
	    }
	  } // Concatenate decompressed blocks


	  if (oBlockList.length === 1) {
	    return oBlockList[0];
	  } else {
	    var out = new Uint8Array(totalSize);
	    var cursor = 0;

	    for (var i = 0; i < oBlockList.length; ++i) {
	      var b = new Uint8Array(oBlockList[i]);
	      arrayCopy(b, 0, out, cursor, b.length);
	      cursor += b.length;
	    }

	    return out;
	  }
	}

	function bgzBlockSize(data) {
	  var ba = new Uint8Array(data);
	  var bsize = ba[17] << 8 | ba[16] + 1;
	  return bsize;
	} // From Thomas Down's zlib implementation


	var testArray = new Uint8Array(1);
	var hasSubarray = typeof testArray.subarray === 'function';
	/* (typeof testArray.slice === 'function'); */
	// Chrome slice performance is so dire that we're currently not using it...

	function arrayCopy(src, srcOffset, dest, destOffset, count) {
	  if (count === 0) {
	    return;
	  }

	  if (!src) {
	    throw "Undef src";
	  } else if (!dest) {
	    throw "Undef dest";
	  }

	  if (srcOffset === 0 && count === src.length) {
	    arrayCopy_fast(src, dest, destOffset);
	  } else if (hasSubarray) {
	    arrayCopy_fast(src.subarray(srcOffset, srcOffset + count), dest, destOffset);
	  } else if (src.BYTES_PER_ELEMENT === 1 && count > 100) {
	    arrayCopy_fast(new Uint8Array(src.buffer, src.byteOffset + srcOffset, count), dest, destOffset);
	  } else {
	    arrayCopy_slow(src, srcOffset, dest, destOffset, count);
	  }
	}

	function arrayCopy_slow(src, srcOffset, dest, destOffset, count) {
	  for (var i = 0; i < count; ++i) {
	    dest[destOffset + i] = src[srcOffset + i];
	  }
	}

	function arrayCopy_fast(src, dest, destOffset) {
	  dest.set(src, destOffset);
	}

	var globalIsFinite = global_1.isFinite; // `Number.isFinite` method
	// https://tc39.github.io/ecma262/#sec-number.isfinite

	var numberIsFinite = Number.isFinite || function isFinite(it) {
	  return typeof it == 'number' && globalIsFinite(it);
	};

	// https://tc39.github.io/ecma262/#sec-number.isfinite

	_export({
	  target: 'Number',
	  stat: true
	}, {
	  isFinite: numberIsFinite
	});

	// https://tc39.github.io/ecma262/#sec-number.isnan

	_export({
	  target: 'Number',
	  stat: true
	}, {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare
	    return number != number;
	  }
	});

	// https://tc39.github.io/ecma262/#sec-thisnumbervalue

	var thisNumberValue = function (value) {
	  if (typeof value != 'number' && classofRaw(value) != 'Number') {
	    throw TypeError('Incorrect invocation');
	  }

	  return +value;
	};

	// https://tc39.github.io/ecma262/#sec-string.prototype.repeat


	var stringRepeat = ''.repeat || function repeat(count) {
	  var str = String(requireObjectCoercible(this));
	  var result = '';
	  var n = toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');

	  for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;

	  return result;
	};

	var nativeToFixed = 1.0.toFixed;
	var floor$6 = Math.floor;

	var pow$2 = function (x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow$2(x, n - 1, acc * x) : pow$2(x * x, n / 2, acc);
	};

	var log$1 = function (x) {
	  var n = 0;
	  var x2 = x;

	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }

	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  }

	  return n;
	};

	var FORCED$8 = nativeToFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !fails(function () {
	  // V8 ~ Android 4.3-
	  nativeToFixed.call({});
	}); // `Number.prototype.toFixed` method
	// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed

	_export({
	  target: 'Number',
	  proto: true,
	  forced: FORCED$8
	}, {
	  // eslint-disable-next-line max-statements
	  toFixed: function toFixed(fractionDigits) {
	    var number = thisNumberValue(this);
	    var fractDigits = toInteger(fractionDigits);
	    var data = [0, 0, 0, 0, 0, 0];
	    var sign = '';
	    var result = '0';
	    var e, z, j, k;

	    var multiply = function (n, c) {
	      var index = -1;
	      var c2 = c;

	      while (++index < 6) {
	        c2 += n * data[index];
	        data[index] = c2 % 1e7;
	        c2 = floor$6(c2 / 1e7);
	      }
	    };

	    var divide = function (n) {
	      var index = 6;
	      var c = 0;

	      while (--index >= 0) {
	        c += data[index];
	        data[index] = floor$6(c / n);
	        c = c % n * 1e7;
	      }
	    };

	    var dataToString = function () {
	      var index = 6;
	      var s = '';

	      while (--index >= 0) {
	        if (s !== '' || index === 0 || data[index] !== 0) {
	          var t = String(data[index]);
	          s = s === '' ? t : s + stringRepeat.call('0', 7 - t.length) + t;
	        }
	      }

	      return s;
	    };

	    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits'); // eslint-disable-next-line no-self-compare

	    if (number != number) return 'NaN';
	    if (number <= -1e21 || number >= 1e21) return String(number);

	    if (number < 0) {
	      sign = '-';
	      number = -number;
	    }

	    if (number > 1e-21) {
	      e = log$1(number * pow$2(2, 69, 1)) - 69;
	      z = e < 0 ? number * pow$2(2, -e, 1) : number / pow$2(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;

	      if (e > 0) {
	        multiply(0, z);
	        j = fractDigits;

	        while (j >= 7) {
	          multiply(1e7, 0);
	          j -= 7;
	        }

	        multiply(pow$2(10, j, 1), 0);
	        j = e - 1;

	        while (j >= 23) {
	          divide(1 << 23);
	          j -= 23;
	        }

	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        result = dataToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        result = dataToString() + stringRepeat.call('0', fractDigits);
	      }
	    }

	    if (fractDigits > 0) {
	      k = result.length;
	      result = sign + (k <= fractDigits ? '0.' + stringRepeat.call('0', fractDigits - k) + result : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
	    } else {
	      result = sign + result;
	    }

	    return result;
	  }
	});

	/**
	 * Test if the given value is a string or number.  Not using typeof as it fails on boxed primitives.
	 *
	 * @param value
	 * @returns boolean
	 */


	function isSimpleType(value) {
	  var simpleTypes = new Set(["boolean", "number", "string", "symbol"]);

	  var valueType = _typeof(value);

	  return value !== undefined && (simpleTypes.has(valueType) || value.substring || value.toFixed);
	}

	function buildOptions(config, options) {
	  var defaultOptions = {
	    oauthToken: config.oauthToken,
	    headers: config.headers,
	    withCredentials: config.withCredentials,
	    filename: config.filename
	  };
	  return Object.assign(defaultOptions, options);
	}
	/**
	 * isMobile test from http://detectmobilebrowsers.com
	 * TODO -- improve UI design so this isn't neccessary
	 * @returns {boolean}
	 */
	// igv.isMobile = function () {
	//
	//     const a = (navigator.userAgent || navigator.vendor || window.opera);
	//     return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) ||
	//         /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
	//
	// }


	var doAutoscale = function doAutoscale(features) {
	  var min, max;

	  if (features.length > 0) {
	    min = Number.MAX_VALUE;
	    max = -Number.MAX_VALUE;
	    features.forEach(function (f) {
	      if (!Number.isNaN(f.value)) {
	        min = Math.min(min, f.value);
	        max = Math.max(max, f.value);
	      }
	    }); // Insure we have a zero baseline

	    if (max > 0) min = Math.min(0, min);
	    if (max < 0) max = 0;
	  } else {
	    // No features -- default
	    min = 0;
	    max = 100;
	  }

	  return {
	    min: min,
	    max: max
	  };
	};

	var validateLocusExtent = function validateLocusExtent(chromosomeLengthBP, extent, minimumBP) {
	  var ss = extent.start;
	  var ee = extent.end;

	  if (undefined === ee) {
	    ss -= minimumBP / 2;
	    ee = ss + minimumBP;

	    if (ee > chromosomeLengthBP) {
	      ee = chromosomeLengthBP;
	      ss = ee - minimumBP;
	    } else if (ss < 0) {
	      ss = 0;
	      ee = minimumBP;
	    }
	  } else if (ee - ss < minimumBP) {
	    var center = (ee + ss) / 2;

	    if (center - minimumBP / 2 < 0) {
	      ss = 0;
	      ee = ss + minimumBP;
	    } else if (center + minimumBP / 2 > chromosomeLengthBP) {
	      ee = chromosomeLengthBP;
	      ss = ee - minimumBP;
	    } else {
	      ss = center - minimumBP / 2;
	      ee = ss + minimumBP;
	    }
	  }

	  extent.start = Math.ceil(ss);
	  extent.end = Math.floor(ee);
	};
	/*!
	 * is-number <https://github.com/jonschlinkert/is-number>
	 *
	 * Copyright (c) 2014-present, Jon Schlinkert.
	 * Released under the MIT License.
	 */


	var isNumber = function isNumber(num) {
	  if (typeof num === 'number') {
	    return num - num === 0;
	  }

	  if (typeof num === 'string' && num.trim() !== '') {
	    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
	  }

	  return false;
	};

	function inferTrackType(config) {
	  translateDeprecatedTypes(config);

	  if (config.type) {
	    return config.type;
	  }

	  var format;

	  if ("file" === config.sourceType || undefined === config.sourceType && config.url) {
	    if (undefined === config.format) {
	      var path = isFilePath(config.url) ? config.url.name : config.url;
	      format = inferFileFormat(path);
	    } else {
	      format = config.format.toLowerCase();
	    }
	  }

	  if (format) {
	    switch (format) {
	      case "bw":
	      case "bigwig":
	      case "wig":
	      case "bedgraph":
	      case "tdf":
	        return "wig";

	      case "vcf":
	        return "variant";

	      case "seg":
	        return "seg";

	      case "bam":
	      case "cram":
	        return "alignment";

	      case "bedpe":
	      case "bedpe-loop":
	        return "interaction";

	      case "bp":
	        return "arc";

	      case "gwas":
	        return "gwas";

	      case "bed":
	      case "bigbed":
	      case "bb":
	        return "bedtype";

	      default:
	        return "annotation";
	    }
	  }
	}

	function translateDeprecatedTypes(config) {
	  if (config.featureType) {
	    // Translate deprecated "feature" type
	    config.type = config.type || config.featureType;
	    config.featureType = undefined;
	  }

	  if ("junctions" === config.type) {
	    config.type = "spliceJunctions";
	  } else if ("bed" === config.type) {
	    config.type = "annotation";
	    config.format = config.format || "bed";
	  } else if ("annotations" === config.type) {
	    config.type = "annotation";
	  } else if ("alignments" === config.type) {
	    config.type = "alignment";
	  } else if ("bam" === config.type) {
	    config.type = "alignment";
	    config.format = "bam";
	  } else if ("vcf" === config.type) {
	    config.type = "variant";
	    config.format = "vcf";
	  } else if ("t2d" === config.type) {
	    config.type = "gwas";
	  } else if ("FusionJuncSpan" === config.type && !config.format) {
	    config.format = "fusionjuncspan";
	  } else if ("aed" === config.type) {
	    config.type = "annotation";
	    config.format = config.format || "aed";
	  }
	}

	function getFilename$1(_x) {
	  return _getFilename.apply(this, arguments);
	}

	function _getFilename() {
	  _getFilename = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url) {
	    var json;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            if (!(isString(url) && url.startsWith("https://drive.google.com"))) {
	              _context.next = 9;
	              break;
	            }

	            if (!(getApiKey() === undefined)) {
	              _context.next = 3;
	              break;
	            }

	            throw Error("Google drive is referenced, but API key is not defined.  An API key is required for Google Drive access");

	          case 3:
	            _context.next = 5;
	            return getDriveFileInfo(url);

	          case 5:
	            json = _context.sent;
	            return _context.abrupt("return", json.originalFileName || json.name);

	          case 9:
	            return _context.abrupt("return", getFilename(url));

	          case 10:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));
	  return _getFilename.apply(this, arguments);
	}

	// The MIT License (MIT)

	function PromiseThrottle(options) {
	  this.requestsPerSecond = options.requestsPerSecond;
	  this.promiseImplementation = options.promiseImplementation || Promise;
	  this.lastStartTime = 0;
	  this.queued = [];
	}
	/**
	 * Adds a promise
	 * @param {Function} promise A function returning the promise to be added
	 * @param {Object} options A set of options.
	 * @param {number} options.signal An AbortSignal object that can be used to abort the returned promise
	 * @param {number} options.weight A "weight" of each operation resolving by array of promises
	 * @return {Promise} A promise
	 */


	PromiseThrottle.prototype.add = function (promise, options) {
	  var self = this;
	  var opt = options || {};
	  return new self.promiseImplementation(function (resolve, reject) {
	    self.queued.push({
	      resolve: resolve,
	      reject: reject,
	      promise: promise,
	      weight: opt.weight || 1,
	      signal: opt.signal
	    });
	    self.dequeue();
	  });
	};
	/**
	 * Adds all the promises passed as parameters
	 * @param {Function} promises An array of functions that return a promise
	 * @param {Object} options A set of options.
	 * @param {number} options.signal An AbortSignal object that can be used to abort the returned promise
	 * @param {number} options.weight A "weight" of each operation resolving by array of promises
	 * @return {Promise} A promise that succeeds when all the promises passed as options do
	 */


	PromiseThrottle.prototype.addAll = function (promises, options) {
	  var addedPromises = promises.map(function (promise) {
	    return this.add(promise, options);
	  }.bind(this));
	  return Promise.all(addedPromises);
	};
	/**
	 * Dequeues a promise
	 * @return {void}
	 */


	PromiseThrottle.prototype.dequeue = function () {
	  if (this.queued.length > 0) {
	    var now = new Date(),
	        weight = this.queued[0].weight,
	        inc = 1000 / this.requestsPerSecond * weight + 1,
	        elapsed = now - this.lastStartTime;

	    if (elapsed >= inc) {
	      this._execute();
	    } else {
	      // we have reached the limit, schedule a dequeue operation
	      setTimeout(function () {
	        this.dequeue();
	      }.bind(this), inc - elapsed);
	    }
	  }
	};
	/**
	 * Executes the promise
	 * @private
	 * @return {void}
	 */


	PromiseThrottle.prototype._execute = function () {
	  this.lastStartTime = new Date();
	  var candidate = this.queued.shift();
	  var aborted = candidate.signal && candidate.signal.aborted;

	  if (aborted) {
	    candidate.reject(new DOMException('', 'AbortError'));
	  } else {
	    candidate.promise().then(function (r) {
	      candidate.resolve(r);
	    }).catch(function (r) {
	      candidate.reject(r);
	    });
	  }
	};

	var NONE = 0;
	var GZIP = 1;
	var BGZF = 2;
	var UNKNOWN = 3;
	var RANGE_WARNING_GIVEN = false;
	var promiseThrottle = new PromiseThrottle({
	  requestsPerSecond: 10,
	  promiseImplementation: Promise
	});
	var igvxhr = {
	  apiKey: undefined,
	  setApiKey: function setApiKey(key) {
	    this.apiKey = key;
	  },
	  load: load$1,
	  loadArrayBuffer: function () {
	    var _loadArrayBuffer = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url, options) {
	      return regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              options = options || {};

	              if (!options.responseType) {
	                options.responseType = "arraybuffer";
	              }

	              if (!(url instanceof File)) {
	                _context.next = 6;
	                break;
	              }

	              return _context.abrupt("return", loadFileSlice(url, options));

	            case 6:
	              return _context.abrupt("return", load$1(url, options));

	            case 7:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }));

	    function loadArrayBuffer(_x, _x2) {
	      return _loadArrayBuffer.apply(this, arguments);
	    }

	    return loadArrayBuffer;
	  }(),
	  loadJson: function () {
	    var _loadJson = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(url, options) {
	      var method, result;
	      return regeneratorRuntime.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              options = options || {};
	              method = options.method || (options.sendData ? "POST" : "GET");

	              if (method === "POST") {
	                options.contentType = "application/json";
	              }

	              _context2.next = 5;
	              return this.loadString(url, options);

	            case 5:
	              result = _context2.sent;

	              if (!result) {
	                _context2.next = 10;
	                break;
	              }

	              return _context2.abrupt("return", JSON.parse(result));

	            case 10:
	              return _context2.abrupt("return", result);

	            case 11:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2, this);
	    }));

	    function loadJson(_x3, _x4) {
	      return _loadJson.apply(this, arguments);
	    }

	    return loadJson;
	  }(),
	  loadString: function () {
	    var _loadString = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(path, options) {
	      return regeneratorRuntime.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              options = options || {};

	              if (!(path instanceof File)) {
	                _context3.next = 5;
	                break;
	              }

	              return _context3.abrupt("return", loadStringFromFile(path, options));

	            case 5:
	              return _context3.abrupt("return", loadStringFromUrl(path, options));

	            case 6:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, _callee3);
	    }));

	    function loadString(_x5, _x6) {
	      return _loadString.apply(this, arguments);
	    }

	    return loadString;
	  }()
	};

	function load$1(_x7, _x8) {
	  return _load.apply(this, arguments);
	}

	function _load() {
	  _load = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(url, options) {
	    var urlType;
	    return regeneratorRuntime.wrap(function _callee4$(_context4) {
	      while (1) {
	        switch (_context4.prev = _context4.next) {
	          case 0:
	            options = options || {};
	            urlType = _typeof(url); // Resolve functions, promises, and functions that return promises

	            _context4.next = 4;
	            return typeof url === 'function' ? url() : url;

	          case 4:
	            url = _context4.sent;

	            if (!(url instanceof File)) {
	              _context4.next = 9;
	              break;
	            }

	            return _context4.abrupt("return", loadFileSlice(url, options));

	          case 9:
	            if (!(typeof url.startsWith === 'function')) {
	              _context4.next = 22;
	              break;
	            }

	            if (!url.startsWith("data:")) {
	              _context4.next = 14;
	              break;
	            }

	            return _context4.abrupt("return", decodeDataURI(url));

	          case 14:
	            if (url.startsWith("https://drive.google.com")) {
	              url = driveDownloadURL(url);
	            }

	            if (!isGoogleDriveURL(url)) {
	              _context4.next = 19;
	              break;
	            }

	            return _context4.abrupt("return", promiseThrottle.add(function () {
	              return loadURL(url, options);
	            }));

	          case 19:
	            return _context4.abrupt("return", loadURL(url, options));

	          case 20:
	            _context4.next = 23;
	            break;

	          case 22:
	            throw Error("url must be either a 'File', 'string', 'function', or 'Promise'.  Actual type: ".concat(urlType));

	          case 23:
	          case "end":
	            return _context4.stop();
	        }
	      }
	    }, _callee4);
	  }));
	  return _load.apply(this, arguments);
	}

	function loadURL(_x9, _x10) {
	  return _loadURL.apply(this, arguments);
	}

	function _loadURL() {
	  _loadURL = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(url, options) {
	    var oauthToken;
	    return regeneratorRuntime.wrap(function _callee7$(_context7) {
	      while (1) {
	        switch (_context7.prev = _context7.next) {
	          case 0:
	            //console.log(`${Date.now()}   ${url}`)
	            url = mapUrl(url);
	            options = options || {};
	            oauthToken = options.oauthToken || getOauthToken(url);

	            if (!oauthToken) {
	              _context7.next = 7;
	              break;
	            }

	            _context7.next = 6;
	            return typeof oauthToken === 'function' ? oauthToken() : oauthToken;

	          case 6:
	            oauthToken = _context7.sent;

	          case 7:
	            return _context7.abrupt("return", new Promise(function (resolve, reject) {
	              // Various Google tansformations
	              if (isGoogleURL(url)) {
	                if (url.startsWith("gs://")) {
	                  url = translateGoogleCloudURL(url);
	                } else if (isGoogleStorageURL(url)) {
	                  if (!url.includes("altMedia=")) {
	                    url += url.includes("?") ? "&altMedia=true" : "?altMedia=true";
	                  }
	                }

	                url = addApiKey(url);

	                if (isGoogleDriveURL(url)) {
	                  addTeamDrive(url);
	                } // If we have an access token try it, but don't force a signIn or request for scopes yet


	                if (!oauthToken) {
	                  oauthToken = getCurrentGoogleAccessToken();
	                }
	              }

	              var headers = options.headers || {};

	              if (oauthToken) {
	                addOauthHeaders(headers, oauthToken);
	              }

	              var range = options.range;
	              var isChrome = navigator.userAgent.indexOf('Chrome') > -1;
	              var isSafari = navigator.vendor.indexOf("Apple") === 0 && /\sSafari\//.test(navigator.userAgent);

	              if (range && isChrome && !isAmazonV4Signed(url)) {
	                // Hack to prevent caching for byte-ranges. Attempt to fix net:err-cache errors in Chrome
	                url += url.includes("?") ? "&" : "?";
	                url += "someRandomSeed=" + Math.random().toString(36);
	              }

	              var xhr = new XMLHttpRequest();
	              var sendData = options.sendData || options.body;
	              var method = options.method || (sendData ? "POST" : "GET");
	              var responseType = options.responseType;
	              var contentType = options.contentType;
	              var mimeType = options.mimeType;
	              xhr.open(method, url);

	              if (range) {
	                var rangeEnd = range.size ? range.start + range.size - 1 : "";
	                xhr.setRequestHeader("Range", "bytes=" + range.start + "-" + rangeEnd); //      xhr.setRequestHeader("Cache-Control", "no-cache");    <= This can cause CORS issues, disabled for now
	              }

	              if (contentType) {
	                xhr.setRequestHeader("Content-Type", contentType);
	              }

	              if (mimeType) {
	                xhr.overrideMimeType(mimeType);
	              }

	              if (responseType) {
	                xhr.responseType = responseType;
	              }

	              if (headers) {
	                for (var _i = 0, _Object$keys = Object.keys(headers); _i < _Object$keys.length; _i++) {
	                  var key = _Object$keys[_i];
	                  var value = headers[key];
	                  xhr.setRequestHeader(key, value);
	                }
	              } // NOTE: using withCredentials with servers that return "*" for access-allowed-origin will fail


	              if (options.withCredentials === true) {
	                xhr.withCredentials = true;
	              }

	              xhr.onload = /*#__PURE__*/function () {
	                var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(event) {
	                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
	                    while (1) {
	                      switch (_context5.prev = _context5.next) {
	                        case 0:
	                          // when the url points to a local file, the status is 0 but that is not an error
	                          if (xhr.status === 0 || xhr.status >= 200 && xhr.status <= 300) {
	                            if (range && xhr.status !== 206 && range.start !== 0) {
	                              // For small files a range starting at 0 can return the whole file => 200
	                              // Provide just the slice we asked for, throw out the rest quietly
	                              // If file is large warn user
	                              if (xhr.response.length > 100000 && !RANGE_WARNING_GIVEN) {
	                                alert("Warning: Range header ignored for URL: ".concat(url, ".  This can have performance impacts."));
	                              }

	                              resolve(xhr.response.slice(range.start, range.start + range.size));
	                            } else {
	                              resolve(xhr.response);
	                            }
	                          } else if (typeof gapi !== "undefined" && (xhr.status === 404 || xhr.status === 401 || xhr.status === 403) && isGoogleURL(url) && !options.retries) {
	                            tryGoogleAuth();
	                          } else {
	                            if (xhr.status === 403) {
	                              handleError("Access forbidden: " + url);
	                            } else if (xhr.status === 416) {
	                              //  Tried to read off the end of the file.   This shouldn't happen, but if it does return an
	                              handleError("Unsatisfiable range");
	                            } else {
	                              handleError(xhr.status);
	                            }
	                          }

	                        case 1:
	                        case "end":
	                          return _context5.stop();
	                      }
	                    }
	                  }, _callee5);
	                }));

	                return function (_x20) {
	                  return _ref.apply(this, arguments);
	                };
	              }();

	              xhr.onerror = function (event) {
	                if (isGoogleURL(url) && !options.retries) {
	                  tryGoogleAuth();
	                }

	                handleError("Error accessing resource: " + url + " Status: " + xhr.status);
	              };

	              xhr.ontimeout = function (event) {
	                handleError("Timed out");
	              };

	              xhr.onabort = function (event) {
	                reject(event);
	              };

	              try {
	                xhr.send(sendData);
	              } catch (e) {
	                reject(e);
	              }

	              function handleError(error) {
	                if (reject) {
	                  reject(error);
	                } else {
	                  throw error;
	                }
	              }

	              function tryGoogleAuth() {
	                return _tryGoogleAuth.apply(this, arguments);
	              }

	              function _tryGoogleAuth() {
	                _tryGoogleAuth = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
	                  var accessToken, response, msg;
	                  return regeneratorRuntime.wrap(function _callee6$(_context6) {
	                    while (1) {
	                      switch (_context6.prev = _context6.next) {
	                        case 0:
	                          _context6.prev = 0;
	                          _context6.next = 3;
	                          return fetchGoogleAccessToken(url);

	                        case 3:
	                          accessToken = _context6.sent;
	                          options.retries = 1;
	                          options.oauthToken = accessToken;
	                          _context6.next = 8;
	                          return load$1(url, options);

	                        case 8:
	                          response = _context6.sent;
	                          resolve(response);
	                          _context6.next = 15;
	                          break;

	                        case 12:
	                          _context6.prev = 12;
	                          _context6.t0 = _context6["catch"](0);

	                          if (_context6.t0.error) {
	                            msg = _context6.t0.error.startsWith("popup_blocked") ? "Google login popup blocked by browser." : _context6.t0.error;
	                            alert(msg);
	                          } else {
	                            handleError(_context6.t0);
	                          }

	                        case 15:
	                        case "end":
	                          return _context6.stop();
	                      }
	                    }
	                  }, _callee6, null, [[0, 12]]);
	                }));
	                return _tryGoogleAuth.apply(this, arguments);
	              }
	            }));

	          case 8:
	          case "end":
	            return _context7.stop();
	        }
	      }
	    }, _callee7);
	  }));
	  return _loadURL.apply(this, arguments);
	}

	function loadFileSlice(_x11, _x12) {
	  return _loadFileSlice.apply(this, arguments);
	}

	function _loadFileSlice() {
	  _loadFileSlice = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(localfile, options) {
	    var blob;
	    return regeneratorRuntime.wrap(function _callee8$(_context8) {
	      while (1) {
	        switch (_context8.prev = _context8.next) {
	          case 0:
	            blob = options && options.range ? localfile.slice(options.range.start, options.range.start + options.range.size) : localfile;

	            if (!("arraybuffer" === options.responseType)) {
	              _context8.next = 5;
	              break;
	            }

	            return _context8.abrupt("return", blobToArrayBuffer(blob));

	          case 5:
	            return _context8.abrupt("return", new Promise(function (resolve, reject) {
	              var fileReader = new FileReader();

	              fileReader.onload = function (e) {
	                resolve(fileReader.result);
	              };

	              fileReader.onerror = function (e) {
	                console.error("reject uploading local file " + localfile.name);
	                reject(null, fileReader);
	              };

	              fileReader.readAsBinaryString(blob);
	              console.warn("Deprecated method used: readAsBinaryString");
	            }));

	          case 6:
	          case "end":
	            return _context8.stop();
	        }
	      }
	    }, _callee8);
	  }));
	  return _loadFileSlice.apply(this, arguments);
	}

	function loadStringFromFile(_x13, _x14) {
	  return _loadStringFromFile.apply(this, arguments);
	}

	function _loadStringFromFile() {
	  _loadStringFromFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(localfile, options) {
	    var blob, compression, arrayBuffer;
	    return regeneratorRuntime.wrap(function _callee9$(_context9) {
	      while (1) {
	        switch (_context9.prev = _context9.next) {
	          case 0:
	            blob = options.range ? localfile.slice(options.range.start, options.range.start + options.range.size) : localfile;
	            compression = NONE;

	            if (options && options.bgz || localfile.name.endsWith(".bgz")) {
	              compression = BGZF;
	            } else if (localfile.name.endsWith(".gz")) {
	              compression = GZIP;
	            }

	            if (!(compression === NONE)) {
	              _context9.next = 7;
	              break;
	            }

	            return _context9.abrupt("return", blobToText(blob));

	          case 7:
	            _context9.next = 9;
	            return blobToArrayBuffer(blob);

	          case 9:
	            arrayBuffer = _context9.sent;
	            return _context9.abrupt("return", arrayBufferToString(arrayBuffer, compression));

	          case 11:
	          case "end":
	            return _context9.stop();
	        }
	      }
	    }, _callee9);
	  }));
	  return _loadStringFromFile.apply(this, arguments);
	}

	function blobToArrayBuffer(_x15) {
	  return _blobToArrayBuffer.apply(this, arguments);
	}

	function _blobToArrayBuffer() {
	  _blobToArrayBuffer = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(blob) {
	    return regeneratorRuntime.wrap(function _callee10$(_context10) {
	      while (1) {
	        switch (_context10.prev = _context10.next) {
	          case 0:
	            if (!(typeof blob.arrayBuffer === 'function')) {
	              _context10.next = 2;
	              break;
	            }

	            return _context10.abrupt("return", blob.arrayBuffer());

	          case 2:
	            return _context10.abrupt("return", new Promise(function (resolve, reject) {
	              var fileReader = new FileReader();

	              fileReader.onload = function (e) {
	                resolve(fileReader.result);
	              };

	              fileReader.onerror = function (e) {
	                console.error("reject uploading local file " + localfile.name);
	                reject(null, fileReader);
	              };

	              fileReader.readAsArrayBuffer(blob);
	            }));

	          case 3:
	          case "end":
	            return _context10.stop();
	        }
	      }
	    }, _callee10);
	  }));
	  return _blobToArrayBuffer.apply(this, arguments);
	}

	function blobToText(_x16) {
	  return _blobToText.apply(this, arguments);
	}

	function _blobToText() {
	  _blobToText = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(blob) {
	    return regeneratorRuntime.wrap(function _callee11$(_context11) {
	      while (1) {
	        switch (_context11.prev = _context11.next) {
	          case 0:
	            if (!(typeof blob.text === 'function')) {
	              _context11.next = 2;
	              break;
	            }

	            return _context11.abrupt("return", blob.text());

	          case 2:
	            return _context11.abrupt("return", new Promise(function (resolve, reject) {
	              var fileReader = new FileReader();

	              fileReader.onload = function (e) {
	                resolve(fileReader.result);
	              };

	              fileReader.onerror = function (e) {
	                console.error("reject uploading local file " + localfile.name);
	                reject(null, fileReader);
	              };

	              fileReader.readAsText(blob);
	            }));

	          case 3:
	          case "end":
	            return _context11.stop();
	        }
	      }
	    }, _callee11);
	  }));
	  return _blobToText.apply(this, arguments);
	}

	function loadStringFromUrl(_x17, _x18) {
	  return _loadStringFromUrl.apply(this, arguments);
	}

	function _loadStringFromUrl() {
	  _loadStringFromUrl = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(url, options) {
	    var fn, compression, data;
	    return regeneratorRuntime.wrap(function _callee12$(_context12) {
	      while (1) {
	        switch (_context12.prev = _context12.next) {
	          case 0:
	            options = options || {};
	            _context12.t0 = options.filename;

	            if (_context12.t0) {
	              _context12.next = 6;
	              break;
	            }

	            _context12.next = 5;
	            return getFilename$1(url);

	          case 5:
	            _context12.t0 = _context12.sent;

	          case 6:
	            fn = _context12.t0;
	            compression = UNKNOWN;

	            if (options.bgz) {
	              compression = BGZF;
	            } else if (fn.endsWith(".gz")) {
	              compression = GZIP;
	            }

	            options.responseType = "arraybuffer";
	            _context12.next = 12;
	            return igvxhr.load(url, options);

	          case 12:
	            data = _context12.sent;
	            return _context12.abrupt("return", arrayBufferToString(data, compression));

	          case 14:
	          case "end":
	            return _context12.stop();
	        }
	      }
	    }, _callee12);
	  }));
	  return _loadStringFromUrl.apply(this, arguments);
	}

	function isAmazonV4Signed(url) {
	  return url.indexOf("X-Amz-Signature") > -1;
	}

	function getOauthToken(url) {
	  // Google is the default provider, don't try to parse host for google URLs
	  var host = isGoogleURL(url) ? undefined : parseUri(url).host;
	  var token = oauth.getToken(host);

	  if (token) {
	    return token;
	  } else if (host === undefined) {
	    var googleToken = getCurrentGoogleAccessToken();

	    if (googleToken && googleToken.expires_at > Date.now()) {
	      return googleToken.access_token;
	    }
	  }
	}
	/**
	 * Return a Google oAuth token, triggering a sign in if required.   This method should not be called until we know
	 * a token is required, that is until we've tried the url and received a 401, 403, or 404.
	 *
	 * @param url
	 * @returns the oauth token
	 */


	function fetchGoogleAccessToken(_x19) {
	  return _fetchGoogleAccessToken.apply(this, arguments);
	}
	/**
	 * Return the current google access token, if one exists.  Do not triger signOn or request additional scopes.
	 * @returns {undefined|access_token}
	 */


	function _fetchGoogleAccessToken() {
	  _fetchGoogleAccessToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(url) {
	    var scope, googleToken;
	    return regeneratorRuntime.wrap(function _callee13$(_context13) {
	      while (1) {
	        switch (_context13.prev = _context13.next) {
	          case 0:
	            if (!isInitialized()) {
	              _context13.next = 8;
	              break;
	            }

	            scope = getScopeForURL(url);
	            _context13.next = 4;
	            return getAccessToken(scope);

	          case 4:
	            googleToken = _context13.sent;
	            return _context13.abrupt("return", googleToken ? googleToken.access_token : undefined);

	          case 8:
	            throw Error("Authorization is required, but Google oAuth has not been initalized. Contact your site administrator for assistance.");

	          case 9:
	          case "end":
	            return _context13.stop();
	        }
	      }
	    }, _callee13);
	  }));
	  return _fetchGoogleAccessToken.apply(this, arguments);
	}

	function getCurrentGoogleAccessToken() {
	  if (isInitialized()) {
	    var googleToken = getCurrentAccessToken();
	    return googleToken ? googleToken.access_token : undefined;
	  } else {
	    return undefined;
	  }
	}

	function addOauthHeaders(headers, acToken) {
	  if (acToken) {
	    headers["Cache-Control"] = "no-cache";
	    headers["Authorization"] = "Bearer " + acToken;
	  }

	  return headers;
	}

	function addApiKey(url) {
	  var apiKey = igvxhr.apiKey;

	  if (!apiKey && typeof gapi !== "undefined") {
	    apiKey = gapi.apiKey;
	  }

	  if (apiKey !== undefined && !url.includes("key=")) {
	    var paramSeparator = url.includes("?") ? "&" : "?";
	    url = url + paramSeparator + "key=" + apiKey;
	  }

	  return url;
	}

	function addTeamDrive(url) {
	  if (url.includes("supportsTeamDrive")) {
	    return url;
	  } else {
	    var paramSeparator = url.includes("?") ? "&" : "?";
	    url = url + paramSeparator + "supportsTeamDrive=true";
	  }
	}
	/**
	 * Perform some well-known url mappings.
	 * @param url
	 */


	function mapUrl(url) {
	  if (url.includes("//www.dropbox.com")) {
	    return url.replace("//www.dropbox.com", "//dl.dropboxusercontent.com");
	  } else if (url.includes("//drive.google.com")) {
	    return driveDownloadURL(url);
	  } else if (url.includes("//www.broadinstitute.org/igvdata")) {
	    return url.replace("//www.broadinstitute.org/igvdata", "//data.broadinstitute.org/igvdata");
	  } else if (url.includes("//igvdata.broadinstitute.org")) {
	    return url.replace("//igvdata.broadinstitute.org", "https://dn7ywbm9isq8j.cloudfront.net");
	  } else if (url.startsWith("ftp://ftp.ncbi.nlm.nih.gov/geo")) {
	    return url.replace("ftp://", "https://");
	  } else {
	    return url;
	  }
	}

	function arrayBufferToString(arraybuffer, compression) {
	  if (compression === UNKNOWN && arraybuffer.byteLength > 2) {
	    var m = new Uint8Array(arraybuffer, 0, 2);

	    if (m[0] === 31 && m[1] === 139) {
	      compression = GZIP;
	    }
	  }

	  var plain;

	  if (compression === GZIP) {
	    var inflate = new Zlib$1.Gunzip(new Uint8Array(arraybuffer));
	    plain = inflate.decompress();
	  } else if (compression === BGZF) {
	    plain = unbgzf(arraybuffer);
	  } else {
	    plain = new Uint8Array(arraybuffer);
	  }

	  if ('TextDecoder' in getGlobalObject()) {
	    return new TextDecoder().decode(plain);
	  } else {
	    return decodeUTF8(plain);
	  }
	}
	/**
	 * Use when TextDecoder is not available (primarily IE).
	 *
	 * From: https://gist.github.com/Yaffle/5458286
	 *
	 * @param octets
	 * @returns {string}
	 */


	function decodeUTF8(octets) {
	  var string = "";
	  var i = 0;

	  while (i < octets.length) {
	    var octet = octets[i];
	    var bytesNeeded = 0;
	    var codePoint = 0;

	    if (octet <= 0x7F) {
	      bytesNeeded = 0;
	      codePoint = octet & 0xFF;
	    } else if (octet <= 0xDF) {
	      bytesNeeded = 1;
	      codePoint = octet & 0x1F;
	    } else if (octet <= 0xEF) {
	      bytesNeeded = 2;
	      codePoint = octet & 0x0F;
	    } else if (octet <= 0xF4) {
	      bytesNeeded = 3;
	      codePoint = octet & 0x07;
	    }

	    if (octets.length - i - bytesNeeded > 0) {
	      var k = 0;

	      while (k < bytesNeeded) {
	        octet = octets[i + k + 1];
	        codePoint = codePoint << 6 | octet & 0x3F;
	        k += 1;
	      }
	    } else {
	      codePoint = 0xFFFD;
	      bytesNeeded = octets.length - i;
	    }

	    string += String.fromCodePoint(codePoint);
	    i += bytesNeeded + 1;
	  }

	  return string;
	}

	function getGlobalObject() {
	  if (typeof self !== 'undefined') {
	    return self;
	  }

	  if (typeof global !== 'undefined') {
	    return global;
	  } else {
	    return window;
	  }
	}

	var splitLines$1 = splitLines;
	var reservedProperties = new Set(['fastaURL', 'indexURL', 'cytobandURL', 'indexed']);

	var FastaSequence = /*#__PURE__*/function () {
	  function FastaSequence(reference) {
	    _classCallCheck(this, FastaSequence);

	    if (typeof reference.fastaURL === 'string' && reference.fastaURL.startsWith('data:')) {
	      this.file = decodeDataUri(reference.fastaURL);
	      this.indexed = false; // dataURI is by definition not indexed

	      this.isDataURI = true;
	    } else {
	      this.file = reference.fastaURL;
	      this.indexed = reference.indexed !== false; // Indexed unless it explicitly is not

	      if (this.indexed) {
	        this.indexFile = reference.indexURL || reference.indexFile || this.file + ".fai";
	      }
	    }

	    this.withCredentials = reference.withCredentials;
	    this.chromosomeNames = [];
	    this.chromosomes = {};
	    this.sequences = {};
	    this.offsets = {}; // Build a track-like config object from the referenceObject

	    var config = {};

	    for (var key in reference) {
	      if (reference.hasOwnProperty(key) && !reservedProperties.has(key)) {
	        config[key] = reference[key];
	      }
	    }

	    this.config = config;
	  }

	  _createClass(FastaSequence, [{
	    key: "init",
	    value: function () {
	      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (!this.indexed) {
	                  _context.next = 4;
	                  break;
	                }

	                return _context.abrupt("return", this.getIndex());

	              case 4:
	                return _context.abrupt("return", this.loadAll());

	              case 5:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function init() {
	        return _init.apply(this, arguments);
	      }

	      return init;
	    }()
	  }, {
	    key: "getSequence",
	    value: function () {
	      var _getSequence = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(chr, start, end) {
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                if (!this.indexed) {
	                  _context2.next = 4;
	                  break;
	                }

	                return _context2.abrupt("return", this.getSequenceIndexed(chr, start, end));

	              case 4:
	                return _context2.abrupt("return", this.getSequenceNonIndexed(chr, start, end));

	              case 5:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function getSequence(_x, _x2, _x3) {
	        return _getSequence.apply(this, arguments);
	      }

	      return getSequence;
	    }()
	  }, {
	    key: "getSequenceIndexed",
	    value: function () {
	      var _getSequenceIndexed = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(chr, start, end) {
	        var qstart, qend, w, center, seqBytes, offset, n, seq;
	        return regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                if (this.interval && this.interval.contains(chr, start, end)) {
	                  _context3.next = 8;
	                  break;
	                }

	                // Expand query, to minimum of 50kb
	                qstart = start;
	                qend = end;

	                if (end - start < 50000) {
	                  w = end - start;
	                  center = Math.round(start + w / 2);
	                  qstart = Math.max(0, center - 25000);
	                  qend = center + 25000;
	                }

	                _context3.next = 6;
	                return this.readSequence(chr, qstart, qend);

	              case 6:
	                seqBytes = _context3.sent;
	                this.interval = new GenomicInterval(chr, qstart, qend, seqBytes);

	              case 8:
	                offset = start - this.interval.start;
	                n = end - start;
	                seq = this.interval.features ? this.interval.features.substr(offset, n) : null;
	                return _context3.abrupt("return", seq);

	              case 12:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function getSequenceIndexed(_x4, _x5, _x6) {
	        return _getSequenceIndexed.apply(this, arguments);
	      }

	      return getSequenceIndexed;
	    }()
	  }, {
	    key: "getSequenceNonIndexed",
	    value: function () {
	      var _getSequenceNonIndexed = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(chr, start, end) {
	        var prefix, i, seq, seqEnd;
	        return regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                if (this.offsets[chr]) {
	                  start -= this.offsets[chr];
	                  end -= this.offsets[chr];
	                }

	                prefix = "";

	                if (start < 0) {
	                  for (i = start; i < Math.min(end, 0); i++) {
	                    prefix += "*";
	                  }
	                }

	                if (!(end <= 0)) {
	                  _context4.next = 5;
	                  break;
	                }

	                return _context4.abrupt("return", Promise.resolve(prefix));

	              case 5:
	                seq = this.sequences[chr];
	                seqEnd = Math.min(end, seq.length);
	                return _context4.abrupt("return", prefix + seq.substring(start, seqEnd));

	              case 8:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      function getSequenceNonIndexed(_x7, _x8, _x9) {
	        return _getSequenceNonIndexed.apply(this, arguments);
	      }

	      return getSequenceNonIndexed;
	    }()
	  }, {
	    key: "getIndex",
	    value: function () {
	      var _getIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
	        var data, lines, len, lineNo, order, tokens, nTokens, chr, size, position, basesPerLine, bytesPerLine, indexEntry;
	        return regeneratorRuntime.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                if (!this.index) {
	                  _context5.next = 4;
	                  break;
	                }

	                return _context5.abrupt("return", this.index);

	              case 4:
	                _context5.next = 6;
	                return igvxhr.load(this.indexFile, buildOptions(this.config));

	              case 6:
	                data = _context5.sent;
	                lines = splitLines$1(data);
	                len = lines.length;
	                lineNo = 0;
	                order = 0;
	                this.index = {};

	                while (lineNo < len) {
	                  tokens = lines[lineNo++].split("\t");
	                  nTokens = tokens.length;

	                  if (nTokens === 5) {
	                    // Parse the index line.
	                    chr = tokens[0];
	                    size = parseInt(tokens[1]);
	                    position = parseInt(tokens[2]);
	                    basesPerLine = parseInt(tokens[3]);
	                    bytesPerLine = parseInt(tokens[4]);
	                    indexEntry = {
	                      size: size,
	                      position: position,
	                      basesPerLine: basesPerLine,
	                      bytesPerLine: bytesPerLine
	                    };
	                    this.chromosomeNames.push(chr);
	                    this.index[chr] = indexEntry;
	                    this.chromosomes[chr] = new Chromosome(chr, order++, 0, size);
	                  }
	                }

	                return _context5.abrupt("return", this.index);

	              case 14:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this);
	      }));

	      function getIndex() {
	        return _getIndex.apply(this, arguments);
	      }

	      return getIndex;
	    }()
	  }, {
	    key: "loadAll",
	    value: function () {
	      var _loadAll = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
	        var data, lines, len, lineNo, currentSeq, currentRangeLocus, currentOffset, order, nextLine, currentChr, parts, nameParts, locusParts, from, to;
	        return regeneratorRuntime.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                if (!this.isDataURI) {
	                  _context6.next = 4;
	                  break;
	                }

	                data = this.file; // <= Strange convention, revisit.

	                _context6.next = 7;
	                break;

	              case 4:
	                _context6.next = 6;
	                return igvxhr.load(this.file, buildOptions(this.config));

	              case 6:
	                data = _context6.sent;

	              case 7:
	                lines = splitLines$1(data);
	                len = lines.length;
	                lineNo = 0;
	                currentOffset = 0;
	                order = 0;

	                while (lineNo < len) {
	                  nextLine = lines[lineNo++].trim();

	                  if (nextLine.startsWith("#") || nextLine.length === 0) ; else if (nextLine.startsWith(">")) {
	                    // Start the next sequence
	                    if (currentSeq) {
	                      this.chromosomeNames.push(currentChr);
	                      this.sequences[currentChr] = currentSeq;
	                      this.chromosomes[currentChr] = new Chromosome(currentChr, order++, currentOffset, currentOffset + currentSeq.length, currentRangeLocus);
	                    }

	                    parts = nextLine.substr(1).split(/\s+/); // Check for samtools style locus string.   This is not perfect, and could fail on weird sequence names

	                    nameParts = parts[0].split(':');
	                    currentChr = nameParts[0];
	                    currentSeq = "";
	                    currentOffset = 0;
	                    currentRangeLocus = undefined;

	                    if (nameParts.length > 1 && nameParts[1].indexOf('-') > 0) {
	                      locusParts = nameParts[1].split('-');

	                      if (locusParts.length === 2 && /^[0-9]+$/.test(locusParts[0]) && /^[0-9]+$/.test(locusParts[1])) ;

	                      from = Number.parseInt(locusParts[0]);
	                      to = Number.parseInt(locusParts[1]);

	                      if (to > from) {
	                        currentOffset = from - 1;
	                        this.offsets[currentChr] = currentOffset;
	                        currentRangeLocus = nameParts[1];
	                      }
	                    }
	                  } else {
	                    currentSeq += nextLine;
	                  }
	                } // add last seq


	                if (currentSeq) {
	                  this.chromosomeNames.push(currentChr);
	                  this.sequences[currentChr] = currentSeq;
	                  this.chromosomes[currentChr] = new Chromosome(currentChr, order++, currentOffset, currentOffset + currentSeq.length, currentRangeLocus);
	                }

	              case 14:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this);
	      }));

	      function loadAll() {
	        return _loadAll.apply(this, arguments);
	      }

	      return loadAll;
	    }()
	  }, {
	    key: "readSequence",
	    value: function () {
	      var _readSequence = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(chr, qstart, qend) {
	        var idxEntry, start, end, bytesPerLine, basesPerLine, position, nEndBytes, startLine, endLine, base0, offset, startByte, base1, offset1, endByte, byteCount, allBytes, nBases, seqBytes, srcPos, allBytesLength;
	        return regeneratorRuntime.wrap(function _callee7$(_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                _context7.next = 2;
	                return this.getIndex();

	              case 2:
	                idxEntry = this.index[chr];

	                if (idxEntry) {
	                  _context7.next = 8;
	                  break;
	                }

	                // Tag interval with null so we don't try again
	                this.interval = new GenomicInterval(chr, qstart, qend, null);
	                return _context7.abrupt("return", null);

	              case 8:
	                start = Math.max(0, qstart); // qstart should never be < 0

	                end = Math.min(idxEntry.size, qend);
	                bytesPerLine = idxEntry.bytesPerLine;
	                basesPerLine = idxEntry.basesPerLine;
	                position = idxEntry.position;
	                nEndBytes = bytesPerLine - basesPerLine;
	                startLine = Math.floor(start / basesPerLine);
	                endLine = Math.floor(end / basesPerLine);
	                base0 = startLine * basesPerLine; // Base at beginning of start line

	                offset = start - base0;
	                startByte = position + startLine * bytesPerLine + offset;
	                base1 = endLine * basesPerLine;
	                offset1 = end - base1;
	                endByte = position + endLine * bytesPerLine + offset1 - 1;
	                byteCount = endByte - startByte + 1;

	                if (!(byteCount <= 0)) {
	                  _context7.next = 27;
	                  break;
	                }

	                console.error("No sequence for " + chr + ":" + qstart + "-" + qend);
	                _context7.next = 30;
	                break;

	              case 27:
	                _context7.next = 29;
	                return igvxhr.load(this.file, buildOptions(this.config, {
	                  range: {
	                    start: startByte,
	                    size: byteCount
	                  }
	                }));

	              case 29:
	                allBytes = _context7.sent;

	              case 30:
	                if (allBytes) {
	                  _context7.next = 34;
	                  break;
	                }

	                return _context7.abrupt("return", null);

	              case 34:
	                seqBytes = "", srcPos = 0, allBytesLength = allBytes.length;

	                if (offset > 0) {
	                  nBases = Math.min(end - start, basesPerLine - offset);
	                  seqBytes += allBytes.substr(srcPos, nBases);
	                  srcPos += nBases + nEndBytes;
	                }

	                while (srcPos < allBytesLength) {
	                  nBases = Math.min(basesPerLine, allBytesLength - srcPos);
	                  seqBytes += allBytes.substr(srcPos, nBases);
	                  srcPos += nBases + nEndBytes;
	                }

	                return _context7.abrupt("return", seqBytes);

	              case 38:
	              case "end":
	                return _context7.stop();
	            }
	          }
	        }, _callee7, this);
	      }));

	      function readSequence(_x10, _x11, _x12) {
	        return _readSequence.apply(this, arguments);
	      }

	      return readSequence;
	    }()
	  }]);

	  return FastaSequence;
	}();

	function decodeDataUri(dataUri) {
	  var split = dataUri.split(',');
	  var info = split[0].split(':')[1];
	  var dataString = split[1];

	  if (info.indexOf('base64') >= 0) {
	    dataString = atob(dataString);
	  } else {
	    dataString = decodeURI(dataString);
	  }

	  var bytes = new Uint8Array(dataString.length);

	  for (var i = 0; i < dataString.length; i++) {
	    bytes[i] = dataString.charCodeAt(i);
	  }

	  var inflate = new Zlib$1.Gunzip(bytes);
	  var plain = inflate.decompress();
	  var s = "";
	  var len = plain.length;

	  for (var _i = 0; _i < len; _i++) {
	    s += String.fromCharCode(plain[_i]);
	  }

	  return s;
	}

	var _version = "2.7.2";

	function version$2() {
	  return _version;
	}

	var DEFAULT_GENOMES_URL = "https://igv.org/genomes/genomes.json";
	var splitLines$2 = splitLines;
	var GenomeUtils = {
	  loadGenome: function () {
	    var _loadGenome = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(options) {
	      var cytobandUrl, aliasURL, sequence, cytobands, aliases;
	      return regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              cytobandUrl = options.cytobandURL;
	              aliasURL = options.aliasURL;
	              sequence = new FastaSequence(options);
	              _context.next = 5;
	              return sequence.init();

	            case 5:
	              if (!cytobandUrl) {
	                _context.next = 9;
	                break;
	              }

	              _context.next = 8;
	              return loadCytobands(cytobandUrl, sequence.config);

	            case 8:
	              cytobands = _context.sent;

	            case 9:
	              if (!aliasURL) {
	                _context.next = 13;
	                break;
	              }

	              _context.next = 12;
	              return loadAliases(aliasURL, sequence.config);

	            case 12:
	              aliases = _context.sent;

	            case 13:
	              return _context.abrupt("return", new Genome(options, sequence, cytobands, aliases));

	            case 14:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }));

	    function loadGenome(_x) {
	      return _loadGenome.apply(this, arguments);
	    }

	    return loadGenome;
	  }(),
	  initializeGenomes: function () {
	    var _initializeGenomes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(config) {
	      var table, url, jsonArray, genomeList, _jsonArray, processJson;

	      return regeneratorRuntime.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              if (GenomeUtils.KNOWN_GENOMES) {
	                _context2.next = 20;
	                break;
	              }

	              processJson = function _processJson(jsonArray) {
	                jsonArray.forEach(function (json) {
	                  table[json.id] = json;
	                });
	                return table;
	              };

	              table = {}; // Get default genomes

	              if (!(config.loadDefaultGenomes !== false)) {
	                _context2.next = 9;
	                break;
	              }

	              url = DEFAULT_GENOMES_URL + "?randomSeed=".concat(Math.random().toString(36), "&version=").concat(version$2()); // prevent caching

	              _context2.next = 7;
	              return igvxhr.loadJson(url, {});

	            case 7:
	              jsonArray = _context2.sent;
	              processJson(jsonArray);

	            case 9:
	              // Add user-defined genomes
	              genomeList = config.genomeList || config.genomes;

	              if (!genomeList) {
	                _context2.next = 19;
	                break;
	              }

	              if (!(typeof genomeList === 'string')) {
	                _context2.next = 18;
	                break;
	              }

	              _context2.next = 14;
	              return igvxhr.loadJson(genomeList, {});

	            case 14:
	              _jsonArray = _context2.sent;
	              processJson(_jsonArray);
	              _context2.next = 19;
	              break;

	            case 18:
	              processJson(genomeList);

	            case 19:
	              GenomeUtils.KNOWN_GENOMES = table;

	            case 20:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2);
	    }));

	    function initializeGenomes(_x2) {
	      return _initializeGenomes.apply(this, arguments);
	    }

	    return initializeGenomes;
	  }(),
	  isWholeGenomeView: function isWholeGenomeView(chr) {
	    return 'all' === chr.toLowerCase();
	  }
	};

	var Genome = /*#__PURE__*/function () {
	  function Genome(config, sequence, ideograms, aliases) {
	    _classCallCheck(this, Genome);

	    this.config = config;
	    this.id = config.id;
	    this.sequence = sequence;
	    this.chromosomeNames = sequence.chromosomeNames;
	    this.chromosomes = sequence.chromosomes; // An object (functions as a dictionary)

	    this.ideograms = ideograms;
	    this.featureDB = {}; // Hash of name -> feature, used for search function.

	    this.wholeGenomeView = config.wholeGenomeView === undefined || config.wholeGenomeView;

	    if (this.wholeGenomeView && Object.keys(sequence.chromosomes).length > 1) {
	      constructWG(this, config);
	    } else {
	      this.wgChromosomeNames = sequence.chromosomeNames;
	    }
	    /**
	     * Return the official chromosome name for the (possibly) alias.  Deals with
	     * 1 <-> chr1,  chrM <-> MT,  IV <-> chr4, etc.
	     * @param str
	     */


	    var chrAliasTable = {},
	        self = this; // The standard mappings

	    chrAliasTable["all"] = "all";
	    this.chromosomeNames.forEach(function (name) {
	      var alias = name.startsWith("chr") ? name.substring(3) : "chr" + name;
	      chrAliasTable[alias.toLowerCase()] = name;
	      if (name === "chrM") chrAliasTable["mt"] = "chrM";
	      if (name === "MT") chrAliasTable["chrm"] = "MT";
	      chrAliasTable[name.toLowerCase()] = name;
	    }); // Custom mappings

	    if (aliases) {
	      aliases.forEach(function (array) {
	        // Find the official chr name
	        var defName, i;

	        for (i = 0; i < array.length; i++) {
	          if (self.chromosomes[array[i]]) {
	            defName = array[i];
	            break;
	          }
	        }

	        if (defName) {
	          array.forEach(function (alias) {
	            if (alias !== defName) {
	              chrAliasTable[alias.toLowerCase()] = defName;
	              chrAliasTable[alias] = defName; // Should not be needed
	            }
	          });
	        }
	      });
	    }

	    this.chrAliasTable = chrAliasTable;
	  }

	  _createClass(Genome, [{
	    key: "showWholeGenomeView",
	    value: function showWholeGenomeView() {
	      return this.config.wholeGenomeView !== false;
	    }
	  }, {
	    key: "toJSON",
	    value: function toJSON() {
	      return Object.assign({}, this.config, {
	        tracks: undefined
	      });
	    }
	  }, {
	    key: "getInitialLocus",
	    value: function getInitialLocus() {}
	  }, {
	    key: "getHomeChromosomeName",
	    value: function getHomeChromosomeName() {
	      if (this.showWholeGenomeView() && this.chromosomes.hasOwnProperty("all")) {
	        return "all";
	      } else {
	        var chromosome = this.chromosomes[this.chromosomeNames[0]];

	        if (chromosome.rangeLocus) {
	          return chromosome.name + ":" + chromosome.rangeLocus;
	        } else {
	          return this.chromosomeNames[0];
	        }
	      }
	    }
	  }, {
	    key: "getChromosomeName",
	    value: function getChromosomeName(str) {
	      var chr = this.chrAliasTable[str.toLowerCase()];
	      return chr ? chr : str;
	    }
	  }, {
	    key: "getChromosome",
	    value: function getChromosome(chr) {
	      chr = this.getChromosomeName(chr);
	      return this.chromosomes[chr];
	    }
	  }, {
	    key: "getCytobands",
	    value: function getCytobands(chr) {
	      return this.ideograms ? this.ideograms[chr] : null;
	    }
	  }, {
	    key: "getLongestChromosome",
	    value: function getLongestChromosome() {
	      var longestChr,
	          chromosomes = this.chromosomes;

	      for (var key in chromosomes) {
	        if (chromosomes.hasOwnProperty(key)) {
	          var chr = chromosomes[key];

	          if (longestChr === undefined || chr.bpLength > longestChr.bpLength) {
	            longestChr = chr;
	          }
	        }

	        return longestChr;
	      }
	    }
	  }, {
	    key: "getChromosomes",
	    value: function getChromosomes() {
	      return this.chromosomes;
	    }
	    /**
	     * Return the genome coordinate in kb for the give chromosome and position.
	     * NOTE: This might return undefined if the chr is filtered from whole genome view.
	     */

	  }, {
	    key: "getGenomeCoordinate",
	    value: function getGenomeCoordinate(chr, bp) {
	      var offset = this.getCumulativeOffset(chr);
	      if (offset === undefined) return undefined;
	      return offset + bp;
	    }
	    /**
	     * Return the chromosome and coordinate in bp for the given genome coordinate
	     */

	  }, {
	    key: "getChromosomeCoordinate",
	    value: function getChromosomeCoordinate(genomeCoordinate) {
	      if (this.cumulativeOffsets === undefined) {
	        this.cumulativeOffsets = computeCumulativeOffsets.call(this);
	      }

	      var lastChr = undefined;
	      var lastCoord = 0;

	      var _iterator = _createForOfIteratorHelper(this.wgChromosomeNames),
	          _step;

	      try {
	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          var name = _step.value;
	          var cumulativeOffset = this.cumulativeOffsets[name];

	          if (cumulativeOffset > genomeCoordinate) {
	            var position = genomeCoordinate - lastCoord;
	            return {
	              chr: lastChr,
	              position: position
	            };
	          }

	          lastChr = name;
	          lastCoord = cumulativeOffset;
	        } // If we get here off the end

	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }

	      return {
	        chr: this.chromosomeNames[this.chromosomeNames.length - 1],
	        position: 0
	      };
	    }
	  }, {
	    key: "getCumulativeOffset",

	    /**
	     * Return the offset in genome coordinates (kb) of the start of the given chromosome
	     * NOTE:  This might return undefined if the chromosome is filtered from whole genome view.
	     */
	    value: function getCumulativeOffset(chr) {
	      if (this.cumulativeOffsets === undefined) {
	        this.cumulativeOffsets = computeCumulativeOffsets.call(this);
	      }

	      var queryChr = this.getChromosomeName(chr);
	      return this.cumulativeOffsets[queryChr];

	      function computeCumulativeOffsets() {
	        var self = this;
	        var acc = {};
	        var offset = 0;

	        var _iterator2 = _createForOfIteratorHelper(self.wgChromosomeNames),
	            _step2;

	        try {
	          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	            var name = _step2.value;
	            acc[name] = Math.floor(offset);
	            var chromosome = self.getChromosome(name);
	            offset += chromosome.bpLength;
	          }
	        } catch (err) {
	          _iterator2.e(err);
	        } finally {
	          _iterator2.f();
	        }

	        return acc;
	      }
	    }
	    /**
	     * Return the nominal genome length, this is the length of the main chromosomes (no scaffolds, etc).
	     */

	  }, {
	    key: "getGenomeLength",
	    value: function getGenomeLength() {
	      var self = this;

	      if (!this.bpLength) {
	        var bpLength = 0;
	        self.wgChromosomeNames.forEach(function (cname) {
	          var c = self.chromosomes[cname];
	          bpLength += c.bpLength;
	        });
	        this.bpLength = bpLength;
	      }

	      return this.bpLength;
	    }
	  }]);

	  return Genome;
	}();

	function loadCytobands(cytobandUrl, config) {
	  if (cytobandUrl.startsWith("data:")) {
	    var data = decodeDataUri(cytobandUrl);
	    return Promise.resolve(getCytobands(data));
	  } else {
	    return igvxhr.loadString(cytobandUrl, buildOptions(config)).then(function (data) {
	      return getCytobands(data);
	    });
	  }

	  function getCytobands(data) {
	    var bands = [],
	        lastChr,
	        n = 0,
	        lines = splitLines$2(data),
	        len = lines.length,
	        cytobands = {};

	    for (var i = 0; i < len; i++) {
	      var tokens = lines[i].split("\t");
	      var chr = tokens[0];
	      if (!lastChr) lastChr = chr;

	      if (chr !== lastChr) {
	        cytobands[lastChr] = bands;
	        bands = [];
	        lastChr = chr;
	        n = 0;
	      }

	      if (tokens.length === 5) {
	        //10	0	3000000	p15.3	gneg
	        var start = parseInt(tokens[1]);
	        var end = parseInt(tokens[2]);
	        var name = tokens[3];
	        var stain = tokens[4];
	        bands[n++] = new Cytoband(start, end, name, stain);
	      }
	    }

	    return cytobands;
	  }

	  function decodeDataUri(dataUri) {
	    var plain;

	    if (dataUri.startsWith("data:application/gzip;base64")) {
	      plain = decodeDataURI(dataUri);
	    } else {
	      var bytes,
	          split = dataUri.split(','),
	          info = split[0].split(':')[1],
	          dataString = split[1];

	      if (info.indexOf('base64') >= 0) {
	        dataString = atob(dataString);
	      } else {
	        dataString = decodeURI(dataString);
	      }

	      bytes = new Uint8Array(dataString.length);

	      for (var i = 0; i < dataString.length; i++) {
	        bytes[i] = dataString.charCodeAt(i);
	      }

	      var inflate = new Zlib$1.Gunzip(bytes);
	      plain = inflate.decompress();
	    }

	    var s = "";
	    var len = plain.length;

	    for (var _i = 0; _i < len; _i++) {
	      s += String.fromCharCode(plain[_i]);
	    }

	    return s;
	  }
	}

	function loadAliases(aliasURL, config) {
	  return igvxhr.loadString(aliasURL, buildOptions(config)).then(function (data) {
	    var lines = splitLines$2(data),
	        aliases = [];
	    lines.forEach(function (line) {
	      if (!line.startsWith("#") && line.length > 0) aliases.push(line.split("\t"));
	    });
	    return aliases;
	  });
	}

	function constructWG(genome, config) {
	  var wgChromosomes;

	  if (config.chromosomeOrder) {
	    genome.wgChromosomeNames = config.chromosomeOrder.split(',').map(function (nm) {
	      return nm.trim();
	    });
	    wgChromosomes = genome.wgChromosomeNames.map(function (nm) {
	      return genome.chromosomes[nm];
	    }).filter(function (chr) {
	      return chr !== undefined;
	    });
	  } else {
	    // Trim small chromosomes.
	    var lengths = Object.keys(genome.chromosomes).map(function (key) {
	      return genome.chromosomes[key].bpLength;
	    });
	    var median = lengths.reduce(function (a, b) {
	      return Math.max(a, b);
	    });
	    var threshold = median / 50;
	    wgChromosomes = Object.values(genome.chromosomes).filter(function (chr) {
	      return chr.bpLength > threshold;
	    }); // Sort chromosomes.  First segregate numeric and alpha names, sort numeric, leave alpha as is

	    var numericChromosomes = wgChromosomes.filter(function (chr) {
	      return isDigit(chr.name.replace('chr', ''));
	    });
	    var alphaChromosomes = wgChromosomes.filter(function (chr) {
	      return !isDigit(chr.name.replace('chr', ''));
	    });
	    numericChromosomes.sort(function (a, b) {
	      return Number.parseInt(a.name.replace('chr', '')) - Number.parseInt(b.name.replace('chr', ''));
	    });
	    var wgChromosomeNames = numericChromosomes.map(function (chr) {
	      return chr.name;
	    });

	    var _iterator3 = _createForOfIteratorHelper(alphaChromosomes),
	        _step3;

	    try {
	      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	        var chr = _step3.value;
	        wgChromosomeNames.push(chr.name);
	      }
	    } catch (err) {
	      _iterator3.e(err);
	    } finally {
	      _iterator3.f();
	    }

	    genome.wgChromosomeNames = wgChromosomeNames;
	  } // Compute psuedo-chromosome "all"


	  var l = wgChromosomes.reduce(function (accumulator, currentValue) {
	    return accumulator += currentValue.bpLength;
	  }, 0);
	  genome.chromosomes["all"] = {
	    name: "all",
	    bpLength: l
	  };

	  function isDigit(val) {
	    return /^\d+$/.test(val);
	  }
	}

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2016-2017 The Regents of the University of California
	 * Author: Jim Robinson
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 *
	 *
	 * This class uses icons from Font Awesome
	 * Font Awesome Free 5.0.8 by @fontawesome - https://fontawesome.com
	 * License - https://fontawesome.com/license (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
	 */

	function createCheckbox$1(name, initialState) {
	  var $container = $('<div>', {
	    class: 'igv-menu-popup-check-container'
	  });
	  var $div = $('<div>');
	  $container.append($div);
	  var $svg = iconMarkup$2('check', true === initialState ? '#444' : 'transparent');
	  $div.append($svg);
	  var $label = $('<div>'
	  /*, { class: 'igv-some-label-class' }*/
	  );
	  $label.text(name);
	  $container.append($label);
	  return $container;
	}

	function createIcon$2(name, color) {
	  return $(iconMarkup$2(name, color));
	}

	function iconMarkup$2(name, color) {
	  color = color || "currentColor";
	  var icon = icons$2[name];

	  if (!icon) {
	    console.error("No icon named: ".concat(name));
	    icon = icons$2["question"];
	  }

	  var svg = '<svg ' + 'viewBox="0 0 ' + icon[0] + ' ' + icon[1] + '">';
	  svg += '<path fill="' + color + '" ' + 'd="' + icon[4] + '">' + '</path>';
	  svg += '</svg>';
	  return svg;
	}

	var icons$2 = {
	  "check": [512, 512, [], "f00c", "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"],
	  "cog": [512, 512, [], "f013", "M444.788 291.1l42.616 24.599c4.867 2.809 7.126 8.618 5.459 13.985-11.07 35.642-29.97 67.842-54.689 94.586a12.016 12.016 0 0 1-14.832 2.254l-42.584-24.595a191.577 191.577 0 0 1-60.759 35.13v49.182a12.01 12.01 0 0 1-9.377 11.718c-34.956 7.85-72.499 8.256-109.219.007-5.49-1.233-9.403-6.096-9.403-11.723v-49.184a191.555 191.555 0 0 1-60.759-35.13l-42.584 24.595a12.016 12.016 0 0 1-14.832-2.254c-24.718-26.744-43.619-58.944-54.689-94.586-1.667-5.366.592-11.175 5.459-13.985L67.212 291.1a193.48 193.48 0 0 1 0-70.199l-42.616-24.599c-4.867-2.809-7.126-8.618-5.459-13.985 11.07-35.642 29.97-67.842 54.689-94.586a12.016 12.016 0 0 1 14.832-2.254l42.584 24.595a191.577 191.577 0 0 1 60.759-35.13V25.759a12.01 12.01 0 0 1 9.377-11.718c34.956-7.85 72.499-8.256 109.219-.007 5.49 1.233 9.403 6.096 9.403 11.723v49.184a191.555 191.555 0 0 1 60.759 35.13l42.584-24.595a12.016 12.016 0 0 1 14.832 2.254c24.718 26.744 43.619 58.944 54.689 94.586 1.667 5.366-.592 11.175-5.459 13.985L444.788 220.9a193.485 193.485 0 0 1 0 70.2zM336 256c0-44.112-35.888-80-80-80s-80 35.888-80 80 35.888 80 80 80 80-35.888 80-80z"],
	  "exclamation": [192, 512, [], "f12a", "M176 432c0 44.112-35.888 80-80 80s-80-35.888-80-80 35.888-80 80-80 80 35.888 80 80zM25.26 25.199l13.6 272C39.499 309.972 50.041 320 62.83 320h66.34c12.789 0 23.331-10.028 23.97-22.801l13.6-272C167.425 11.49 156.496 0 142.77 0H49.23C35.504 0 24.575 11.49 25.26 25.199z"],
	  "exclamation-circle": [512, 512, [], "f06a", "M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"],
	  "exclamation-triangle": [576, 512, [], "f071", "M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"],
	  "minus": [448, 512, [], "f068", "M424 318.2c13.3 0 24-10.7 24-24v-76.4c0-13.3-10.7-24-24-24H24c-13.3 0-24 10.7-24 24v76.4c0 13.3 10.7 24 24 24h400z"],
	  "minus-circle": [512, 512, [], "f056", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zM124 296c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h264c6.6 0 12 5.4 12 12v56c0 6.6-5.4 12-12 12H124z"],
	  "minus-square": [448, 512, [], "f146", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zM92 296c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h264c6.6 0 12 5.4 12 12v56c0 6.6-5.4 12-12 12H92z"],
	  "plus": [448, 512, [], "f067", "M448 294.2v-76.4c0-13.3-10.7-24-24-24H286.2V56c0-13.3-10.7-24-24-24h-76.4c-13.3 0-24 10.7-24 24v137.8H24c-13.3 0-24 10.7-24 24v76.4c0 13.3 10.7 24 24 24h137.8V456c0 13.3 10.7 24 24 24h76.4c13.3 0 24-10.7 24-24V318.2H424c13.3 0 24-10.7 24-24z"],
	  "plus-circle": [512, 512, [], "f055", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"],
	  "plus-square": [448, 512, [], "f0fe", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-32 252c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92H92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"],
	  "question": [384, 512, [], "f128", "M202.021 0C122.202 0 70.503 32.703 29.914 91.026c-7.363 10.58-5.093 25.086 5.178 32.874l43.138 32.709c10.373 7.865 25.132 6.026 33.253-4.148 25.049-31.381 43.63-49.449 82.757-49.449 30.764 0 68.816 19.799 68.816 49.631 0 22.552-18.617 34.134-48.993 51.164-35.423 19.86-82.299 44.576-82.299 106.405V320c0 13.255 10.745 24 24 24h72.471c13.255 0 24-10.745 24-24v-5.773c0-42.86 125.268-44.645 125.268-160.627C377.504 66.256 286.902 0 202.021 0zM192 373.459c-38.196 0-69.271 31.075-69.271 69.271 0 38.195 31.075 69.27 69.271 69.27s69.271-31.075 69.271-69.271-31.075-69.27-69.271-69.27z"],
	  "save": [448, 512, [], "f0c7", "M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z"],
	  "search": [512, 512, [], "f002", "M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"],
	  "share": [512, 512, [], "f064", "M503.691 189.836L327.687 37.851C312.281 24.546 288 35.347 288 56.015v80.053C127.371 137.907 0 170.1 0 322.326c0 61.441 39.581 122.309 83.333 154.132 13.653 9.931 33.111-2.533 28.077-18.631C66.066 312.814 132.917 274.316 288 272.085V360c0 20.7 24.3 31.453 39.687 18.164l176.004-152c11.071-9.562 11.086-26.753 0-36.328z"],
	  "spinner": [512, 512, [], "f110", "M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z"],
	  "square": [448, 512, [], "f0c8", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"],
	  "square-full": [512, 512, [], "f45c", "M512 512H0V0h512v512z"],
	  "times": [384, 512, [], "f00d", "M323.1 441l53.9-53.9c9.4-9.4 9.4-24.5 0-33.9L279.8 256l97.2-97.2c9.4-9.4 9.4-24.5 0-33.9L323.1 71c-9.4-9.4-24.5-9.4-33.9 0L192 168.2 94.8 71c-9.4-9.4-24.5-9.4-33.9 0L7 124.9c-9.4 9.4-9.4 24.5 0 33.9l97.2 97.2L7 353.2c-9.4 9.4-9.4 24.5 0 33.9L60.9 441c9.4 9.4 24.5 9.4 33.9 0l97.2-97.2 97.2 97.2c9.3 9.3 24.5 9.3 33.9 0z"],
	  "times-circle": [512, 512, [], "f057", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"],
	  "wrench": [512, 512, [], "f0ad", "M481.156 200c9.3 0 15.12 10.155 10.325 18.124C466.295 259.992 420.419 288 368 288c-79.222 0-143.501-63.974-143.997-143.079C223.505 65.469 288.548-.001 368.002 0c52.362.001 98.196 27.949 123.4 69.743C496.24 77.766 490.523 88 481.154 88H376l-40 56 40 56h105.156zm-171.649 93.003L109.255 493.255c-24.994 24.993-65.515 24.994-90.51 0-24.993-24.994-24.993-65.516 0-90.51L218.991 202.5c16.16 41.197 49.303 74.335 90.516 90.503zM104 432c0-13.255-10.745-24-24-24s-24 10.745-24 24 10.745 24 24 24 24-10.745 24-24z"]
	};

	/**
	 * Configure item list for track "gear" menu.
	 * @param trackView
	 */

	var MenuUtils = {
	  trackMenuItemList: function trackMenuItemList(trackView) {
	    var vizWindowTypes = new Set(['alignment', 'annotation', 'variant', 'eqtl', 'snp']);
	    var hasVizWindow = trackView.track.config && trackView.track.config.visibilityWindow !== undefined;
	    var menuItems = [];

	    if (trackView.track.config.type !== 'sequence') {
	      menuItems.push(trackRenameMenuItem(trackView));
	      menuItems.push(trackHeightMenuItem(trackView));
	    }

	    if (this.showColorPicker(trackView.track)) {
	      menuItems.push(colorPickerMenuItem({
	        trackView: trackView,
	        label: "Set track color",
	        option: "color"
	      }));
	      menuItems.push(colorPickerMenuItem({
	        trackView: trackView,
	        label: "Set alt color",
	        option: "altColor"
	      }));
	    }

	    if (trackView.track.menuItemList) {
	      menuItems = menuItems.concat(trackView.track.menuItemList());
	    }

	    if (hasVizWindow || vizWindowTypes.has(trackView.track.config.type)) {
	      menuItems.push('<hr/>');
	      menuItems.push(visibilityWindowMenuItem(trackView));
	    }

	    if (trackView.track.removable !== false) {
	      menuItems.push('<hr/>');
	      menuItems.push(trackRemovalMenuItem(trackView));
	    }

	    return menuItems;
	  },
	  numericDataMenuItems: function numericDataMenuItems(trackView) {
	    var menuItems = []; // Data range

	    var $e = $('<div>');
	    $e.text('Set data range');

	    var clickHandler = function clickHandler() {
	      trackView.browser.dataRangeDialog.configure({
	        trackView: trackView
	      });
	      trackView.browser.dataRangeDialog.present($(trackView.trackDiv));
	    };

	    menuItems.push({
	      object: $e,
	      click: clickHandler
	    });

	    if (trackView.track.logScale !== undefined) {
	      menuItems.push({
	        object: createCheckbox$1("Log scale", trackView.track.logScale),
	        click: function click() {
	          trackView.track.logScale = !trackView.track.logScale;
	          trackView.repaintViews();
	        }
	      });
	    }

	    menuItems.push({
	      object: createCheckbox$1("Autoscale", trackView.track.autoscale),
	      click: function click() {
	        trackView.track.autoscale = !trackView.track.autoscale;
	        trackView.updateViews();
	      }
	    });
	    return menuItems;
	  },
	  trackMenuItemListHelper: function trackMenuItemListHelper(itemList, $popover) {
	    var list = [];

	    if (itemList.length > 0) {
	      list = itemList.map(function (item, i) {
	        var $e; // name and object fields checked for backward compatibility

	        if (item.name) {
	          $e = $('<div>');
	          $e.text(item.name);
	        } else if (item.object) {
	          $e = item.object;
	        } else if (typeof item.label === 'string') {
	          $e = $('<div>');
	          $e.html(item.label);
	        } else if (typeof item === 'string') {
	          if (item.startsWith("<")) {
	            $e = $(item);
	          } else {
	            $e = $("<div>" + item + "</div>");
	          }
	        }

	        if (0 === i) {
	          $e.addClass('igv-track-menu-border-top');
	        }

	        if (item.click) {
	          $e.on('click', handleClick);
	          $e.on('touchend', function (e) {
	            handleClick(e);
	          });
	          $e.on('mouseup', function (e) {
	            e.preventDefault();
	            e.stopPropagation();
	          }); // eslint-disable-next-line no-inner-declarations

	          function handleClick(e) {
	            item.click(e);
	            $popover.hide();
	            e.preventDefault();
	            e.stopPropagation();
	          }
	        }

	        return {
	          object: $e,
	          init: item.init || undefined
	        };
	      });
	    }

	    return list;
	  },
	  showColorPicker: function showColorPicker(track) {
	    return undefined === track.type || "bedtype" === track.type || "alignment" === track.type || "annotation" === track.type || "variant" === track.type || "wig" === track.type;
	  }
	};

	function visibilityWindowMenuItem(trackView) {
	  var click = function click(e) {
	    var callback = function callback() {
	      var value = trackView.browser.inputDialog.input.value;
	      value = '' === value || undefined === value ? -1 : value.trim();
	      trackView.track.visibilityWindow = Number.parseInt(value);
	      trackView.track.config.visibilityWindow = Number.parseInt(value);
	      trackView.updateViews();
	    };

	    var config = {
	      label: 'Visibility Window',
	      value: trackView.track.visibilityWindow,
	      callback: callback
	    };
	    trackView.browser.inputDialog.present(config, e);
	  };

	  var object = $('<div>');
	  object.text('Set visibility window');
	  return {
	    object: object,
	    click: click
	  };
	}

	function trackRemovalMenuItem(trackView) {
	  var $e, menuClickHandler;
	  $e = $('<div>');
	  $e.text('Remove track');

	  menuClickHandler = function menuClickHandler() {
	    trackView.browser.removeTrack(trackView.track);
	  };

	  return {
	    object: $e,
	    click: menuClickHandler
	  };
	}

	function colorPickerMenuItem(_ref) {
	  var trackView = _ref.trackView,
	      label = _ref.label,
	      option = _ref.option;
	  var $e = $('<div>');
	  $e.text(label);
	  return {
	    object: $e,
	    click: function click() {
	      return trackView.presentColorPicker(option);
	    }
	  };
	}

	function trackRenameMenuItem(trackView) {
	  var click = function click(e) {
	    var callback = function callback() {
	      var value = trackView.browser.inputDialog.input.value;
	      value = '' === value || undefined === value ? 'untitled' : value.trim();
	      trackView.browser.setTrackLabelName(trackView, value);
	    };

	    var config = {
	      label: 'Track Name',
	      value: getTrackLabelText(trackView.track) || 'unnamed',
	      callback: callback
	    };
	    trackView.browser.inputDialog.present(config, e);
	  };

	  var object = $('<div>');
	  object.text('Set track name');
	  return {
	    object: object,
	    click: click
	  };
	}

	function trackHeightMenuItem(trackView) {
	  var click = function click(e) {
	    var callback = function callback() {
	      var number = parseFloat(trackView.browser.inputDialog.input.value, 10);

	      if (undefined !== number) {
	        // If explicitly setting the height adust min or max, if neccessary.
	        if (trackView.track.minHeight !== undefined && trackView.track.minHeight > number) {
	          trackView.track.minHeight = number;
	        }

	        if (trackView.track.maxHeight !== undefined && trackView.track.maxHeight < number) {
	          trackView.track.minHeight = number;
	        }

	        trackView.setTrackHeight(number, true); // Explicitly setting track height turns off autoHeight

	        trackView.track.autoHeight = false;
	      }
	    };

	    var config = {
	      label: 'Track Height',
	      value: trackView.trackDiv.clientHeight,
	      callback: callback
	    };
	    trackView.browser.inputDialog.present(config, e);
	  };

	  var object = $('<div>');
	  object.text('Set track height');
	  return {
	    object: object,
	    click: click
	  };
	}

	function getTrackLabelText(track) {
	  var vp, txt;
	  vp = track.trackView.viewports[0];
	  txt = vp.$trackLabel.text();
	  return txt;
	}

	var trackMenuItemListHelper = MenuUtils.trackMenuItemListHelper;

	var MenuPopup = function MenuPopup($parent) {
	  var _this = this;

	  // popover container
	  this.$popover = $('<div>', {
	    class: 'igv-menu-popup'
	  });
	  $parent.append(this.$popover); // popover header

	  var $popoverHeader = $('<div>', {
	    class: 'igv-menu-popup-header'
	  });
	  this.$popover.append($popoverHeader);
	  attachDialogCloseHandlerWithParent$1($popoverHeader.get(0), function () {
	    return _this.$popover.hide();
	  });
	  this.$popoverContent = $('<div>');
	  this.$popover.append(this.$popoverContent);
	  makeDraggable$1(this.$popover.get(0), $popoverHeader.get(0));
	  $popoverHeader.on('click.menu-popup-dismiss', function (e) {
	    e.stopPropagation();
	    e.preventDefault(); // absorb click to prevent it leaking through to parent DOM element
	  });
	};

	MenuPopup.prototype.presentMenuList = function (dx, dy, list) {
	  hideAllMenuPopups();

	  if (list.length > 0) {
	    this.$popoverContent.empty();
	    list = trackMenuItemListHelper(list, this.$popover);

	    var _iterator = _createForOfIteratorHelper(list),
	        _step;

	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var item = _step.value;

	        if (item.init) {
	          item.init();
	        }

	        var $e = item.object;

	        if (0 === list.indexOf(item)) {
	          $e.removeClass('igv-track-menu-border-top');
	        }

	        if ($e.hasClass('igv-track-menu-border-top') || $e.hasClass('igv-menu-popup-check-container')) {// do nothing
	        } else if ($e.is('div')) {
	          $e.addClass('igv-menu-popup-shim');
	        }

	        this.$popoverContent.append($e);
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }

	    this.$popover.css({
	      left: dx + 'px',
	      top: dy + 'px'
	    });
	    this.$popover.show();
	  }
	};

	MenuPopup.prototype.presentTrackContextMenu = function (e, menuItems) {
	  this.$popoverContent.empty();
	  var menuElements = createMenuElements$1(menuItems, this.$popover.get(0));

	  var _iterator2 = _createForOfIteratorHelper(menuElements),
	      _step2;

	  try {
	    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	      var item = _step2.value;
	      this.$popoverContent.get(0).appendChild(item.object);
	    }
	  } catch (err) {
	    _iterator2.e(err);
	  } finally {
	    _iterator2.f();
	  }

	  present$1(e, this.$popover.get(0));
	  this.$popover.show();
	};

	MenuPopup.prototype.dispose = function () {
	  this.$popover.empty();
	  this.$popoverContent.empty();
	  Object.keys(this).forEach(function (key) {
	    this[key] = undefined;
	  });
	};

	function createMenuElements$1(itemList, popover) {
	  return itemList.map(function (item) {
	    var elem;

	    if (typeof item === 'string' && '<hr/>' === item) {
	      elem = document.createElement('hr');
	    } else if (typeof item === 'string') {
	      elem = div$1({
	        class: 'context-menu'
	      });
	      elem.innerHTML = item;
	    } else if (typeof item === 'Node') {
	      elem = item;
	    } else {
	      if (typeof item.init === 'function') {
	        item.init();
	      }

	      if ("checkbox" === item.type) {
	        elem = Icon.createCheckbox("Show all bases", item.value);
	      } else if ("color" === item.type) {
	        var colorPicker = new ColorPicker({
	          parent: popover.parentElement,
	          width: 364,
	          //defaultColor: 'aqua',
	          colorHandler: function colorHandler(color) {
	            return item.click(color);
	          }
	        });
	        elem = div$1({
	          class: 'context-menu'
	        });

	        if (typeof item.label === 'string') {
	          elem.innerHTML = item.label;
	        }

	        var clickHandler = function clickHandler(e) {
	          colorPicker.show();
	          hide$1(popover);
	          e.preventDefault();
	          e.stopPropagation();
	        };

	        elem.addEventListener('click', clickHandler);
	        elem.addEventListener('touchend', clickHandler);
	        elem.addEventListener('mouseup', function (e) {
	          e.preventDefault();
	          e.stopPropagation();
	        });
	      } else {
	        elem = div$1({
	          class: 'context-menu'
	        });

	        if (typeof item.label === 'string') {
	          elem.innerHTML = item.label;
	        }
	      }

	      if (item.click && "color" !== item.type) {
	        elem.addEventListener('click', handleClick);
	        elem.addEventListener('touchend', handleClick);
	        elem.addEventListener('mouseup', function (e) {
	          e.preventDefault();
	          e.stopPropagation();
	        }); // eslint-disable-next-line no-inner-declarations

	        function handleClick(e) {
	          item.click();
	          hide$1(popover);
	          e.preventDefault();
	          e.stopPropagation();
	        }
	      }
	    }

	    return {
	      object: elem,
	      init: item.init
	    };
	  });
	}

	function present$1(e, popover) {
	  var _DOMUtils$translateMo = translateMouseCoordinates$1(e, popover.parentNode),
	      x = _DOMUtils$translateMo.x,
	      y = _DOMUtils$translateMo.y; // parent bbox


	  var _popover$parentNode$g = popover.parentNode.getBoundingClientRect(),
	      width = _popover$parentNode$g.width;

	  var _popover$getBoundingC = popover.getBoundingClientRect(),
	      w = _popover$getBoundingC.width;

	  var xmax = x + w;
	  popover.style.left = "".concat(xmax > width ? x - (xmax - width) : x, "px");
	  popover.style.top = "".concat(y, "px");
	}

	var hideAllMenuPopups = function hideAllMenuPopups() {
	  return $('.igv-menu-popup').hide();
	};

	var NOT_LOADED_MESSAGE = 'Error loading track data';

	var ViewPort = /*#__PURE__*/function (_ViewportBase) {
	  _inherits(ViewPort, _ViewportBase);

	  var _super = _createSuper(ViewPort);

	  function ViewPort(trackView, $viewportContainer, referenceFrame, width) {
	    _classCallCheck(this, ViewPort);

	    return _super.call(this, trackView, $viewportContainer, referenceFrame, width);
	  }

	  _createClass(ViewPort, [{
	    key: "initializationHelper",
	    value: function initializationHelper() {
	      var _this = this;

	      this.menuPopup = new MenuPopup(this.trackView.$viewportContainer);
	      this.menuPopup.$popover.hide();
	      addMouseHandlers.call(this);
	      this.$spinner = $('<div class="igv-viewport-spinner">');
	      this.$spinner.append(createIcon$2("spinner"));
	      this.$viewport.append(this.$spinner);
	      this.stopSpinner();
	      var track = this.trackView.track;

	      if ('sequence' !== track.type) {
	        this.$zoomInNotice = createZoomInNotice.call(this, this.$content);
	      }

	      if (track.name) {
	        this.$trackLabel = $('<div class="igv-track-label">');
	        this.$viewport.append(this.$trackLabel);
	        this.setTrackLabel(track.name);

	        if (false === this.browser.trackLabelsVisible) {
	          this.$trackLabel.hide();
	        }

	        this.$trackLabel.click(function (e) {
	          var str;
	          e.stopPropagation();

	          if (typeof track.description === 'function') {
	            str = track.description();
	          } else if (track.description) {
	            str = "<div title=\"".concat(track.description, "\"><div>").concat(track.description, "</div></div>");
	          } else {
	            str = "<div title=\"".concat(track.name, "\"><div>").concat(track.name, "</div></div>");
	          }

	          if (_this.popover) _this.popover.dispose();
	          _this.popover = new Popover(_this.trackView.$viewportContainer.get(0));

	          _this.popover.presentContentWithEvent(e, str);
	        });
	        this.$trackLabel.mousedown(function (e) {
	          // Prevent bubbling
	          e.stopPropagation();
	        });
	        this.$trackLabel.mouseup(function (e) {
	          // Prevent  bubbling
	          e.stopPropagation();
	        });
	        this.$trackLabel.mousemove(function (e) {
	          // Prevent  bubbling
	          e.stopPropagation();
	        });
	      }
	    }
	  }, {
	    key: "setTrackLabel",
	    value: function setTrackLabel(label) {
	      this.trackView.track.name = this.trackView.track.config.name = label;
	      this.$trackLabel.empty();
	      this.$trackLabel.html(label);
	      var txt = this.$trackLabel.text();
	      this.$trackLabel.attr('title', txt);
	    }
	  }, {
	    key: "startSpinner",
	    value: function startSpinner() {
	      var $spinner = this.$spinner;

	      if ($spinner) {
	        $spinner.addClass("igv-fa5-spin");
	        $spinner.show();
	      }
	    }
	  }, {
	    key: "stopSpinner",
	    value: function stopSpinner() {
	      var $spinner = this.$spinner;

	      if ($spinner) {
	        $spinner.hide();
	        $spinner.removeClass("igv-fa5-spin");
	      }
	    }
	  }, {
	    key: "checkZoomIn",
	    value: function checkZoomIn() {
	      if (!viewIsReady.call(this)) {
	        return false;
	      }

	      if (this.$zoomInNotice) {
	        if (showZoomInNotice.call(this)) {
	          // Out of visibility window
	          if (this.canvas) {
	            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
	            this.tile = undefined;
	          }

	          this.$zoomInNotice.show();

	          if (this.trackView.track.autoHeight) {
	            var minHeight = this.trackView.minHeight || 0;
	            this.setContentHeight(minHeight);
	          }

	          return false;
	        } else {
	          this.$zoomInNotice.hide();
	          return true;
	        }
	      }

	      return true;

	      function showZoomInNotice() {
	        var referenceFrame = this.referenceFrame;

	        if (this.referenceFrame.chr.toLowerCase() === "all" && !this.trackView.track.supportsWholeGenome()) {
	          return true;
	        } else {
	          var visibilityWindow = typeof this.trackView.track.getVisibilityWindow === 'function' ? this.trackView.track.getVisibilityWindow() : this.trackView.track.visibilityWindow;
	          return visibilityWindow !== undefined && visibilityWindow > 0 && referenceFrame.bpPerPixel * this.$viewport.width() > visibilityWindow;
	        }
	      }
	    }
	  }, {
	    key: "shift",
	    value: function shift() {
	      var self = this;
	      var referenceFrame = self.referenceFrame;

	      if (self.canvas && self.tile && self.tile.chr === self.referenceFrame.chr && self.tile.bpPerPixel === referenceFrame.bpPerPixel) {
	        var pixelOffset = Math.round((self.tile.startBP - referenceFrame.start) / referenceFrame.bpPerPixel);
	        self.canvas.style.left = pixelOffset + "px";
	      }
	    }
	  }, {
	    key: "setTop",
	    value: function setTop(contentTop) {
	      var viewportHeight = this.$viewport.height();
	      var viewTop = -contentTop;
	      var viewBottom = viewTop + viewportHeight;
	      $(this.contentDiv).css("top", contentTop + "px");

	      if (!this.canvasVerticalRange || this.canvasVerticalRange.bottom < viewBottom || this.canvasVerticalRange.top > viewTop) {
	        this.repaint();
	      }
	    }
	  }, {
	    key: "loadFeatures",
	    value: function () {
	      var _loadFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	        var referenceFrame, chr, chrLength, pixelWidth, bpWidth, bpStart, bpEnd, features, roiFeatures, roi, _iterator, _step, r, f;

	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                referenceFrame = this.referenceFrame;
	                chr = referenceFrame.chr; // Expand the requested range so we can pan a bit without reloading.  But not beyond chromosome bounds

	                chrLength = this.browser.genome.getChromosome(chr).bpLength;
	                pixelWidth = $(this.contentDiv).width() * 3;
	                bpWidth = pixelWidth * referenceFrame.bpPerPixel;
	                bpStart = Math.floor(Math.max(0, referenceFrame.start - bpWidth / 3));
	                bpEnd = Math.ceil(Math.min(chrLength, bpStart + bpWidth));

	                if (!(this.loading && this.loading.start === bpStart && this.loading.end === bpEnd)) {
	                  _context.next = 9;
	                  break;
	                }

	                return _context.abrupt("return", undefined);

	              case 9:
	                this.loading = {
	                  start: bpStart,
	                  end: bpEnd
	                };
	                this.startSpinner(); // console.log('get features');

	                _context.prev = 11;
	                _context.next = 14;
	                return this.getFeatures(this.trackView.track, chr, bpStart, bpEnd, referenceFrame.bpPerPixel);

	              case 14:
	                features = _context.sent;
	                roiFeatures = [];
	                roi = mergeArrays(this.browser.roi, this.trackView.track.roi);

	                if (!roi) {
	                  _context.next = 37;
	                  break;
	                }

	                _iterator = _createForOfIteratorHelper(roi);
	                _context.prev = 19;

	                _iterator.s();

	              case 21:
	                if ((_step = _iterator.n()).done) {
	                  _context.next = 29;
	                  break;
	                }

	                r = _step.value;
	                _context.next = 25;
	                return r.getFeatures(chr, bpStart, bpEnd, referenceFrame.bpPerPixel);

	              case 25:
	                f = _context.sent;
	                roiFeatures.push({
	                  track: r,
	                  features: f
	                });

	              case 27:
	                _context.next = 21;
	                break;

	              case 29:
	                _context.next = 34;
	                break;

	              case 31:
	                _context.prev = 31;
	                _context.t0 = _context["catch"](19);

	                _iterator.e(_context.t0);

	              case 34:
	                _context.prev = 34;

	                _iterator.f();

	                return _context.finish(34);

	              case 37:
	                this.tile = new Tile(chr, bpStart, bpEnd, referenceFrame.bpPerPixel, features, roiFeatures);
	                this.loading = false;
	                this.hideMessage();
	                this.stopSpinner();
	                return _context.abrupt("return", this.tile);

	              case 44:
	                _context.prev = 44;
	                _context.t1 = _context["catch"](11);

	                // Track might have been removed during load
	                if (this.trackView && this.trackView.disposed !== true) {
	                  this.showMessage(NOT_LOADED_MESSAGE);
	                  Alert.presentAlert(_context.t1);
	                  console.error(_context.t1);
	                }

	              case 47:
	                _context.prev = 47;
	                this.loading = false;
	                this.stopSpinner();
	                return _context.finish(47);

	              case 51:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this, [[11, 44, 47, 51], [19, 31, 34, 37]]);
	      }));

	      function loadFeatures() {
	        return _loadFeatures.apply(this, arguments);
	      }

	      return loadFeatures;
	    }()
	  }, {
	    key: "repaint",
	    value: function () {
	      var _repaint = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	        var self, tile, isWGV, features, roiFeatures, bpPerPixel, bpStart, bpEnd, pixelWidth, viewportHeight, minHeight, pixelHeight, canvasTop, devicePixelRatio, pixelXOffset, newCanvas, ctx, drawConfiguration;
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                self = this;
	                tile = this.tile;

	                if (tile) {
	                  _context2.next = 4;
	                  break;
	                }

	                return _context2.abrupt("return");

	              case 4:
	                isWGV = GenomeUtils.isWholeGenomeView(this.browser.referenceFrameList[0].chr);
	                features = tile.features;
	                roiFeatures = tile.roiFeatures;
	                bpPerPixel = isWGV ? this.referenceFrame.initialEnd / this.$viewport.width() : tile.bpPerPixel;
	                bpStart = isWGV ? 0 : tile.startBP;
	                bpEnd = isWGV ? this.referenceFrame.initialEnd : tile.endBP;
	                pixelWidth = isWGV ? this.$viewport.width() : Math.ceil((bpEnd - bpStart) / bpPerPixel); // For deep tracks we paint a canvas == 3*viewportHeight centered on the current vertical scroll position

	                viewportHeight = this.$viewport.height();
	                minHeight = roiFeatures ? Math.max(self.getContentHeight(), viewportHeight) : self.getContentHeight(); // Need to fill viewport for ROIs.

	                pixelHeight = Math.min(minHeight, 3 * viewportHeight);

	                if (!(0 === pixelWidth || 0 === pixelHeight)) {
	                  _context2.next = 17;
	                  break;
	                }

	                if (self.canvas) {
	                  $(self.canvas).remove();
	                }

	                return _context2.abrupt("return");

	              case 17:
	                canvasTop = Math.max(0, -$(this.contentDiv).position().top - viewportHeight); // Always use high DPI if in compressed display mode, otherwise use preference setting;

	                if ("FILL" === this.trackView.track.displayMode) {
	                  devicePixelRatio = window.devicePixelRatio;
	                } else {
	                  devicePixelRatio = this.trackView.track.supportHiDPI === false ? 1 : window.devicePixelRatio;
	                }

	                pixelXOffset = Math.round((bpStart - this.referenceFrame.start) / this.referenceFrame.bpPerPixel);
	                newCanvas = $('<canvas class="igv-canvas">').get(0);
	                ctx = newCanvas.getContext("2d");
	                newCanvas.style.width = pixelWidth + "px";
	                newCanvas.style.height = pixelHeight + "px";
	                newCanvas.width = devicePixelRatio * pixelWidth;
	                newCanvas.height = devicePixelRatio * pixelHeight;
	                ctx.scale(devicePixelRatio, devicePixelRatio);
	                newCanvas.style.left = pixelXOffset + "px";
	                newCanvas.style.top = canvasTop + "px";
	                ctx.translate(0, -canvasTop);
	                drawConfiguration = {
	                  context: ctx,
	                  features: features,
	                  pixelWidth: pixelWidth,
	                  pixelHeight: pixelHeight,
	                  pixelTop: canvasTop,
	                  bpStart: bpStart,
	                  bpEnd: bpEnd,
	                  bpPerPixel: bpPerPixel,
	                  referenceFrame: this.referenceFrame,
	                  selection: self.selection,
	                  viewport: self,
	                  viewportWidth: self.$viewport.width(),
	                  viewportContainerX: this.referenceFrame.toPixels(this.referenceFrame.start - bpStart),
	                  viewportContainerWidth: this.browser.viewportContainerWidth()
	                };
	                this.draw(drawConfiguration, features, roiFeatures);
	                this.canvasVerticalRange = {
	                  top: canvasTop,
	                  bottom: canvasTop + pixelHeight
	                };

	                if (self.canvas) {
	                  $(self.canvas).remove();
	                }

	                $(self.contentDiv).append(newCanvas);
	                self.canvas = newCanvas;
	                self.ctx = ctx;

	              case 37:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function repaint() {
	        return _repaint.apply(this, arguments);
	      }

	      return repaint;
	    }()
	  }, {
	    key: "draw",
	    value: function draw(drawConfiguration, features, roiFeatures) {
	      if (features) {
	        drawConfiguration.features = features;
	        this.trackView.track.draw(drawConfiguration);
	      }

	      if (roiFeatures) {
	        var _iterator2 = _createForOfIteratorHelper(roiFeatures),
	            _step2;

	        try {
	          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	            var r = _step2.value;
	            drawConfiguration.features = r.features;
	            r.track.draw(drawConfiguration);
	          }
	        } catch (err) {
	          _iterator2.e(err);
	        } finally {
	          _iterator2.f();
	        }
	      }
	    } // render viewport as SVG

	  }, {
	    key: "toSVG",
	    value: function () {
	      var _toSVG = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(tile) {
	        var referenceFrame, bpPerPixel, features, roiFeatures, pixelWidth, pixelHeight, bpStart, bpEnd, ctx, drawConfiguration;
	        return regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                if (!(this.$zoomInNotice && this.$zoomInNotice.is(":visible"))) {
	                  _context3.next = 2;
	                  break;
	                }

	                return _context3.abrupt("return");

	              case 2:
	                referenceFrame = this.referenceFrame;
	                bpPerPixel = tile.bpPerPixel;
	                features = tile.features;
	                roiFeatures = tile.roiFeatures;
	                pixelWidth = this.$viewport.width();
	                pixelHeight = this.$viewport.height();
	                bpStart = referenceFrame.start;
	                bpEnd = referenceFrame.start + pixelWidth * referenceFrame.bpPerPixel;
	                ctx = new C2S({
	                  // svg
	                  width: pixelWidth,
	                  height: pixelHeight,
	                  viewbox: {
	                    x: 0,
	                    y: -$(this.contentDiv).position().top,
	                    width: pixelWidth,
	                    height: pixelHeight
	                  }
	                });
	                drawConfiguration = {
	                  viewport: this,
	                  context: ctx,
	                  top: -$(this.contentDiv).position().top,
	                  pixelTop: 0,
	                  // for compatibility with canvas draw
	                  pixelWidth: pixelWidth,
	                  pixelHeight: pixelHeight,
	                  bpStart: bpStart,
	                  bpEnd: bpEnd,
	                  bpPerPixel: bpPerPixel,
	                  referenceFrame: this.referenceFrame,
	                  selection: this.selection,
	                  viewportWidth: pixelWidth,
	                  viewportContainerX: 0,
	                  viewportContainerWidth: this.browser.viewportContainerWidth()
	                };
	                draw.call(this, drawConfiguration, features, roiFeatures);
	                return _context3.abrupt("return", ctx.getSerializedSvg(true));

	              case 14:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function toSVG(_x) {
	        return _toSVG.apply(this, arguments);
	      }

	      return toSVG;
	    }()
	  }, {
	    key: "setContentHeight",
	    value: function setContentHeight(contentHeight) {
	      // Maximum height of a canvas is ~32,000 pixels on Chrome, possibly smaller on other platforms
	      contentHeight = Math.min(contentHeight, 32000);
	      $(this.contentDiv).height(contentHeight);
	      if (this.tile) this.tile.invalidate = true;
	    }
	  }, {
	    key: "isLoading",
	    value: function isLoading() {
	      return this.loading;
	    }
	  }, {
	    key: "saveImage",
	    value: function saveImage() {
	      if (!this.ctx) return;
	      var canvasTop = this.canvasVerticalRange ? this.canvasVerticalRange.top : 0;
	      var devicePixelRatio = window.devicePixelRatio;
	      var w = this.$viewport.width() * devicePixelRatio;
	      var h = this.$viewport.height() * devicePixelRatio;
	      var x = -$(this.canvas).position().left * devicePixelRatio;
	      var y = (-$(this.contentDiv).position().top - canvasTop) * devicePixelRatio;
	      var imageData = this.ctx.getImageData(x, y, w, h);
	      var exportCanvas = document.createElement('canvas');
	      var exportCtx = exportCanvas.getContext('2d');
	      exportCanvas.width = imageData.width;
	      exportCanvas.height = imageData.height;
	      exportCtx.putImageData(imageData, 0, 0); // filename = this.trackView.track.name + ".png";

	      var filename = (this.$trackLabel.text() ? this.$trackLabel.text() : "image") + ".png";
	      var data = exportCanvas.toDataURL("image/png");
	      download(filename, data);
	    }
	  }, {
	    key: "saveSVG",
	    value: function saveSVG() {
	      var _this$$viewport$get$g = this.$viewport.get(0).getBoundingClientRect(),
	          width = _this$$viewport$get$g.width,
	          height = _this$$viewport$get$g.height;

	      var config = {
	        width: width,
	        height: height,
	        viewbox: {
	          x: 0,
	          y: -$(this.contentDiv).position().top,
	          width: width,
	          height: height
	        }
	      };
	      var context = new C2S(config);
	      this.drawSVGWithContect(context, width, height);
	      var svg = context.getSerializedSvg(true);
	      var data = URL.createObjectURL(new Blob([svg], {
	        type: "application/octet-stream"
	      }));
	      var str = this.$trackLabel ? this.$trackLabel.text() : this.trackView.track.id;
	      download("".concat(str, ".svg"), data);
	    }
	  }, {
	    key: "drawSVGWithContect",
	    value: function drawSVGWithContect(context, width, height) {
	      // console.log('Viewport draw SVG.')
	      var _this$referenceFrame = this.referenceFrame,
	          start = _this$referenceFrame.start,
	          bpPerPixel = _this$referenceFrame.bpPerPixel;
	      context.save();
	      var config = {
	        context: context,
	        viewport: this,
	        referenceFrame: this.referenceFrame,
	        top: -$(this.contentDiv).position().top,
	        pixelTop: 0,
	        pixelWidth: width,
	        pixelHeight: height,
	        bpStart: start,
	        bpEnd: start + width * bpPerPixel,
	        bpPerPixel: bpPerPixel,
	        viewportWidth: width,
	        viewportContainerX: 0,
	        viewportContainerWidth: this.browser.viewportContainerWidth(),
	        selection: this.selection
	      };
	      var features = this.tile ? this.tile.features : [];
	      var roiFeatures = this.tile ? this.tile.roiFeatures : undefined;
	      draw.call(this, config, features, roiFeatures);

	      if (this.$trackLabel && true === this.browser.trackLabelsVisible) {
	        renderTrackLabelSVG.call(this, context);
	      }

	      context.restore();
	    }
	  }, {
	    key: "getCachedFeatures",
	    value: function getCachedFeatures() {
	      return this.tile ? this.tile.features : [];
	    }
	  }, {
	    key: "checkContentHeight",
	    value: function checkContentHeight() {
	      var track = this.trackView.track;

	      if ("FILL" === track.displayMode) {
	        this.setContentHeight(this.$viewport.height());
	      } else if (typeof track.computePixelHeight === 'function') {
	        var features = this.cachedFeatures;

	        if (features) {
	          var requiredContentHeight = track.computePixelHeight(features);
	          var currentContentHeight = $(this.contentDiv).height();

	          if (requiredContentHeight !== currentContentHeight) {
	            this.setContentHeight(requiredContentHeight);
	          }
	        }
	      }
	    }
	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(track, chr, start, end, bpPerPixel) {
	        var features;
	        return regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                if (!(this.tile && this.tile.containsRange(chr, start, end, bpPerPixel))) {
	                  _context4.next = 4;
	                  break;
	                }

	                return _context4.abrupt("return", this.tile.features);

	              case 4:
	                if (!(typeof track.getFeatures === "function")) {
	                  _context4.next = 13;
	                  break;
	                }

	                _context4.next = 7;
	                return track.getFeatures(chr, start, end, bpPerPixel, this);

	              case 7:
	                features = _context4.sent;
	                this.cachedFeatures = features;
	                this.checkContentHeight();
	                return _context4.abrupt("return", features);

	              case 13:
	                return _context4.abrupt("return", undefined);

	              case 14:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      function getFeatures(_x2, _x3, _x4, _x5, _x6) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }]);

	  return ViewPort;
	}(ViewportBase);

	function createZoomInNotice($parent) {
	  var $notice = $('<div class="zoom-in-notice-container">');
	  $parent.append($notice);
	  var $e = $('<div>');
	  $notice.append($e);
	  $e.text('Zoom in to see features');
	  $notice.hide();
	  return $notice;
	}

	function draw(drawConfiguration, features, roiFeatures) {
	  if (features) {
	    drawConfiguration.features = features;
	    this.trackView.track.draw(drawConfiguration);
	  }

	  if (roiFeatures) {
	    var _iterator3 = _createForOfIteratorHelper(roiFeatures),
	        _step3;

	    try {
	      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	        var r = _step3.value;
	        drawConfiguration.features = r.features;
	        r.track.draw(drawConfiguration);
	      }
	    } catch (err) {
	      _iterator3.e(err);
	    } finally {
	      _iterator3.f();
	    }
	  }
	}

	function viewIsReady() {
	  return this.browser && this.browser.referenceFrameList && this.referenceFrame;
	}

	function renderTrackLabelSVG(context) {
	  var _DOMUtils$relativeDOM = relativeDOMBBox(this.$viewport.get(0), this.$trackLabel.get(0)),
	      x = _DOMUtils$relativeDOM.x,
	      y = _DOMUtils$relativeDOM.y,
	      width = _DOMUtils$relativeDOM.width,
	      height = _DOMUtils$relativeDOM.height;

	  var _context$measureText = context.measureText(this.$trackLabel.text()),
	      stringWidth = _context$measureText.width;

	  context.fillStyle = "white";
	  context.fillRect(x, y, width, height);
	  context.font = "12px Arial";
	  context.fillStyle = 'rgb(68, 68, 68)';
	  var dx = 0.25 * (width - stringWidth);
	  var dy = 0.7 * (height - 12);
	  context.fillText(this.$trackLabel.text(), x + dx, y + height - dy);
	  context.strokeStyle = 'rgb(68, 68, 68)';
	  context.strokeRect(x, y, width, height);
	}

	var Tile = function Tile(chr, tileStart, tileEnd, bpPerPixel, features, roiFeatures) {
	  this.chr = chr;
	  this.startBP = tileStart;
	  this.endBP = tileEnd;
	  this.bpPerPixel = bpPerPixel;
	  this.features = features;
	  this.roiFeatures = roiFeatures;
	};

	Tile.prototype.containsRange = function (chr, start, end, bpPerPixel) {
	  return this.bpPerPixel === bpPerPixel && start >= this.startBP && end <= this.endBP && chr === this.chr;
	};

	Tile.prototype.overlapsRange = function (chr, start, end) {
	  return this.chr === chr && end >= this.startBP && start <= this.endBP;
	};

	function addMouseHandlers() {
	  var self = this;
	  var browser = this.browser;
	  var mouseDownCoords;
	  var popupTimerID;
	  var lastClickTime = 0;
	  this.$viewport.on("contextmenu", function (e) {
	    // Ignore if we are doing a drag.  This can happen with touch events.
	    if (self.browser.dragObject) {
	      return false;
	    }

	    var clickState = createClickState(e, self);

	    if (undefined === clickState) {
	      return false;
	    }

	    e.preventDefault(); // Track specific items

	    var menuItems = [];

	    if (typeof self.trackView.track.contextMenuItemList === "function") {
	      menuItems = self.trackView.track.contextMenuItemList(clickState);
	    } // Add items common to all tracks


	    if (menuItems.length > 0) {
	      menuItems.push({
	        label: $('<HR>')
	      });
	    }

	    menuItems.push({
	      label: 'Save Image (PNG)',
	      click: function click() {
	        return self.saveImage();
	      }
	    });
	    menuItems.push({
	      label: 'Save Image (SVG)',
	      click: function click() {
	        return self.saveSVG();
	      }
	    });
	    self.menuPopup.presentTrackContextMenu(e, menuItems);
	  });
	  /**
	   * Mouse click down,  notify browser for potential drag (pan), and record position for potential click.
	   */

	  this.$viewport.on('mousedown', function (e) {
	    self.enableClick = true;
	    browser.mouseDownOnViewport(e, self);
	    mouseDownCoords = pageCoordinates$1(e);
	  });
	  this.$viewport.on('touchstart', function (e) {
	    self.enableClick = true;
	    browser.mouseDownOnViewport(e, self);
	    mouseDownCoords = pageCoordinates$1(e);
	  });
	  /**
	   * Mouse is released.  Ignore if this is a context menu click, or the end of a drag action.   If neither of
	   * those, it is a click.
	   */

	  this.$viewport.on('mouseup', handleMouseUp);
	  this.$viewport.on('touchend', handleMouseUp);
	  this.$viewport.on('click', function (e) {
	    if (self.enableClick) {
	      handleClick(e);
	    }
	  });

	  function handleMouseUp(e) {
	    // Any mouse up cancels drag and scrolling
	    if (self.browser.dragObject || self.browser.isScrolling) {
	      self.browser.cancelTrackPan();
	      e.preventDefault();
	      e.stopPropagation();
	      self.enableClick = false; // Until next mouse down

	      return;
	    }

	    self.browser.cancelTrackPan();
	    self.browser.endTrackDrag();
	  }

	  function handleClick(e) {
	    if (3 === e.which || e.ctrlKey) {
	      return;
	    } // Close any currently open popups


	    $('.igv-popover').hide();

	    if (browser.dragObject || browser.isScrolling) {
	      return;
	    } // // Interpret mouseDown + mouseUp < 5 pixels as a click.
	    // if(!mouseDownCoords) {
	    //     return;
	    // }
	    // const coords = pageCoordinates(e);
	    // const dx = coords.x - mouseDownCoords.x;
	    // const dy = coords.y - mouseDownCoords.y;
	    // const dist2 = dx*dx + dy*dy;
	    // if(dist2 > 25) {
	    //     mouseDownCoords = undefined;
	    //     return;
	    // }
	    // Treat as a mouse click, its either a single or double click.
	    // Handle here and stop propogation / default


	    e.preventDefault();
	    e.stopPropagation();
	    var mouseX = translateMouseCoordinates$1(e, self.$viewport.get(0)).x;
	    var mouseXCanvas = translateMouseCoordinates$1(e, self.canvas).x;
	    var referenceFrame = self.referenceFrame;
	    var xBP = Math.floor(referenceFrame.start + referenceFrame.toBP(mouseXCanvas));
	    var time = Date.now();

	    if (time - lastClickTime < browser.constants.doubleClickDelay) {
	      // double-click
	      if (popupTimerID) {
	        window.clearTimeout(popupTimerID);
	        popupTimerID = undefined;
	      }

	      var centerBP = Math.round(referenceFrame.start + referenceFrame.toBP(mouseX));
	      var string;

	      if ('all' === self.referenceFrame.chr.toLowerCase()) {
	        var chr = browser.genome.getChromosomeCoordinate(centerBP).chr;

	        if (1 === browser.referenceFrameList.length) {
	          string = chr;
	        } else {
	          var loci = browser.referenceFrameList.map(function (g) {
	            return g.locusSearchString;
	          });
	          loci[browser.referenceFrameList.indexOf(self.referenceFrame)] = chr;
	          string = loci.join(' ');
	        }

	        browser.search(string);
	      } else {
	        browser.zoomWithScaleFactor(0.5, centerBP, self);
	      }
	    } else {
	      // single-click
	      if (e.shiftKey && typeof self.trackView.track.shiftClick === "function") {
	        self.trackView.track.shiftClick(xBP, e);
	      } else if (typeof self.trackView.track.popupData === "function") {
	        popupTimerID = setTimeout(function () {
	          var content = getPopupContent(e, self);

	          if (content) {
	            if (self.popover) self.popover.dispose();
	            self.popover = new Popover(self.trackView.$viewportContainer.get(0));
	            self.popover.presentContentWithEvent(e, content);
	          }

	          clearTimeout(popupTimerID);
	          popupTimerID = undefined;
	        }, browser.constants.doubleClickDelay);
	      }
	    }

	    lastClickTime = time;
	  }

	  function createClickState(e, viewport) {
	    var referenceFrame = viewport.referenceFrame;
	    var viewportCoords = translateMouseCoordinates$1(e, viewport.contentDiv);
	    var canvasCoords = translateMouseCoordinates$1(e, viewport.canvas);
	    var genomicLocation = referenceFrame.start + referenceFrame.toBP(viewportCoords.x);

	    if (undefined === genomicLocation || null === viewport.tile) {
	      return undefined;
	    }

	    return {
	      event: e,
	      viewport: viewport,
	      referenceFrame: referenceFrame,
	      genomicLocation: genomicLocation,
	      x: viewportCoords.x,
	      y: viewportCoords.y,
	      canvasX: canvasCoords.x,
	      canvasY: canvasCoords.y
	    };
	  }
	  /**
	   * Return markup for popup info window
	   *
	   * @param e
	   * @param viewport
	   * @returns {*}
	   */


	  function getPopupContent(e, viewport) {
	    var clickState = createClickState(e, viewport);

	    if (undefined === clickState) {
	      return;
	    }

	    var track = viewport.trackView.track;
	    var dataList = track.popupData(clickState);
	    var popupClickHandlerResult = browser.fireEvent('trackclick', [track, dataList]);
	    var content;

	    if (undefined === popupClickHandlerResult || true === popupClickHandlerResult) {
	      // Indicates handler did not handle the result, or the handler wishes default behavior to occur
	      if (dataList && dataList.length > 0) {
	        content = formatPopoverText(dataList);
	      }
	    } else if (typeof popupClickHandlerResult === 'string') {
	      content = popupClickHandlerResult;
	    }

	    return content;
	  }
	  /**
	   * Format markup for popover text from an array of name value pairs [{name, value}]
	   */


	  function formatPopoverText(nameValues) {
	    var rows = nameValues.map(function (nameValue) {
	      if (nameValue.name) {
	        var str = "<span>".concat(nameValue.name, "</span>&nbsp&nbsp&nbsp").concat(nameValue.value);
	        return "<div title=\"".concat(nameValue.value, "\">").concat(str, "</div>");
	      } else if ('<hr>' === nameValue) {
	        return nameValue;
	      } else {
	        return "<div title=\"".concat(nameValue, "\">").concat(nameValue, "</div>");
	      }
	    });
	    return rows.join('');
	  }
	}
	/**
	 * Merge 2 arrays.  a and/or b can be undefined.  If both are undefined, return undefined
	 * @param a An array or undefined
	 * @param b An array or undefined
	 */


	function mergeArrays(a, b) {
	  if (a && b) return a.concat(b);else if (a) return a;else return b;
	}

	var RulerSweeper = /*#__PURE__*/function () {
	  function RulerSweeper(viewport) {
	    _classCallCheck(this, RulerSweeper);

	    this.viewport = viewport;
	    this.browser = viewport.browser;
	    this.$rulerSweeper = $('<div class="igv-ruler-sweeper-div">');
	    $(viewport.contentDiv).append(this.$rulerSweeper);
	    this.namespace = '.sweeper_' + guid();
	    this.addMouseHandlers();
	  }

	  _createClass(RulerSweeper, [{
	    key: "disableMouseHandlers",
	    value: function disableMouseHandlers() {
	      $(document).off(this.namespace);
	      this.viewport.$viewport.off(this.namespace);
	    }
	  }, {
	    key: "addMouseHandlers",
	    value: function addMouseHandlers() {
	      var browser = this.browser;
	      var self = this;
	      var isMouseDown, isMouseIn, mouseDown, left, threshold, width, dx;
	      this.disableMouseHandlers();
	      isMouseDown = isMouseIn = mouseDown = undefined;
	      threshold = 1;
	      $(this.browser.$root).on('mousedown' + this.namespace, function (e) {
	        isMouseIn = true;
	        mouseDown = translateMouseCoordinates$1(e, self.viewport.$viewport.get(0)).x;

	        if (true === isMouseDown) {
	          self.$rulerSweeper.show();
	          width = threshold;
	          left = mouseDown;
	          self.$rulerSweeper.css({
	            left: left + 'px'
	          });
	          self.$rulerSweeper.width(width);
	        }
	      });
	      $(this.browser.$root).on('mousemove' + this.namespace, function (e) {
	        var mouseCurrent;

	        if (isMouseDown && isMouseIn) {
	          mouseCurrent = translateMouseCoordinates$1(e, self.viewport.$viewport.get(0)).x;
	          mouseCurrent = Math.min(mouseCurrent, self.viewport.$viewport.width());
	          mouseCurrent = Math.max(mouseCurrent, 0);
	          dx = mouseCurrent - mouseDown;
	          width = Math.abs(dx);
	          self.$rulerSweeper.width(width);

	          if (dx < 0) {
	            left = mouseDown + dx;
	            self.$rulerSweeper.css({
	              left: left + 'px'
	            });
	          }
	        }
	      });
	      $(this.browser.$root).on('mouseup' + this.namespace, function (e) {
	        var extent;

	        if (true === isMouseDown && true === isMouseIn) {
	          isMouseDown = isMouseIn = undefined;
	          self.$rulerSweeper.hide();
	          extent = {};
	          extent.start = self.bp(left);
	          extent.end = self.bp(left + width);

	          if (width > threshold) {
	            validateLocusExtent(browser.genome.getChromosome(self.viewport.referenceFrame.chr).bpLength, extent, browser.minimumBases());
	            self.viewport.referenceFrame.bpPerPixel = (Math.round(extent.end) - Math.round(extent.start)) / self.viewport.$viewport.width();
	            self.viewport.referenceFrame.start = Math.round(extent.start);
	            self.viewport.referenceFrame.initialEnd = Math.round(extent.end);
	            browser.updateViews(self.viewport.referenceFrame);
	          }
	        }
	      });
	      this.viewport.$viewport.on('mousedown' + this.namespace, function (e) {
	        isMouseDown = true;
	      });
	    }
	  }, {
	    key: "dispose",
	    value: function dispose() {
	      this.disableMouseHandlers();
	    }
	  }, {
	    key: "bp",
	    value: function bp(pixel) {
	      return this.viewport.referenceFrame.start + pixel * this.viewport.referenceFrame.bpPerPixel;
	    }
	  }]);

	  return RulerSweeper;
	}();

	var RulerViewport = /*#__PURE__*/function (_ViewPort) {
	  _inherits(RulerViewport, _ViewPort);

	  var _super = _createSuper(RulerViewport);

	  function RulerViewport(trackView, $viewportContainer, referenceFrame, width) {
	    _classCallCheck(this, RulerViewport);

	    return _super.call(this, trackView, $viewportContainer, referenceFrame, width);
	  }

	  _createClass(RulerViewport, [{
	    key: "initializationHelper",
	    value: function initializationHelper() {
	      var _this = this;

	      this.rulerSweeper = new RulerSweeper(this);
	      appendMultiPanelCloseButton(this.browser, this.$viewport, this.referenceFrame);
	      this.$rulerLabel = $('<div class = "igv-multi-locus-panel-label-div">');
	      this.$content.append(this.$rulerLabel);
	      this.$rulerLabel.click(function () {
	        return _this.browser.selectMultiLocusPanelWithReferenceFrame(_this.referenceFrame);
	      });
	      this.namespace = ".ruler_track_viewport_".concat(this.browser.referenceFrameList.indexOf(this.referenceFrame));

	      if (true === GenomeUtils.isWholeGenomeView(this.browser.referenceFrameList[0].chr)) {
	        enableTrackMouseHandlers.call(this);
	      } else {
	        this.$viewport.off(this.namespace);
	      }
	    }
	  }, {
	    key: "updateLocusLabel",
	    value: function updateLocusLabel() {
	      var str = this.referenceFrame.presentLocus(this.$viewport.width());
	      this.$rulerLabel.text(str);
	    }
	  }]);

	  return RulerViewport;
	}(ViewPort);

	function appendMultiPanelCloseButton(browser, $viewport, referenceFrame) {
	  $viewport.addClass('igv-viewport-ruler');
	  var $close = $('<div class="igv-multi-locus-panel-close-container">');
	  $viewport.append($close);
	  $close.append(createIcon$2("times-circle"));
	  $close.click(function () {
	    return browser.removeMultiLocusPanelWithReferenceFrame(referenceFrame, true);
	  });
	}

	function enableTrackMouseHandlers() {
	  var _this2 = this;

	  var index = this.browser.referenceFrameList.indexOf(this.referenceFrame);
	  var click = "click".concat(this.namespace);
	  this.$viewport.on(click, function (e) {
	    var _DOMUtils$translateMo = translateMouseCoordinates$1(e, _this2.$viewport.get(0)),
	        pixel = _DOMUtils$translateMo.x;

	    var bp = Math.round(_this2.referenceFrame.start + _this2.referenceFrame.toBP(pixel));
	    var searchString;

	    var _this2$browser$genome = _this2.browser.genome.getChromosomeCoordinate(bp),
	        chr = _this2$browser$genome.chr;

	    if (1 === _this2.browser.referenceFrameList.length) {
	      searchString = chr;
	    } else {
	      var loci = _this2.browser.referenceFrameList.map(function (_ref) {
	        var locusSearchString = _ref.locusSearchString;
	        return locusSearchString;
	      });

	      loci[index] = chr;
	      searchString = loci.join(' ');
	    }

	    _this2.browser.search(searchString);
	  });
	}

	var createViewport = function createViewport(trackView, referenceFrameList, index, width) {
	  if ('ruler' === trackView.track.type) {
	    return new RulerViewport(trackView, trackView.$viewportContainer, referenceFrameList[index], width);
	  } else if ('ideogram' === trackView.track.type) {
	    return new IdeogramViewport(trackView, trackView.$viewportContainer, referenceFrameList[index], width);
	  } else {
	    return new ViewPort(trackView, trackView.$viewportContainer, referenceFrameList[index], width);
	  }
	};

	var BLACK = 1;
	var RED = 2;
	var NIL = {};
	NIL.color = BLACK;
	NIL.parent = NIL;
	NIL.left = NIL;
	NIL.right = NIL;

	var IntervalTree = /*#__PURE__*/function () {
	  function IntervalTree() {
	    _classCallCheck(this, IntervalTree);

	    this.root = NIL;
	  }

	  _createClass(IntervalTree, [{
	    key: "insert",
	    value: function insert(start, end, value) {
	      var interval = new Interval(start, end, value);
	      var x = new Node(interval);
	      this.treeInsert(x);
	      x.color = RED;

	      while (x !== this.root && x.parent.color === RED) {
	        if (x.parent === x.parent.parent.left) {
	          var y = x.parent.parent.right;

	          if (y.color === RED) {
	            x.parent.color = BLACK;
	            y.color = BLACK;
	            x.parent.parent.color = RED;
	            x = x.parent.parent;
	          } else {
	            if (x === x.parent.right) {
	              x = x.parent;
	              leftRotate.call(this, x);
	            }

	            x.parent.color = BLACK;
	            x.parent.parent.color = RED;
	            rightRotate.call(this, x.parent.parent);
	          }
	        } else {
	          var _y = x.parent.parent.left;

	          if (_y.color === RED) {
	            x.parent.color = BLACK;
	            _y.color = BLACK;
	            x.parent.parent.color = RED;
	            x = x.parent.parent;
	          } else {
	            if (x === x.parent.left) {
	              x = x.parent;
	              rightRotate.call(this, x);
	            }

	            x.parent.color = BLACK;
	            x.parent.parent.color = RED;
	            leftRotate.call(this, x.parent.parent);
	          }
	        }
	      }

	      this.root.color = BLACK;
	    }
	    /**
	     *
	     * @param start - query interval
	     * @param end - query interval
	     * @returns Array of all intervals overlapping the query region
	     */

	  }, {
	    key: "findOverlapping",
	    value: function findOverlapping(start, end) {
	      var searchInterval = new Interval(start, end, 0);
	      if (this.root === NIL) return [];
	      var intervals = searchAll.call(this, searchInterval, this.root, []);

	      if (intervals.length > 1) {
	        intervals.sort(function (i1, i2) {
	          return i1.low - i2.low;
	        });
	      }

	      return intervals;
	    }
	    /**
	     * Dump info on intervals to console.  For debugging.
	     */

	  }, {
	    key: "logIntervals",
	    value: function logIntervals() {
	      logNode(this.root);

	      function logNode(node, indent) {
	        if (node.left !== NIL) logNode(node.left);
	        if (node.right !== NIL) logNode(node.right);
	      }
	    }
	  }, {
	    key: "mapIntervals",
	    value: function mapIntervals(func) {
	      applyInterval(this.root);

	      function applyInterval(node) {
	        func(node.interval);
	        if (node.left !== NIL) applyInterval(node.left);
	        if (node.right !== NIL) applyInterval(node.right);
	      }
	    }
	    /**
	     * Note:  Does not maintain RB constraints,  this is done post insert
	     *
	     * @param x  a Node
	     */

	  }, {
	    key: "treeInsert",
	    value: function treeInsert(x) {
	      var node = this.root;
	      var y = NIL;

	      while (node !== NIL) {
	        y = node;

	        if (x.interval.low <= node.interval.low) {
	          node = node.left;
	        } else {
	          node = node.right;
	        }
	      }

	      x.parent = y;

	      if (y === NIL) {
	        this.root = x;
	        x.left = x.right = NIL;
	      } else {
	        if (x.interval.low <= y.interval.low) {
	          y.left = x;
	        } else {
	          y.right = x;
	        }
	      }

	      applyUpdate.call(this, x);
	    }
	  }]);

	  return IntervalTree;
	}();

	function searchAll(interval, node, results) {
	  if (node.interval.overlaps(interval)) {
	    results.push(node.interval);
	  }

	  if (node.left !== NIL && node.left.max >= interval.low) {
	    searchAll.call(this, interval, node.left, results);
	  }

	  if (node.right !== NIL && node.right.min <= interval.high) {
	    searchAll.call(this, interval, node.right, results);
	  }

	  return results;
	}

	function leftRotate(x) {
	  var y = x.right;
	  x.right = y.left;

	  if (y.left !== NIL) {
	    y.left.parent = x;
	  }

	  y.parent = x.parent;

	  if (x.parent === NIL) {
	    this.root = y;
	  } else {
	    if (x.parent.left === x) {
	      x.parent.left = y;
	    } else {
	      x.parent.right = y;
	    }
	  }

	  y.left = x;
	  x.parent = y;
	  applyUpdate.call(this, x); // no need to apply update on y, since it'll y is an ancestor
	  // of x, and will be touched by applyUpdate().
	}

	function rightRotate(x) {
	  var y = x.left;
	  x.left = y.right;

	  if (y.right !== NIL) {
	    y.right.parent = x;
	  }

	  y.parent = x.parent;

	  if (x.parent === NIL) {
	    this.root = y;
	  } else {
	    if (x.parent.right === x) {
	      x.parent.right = y;
	    } else {
	      x.parent.left = y;
	    }
	  }

	  y.right = x;
	  x.parent = y;
	  applyUpdate.call(this, x); // no need to apply update on y, since it'll y is an ancestor
	  // of x, and will be touched by applyUpdate().
	} // Applies the statistic update on the node and its ancestors.


	function applyUpdate(node) {
	  while (node !== NIL) {
	    var nodeMax = node.left.max > node.right.max ? node.left.max : node.right.max;
	    var intervalHigh = node.interval.high;
	    node.max = nodeMax > intervalHigh ? nodeMax : intervalHigh;
	    var nodeMin = node.left.min < node.right.min ? node.left.min : node.right.min;
	    var intervalLow = node.interval.low;
	    node.min = nodeMin < intervalLow ? nodeMin : intervalLow;
	    node = node.parent;
	  }
	}

	var Interval = /*#__PURE__*/function () {
	  function Interval(low, high, value) {
	    _classCallCheck(this, Interval);

	    this.low = low;
	    this.high = high;
	    this.value = value;
	  }

	  _createClass(Interval, [{
	    key: "equals",
	    value: function equals(other) {
	      if (!other) {
	        return false;
	      }

	      if (this === other) {
	        return true;
	      }

	      return this.low === other.low && this.high === other.high;
	    }
	  }, {
	    key: "compareTo",
	    value: function compareTo(other) {
	      if (this.low < other.low) return -1;
	      if (this.low > other.low) return 1;
	      if (this.high < other.high) return -1;
	      if (this.high > other.high) return 1;
	      return 0;
	    }
	    /**
	     * Returns true if this interval overlaps the other.
	     */

	  }, {
	    key: "overlaps",
	    value: function overlaps(other) {
	      try {
	        return this.low <= other.high && other.low <= this.high;
	      } catch (e) {
	        //alert(e);
	        Alert.presentAlert(e, undefined);
	      }
	    }
	  }]);

	  return Interval;
	}();

	function Node(interval) {
	  this.parent = NIL;
	  this.left = NIL;
	  this.right = NIL;
	  this.interval = interval;
	  this.color = RED;
	} //

	var FeatureUtils = {
	  packFeatures: function packFeatures(features, maxRows, sorted) {
	    var start;
	    var end;
	    if (!features) return;
	    maxRows = maxRows || 10000;

	    if (!sorted) {
	      features.sort(function (a, b) {
	        return a.start - b.start;
	      });
	    }

	    if (features.length === 0) {
	      return [];
	    } else {
	      var bucketList = [],
	          allocatedCount = 0,
	          lastAllocatedCount = 0,
	          nextStart,
	          row,
	          index,
	          bucket,
	          feature,
	          gap = 2,
	          bucketStart;
	      start = features[0].start;
	      end = features[features.length - 1].start;
	      bucketStart = Math.max(start, features[0].start);
	      nextStart = bucketStart;
	      features.forEach(function (alignment) {
	        var buckListIndex = Math.max(0, alignment.start - bucketStart);

	        if (bucketList[buckListIndex] === undefined) {
	          bucketList[buckListIndex] = [];
	        }

	        bucketList[buckListIndex].push(alignment);
	      });
	      row = 0;

	      while (allocatedCount < features.length && row <= maxRows) {
	        while (nextStart <= end) {
	          bucket = undefined;

	          while (!bucket && nextStart <= end) {
	            index = nextStart - bucketStart;

	            if (bucketList[index] === undefined) {
	              ++nextStart; // No buckets at this index
	            } else {
	              bucket = bucketList[index];
	            }
	          } // while (bucket)


	          if (!bucket) {
	            break;
	          }

	          feature = bucket.pop();

	          if (0 === bucket.length) {
	            bucketList[index] = undefined;
	          }

	          feature.row = row;
	          nextStart = feature.end + gap;
	          ++allocatedCount;
	        } // while (nextStart)


	        row++;
	        nextStart = bucketStart;
	        if (allocatedCount === lastAllocatedCount) break; // Protect from infinite loops

	        lastAllocatedCount = allocatedCount;
	      } // while (allocatedCount)

	    }
	  },

	  /**
	   * Find features overlapping the given interval.  It is assumed that all features share the same chromosome.
	   *
	   * TODO -- significant overlap with FeatureCache, refactor to combine
	   *
	   * @param featureList
	   * @param start
	   * @param end
	   */
	  findOverlapping: function findOverlapping(featureList, start, end) {
	    if (!featureList || featureList.length === 0) {
	      return [];
	    } else {
	      var tree = buildIntervalTree(featureList);
	      var intervals = tree.findOverlapping(start, end);

	      if (intervals.length === 0) {
	        return [];
	      } else {
	        // Trim the list of features in the intervals to those
	        // overlapping the requested range.
	        // Assumption: features are sorted by start position
	        featureList = [];
	        intervals.forEach(function (interval) {
	          var intervalFeatures = interval.value;
	          var len = intervalFeatures.length;

	          for (var i = 0; i < len; i++) {
	            var feature = intervalFeatures[i];
	            if (feature.start > end) break;else if (feature.end > start) {
	              featureList.push(feature);
	            }
	          }
	        });
	        featureList.sort(function (a, b) {
	          return a.start - b.start;
	        });
	        return featureList;
	      }
	    }
	  }
	};
	/**
	 * Build an interval tree from the feature list for fast interval based queries.   We lump features in groups
	 * of 10, or total size / 100,   to reduce size of the tree.
	 *
	 * @param featureList
	 */

	function buildIntervalTree(featureList) {
	  var tree = new IntervalTree();
	  var len = featureList.length;
	  var chunkSize = Math.max(10, Math.round(len / 100));
	  featureList.sort(function (f1, f2) {
	    return f1.start === f2.start ? 0 : f1.start > f2.start ? 1 : -1;
	  });

	  var _loop = function _loop(i) {
	    var e = Math.min(len, i + chunkSize);
	    var subArray = featureList.slice(i, e);
	    var iStart = subArray[0].start;
	    var iEnd = iStart;
	    subArray.forEach(function (feature) {
	      iEnd = Math.max(iEnd, feature.end);
	    });
	    tree.insert(iStart, iEnd, subArray);
	  };

	  for (var i = 0; i < len; i += chunkSize) {
	    _loop(i);
	  }

	  return tree;
	}

	var log$2 = Math.log;
	var LOG10E = Math.LOG10E; // `Math.log10` method
	// https://tc39.github.io/ecma262/#sec-math.log10

	_export({
	  target: 'Math',
	  stat: true
	}, {
	  log10: function log10(x) {
	    return log$2(x) * LOG10E;
	  }
	});

	// https://tc39.github.io/ecma262/#sec-number.min_safe_integer

	_export({
	  target: 'Number',
	  stat: true
	}, {
	  MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF
	});

	var numberFormatter$1 = numberFormatter;

	var RulerTrack = /*#__PURE__*/function () {
	  function RulerTrack(browser) {
	    _classCallCheck(this, RulerTrack);

	    this.browser = browser;
	    this.height = 40;
	    this.name = "";
	    this.id = "ruler";
	    this.disableButtons = true;
	    this.ignoreTrackMenu = true;
	    this.order = Number.MIN_SAFE_INTEGER * 1e-2;
	    this.removable = false;
	    this.type = 'ruler';
	  }

	  _createClass(RulerTrack, [{
	    key: "updateLocusLabel",
	    value: function updateLocusLabel() {
	      var _iterator = _createForOfIteratorHelper(this.trackView.viewports),
	          _step;

	      try {
	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          var viewport = _step.value;
	          viewport.updateLocusLabel();
	        }
	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }
	    }
	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, start, end) {
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                return _context.abrupt("return", []);

	              case 1:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee);
	      }));

	      function getFeatures(_x, _x2, _x3) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "computePixelHeight",
	    value: function computePixelHeight(ignore) {
	      return this.height;
	    }
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      if (GenomeUtils.isWholeGenomeView(options.referenceFrame.chr)) {
	        options.viewport.rulerSweeper.disableMouseHandlers();
	        this.drawWholeGenome(options);
	      } else {
	        options.viewport.rulerSweeper.addMouseHandlers();
	        var tickHeight = 6;
	        var shim = 2;
	        var pixelWidthBP = 1 + Math.floor(options.referenceFrame.toBP(options.pixelWidth));
	        var tick = new Tick(pixelWidthBP, options);
	        tick.drawTicks(options, tickHeight, shim, this.height);
	        IGVGraphics.strokeLine(options.context, 0, this.height - shim, options.pixelWidth, this.height - shim);
	      }
	    }
	  }, {
	    key: "drawWholeGenome",
	    value: function drawWholeGenome(options) {
	      options.context.save();
	      IGVGraphics.fillRect(options.context, 0, 0, options.pixelWidth, options.pixelHeight, {
	        'fillStyle': 'white'
	      });
	      var y = 0;
	      var h = options.pixelHeight;

	      var _iterator2 = _createForOfIteratorHelper(this.browser.genome.wgChromosomeNames),
	          _step2;

	      try {
	        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	          var name = _step2.value;
	          var xBP = this.browser.genome.getCumulativeOffset(name);
	          var wBP = this.browser.genome.getChromosome(name).bpLength;
	          var x = Math.round(xBP / options.bpPerPixel);
	          var w = Math.round(wBP / options.bpPerPixel);
	          this.renderChromosomeRect(options.context, x, y, w, h, name);
	        }
	      } catch (err) {
	        _iterator2.e(err);
	      } finally {
	        _iterator2.f();
	      }

	      options.context.restore();
	    }
	  }, {
	    key: "renderChromosomeRect",
	    value: function renderChromosomeRect(ctx, x, y, w, h, name) {
	      ctx.textAlign = 'center';
	      ctx.textBaseline = 'middle';
	      ctx.font = '12px sans-serif'; // IGVGraphics.fillRect(ctx, x, y, w, h, { 'fillStyle' : toggleColor(this.browser.genome.wgChromosomeNames.indexOf(name)) });

	      IGVGraphics.strokeLine(ctx, x + w, y, x + w, y + h, {
	        strokeStyle: IGVColor.greyScale(191)
	      });
	      var shortName = name.startsWith("chr") ? name.substring(3) : name;

	      if (w > ctx.measureText(shortName).width) {
	        IGVGraphics.fillText(ctx, shortName, x + w / 2, y + h / 2, {
	          fillStyle: IGVColor.greyScale(68)
	        });
	      }
	    }
	  }, {
	    key: "supportsWholeGenome",
	    value: function supportsWholeGenome() {
	      return true;
	    }
	  }, {
	    key: "dispose",
	    value: function dispose() {// do stuff
	    }
	  }]);

	  return RulerTrack;
	}();

	var Tick = /*#__PURE__*/function () {
	  function Tick(pixelWidthBP, options) {
	    _classCallCheck(this, Tick);

	    initialize.call(this, pixelWidthBP, options);

	    function initialize(pixelWidthBP, options) {
	      var numberOfZeroes, majorUnit, unitMultiplier, numberOfMajorTicks, str;
	      var isSVGContext = options.context.isSVG || false;

	      if (pixelWidthBP < 10) {
	        set.call(this, 1, "bp", 1, isSVGContext);
	      }

	      numberOfZeroes = Math.floor(Math.log10(pixelWidthBP));

	      if (numberOfZeroes > 9) {
	        majorUnit = "gb";
	        unitMultiplier = 1e9;
	      } else if (numberOfZeroes > 6) {
	        majorUnit = "mb";
	        unitMultiplier = 1e6;
	      } else if (numberOfZeroes > 3) {
	        majorUnit = "kb";
	        unitMultiplier = 1e3;
	      } else {
	        majorUnit = "bp";
	        unitMultiplier = 1;
	      }

	      str = numberFormatter$1(Math.floor(pixelWidthBP / unitMultiplier)) + " " + majorUnit;
	      this.labelWidthBP = Math.round(options.referenceFrame.toBP(options.context.measureText(str).width));
	      numberOfMajorTicks = pixelWidthBP / Math.pow(10, numberOfZeroes - 1);

	      if (numberOfMajorTicks < 25) {
	        set.call(this, Math.pow(10, numberOfZeroes - 1), majorUnit, unitMultiplier, isSVGContext);
	      } else {
	        set.call(this, Math.pow(10, numberOfZeroes) / 2, majorUnit, unitMultiplier, isSVGContext);
	      }
	    }

	    function set(majorTick, majorUnit, unitMultiplier, isSVGContext) {
	      // reduce label frequency by half for SVG rendering
	      this.majorTick = true === isSVGContext ? 2 * majorTick : majorTick;
	      this.majorUnit = majorUnit;
	      this.halfTick = majorTick / 2;
	      this.unitMultiplier = unitMultiplier;
	    }
	  }

	  _createClass(Tick, [{
	    key: "drawTicks",
	    value: function drawTicks(options, tickHeight, shim, height) {
	      var numberOfTicks, bp, pixel, label, labelWidth, labelX, numer, floored;
	      numberOfTicks = Math.floor(options.bpStart / this.majorTick) - 1;
	      labelWidth = 0;
	      labelX = 0;
	      pixel = 0;

	      while (pixel < options.pixelWidth) {
	        bp = Math.floor(numberOfTicks * this.majorTick);
	        pixel = Math.round(options.referenceFrame.toPixels(bp - 1 - options.bpStart + 0.5));
	        label = numberFormatter$1(Math.floor(bp / this.unitMultiplier)) + " " + this.majorUnit;
	        labelWidth = options.context.measureText(label).width;
	        labelX = Math.round(pixel - labelWidth / 2);
	        IGVGraphics.fillText(options.context, label, labelX, height - tickHeight / 0.75);
	        IGVGraphics.strokeLine(options.context, pixel, height - tickHeight, pixel, height - shim);
	        ++numberOfTicks;
	      }

	      numberOfTicks = Math.floor(options.bpStart / this.halfTick) - 1;
	      pixel = 0;

	      while (pixel < options.pixelWidth) {
	        bp = Math.floor(numberOfTicks * this.halfTick);
	        pixel = Math.round(options.referenceFrame.toPixels(bp - 1 - options.bpStart + 0.5));
	        numer = bp / this.unitMultiplier;
	        floored = Math.floor(numer);

	        if (numer === floored && this.majorTick / this.labelWidthBP > 8) {
	          label = numberFormatter$1(Math.floor(numer)) + " " + this.majorUnit;
	          labelWidth = options.context.measureText(label).width;
	          labelX = pixel - labelWidth / 2;
	          IGVGraphics.fillText(options.context, label, labelX, height - tickHeight / 0.75);
	        }

	        IGVGraphics.strokeLine(options.context, pixel, height - tickHeight, pixel, height - shim);
	        ++numberOfTicks;
	      }
	    }
	  }, {
	    key: "description",
	    value: function description(blurb) {}
	  }]);

	  return Tick;
	}();

	var scrollbarExclusionTypes = new Set(['ruler', 'sequence', 'ideogram']);

	var TrackView = /*#__PURE__*/function () {
	  function TrackView(browser, $container, track) {
	    var _this = this;

	    _classCallCheck(this, TrackView);

	    this.browser = browser;
	    this.track = track;
	    track.trackView = this;
	    var $track = $('<div class="igv-track">');
	    this.trackDiv = $track.get(0);
	    $container.append($track);
	    this.namespace = '.trackview_' + guid();

	    if (track instanceof RulerTrack) {
	      this.trackDiv.dataset.rulerTrack = "rulerTrack";
	    }

	    if (track.height) {
	      this.trackDiv.style.height = track.height + "px";
	    } // left hand gutter


	    this.appendLeftHandGutter($track);
	    this.$viewportContainer = $('<div class="igv-viewport-container">');
	    $track.append(this.$viewportContainer); // viewport container DOM elements

	    populateViewportContainer(browser, browser.referenceFrameList, this); // Track drag handle

	    if ('ideogram' === track.type || 'ruler' === track.type) ; else {
	      this.attachDragWidget($track, this.$viewportContainer);
	    } // right hand gutter


	    if (true === track.ignoreTrackMenu) ; else {
	      this.appendRightHandGutter($track);
	    } // color picker


	    var trackColors = [];
	    var color = track.color || track.defaultColor;

	    if (isString(color)) {
	      trackColors.push(color);
	    }

	    if (track.altColor && isString(track.altColor)) {
	      trackColors.push(track.altColor);
	    }

	    var defaultColors = trackColors.map(function (c) {
	      return c.startsWith("#") ? c : c.startsWith("rgb(") ? IGVColor.rgbToHex(c) : IGVColor.colorNameToHex(c);
	    });
	    var options = {
	      parent: this.trackDiv,
	      top: undefined,
	      left: undefined,
	      width: 432,
	      height: undefined,
	      defaultColors: defaultColors,
	      colorHandler: function colorHandler(color) {
	        _this.track.color = color;

	        _this.repaintViews();
	      }
	    };
	    this.colorPicker = new ColorPicker(options); // alt color picker -- TODO pass handler in at "show" time and use 1 color picker

	    options.colorHandler = function (color) {
	      _this.track.altColor = color;

	      _this.repaintViews();
	    };

	    this.altColorPicker = new ColorPicker(options);
	  }

	  _createClass(TrackView, [{
	    key: "renderSVGContext",
	    value: function renderSVGContext(context, offset) {
	      var _iterator = _createForOfIteratorHelper(this.viewports),
	          _step;

	      try {
	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          var viewport = _step.value;
	          var index = viewport.browser.referenceFrameList.indexOf(viewport.referenceFrame);

	          var _viewport$$viewport$g = viewport.$viewport.get(0).getBoundingClientRect(),
	              y = _viewport$$viewport$g.y,
	              width = _viewport$$viewport$g.width;

	          var o = {
	            deltaX: offset.deltaX + index * width,
	            deltaY: offset.deltaY + y
	          };
	          viewport.renderSVGContext(context, o);
	        }
	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }
	    }
	  }, {
	    key: "attachScrollbar",
	    value: function attachScrollbar($track, $viewportContainer, viewports) {
	      if ("hidden" === $viewportContainer.find('.igv-viewport').css("overflow-y")) {
	        this.scrollbar = new TrackScrollbar($viewportContainer, viewports);
	        this.scrollbar.$outerScroll.insertAfter($viewportContainer);
	      }
	    }
	  }, {
	    key: "removeViewportForReferenceFrame",
	    value: function removeViewportForReferenceFrame(referenceFrame) {
	      var index = -1;

	      for (var i = 0; i < this.viewports.length; i++) {
	        if (this.viewports[i].referenceFrame === referenceFrame) {
	          index = i;
	          break;
	        }
	      }

	      if (index >= 0) {
	        this.viewports[index].$viewport.remove();
	        this.viewports.splice(index, 1);
	        this.updateViewportForMultiLocus();
	      }
	    }
	  }, {
	    key: "updateViewportForMultiLocus",
	    value: function updateViewportForMultiLocus() {
	      if ('ruler' === this.track.type) {
	        if (this.viewports.length > 1) {
	          this.$viewportContainer.find('.igv-multi-locus-panel-close-container').show();
	          this.$viewportContainer.find('.igv-multi-locus-panel-label-div').show();
	          this.track.updateLocusLabel();
	        } else {
	          this.$viewportContainer.find('.igv-multi-locus-panel-close-container').hide();
	          this.$viewportContainer.find('.igv-multi-locus-panel-label-div').hide();
	        }
	      }
	    }
	  }, {
	    key: "appendLeftHandGutter",
	    value: function appendLeftHandGutter($track) {
	      var _this2 = this;

	      var $leftHandGutter = $('<div class="igv-left-hand-gutter">');
	      this.leftHandGutter = $leftHandGutter[0];
	      $track.append($leftHandGutter);

	      if (typeof this.track.paintAxis === 'function') {
	        if (this.track.dataRange) {
	          $leftHandGutter.click(function (e) {
	            _this2.browser.dataRangeDialog.configure({
	              trackView: self
	            });

	            _this2.browser.dataRangeDialog.present($(self.trackDiv));
	          });
	          $leftHandGutter.addClass('igv-clickable');
	        }

	        var $canvas = $('<canvas class ="igv-canvas">');
	        $leftHandGutter.append($canvas);
	        this.controlCanvas = $canvas.get(0);
	        this.resizeControlCanvas($leftHandGutter.outerWidth(), $leftHandGutter.outerHeight());
	      }
	    }
	  }, {
	    key: "appendRightHandGutter",
	    value: function appendRightHandGutter($parent) {
	      var $div = $('<div class="igv-right-hand-gutter">');
	      $parent.append($div);
	      this.createTrackGearPopup($div);
	    }
	  }, {
	    key: "dataRange",
	    value: function dataRange() {
	      return this.track.dataRange ? this.track.dataRange : undefined;
	    }
	  }, {
	    key: "setDataRange",
	    value: function setDataRange(min, max) {
	      if (min !== undefined) {
	        this.track.dataRange.min = min;
	      }

	      if (max !== undefined) {
	        this.track.dataRange.max = max;
	      }

	      this.track.autoscale = false;
	      this.repaintViews();
	    }
	  }, {
	    key: "presentColorPicker",
	    value: function presentColorPicker(option) {
	      if (option === "altColor") {
	        this.altColorPicker.show();
	      } else {
	        this.colorPicker.show();
	      }
	    }
	  }, {
	    key: "setTrackHeight",
	    value: function setTrackHeight(newHeight, force) {
	      if (!force) {
	        if (this.track.minHeight) {
	          newHeight = Math.max(this.track.minHeight, newHeight);
	        }

	        if (this.track.maxHeight) {
	          newHeight = Math.min(this.track.maxHeight, newHeight);
	        }
	      }

	      this.track.height = newHeight;
	      this.track.config.height = newHeight;
	      $(this.trackDiv).height(newHeight); // If the track does not manage its own content height set it here

	      if (typeof this.track.computePixelHeight !== "function") {
	        this.viewports.forEach(function (vp) {
	          vp.setContentHeight(newHeight);
	          if (vp.tile) vp.tile.invalidate = true;
	        });
	        this.repaintViews();
	      }

	      this.resizeControlCanvas($(this.leftHandGutter).outerWidth(), newHeight);

	      if (this.track.paintAxis) {
	        this.track.paintAxis(this.controlCtx, $(this.controlCanvas).width(), $(this.controlCanvas).height());
	      }

	      if (this.scrollbar) {
	        this.scrollbar.update();
	      }
	    }
	  }, {
	    key: "isLoading",
	    value: function isLoading() {
	      for (var i = 0; i < this.viewports.length; i++) {
	        if (this.viewports[i].isLoading()) return true;
	      }
	    }
	  }, {
	    key: "resize",
	    value: function resize() {
	      var viewportWidth = this.browser.calculateViewportWidth(this.browser.referenceFrameList.length);

	      var _iterator2 = _createForOfIteratorHelper(this.viewports),
	          _step2;

	      try {
	        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	          var viewport = _step2.value;
	          viewport.setWidth(viewportWidth);
	        }
	      } catch (err) {
	        _iterator2.e(err);
	      } finally {
	        _iterator2.f();
	      }

	      var $leftHandGutter = $(this.leftHandGutter);
	      this.resizeControlCanvas($leftHandGutter.outerWidth(), $leftHandGutter.outerHeight());
	      this.updateViews(true);
	    }
	    /**
	     * Repaint all viewports without loading any new data.   Use this for events that change visual aspect of data,
	     * e.g. color, sort order, etc, but do not change the genomic state.
	     */

	  }, {
	    key: "repaintViews",
	    value: function repaintViews() {
	      var _iterator3 = _createForOfIteratorHelper(this.viewports),
	          _step3;

	      try {
	        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	          var viewport = _step3.value;
	          viewport.repaint();
	        }
	      } catch (err) {
	        _iterator3.e(err);
	      } finally {
	        _iterator3.f();
	      }

	      if (this.track.paintAxis) {
	        this.track.paintAxis(this.controlCtx, $(this.controlCanvas).width(), $(this.controlCanvas).height());
	      }
	    }
	    /**
	     * Update viewports to reflect current genomic state, possibly loading additional data.
	     */

	  }, {
	    key: "updateViews",
	    value: function () {
	      var _updateViews = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(force) {
	        var visibleViewports, rpV, _iterator4, _step4, _vp3, isDragging, allFeatures, _iterator5, _step5, vp, referenceFrame, start, end, max, _iterator6, _step6, _vp, _iterator7, _step7, _vp2;

	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (this.browser && this.browser.referenceFrameList) {
	                  _context.next = 2;
	                  break;
	                }

	                return _context.abrupt("return");

	              case 2:
	                visibleViewports = this.viewports.filter(function (vp) {
	                  return vp.isVisible();
	                }); // Shift viewports left/right to current genomic state (pans canvas)

	                visibleViewports.forEach(function (viewport) {
	                  viewport.shift();
	                }); // rpv: viewports whose image (canvas) does not fully cover current genomic range

	                rpV = this.viewportsToReload(force); // Trigger viewport to load features needed to cover current genomic range

	                _iterator4 = _createForOfIteratorHelper(rpV);
	                _context.prev = 6;

	                _iterator4.s();

	              case 8:
	                if ((_step4 = _iterator4.n()).done) {
	                  _context.next = 14;
	                  break;
	                }

	                _vp3 = _step4.value;
	                _context.next = 12;
	                return _vp3.loadFeatures();

	              case 12:
	                _context.next = 8;
	                break;

	              case 14:
	                _context.next = 19;
	                break;

	              case 16:
	                _context.prev = 16;
	                _context.t0 = _context["catch"](6);

	                _iterator4.e(_context.t0);

	              case 19:
	                _context.prev = 19;

	                _iterator4.f();

	                return _context.finish(19);

	              case 22:
	                if (!this.disposed) {
	                  _context.next = 24;
	                  break;
	                }

	                return _context.abrupt("return");

	              case 24:
	                // Track was removed during load
	                isDragging = this.browser.dragObject;

	                if (!isDragging && this.track.autoscale) {
	                  allFeatures = [];
	                  _iterator5 = _createForOfIteratorHelper(visibleViewports);

	                  try {
	                    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
	                      vp = _step5.value;
	                      referenceFrame = vp.referenceFrame;
	                      start = referenceFrame.start;
	                      end = start + referenceFrame.toBP($(vp.contentDiv).width());

	                      if (vp.tile && vp.tile.features) {
	                        if (typeof vp.tile.features.getMax === 'function') {
	                          max = vp.tile.features.getMax(start, end);
	                          allFeatures.push({
	                            value: max
	                          });
	                        } else {
	                          allFeatures = allFeatures.concat(FeatureUtils.findOverlapping(vp.tile.features, start, end));
	                        }
	                      }
	                    }
	                  } catch (err) {
	                    _iterator5.e(err);
	                  } finally {
	                    _iterator5.f();
	                  }

	                  if (typeof this.track.doAutoscale === 'function') {
	                    this.track.dataRange = this.track.doAutoscale(allFeatures);
	                  } else {
	                    this.track.dataRange = doAutoscale(allFeatures);
	                  }
	                } // Must repaint all viewports if autoscaling


	                if (!isDragging && (this.track.autoscale || this.track.autoscaleGroup)) {
	                  _iterator6 = _createForOfIteratorHelper(visibleViewports);

	                  try {
	                    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
	                      _vp = _step6.value;

	                      _vp.repaint();
	                    }
	                  } catch (err) {
	                    _iterator6.e(err);
	                  } finally {
	                    _iterator6.f();
	                  }
	                } else {
	                  _iterator7 = _createForOfIteratorHelper(rpV);

	                  try {
	                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
	                      _vp2 = _step7.value;

	                      _vp2.repaint();
	                    }
	                  } catch (err) {
	                    _iterator7.e(err);
	                  } finally {
	                    _iterator7.f();
	                  }
	                }

	                this.adjustTrackHeight();

	              case 28:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this, [[6, 16, 19, 22]]);
	      }));

	      function updateViews(_x) {
	        return _updateViews.apply(this, arguments);
	      }

	      return updateViews;
	    }()
	    /**
	     * Return a promise to get all in-view features.  Used for group autoscaling.
	     */

	  }, {
	    key: "getInViewFeatures",
	    value: function () {
	      var _getInViewFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(force) {
	        var rpV, promises, allFeatures, _iterator8, _step8, vp, referenceFrame, start, end, max;

	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                if (this.browser && this.browser.referenceFrameList) {
	                  _context2.next = 2;
	                  break;
	                }

	                return _context2.abrupt("return", []);

	              case 2:
	                // List of viewports that need reloading
	                rpV = this.viewportsToReload(force);
	                promises = rpV.map(function (vp) {
	                  return vp.loadFeatures();
	                });
	                _context2.next = 6;
	                return Promise.all(promises);

	              case 6:
	                allFeatures = [];
	                _iterator8 = _createForOfIteratorHelper(this.viewports);

	                try {
	                  for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
	                    vp = _step8.value;

	                    if (vp.tile && vp.tile.features) {
	                      referenceFrame = vp.referenceFrame;
	                      start = referenceFrame.start;
	                      end = start + referenceFrame.toBP($(vp.contentDiv).width());

	                      if (typeof vp.tile.features.getMax === 'function') {
	                        max = vp.tile.features.getMax(start, end);
	                        allFeatures.push({
	                          value: max
	                        });
	                      } else {
	                        allFeatures = allFeatures.concat(FeatureUtils.findOverlapping(vp.tile.features, start, end));
	                      }
	                    }
	                  }
	                } catch (err) {
	                  _iterator8.e(err);
	                } finally {
	                  _iterator8.f();
	                }

	                return _context2.abrupt("return", allFeatures);

	              case 10:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function getInViewFeatures(_x2) {
	        return _getInViewFeatures.apply(this, arguments);
	      }

	      return getInViewFeatures;
	    }()
	  }, {
	    key: "checkContentHeight",
	    value: function checkContentHeight() {
	      this.viewports.forEach(function (vp) {
	        vp.checkContentHeight();
	      });
	      this.adjustTrackHeight();
	    }
	  }, {
	    key: "adjustTrackHeight",
	    value: function adjustTrackHeight() {
	      var maxHeight = maxViewportContentHeight(this.viewports);

	      if (this.track.autoHeight) {
	        this.setTrackHeight(maxHeight, false);
	      } else if (this.track.paintAxis) {
	        // Avoid duplication, paintAxis is already called in setTrackHeight
	        this.track.paintAxis(this.controlCtx, $(this.controlCanvas).width(), $(this.controlCanvas).height());
	      }

	      if (this.scrollbar) {
	        var currentTop = this.viewports[0].getContentTop();
	        var heights = this.viewports.map(function (viewport) {
	          return viewport.getContentHeight();
	        });
	        var minContentHeight = Math.min.apply(Math, _toConsumableArray(heights));
	        var newTop = Math.min(0, this.$viewportContainer.height() - minContentHeight);

	        if (currentTop < newTop) {
	          this.viewports.forEach(function (viewport) {
	            $(viewport.contentDiv).css("top", newTop + "px");
	          });
	        }

	        this.scrollbar.update();
	      }
	    }
	  }, {
	    key: "resizeControlCanvas",
	    value: function resizeControlCanvas(width, height) {
	      var devicePixelRatio = window.devicePixelRatio;

	      if (this.leftHandGutter) {
	        if (this.controlCanvas) {
	          $(this.controlCanvas).remove();
	        }

	        var $canvas = $('<canvas class ="igv-canvas">');
	        this.controlCanvas = $canvas[0];
	        $(this.leftHandGutter).append($canvas);
	        this.controlCanvas.height = devicePixelRatio * height;
	        this.controlCanvas.width = devicePixelRatio * width;
	        this.controlCanvas.style.height = height + "px";
	        this.controlCanvas.style.width = width + "px";
	        this.controlCtx = this.controlCanvas.getContext("2d");
	        this.controlCtx.scale(devicePixelRatio, devicePixelRatio);
	      }
	    }
	  }, {
	    key: "attachDragWidget",
	    value: function attachDragWidget($track, $viewportContainer) {
	      var self = this;
	      var browser = this.browser;
	      this.$trackDragScrim = $('<div class="igv-track-drag-scrim">');
	      $viewportContainer.append(this.$trackDragScrim);
	      this.$trackDragScrim.hide();
	      self.$trackManipulationHandle = $('<div class="igv-track-manipulation-handle">');
	      $track.append(self.$trackManipulationHandle);
	      self.$trackManipulationHandle.on('mousedown', function (e) {
	        e.preventDefault();
	        e.stopPropagation();
	        self.$trackDragScrim.show();
	        browser.startTrackDrag(self);
	      });
	      self.$trackManipulationHandle.on('mouseup', function (e) {
	        e.preventDefault();
	        e.stopPropagation();
	        browser.endTrackDrag();
	        self.$trackDragScrim.hide();
	      });
	      $track.on('mouseenter', function (e) {
	        if (browser.dragTrack) {
	          e.preventDefault();
	          e.stopPropagation();
	          browser.updateTrackDrag(self);
	        }
	      });
	      self.$trackManipulationHandle.on('mouseleave', function (e) {
	        if (!browser.dragTrack) {
	          e.preventDefault();
	          e.stopPropagation();
	          self.$trackDragScrim.hide();
	        }
	      });
	    }
	  }, {
	    key: "viewportsToReload",
	    value: function viewportsToReload(force) {
	      // List of viewports that need reloading
	      var rpV = this.viewports.filter(function (viewport) {
	        if (!viewport.isVisible()) {
	          return false;
	        }

	        if (!viewport.checkZoomIn()) {
	          return false;
	        } else {
	          var referenceFrame = viewport.referenceFrame;
	          var chr = viewport.referenceFrame.chr;
	          var start = referenceFrame.start;
	          var end = start + referenceFrame.toBP($(viewport.contentDiv).width());
	          var bpPerPixel = referenceFrame.bpPerPixel;
	          return force || !viewport.tile || viewport.tile.invalidate || !viewport.tile.containsRange(chr, start, end, bpPerPixel);
	        }
	      });
	      return rpV;
	    }
	  }, {
	    key: "createTrackGearPopup",
	    value: function createTrackGearPopup($parent) {
	      var _this3 = this;

	      var $container = $("<div>", {
	        class: 'igv-trackgear-container'
	      });
	      $parent.append($container);
	      $container.append(createIcon$2('cog'));
	      this.trackGearPopup = new MenuPopup($parent);
	      this.trackGearPopup.$popover.hide();
	      $container.click(function (e) {
	        e.preventDefault();
	        e.stopPropagation();

	        _this3.trackGearPopup.presentMenuList(-_this3.trackGearPopup.$popover.width(), 0, MenuUtils.trackMenuItemList(_this3));
	      });
	    }
	    /**
	     * Do any cleanup here
	     */

	  }, {
	    key: "dispose",
	    value: function dispose() {
	      var self = this;

	      if (this.$trackManipulationHandle) {
	        this.$trackManipulationHandle.off();
	      }

	      if (this.scrollbar) {
	        this.scrollbar.dispose();
	      }

	      $(document).off(this.namespace);

	      if (typeof this.track.dispose === "function") {
	        this.track.dispose();
	      }

	      var track = this.track;

	      if (typeof track.dispose === 'function') {
	        track.dispose();
	      }

	      Object.keys(track).forEach(function (key) {
	        track[key] = undefined;
	      });
	      this.viewports.forEach(function (viewport) {
	        viewport.dispose();
	      });

	      Object.keys(this).forEach(function (key) {
	        self[key] = undefined;
	      });
	      this.disposed = true;
	    }
	  }, {
	    key: "scrollBy",
	    value: function scrollBy(delta) {
	      this.scrollbar.moveScrollerBy(delta);
	    }
	  }]);

	  return TrackView;
	}();

	function emptyViewportContainers(trackViews) {
	  var _iterator9 = _createForOfIteratorHelper(trackViews),
	      _step9;

	  try {
	    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
	      var trackView = _step9.value;

	      if (trackView.scrollbar) {
	        trackView.scrollbar.$outerScroll.remove();
	        trackView.scrollbar = null;
	        trackView.scrollbar = undefined;
	      } else {
	        $(trackView.trackDiv).find('.igv-scrollbar-shim').remove();
	      }

	      var _iterator10 = _createForOfIteratorHelper(trackView.viewports),
	          _step10;

	      try {
	        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
	          var viewport = _step10.value;

	          if (viewport.rulerSweeper) {
	            viewport.rulerSweeper.$rulerSweeper.remove();
	          }

	          if (viewport.popover) {
	            viewport.popover.dispose();
	          }

	          viewport.$viewport.remove();
	        }
	      } catch (err) {
	        _iterator10.e(err);
	      } finally {
	        _iterator10.f();
	      }

	      delete trackView.viewports;
	      delete trackView.scrollbar;
	    }
	  } catch (err) {
	    _iterator9.e(err);
	  } finally {
	    _iterator9.f();
	  }
	}

	function populateViewportContainer(browser, referenceFrameList, trackView) {
	  var width = browser.calculateViewportWidth(referenceFrameList.length);
	  trackView.viewports = [];

	  var _iterator11 = _createForOfIteratorHelper(referenceFrameList),
	      _step11;

	  try {
	    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
	      var referenceFrame = _step11.value;
	      var viewport = createViewport(trackView, referenceFrameList, referenceFrameList.indexOf(referenceFrame), width);
	      trackView.viewports.push(viewport);
	    }
	  } catch (err) {
	    _iterator11.e(err);
	  } finally {
	    _iterator11.f();
	  }

	  updateViewportShims(trackView.viewports, trackView.$viewportContainer);
	  trackView.updateViewportForMultiLocus();

	  if (false === scrollbarExclusionTypes.has(trackView.track.type)) {
	    trackView.attachScrollbar($(trackView.trackDiv), trackView.$viewportContainer, trackView.viewports);
	  } else {
	    var $shim = $('<div>', {
	      class: 'igv-scrollbar-shim'
	    });
	    $shim.insertAfter(trackView.$viewportContainer);
	  }
	}

	function updateViewportShims(viewports, $viewportContainer) {
	  var $trackContainer = $('.igv-track-container');
	  $trackContainer.find('.igv-multi-locus-separator').remove();

	  var _documentOffset = documentOffset($trackContainer.get(0)),
	      tx = _documentOffset.x;

	  $viewportContainer.find('.igv-viewport-multi-locus-gap-shim').remove();

	  if (viewports.length > 1) {
	    var _iterator12 = _createForOfIteratorHelper(viewports),
	        _step12;

	    try {
	      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
	        var viewport = _step12.value;

	        if (viewports.indexOf(viewport) <= viewports.length - 2) {
	          var $viewport = viewport.$viewport;
	          var $shim = $('<div class="igv-viewport-multi-locus-gap-shim">');
	          $shim.insertAfter($viewport);

	          var _documentOffset2 = documentOffset($shim.get(0)),
	              sx = _documentOffset2.x; // console.log(`trackContainer x ${ tx }. shim x ${ sx }`)


	          var $multilLocusSeparator = $('<div class="igv-multi-locus-separator">');
	          $trackContainer.append($multilLocusSeparator);
	          $multilLocusSeparator.get(0).style.left = "".concat(sx - tx, "px");
	        }
	      }
	    } catch (err) {
	      _iterator12.e(err);
	    } finally {
	      _iterator12.f();
	    }
	  }
	}

	function documentOffset(el) {
	  var _el$getBoundingClient = el.getBoundingClientRect(),
	      x = _el$getBoundingClient.x,
	      y = _el$getBoundingClient.y;

	  var scrollX = window.pageXOffset || document.documentElement.scrollLeft;
	  var scrollY = window.pageYOffset || document.documentElement.scrollTop;
	  return {
	    x: x + scrollX,
	    y: y + scrollY
	  };
	}

	function maxViewportContentHeight(viewports) {
	  var heights = viewports.map(function (viewport) {
	    return viewport.getContentHeight();
	  });
	  return Math.max.apply(Math, _toConsumableArray(heights));
	}

	var TrackScrollbar = /*#__PURE__*/function () {
	  function TrackScrollbar($viewportContainer, viewports) {
	    var _this4 = this;

	    _classCallCheck(this, TrackScrollbar);

	    var lastY; // Define mouse events first, use arrow function so "this" is in scope

	    var mouseMove = function mouseMove(event) {
	      event.preventDefault();
	      event.stopPropagation();
	      var page = pageCoordinates$1(event);

	      _this4.moveScrollerBy(page.y - lastY);

	      lastY = page.y;
	    };

	    var mouseUp = function mouseUp(event) {
	      $(document).off(_this4.namespace);
	    };

	    var mouseDown = function mouseDown(event) {
	      event.preventDefault();
	      var page = pageCoordinates$1(event);
	      lastY = page.y;
	      $(document).on('mousemove' + namespace, mouseMove);
	      $(document).on('mouseup' + namespace, mouseUp);
	      $(document).on('mouseleave' + namespace, mouseUp); // prevents start of horizontal track panning)

	      event.stopPropagation();
	    };

	    var namespace = '.trackscrollbar' + guid();
	    this.namespace = namespace;
	    this.$outerScroll = $('<div class="igv-scrollbar-outer-div">');
	    this.$innerScroll = $('<div>');
	    this.$outerScroll.append(this.$innerScroll);
	    this.$viewportContainer = $viewportContainer;
	    this.viewports = viewports;
	    this.$innerScroll.on("mousedown", mouseDown);
	    this.$innerScroll.on("click", function (event) {
	      event.stopPropagation();
	    });
	    this.$outerScroll.on("click", function (event) {
	      _this4.moveScrollerBy(event.offsetY - _this4.$innerScroll.height() / 2);

	      event.stopPropagation();
	    });
	  }

	  _createClass(TrackScrollbar, [{
	    key: "moveScrollerBy",
	    value: function moveScrollerBy(delta) {
	      var y = this.$innerScroll.position().top + delta;
	      this.moveScrollerTo(y);
	    }
	  }, {
	    key: "moveScrollerTo",
	    value: function moveScrollerTo(y) {
	      var outerScrollHeight = this.$outerScroll.height();
	      var innerScrollHeight = this.$innerScroll.height();
	      var newTop = Math.min(Math.max(0, y), outerScrollHeight - innerScrollHeight);
	      var contentDivHeight = maxViewportContentHeight(this.viewports);
	      var contentTop = -Math.round(newTop * (contentDivHeight / this.$viewportContainer.height()));
	      this.$innerScroll.css("top", newTop + "px");

	      var _iterator13 = _createForOfIteratorHelper(this.viewports),
	          _step13;

	      try {
	        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
	          var viewport = _step13.value;
	          viewport.setTop(contentTop);
	        }
	      } catch (err) {
	        _iterator13.e(err);
	      } finally {
	        _iterator13.f();
	      }
	    }
	  }, {
	    key: "dispose",
	    value: function dispose() {
	      $(window).off(this.namespace);
	      this.$innerScroll.off();
	    }
	  }, {
	    key: "update",
	    value: function update() {
	      var viewportContainerHeight = this.$viewportContainer.height();
	      var viewportContentHeight = maxViewportContentHeight(this.viewports);
	      var innerScrollHeight = Math.round(viewportContainerHeight / viewportContentHeight * viewportContainerHeight);

	      if (viewportContentHeight > viewportContainerHeight) {
	        this.$innerScroll.show();
	        this.$innerScroll.height(innerScrollHeight);
	      } else {
	        this.$innerScroll.hide();
	      }
	    }
	  }]);

	  return TrackScrollbar;
	}();

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2016-2017 The Regents of the University of California
	 * Author: Jim Robinson
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	function getDataWrapper(data) {
	  if (typeof data == 'string' || data instanceof String) {
	    return new StringDataWrapper(data);
	  } else {
	    return new ByteArrayDataWrapper(data);
	  }
	} // Data might be a string, or an UInt8Array


	var StringDataWrapper = function StringDataWrapper(string) {
	  this.data = string;
	  this.ptr = 0;
	};

	StringDataWrapper.prototype.nextLine = function () {
	  //return this.split(/\r\n|\n|\r/gm);
	  var start = this.ptr,
	      idx = this.data.indexOf('\n', start);

	  if (idx > 0) {
	    this.ptr = idx + 1; // Advance pointer for next line

	    return idx === start ? "" : this.data.substring(start, idx).trim();
	  } else {
	    // Last line
	    this.ptr = this.data.length;
	    return start >= this.data.length ? undefined : this.data.substring(start).trim();
	  }
	}; // For use in applications where whitespace carries meaning
	// Returns "" for an empty row (not undefined like nextLine), since this is needed in AED


	StringDataWrapper.prototype.nextLineNoTrim = function () {
	  var start = this.ptr,
	      idx = this.data.indexOf('\n', start),
	      data = this.data;

	  if (idx > 0) {
	    this.ptr = idx + 1; // Advance pointer for next line

	    if (idx > start && data.charAt(idx - 1) === '\r') {
	      // Trim CR manually in CR/LF sequence
	      return data.substring(start, idx - 1);
	    }

	    return data.substring(start, idx);
	  } else {
	    var length = data.length;
	    this.ptr = length; // Return undefined only at the very end of the data

	    return start >= length ? undefined : data.substring(start);
	  }
	};

	var ByteArrayDataWrapper = function ByteArrayDataWrapper(array) {
	  this.data = array;
	  this.length = this.data.length;
	  this.ptr = 0;
	};

	ByteArrayDataWrapper.prototype.nextLine = function () {
	  var c, result;
	  result = "";
	  if (this.ptr >= this.length) return undefined;

	  for (var i = this.ptr; i < this.length; i++) {
	    c = String.fromCharCode(this.data[i]);
	    if (c === '\r') continue;
	    if (c === '\n') break;
	    result = result + c;
	  }

	  this.ptr = i + 1;
	  return result;
	}; // The ByteArrayDataWrapper does not do any trimming by default, can reuse the function


	ByteArrayDataWrapper.prototype.nextLineNoTrim = ByteArrayDataWrapper.prototype.nextLine;

	var trim$2 = stringTrim.trim;
	var $parseFloat = global_1.parseFloat;
	var FORCED$9 = 1 / $parseFloat(whitespaces + '-0') !== -Infinity; // `parseFloat` method
	// https://tc39.github.io/ecma262/#sec-parsefloat-string

	var numberParseFloat = FORCED$9 ? function parseFloat(string) {
	  var trimmedString = trim$2(String(string));
	  var result = $parseFloat(trimmedString);
	  return result === 0 && trimmedString.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;

	// https://tc39.github.io/ecma262/#sec-number.parseFloat

	_export({
	  target: 'Number',
	  stat: true,
	  forced: Number.parseFloat != numberParseFloat
	}, {
	  parseFloat: numberParseFloat
	});

	/**
	 * Decoder for bedpe records.
	 *
	 * Bedpe format was created by Aaron Quinlan et al as part of the bedtools project.
	 * The spec is here:  https://bedtools.readthedocs.io/en/latest/content/general-usage.html,  however there
	 * are off spec variants, an important one being a 7 column format with score in place of the standard
	 * name column.
	 *
	 * Another common variant is a "hiccups" output file, which is standard bedpe with the exception of a header line
	 * of the form
	 * chr1    x1    x2    chr2    y1    y2    name    score    strand1    strand2    color    observed    expectedBL    expectedDonut    expectedH    expectedV    fdrBL    fdrDonut    fdrH    fdrV
	 *
	 * @param tokens
	 * @param ignore
	 * @returns {{start1: number, end2: number, end1: number, chr1: *, chr2: *, start2: number}|undefined}
	 */

	function decodeBedpe(tokens, header) {
	  if (tokens.length < 6) {
	    return undefined;
	  }

	  var feature = {
	    chr1: tokens[0],
	    start1: Number.parseInt(tokens[1]),
	    end1: Number.parseInt(tokens[2]),
	    chr2: tokens[3],
	    start2: Number.parseInt(tokens[4]),
	    end2: Number.parseInt(tokens[5])
	  };

	  if (isNaN(feature.start1) || isNaN(feature.end1) || isNaN(feature.start2) || isNaN(feature.end2)) {
	    //throw Error(`Error parsing line: ${tokens.join('\t')}`);
	    return undefined;
	  }

	  if (tokens.length > 6 && tokens[6] !== ".") {
	    feature.name = tokens[6];
	  }

	  if (tokens.length > 7 && tokens[7] !== ".") {
	    feature.score = parseFloat(tokens[7]);
	  }

	  if (tokens.length > 8 && tokens[8] !== ".") {
	    feature.strand1 = tokens[8];
	  }

	  if (tokens.length > 9 && tokens[9] !== ".") {
	    feature.strand2 = tokens[9];
	  } // Optional extra columns


	  if (header) {
	    var colorColumn = header.colorColumn;

	    if (colorColumn && colorColumn < tokens.length) {
	      feature.color = IGVColor.createColorString(tokens[colorColumn]);
	    }

	    var thicknessColumn = header.thicknessColumn;

	    if (thicknessColumn && thicknessColumn < tokens.length) {
	      feature.thickness = tokens[thicknessColumn];
	    }

	    if (tokens.length > 10 && header.columnNames && header.columnNames.length === tokens.length) {
	      feature.extras = tokens.slice(10);
	    }
	  } // Set total extent of feature


	  if (feature.chr1 === feature.chr2) {
	    feature.chr = feature.chr1;
	    feature.start = Math.min(feature.start1, feature.start2);
	    feature.end = Math.max(feature.end1, feature.end2);
	  }

	  return feature;
	}
	/**
	 * Hack for non-standard bedPE formats, where numeric score can be in column 7 (name field from spec)
	 * @param features
	 */


	function fixBedPE(features) {
	  if (features.length == 0) return; // Assume all features have same properties

	  var firstFeature = features[0];

	  if (firstFeature.score === undefined && firstFeature.name !== undefined) {
	    // Name field (col 7) is sometimes used for score.
	    var _iterator = _createForOfIteratorHelper(features),
	        _step;

	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var f = _step.value;
	        if (!(isNumber(f.name) || f.name === '.')) return;
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }

	    var _iterator2 = _createForOfIteratorHelper(features),
	        _step2;

	    try {
	      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	        var _f = _step2.value;
	        _f.score = parseFloat(_f.name);
	        delete _f.name;
	      }
	    } catch (err) {
	      _iterator2.e(err);
	    } finally {
	      _iterator2.f();
	    }
	  } // Make copies of inter-chr features, one for each chromosome


	  var interChrFeatures = features.filter(function (f) {
	    return f.chr1 !== f.chr2;
	  });

	  var _iterator3 = _createForOfIteratorHelper(interChrFeatures),
	      _step3;

	  try {
	    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	      var f1 = _step3.value;
	      var f2 = Object.assign({}, f1);
	      f2.dup = true;
	      features.push(f2);
	      f1.chr = f1.chr1;
	      f1.start = f1.start1;
	      f1.end = f1.end1;
	      f2.chr = f2.chr2;
	      f2.start = f2.start2;
	      f2.end = f2.end2;
	    }
	  } catch (err) {
	    _iterator3.e(err);
	  } finally {
	    _iterator3.f();
	  }
	}
	/**
	 * Special decoder for Hic Domain files.   In these files feature1 == feature2, they are really bed records.
	 * @param tokens
	 * @param ignore
	 * @returns {*}
	 */


	function decodeBedpeDomain(tokens, header) {
	  if (tokens.length < 8) return undefined;
	  return {
	    chr: tokens[0],
	    start: Number.parseInt(tokens[1]),
	    end: Number.parseInt(tokens[2]),
	    color: IGVColor.createColorString(tokens[6]),
	    value: Number.parseFloat(tokens[7])
	  };
	}

	/**
	 * Decode UCSC "interact" files.  See https://genome.ucsc.edu/goldenpath/help/interact.html
	 *
	 0  string chrom;        "Chromosome (or contig, scaffold, etc.). For interchromosomal, use 2 records"
	 1  uint chromStart;     "Start position of lower region. For interchromosomal, set to chromStart of this region"
	 2  uint chromEnd;       "End position of upper region. For interchromosomal, set to chromEnd of this region"
	 3  string name;         "Name of item, for display.  Usually 'sourceName/targetName/exp' or empty"
	 4  uint score;          "Score (0-1000)"
	 5  double value;        "Strength of interaction or other data value. Typically basis for score"
	 6  string exp;          "Experiment name (metadata for filtering). Use . if not applicable"
	 7  string color;        "Item color.  Specified as r,g,b or hexadecimal #RRGGBB or html color name, as in //www.w3.org/TR/css3-color/#html4. Use 0 and spectrum setting to shade by score"
	 8  string sourceChrom;  "Chromosome of source region (directional) or lower region. For non-directional interchromosomal, chrom of this region."
	 9  uint sourceStart;    "Start position in chromosome of source/lower/this region"
	 10 uint sourceEnd;      "End position in chromosome of source/lower/this region"
	 11 string sourceName;   "Identifier of source/lower/this region"
	 12 string sourceStrand; "Orientation of source/lower/this region: + or -.  Use . if not applicable"
	 13 string targetChrom;  "Chromosome of target region (directional) or upper region. For non-directional interchromosomal, chrom of other region"
	 14 uint targetStart;    "Start position in chromosome of target/upper/this region"
	 15 uint targetEnd;      "End position in chromosome of target/upper/this region"
	 16 string targetName;   "Identifier of target/upper/this region"
	 17 string targetStrand; "Orientation of target/upper/this region: + or -.  Use . if not applicable"
	 *
	 * @param tokens
	 * @param ignore
	 * @returns {*}
	 */

	function decodeInteract(tokens, header) {
	  if (tokens.length < 6) {
	    return undefined;
	  }

	  var feature = {
	    chr: tokens[0],
	    start: tokens[1],
	    end: tokens[2],
	    chr1: tokens[8],
	    start1: Number.parseInt(tokens[9]),
	    end1: Number.parseInt(tokens[10]),
	    chr2: tokens[13],
	    start2: Number.parseInt(tokens[14]),
	    end2: Number.parseInt(tokens[15]),
	    name: tokens[3],
	    score: Number.parseFloat(tokens[4]),
	    value: Number.parseFloat(tokens[5]),
	    color: tokens[7] === '.' ? undefined : tokens[7] === "0" ? "rgb(0,0,0)" : tokens[7]
	  };
	  return feature;
	}

	var $entries = objectToArray.entries; // `Object.entries` method
	// https://tc39.github.io/ecma262/#sec-object.entries

	_export({
	  target: 'Object',
	  stat: true
	}, {
	  entries: function entries(O) {
	    return $entries(O);
	  }
	});

	var gffNameFields = ["Name", "gene_name", "gene", "gene_id", "alias", "locus", "name"];
	/**
	 * Decode a single gff record (1 line in file).  Aggregations such as gene models are constructed at a higher level.
	 *      ctg123 . mRNA            1050  9000  .  +  .  ID=mRNA00001;Parent=gene00001
	 * @param tokens
	 * @param ignore
	 * @returns {*}
	 */

	function decodeGFF(tokens, header) {
	  var tokenCount,
	      chr,
	      start,
	      end,
	      strand,
	      type,
	      score,
	      phase,
	      attributeString,
	      color,
	      name,
	      i,
	      format = header.format;
	  tokenCount = tokens.length;

	  if (tokenCount < 9) {
	    return null; // Not a valid gff record
	  }

	  chr = tokens[0];
	  type = tokens[2];
	  start = parseInt(tokens[3]) - 1;
	  end = parseInt(tokens[4]);
	  score = "." === tokens[5] ? 0 : parseFloat(tokens[5]);
	  strand = tokens[6];
	  phase = "." === tokens[7] ? 0 : parseInt(tokens[7]);
	  attributeString = tokens[8]; // Find ID and Parent, or transcript_id

	  var delim = 'gff3' === format ? '=' : /\s+/;
	  var attributes = parseAttributeString(attributeString, delim);

	  for (var _i = 0, _Object$entries = Object.entries(attributes); _i < _Object$entries.length; _i++) {
	    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
	        key = _Object$entries$_i[0],
	        value = _Object$entries$_i[1];

	    var keyLower = key.toLowerCase();

	    if ("color" === keyLower || "colour" === keyLower) {
	      color = IGVColor.createColorString(value);
	    } else if ('gff3' === format) try {
	      attributes[key] = unescape(value);
	    } catch (e) {
	      attributes[key] = value; // Invalid

	      console.error("Malformed gff3 attibute value: ".concat(value));
	    }
	  } // Find name (label) property


	  if (header.nameField) {
	    name = attributes[header.nameField];
	  } else {
	    for (i = 0; i < gffNameFields.length; i++) {
	      if (attributes.hasOwnProperty(gffNameFields[i])) {
	        header.nameField = gffNameFields[i];
	        name = attributes[header.nameField];
	        break;
	      }
	    }
	  }

	  var id = attributes["ID"] || attributes["transcript_id"];
	  var parent = attributes["Parent"];
	  return {
	    id: id,
	    parent: parent,
	    name: name,
	    type: type,
	    chr: chr,
	    start: start,
	    end: end,
	    score: score,
	    strand: strand,
	    color: color,
	    attributeString: attributeString,
	    delim: delim,
	    popupData: popupData
	  };
	}

	function parseAttributeString(attributeString, keyValueDelim) {
	  // parse 'attributes' string (see column 9 docs in https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md)
	  var attributes = {};

	  var _iterator = _createForOfIteratorHelper(attributeString.split(';')),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var kv = _step.value;
	      var t = kv.trim().split(keyValueDelim, 2);

	      if (t.length === 2) {
	        var key = t[0].trim();
	        var value = t[1].trim(); //Strip off quotes, if any

	        if (value.startsWith('"') && value.endsWith('"')) {
	          value = value.substr(1, value.length - 2);
	        }

	        attributes[key] = value;
	      }
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }

	  return attributes;
	}

	function popupData(genomicLocation) {
	  var kvs = this.attributeString.split(';');
	  var pd = [];

	  if (this.name) {
	    pd.push({
	      name: 'name:',
	      value: this.name
	    });
	  }

	  pd.push({
	    name: 'type:',
	    value: this.type
	  });

	  var _iterator2 = _createForOfIteratorHelper(kvs),
	      _step2;

	  try {
	    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	      var kv = _step2.value;
	      var t = kv.trim().split(this.delim, 2);

	      if (t.length === 2 && t[1] !== undefined) {
	        var key = t[0].trim();
	        if ('name' === key.toLowerCase()) continue;
	        var value = t[1].trim(); //Strip off quotes, if any

	        if (value.startsWith('"') && value.endsWith('"')) {
	          value = value.substr(1, value.length - 2);
	        }

	        pd.push({
	          name: key + ":",
	          value: value
	        });
	      }
	    }
	  } catch (err) {
	    _iterator2.e(err);
	  } finally {
	    _iterator2.f();
	  }

	  pd.push({
	    name: 'position:',
	    value: "".concat(this.chr, ":").concat(numberFormatter(this.start + 1), "-").concat(numberFormatter(this.end))
	  });
	  return pd;
	}

	/**
	 * Decode the UCSC bed format.  Only the first 3 columns (chr, start, end) are required.   The remaining columns
	 * must follow standard bed order, but we will tolerate deviations after column 3.
	 *
	 * @param tokens
	 * @param ignore
	 * @returns decoded feature, or null if this is not a valid record
	 */

	function decodeBed(tokens, header) {
	  if (tokens.length < 3) return undefined;
	  var gffTags = header && header.gffTags;
	  var chr = tokens[0];
	  var start = parseInt(tokens[1]);
	  var end = tokens.length > 2 ? parseInt(tokens[2]) : start + 1;

	  if (isNaN(start) || isNaN(end)) {
	    throw Error("Unparsable bed record: ".concat(tokens.join('\t')));
	  }

	  var feature = {
	    chr: chr,
	    start: start,
	    end: end,
	    score: 1000
	  };

	  try {
	    if (tokens.length > 3) {
	      // Note: these are very special rules for the gencode gene files.
	      // tmp = tokens[3].replace(/"/g, '');
	      // idName = tmp.split(';');
	      // for (var i = 0; i < idName.length; i++) {
	      //     var kv = idName[i].split('=');
	      //     if (kv[0] == "gene_id") {
	      //         id = kv[1];
	      //     }
	      //     if (kv[0] == "gene_name") {
	      //         name = kv[1];
	      //     }
	      // }
	      // feature.id = id ? id : tmp;
	      // feature.name = name ? name : tmp;
	      //parse gffTags in the name field
	      if (tokens[3].indexOf(';') > 0 && tokens[3].indexOf('=') > 0) {
	        var attributes = parseAttributeString(tokens[3], '=');

	        var _iterator = _createForOfIteratorHelper(gffNameFields),
	            _step;

	        try {
	          for (_iterator.s(); !(_step = _iterator.n()).done;) {
	            var nmField = _step.value;

	            if (attributes.hasOwnProperty(nmField)) {
	              feature.name = attributes[nmField];
	              delete attributes[nmField];
	              break;
	            }
	          }
	        } catch (err) {
	          _iterator.e(err);
	        } finally {
	          _iterator.f();
	        }

	        feature.attributes = attributes;
	      }

	      if (!feature.name) {
	        feature.name = tokens[3] === '.' ? '' : tokens[3];
	      }
	    }

	    if (tokens.length > 4) {
	      feature.score = tokens[4] === '.' ? 0 : parseFloat(tokens[4]);

	      if (isNaN(feature.score)) {
	        return feature;
	      }
	    }

	    if (tokens.length > 5) {
	      feature.strand = tokens[5];

	      if (!(feature.strand === '.' || feature.strand === '+' || feature.strand === '-')) {
	        return feature;
	      }
	    }

	    if (tokens.length > 6) {
	      feature.cdStart = parseInt(tokens[6]);

	      if (isNaN(feature.cdStart)) {
	        return feature;
	      }
	    }

	    if (tokens.length > 7) {
	      feature.cdEnd = parseInt(tokens[7]);

	      if (isNaN(feature.cdEnd)) {
	        return feature;
	      }
	    }

	    if (tokens.length > 8) {
	      if (tokens[8] !== "." && tokens[8] !== "0") feature.color = IGVColor.createColorString(tokens[8]);
	    }

	    if (tokens.length > 11) {
	      var exonCount = parseInt(tokens[9]); // Some basic validation

	      if (exonCount > 1000) {
	        // unlikely
	        return feature;
	      }

	      var exonSizes = tokens[10].replace(/,$/, '').split(',');
	      var exonStarts = tokens[11].replace(/,$/, '').split(',');

	      if (!(exonSizes.length === exonStarts.length && exonCount === exonSizes.length)) {
	        return feature;
	      }

	      var exons = [];

	      for (var i = 0; i < exonCount; i++) {
	        var eStart = start + parseInt(exonStarts[i]);
	        var eEnd = eStart + parseInt(exonSizes[i]);
	        exons.push({
	          start: eStart,
	          end: eEnd
	        });
	      }

	      findUTRs(exons, feature.cdStart, feature.cdEnd);
	      feature.exons = exons;
	    } // Optional extra columns


	    if (header) {
	      var thicknessColumn = header.thicknessColumn;
	      var colorColumn = header.colorColumn;

	      if (colorColumn && colorColumn < tokens.length) {
	        feature.color = IGVColor.createColorString(tokens[colorColumn]);
	      }

	      if (thicknessColumn && thicknessColumn < tokens.length) {
	        feature.thickness = tokens[thicknessColumn];
	      }
	    }
	  } catch (e) {}

	  return feature;
	}
	/**
	 * Decode a UCSC repeat masker record.
	 *
	 * Columns, from UCSC documentation
	 *
	 * 0  bin    585    smallint(5) unsigned    Indexing field to speed chromosome range queries.
	 * 1  swScore    1504    int(10) unsigned    Smith Waterman alignment score
	 * 2  milliDiv    13    int(10) unsigned    Base mismatches in parts per thousand
	 * 3  milliDel    4    int(10) unsigned    Bases deleted in parts per thousand
	 * 4  milliIns    13    int(10) unsigned    Bases inserted in parts per thousand
	 * 5  genoName    chr1    varchar(255)    Genomic sequence name
	 * 6  genoStart    10000    int(10) unsigned    Start in genomic sequence
	 * 7  genoEnd    10468    int(10) unsigned    End in genomic sequence
	 * 8  genoLeft    -249240153    int(11)    -#bases after match in genomic sequence
	 * 9  strand    +    char(1)    Relative orientation + or -
	 * 10 repName    (CCCTAA)n    varchar(255)    Name of repeat
	 * 11 repClass    Simple_repeat    varchar(255)    Class of repeat
	 * 12 repFamily    Simple_repeat    varchar(255)    Family of repeat
	 * 13 repStart    1    int(11)    Start (if strand is +) or -#bases after match (if strand is -) in repeat sequence
	 * 14 repEnd    463    int(11)    End in repeat sequence
	 * 15 repLeft    0    int(11)    -#bases after match (if strand is +) or start (if strand is -) in repeat sequence
	 * 16 id    1    char(1)    First digit of id field in RepeatMasker .out file. Best ignored.
	 */


	function decodeRepeatMasker(tokens, header) {
	  if (tokens.length <= 15) return undefined;
	  var feature = {
	    swScore: Number.parseInt(tokens[1]),
	    milliDiv: Number.parseInt(tokens[2]),
	    milliDel: Number.parseInt(tokens[3]),
	    milliIns: Number.parseInt(tokens[4]),
	    chr: tokens[5],
	    start: Number.parseInt(tokens[6]),
	    end: Number.parseInt(tokens[7]),
	    //genoLeft: tokens[8],
	    strand: tokens[9],
	    repName: tokens[10],
	    repClass: tokens[11],
	    repFamily: tokens[12],
	    repStart: Number.parseInt(tokens[13]),
	    repEnd: Number.parseInt(tokens[14]),
	    repLeft: Number.parseInt(tokens[15])
	  };
	  return feature;
	}
	/**
	 * Decode a UCSC "genePred" record.
	 *
	 * @param tokens
	 * @param ignore
	 * @returns {*}
	 */


	function decodeGenePred(tokens, header) {
	  var shift = header.shift === undefined ? 0 : 1;
	  if (tokens.length <= 9 + shift) return undefined;
	  var cdStart = parseInt(tokens[5 + shift]);
	  var cdEnd = parseInt(tokens[6 + shift]);
	  var feature = {
	    name: tokens[0 + shift],
	    chr: tokens[1 + shift],
	    strand: tokens[2 + shift],
	    start: parseInt(tokens[3 + shift]),
	    end: parseInt(tokens[4 + shift]),
	    cdStart: cdStart,
	    cdEnd: cdEnd,
	    id: tokens[0 + shift]
	  },
	      exonCount = parseInt(tokens[7 + shift]),
	      exonStarts = tokens[8 + shift].split(','),
	      exonEnds = tokens[9 + shift].split(','),
	      exons = [];

	  for (var i = 0; i < exonCount; i++) {
	    var start = parseInt(exonStarts[i]);
	    var end = parseInt(exonEnds[i]);
	    exons.push({
	      start: start,
	      end: end
	    });
	  }

	  findUTRs(exons, cdStart, cdEnd);
	  feature.exons = exons;
	  return feature;
	}
	/**
	 * Decode a UCSC "genePredExt" record.  refGene files are in this format.
	 *
	 * @param tokens
	 * @param ignore
	 * @returns {*}
	 */


	function decodeGenePredExt(tokens, header) {
	  var shift = header.shift === undefined ? 0 : 1;
	  if (tokens.length <= 11 + shift) return undefined;
	  var cdStart = parseInt(tokens[5 + shift]);
	  var cdEnd = parseInt(tokens[6 + shift]);
	  var feature = {
	    name: tokens[11 + shift],
	    chr: tokens[1 + shift],
	    strand: tokens[2 + shift],
	    start: parseInt(tokens[3 + shift]),
	    end: parseInt(tokens[4 + shift]),
	    cdStart: cdStart,
	    cdEnd: cdEnd,
	    id: tokens[0 + shift]
	  },
	      exonCount = parseInt(tokens[7 + shift]),
	      exonStarts = tokens[8 + shift].split(','),
	      exonEnds = tokens[9 + shift].split(','),
	      exons = [];

	  for (var i = 0; i < exonCount; i++) {
	    var start = parseInt(exonStarts[i]);
	    var end = parseInt(exonEnds[i]);
	    exons.push({
	      start: start,
	      end: end
	    });
	  }

	  findUTRs(exons, cdStart, cdEnd);
	  feature.exons = exons;
	  return feature;
	}
	/**
	 * Decode a UCSC "refFlat" record
	 * @param tokens
	 * @param ignore
	 * @returns {*}
	 */


	function decodeReflat(tokens, header) {
	  var shift = header.shift === undefined ? 0 : 1;
	  if (tokens.length <= 10 + shift) return undefined;
	  var cdStart = parseInt(tokens[6 + shift]);
	  var cdEnd = parseInt(tokens[7 + shift]);
	  var feature = {
	    name: tokens[0 + shift],
	    id: tokens[1 + shift],
	    chr: tokens[2 + shift],
	    strand: tokens[3 + shift],
	    start: parseInt(tokens[4 + shift]),
	    end: parseInt(tokens[5 + shift]),
	    cdStart: cdStart,
	    cdEnd: cdEnd
	  },
	      exonCount = parseInt(tokens[8 + shift]),
	      exonStarts = tokens[9 + shift].split(','),
	      exonEnds = tokens[10 + shift].split(','),
	      exons = [];

	  for (var i = 0; i < exonCount; i++) {
	    var start = parseInt(exonStarts[i]);
	    var end = parseInt(exonEnds[i]);
	    exons.push({
	      start: start,
	      end: end
	    });
	  }

	  findUTRs(exons, cdStart, cdEnd);
	  feature.exons = exons;
	  return feature;
	}

	function findUTRs(exons, cdStart, cdEnd) {
	  var _iterator2 = _createForOfIteratorHelper(exons),
	      _step2;

	  try {
	    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	      var exon = _step2.value;
	      var end = exon.end;
	      var start = exon.start;

	      if (end < cdStart || start > cdEnd) {
	        exon.utr = true;
	      } else {
	        if (cdStart >= start && cdStart <= end) {
	          exon.cdStart = cdStart;
	        }

	        if (cdEnd >= start && cdEnd <= end) {
	          exon.cdEnd = cdEnd;
	        }
	      }
	    }
	  } catch (err) {
	    _iterator2.e(err);
	  } finally {
	    _iterator2.f();
	  }
	}

	function decodePeak(tokens, header) {
	  var tokenCount, chr, start, end, strand, name, score, qValue, signal, pValue;
	  tokenCount = tokens.length;

	  if (tokenCount < 9) {
	    return undefined;
	  }

	  chr = tokens[0];
	  start = parseInt(tokens[1]);
	  end = parseInt(tokens[2]);
	  name = tokens[3];
	  score = parseFloat(tokens[4]);
	  strand = tokens[5].trim();
	  signal = parseFloat(tokens[6]);
	  pValue = parseFloat(tokens[7]);
	  qValue = parseFloat(tokens[8]);
	  if (score === 0) score = signal;
	  return {
	    chr: chr,
	    start: start,
	    end: end,
	    name: name,
	    score: score,
	    strand: strand,
	    signal: signal,
	    pValue: pValue,
	    qValue: qValue
	  };
	}

	function decodeBedGraph(tokens, header) {
	  var chr, start, end, value;
	  if (tokens.length <= 3) return undefined;
	  chr = tokens[0];
	  start = parseInt(tokens[1]);
	  end = parseInt(tokens[2]);
	  value = parseFloat(tokens[3]);
	  var feature = {
	    chr: chr,
	    start: start,
	    end: end,
	    value: value
	  }; // Optional extra columns

	  if (header) {
	    var colorColumn = header.colorColumn;

	    if (colorColumn && colorColumn < tokens.length) {
	      feature.color = IGVColor.createColorString(tokens[colorColumn]);
	    }
	  }

	  return feature;
	}

	function decodeWig(tokens, header) {
	  var wig = header.wig;

	  if (wig && wig.format === "fixedStep") {
	    var ss = wig.index * wig.step + wig.start;
	    var ee = ss + wig.span;
	    var value = parseFloat(tokens[0]);
	    ++wig.index;
	    return isNaN(value) ? null : {
	      chr: wig.chrom,
	      start: ss,
	      end: ee,
	      value: value
	    };
	  } else if (wig && wig.format === "variableStep") {
	    if (tokens.length < 2) return null;

	    var _ss = parseInt(tokens[0], 10) - 1;

	    var _ee = _ss + wig.span;

	    var _value = parseFloat(tokens[1]);

	    return isNaN(_value) ? null : {
	      chr: wig.chrom,
	      start: _ss,
	      end: _ee,
	      value: _value
	    };
	  } else {
	    return decodeBedGraph(tokens);
	  }
	}

	function decodeSNP(tokens, header) {
	  if (tokens.length < 6) return undefined;
	  var autoSql = ['bin', 'chr', 'start', 'end', 'name', 'score', 'strand', 'refNCBI', 'refUCSC', 'observed', 'molType', 'class', 'valid', 'avHet', 'avHetSE', 'func', 'locType', 'weight', 'exceptions', 'submitterCount', 'submitters', 'alleleFreqCount', 'alleles', 'alleleNs', 'alleleFreqs', 'bitfields'];
	  var feature = {
	    chr: tokens[1],
	    start: Number.parseInt(tokens[2]),
	    end: Number.parseInt(tokens[3]),
	    name: tokens[4],
	    score: Number.parseInt(tokens[5])
	  };
	  var n = Math.min(tokens.length, autoSql.length);

	  for (var i = 6; i < n; i++) {
	    feature[autoSql[i]] = tokens[i];
	  }

	  return feature;
	}

	function decodeFusionJuncSpan(tokens, header) {
	  /*
	   Format:
	    0       #scaffold
	   1       fusion_break_name
	   2       break_left
	   3       break_right
	   4       num_junction_reads
	   5       num_spanning_frags
	   6       spanning_frag_coords
	    0       B3GNT1--NPSR1
	   1       B3GNT1--NPSR1|2203-10182
	   2       2203
	   3       10182
	   4       189
	   5       1138
	   6       1860-13757,1798-13819,1391-18127,1443-17174,...
	    */
	  if (tokens.length < 7) return undefined;
	  var chr = tokens[0];
	  var fusion_name = tokens[1];
	  var junction_left = parseInt(tokens[2]);
	  var junction_right = parseInt(tokens[3]);
	  var num_junction_reads = parseInt(tokens[4]);
	  var num_spanning_frags = parseInt(tokens[5]);
	  var spanning_frag_coords_text = tokens[6];
	  var feature = {
	    chr: chr,
	    name: fusion_name,
	    junction_left: junction_left,
	    junction_right: junction_right,
	    num_junction_reads: num_junction_reads,
	    num_spanning_frags: num_spanning_frags,
	    spanning_frag_coords: [],
	    start: -1,
	    end: -1
	  }; // set start and end later based on min/max of span coords

	  var min_coord = junction_left;
	  var max_coord = junction_right;

	  if (num_spanning_frags > 0) {
	    var coord_pairs = spanning_frag_coords_text.split(',');

	    for (var i = 0; i < coord_pairs.length; i++) {
	      var split_coords = coord_pairs[i].split('-');
	      var span_left = split_coords[0];
	      var span_right = split_coords[1];

	      if (span_left < min_coord) {
	        min_coord = span_left;
	      }

	      if (span_right > max_coord) {
	        max_coord = span_right;
	      }

	      feature.spanning_frag_coords.push({
	        left: span_left,
	        right: span_right
	      });
	    }
	  }

	  feature.start = min_coord;
	  feature.end = max_coord;
	  return feature;
	}

	function decodeGtexGWAS(tokens, header) {
	  //chrom	chromStart	chromEnd	Strongest SNP-risk allele	Disease/Phenotype	P-value	Odds ratio or beta	PUBMEDID
	  //1	1247493	1247494	rs12103-A	Inflammatory bowel disease	8.00E-13	1.1	23128233
	  var tokenCount = tokens.length;

	  if (tokenCount < 7) {
	    return null;
	  }

	  var feature = {
	    chr: tokens[0],
	    start: parseInt(tokens[1]) - 1,
	    end: parseInt(tokens[2]),
	    'Strongest SNP-risk allele': tokens[3],
	    'Disease/Phenotype': tokens[4],
	    'P-value': tokens[5],
	    'Odds ratio or beta': tokens[6]
	  };

	  if (tokens.length > 6) {
	    feature['PUBMEDID'] = "<a target = \"blank\" href = \"https://www.ncbi.nlm.nih.gov/pubmed/".concat(tokens[7], "\">").concat(tokens[7], "</a>");
	  }

	  return feature;
	}

	/**
	 * Decode a custom columnar format.  Required columns are 'chr' and 'start'
	 *
	 * @param tokens
	 * @param ignore
	 * @returns decoded feature, or null if this is not a valid record
	 */
	function decodeCustom(tokens, header) {
	  if (tokens.length < header.format.fields.length) return undefined;
	  var format = header.format; // "this" refers to FeatureParser instance

	  var coords = format.coords || 0;
	  var chr = tokens[format.chr];
	  var start = parseInt(tokens[format.start]) - coords;
	  var end = format.end !== undefined ? parseInt(tokens[format.end]) : start + 1;
	  var feature = {
	    chr: chr,
	    start: start,
	    end: end
	  };

	  if (format.fields) {
	    format.fields.forEach(function (field, index) {
	      if (index !== format.chr && index !== format.start && index !== format.end) {
	        feature[field] = tokens[index];
	      }
	    });
	  }

	  return feature;
	} // function expandFormat(format) {

	/**
	 * Decode a gcnv record, a bed style format encoding copy number variation
	 *
	 * @param tokens
	 * @param header
	 */
	function decodeGcnv(tokens, header) {
	  var columnNames = header.columnNames;

	  if (!columnNames) {
	    throw Error("Sample names are not defined.   Missing column headers?");
	  }

	  var sampleCount = columnNames.length - 3;
	  var chr = tokens[0];
	  var start = parseInt(tokens[1]);
	  var end = parseInt(tokens[2]);
	  var values = tokens.slice(3).map(parseFloat);

	  if (values.length == sampleCount) {
	    return {
	      chr: chr,
	      start: start,
	      end: end,
	      values: values
	    };
	  } else {
	    // TODO Throw error?
	    return undefined;
	  }
	}

	/**
	 *  Parser for column style (tab delimited, etc) text file formats (bed, gff, vcf, etc).
	 *
	 *
	 */

	/**
	 * Return a parser for the given file format.
	 */

	var FeatureParser = /*#__PURE__*/function () {
	  function FeatureParser(config) {
	    _classCallCheck(this, FeatureParser);

	    this.config = config;
	    this.header = {};

	    if (config.nameField) {
	      this.header.nameField = config.nameField;
	    }

	    this.skipRows = 0; // The number of fixed header rows to skip.  Override for specific types as needed

	    if (config.decode) {
	      this.decode = config.decode;
	      this.delimiter = config.delimiter || "\t";
	    } else if (config.format) {
	      this.header.format = config.format.toLowerCase();
	      this.setDecoder();
	    }

	    if (!this.delimiter) {
	      this.delimiter = "\t";
	    }
	  }
	  /**
	   * Parse metadata from the file.   A variety of conventions are in use to supply metadata about file contents
	   * through header lines (e.g. 'track') and # directives. This method unifies metadata as properties of a
	   * 'header' object.
	   *
	   * @param data
	   * @returns {{}}
	   */


	  _createClass(FeatureParser, [{
	    key: "parseHeader",
	    value: function parseHeader(data) {
	      var dataWrapper = getDataWrapper(data);
	      var header = this.header;
	      var columnNames;
	      var line;
	      var skipRows = 0;

	      while ((line = dataWrapper.nextLine()) !== undefined) {
	        if (line.startsWith("track") || line.startsWith("#track")) {
	          var h = parseTrackLine(line);
	          Object.assign(header, h);
	        } else if (line.startsWith("browser")) ; else if (line.startsWith("#columns")) {
	          var _h = parseColumnsDirective(line);

	          Object.assign(header, _h);
	        } else if (line.startsWith("##gff-version 3")) {
	          header.format = "gff3";
	          header["format"] = "gff3";
	        } else if (line.startsWith("#gffTags")) {
	          header["gffTags"] = true;
	        } else if (line.startsWith("fixedStep") || line.startsWith("variableStep")) {
	          // Wig directives -- we are in the data section
	          break;
	        } else {
	          // If the line can be parsed as a feature assume we are beyond the header, if any
	          var tokens = line.split(this.delimiter || "\t");

	          try {
	            // All directives that could change the format, and thus decoder, should have been read by now.
	            this.setDecoder();
	            var decoder = this.decode;

	            if (!line.startsWith("#") && decoder(tokens, header)) {
	              var n; if (columnNames && columnNames.length === tokens.length) ;

	              break;
	            } else {
	              if (tokens.length > 1) {
	                header.columnNames = tokens; // Possible column names
	              }
	            }
	          } catch (e) {
	            if (tokens.length > 1) {
	              header.columnNames = tokens; // Possible column names
	            }
	          }
	        }

	        skipRows++;
	      }

	      this.skipRows = skipRows;
	      this.header = header; // Directives might be needed for parsing lines

	      return header;
	    }
	  }, {
	    key: "parseFeatures",
	    value: function parseFeatures(data) {
	      if (!data) return null;
	      var dataWrapper = getDataWrapper(data);
	      var nextLine = dataWrapper.nextLine.bind(dataWrapper);
	      var allFeatures = [];
	      var decode = this.decode;
	      var format = this.header.format;
	      var delimiter = this.delimiter || "\t";
	      var i = 0;
	      var line;

	      while ((line = nextLine()) !== undefined) {
	        i++;
	        if (i <= this.skipRows) continue;

	        if (!line || line.startsWith("track") || line.startsWith("#") || line.startsWith("browser")) {
	          continue;
	        } else if (format === "wig" && line.startsWith("fixedStep")) {
	          this.header.wig = parseFixedStep(line);
	          continue;
	        } else if (format === "wig" && line.startsWith("variableStep")) {
	          this.header.wig = parseVariableStep(line);
	          continue;
	        }

	        var tokens = line.split(delimiter);

	        if (tokens.length < 1) {
	          continue;
	        }

	        var feature = decode(tokens, this.header);

	        if (feature) {
	          allFeatures.push(feature);
	        }
	      } // Special hack for bedPE


	      if (decode === decodeBedpe) {
	        fixBedPE(allFeatures);
	      }

	      return allFeatures;
	    }
	  }, {
	    key: "setDecoder",
	    value: function setDecoder() {
	      if (!this.decode) {
	        switch (this.header.format) {
	          case "narrowpeak":
	          case "broadpeak":
	          case "regionpeak":
	          case "peaks":
	            this.decode = decodePeak;
	            this.delimiter = this.config.delimiter || /\s+/;
	            break;

	          case "bedgraph":
	            this.decode = decodeBedGraph;
	            this.delimiter = /\s+/;
	            break;

	          case "wig":
	            this.decode = decodeWig;
	            this.delimiter = this.config.delimiter || /\s+/;
	            break;

	          case "gff3":
	          case "gff":
	          case "gtf":
	            this.decode = decodeGFF;
	            this.delimiter = "\t";
	            break;

	          case "fusionjuncspan":
	            // bhaas, needed for FusionInspector view
	            this.decode = decodeFusionJuncSpan;
	            this.delimiter = this.config.delimiter || /\s+/;
	            break;

	          case "gtexgwas":
	            this.skipRows = 1;
	            this.decode = decodeGtexGWAS;
	            this.delimiter = "\t";
	            break;

	          case "refflat":
	            this.decode = decodeReflat;
	            this.delimiter = this.config.delimiter || /\s+/;
	            break;

	          case "genepred":
	            this.decode = decodeGenePred;
	            this.delimiter = this.config.delimiter || /\s+/;
	            break;

	          case "genepredext":
	            this.decode = decodeGenePredExt;
	            this.delimiter = this.config.delimiter || /\s+/;
	            break;

	          case "ensgene":
	            this.decode = decodeGenePred;
	            this.header.shift = 1;
	            this.delimiter = this.config.delimiter || /\s+/;
	            break;

	          case "refgene":
	            this.decode = decodeGenePredExt;
	            this.delimiter = this.config.delimiter || /\s+/;
	            this.header.shift = 1;
	            break;

	          case "bed":
	            this.decode = decodeBed;
	            this.delimiter = this.config.delimiter || /\s+/;
	            break;

	          case "bedpe":
	            this.decode = decodeBedpe;
	            this.delimiter = this.config.delimiter || "\t";
	            break;

	          case "bedpe-domain":
	            this.decode = decodeBedpeDomain;
	            this.headerLine = true;
	            this.delimiter = this.config.delimiter || "\t";
	            break;

	          case "bedpe-loop":
	            this.decode = decodeBedpe;
	            this.delimiter = this.config.delimiter || "\t";
	            this.header = {
	              colorColumn: 7
	            };
	            break;

	          case "interact":
	            this.decode = decodeInteract;
	            this.delimiter = this.config.delimiter || /\s+/;
	            break;

	          case "snp":
	            this.decode = decodeSNP;
	            this.delimiter = "\t";
	            break;

	          case "rmsk":
	            this.decode = decodeRepeatMasker;
	            this.delimiter = "\t";
	            break;

	          case "gcnv":
	            this.decode = decodeGcnv;
	            this.delimiter = "\t";
	            break;

	          default:
	            var customFormat = getFormat(this.header.format);

	            if (customFormat !== undefined) {
	              this.decode = decodeCustom;
	              this.header.format = customFormat;
	              this.delimiter = customFormat.delimiter || "\t";
	            } else {
	              this.decode = decodeBed;
	              this.delimiter = this.config.delimiter || /\s+/;
	            }

	        }
	      }
	    }
	  }]);

	  return FeatureParser;
	}();

	function parseTrackLine(line) {
	  var properties = {};
	  var tokens = line.split(/(?:")([^"]+)(?:")|([^\s"]+)(?=\s+|$)/g); // Clean up tokens array

	  var curr;
	  var tmp = [];

	  var _iterator = _createForOfIteratorHelper(tokens),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var tk = _step.value;
	      if (!tk || tk.trim().length === 0) continue;

	      if (tk.endsWith("=")) {
	        curr = tk;
	      } else if (curr) {
	        tmp.push(curr + tk);
	        curr = undefined;
	      } else {
	        tmp.push(tk);
	      }
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }

	  for (var _i = 0, _tmp = tmp; _i < _tmp.length; _i++) {
	    var str = _tmp[_i];
	    if (!str) return;
	    var kv = str.split('=', 2);

	    if (kv.length === 2) {
	      var key = kv[0].trim();
	      var value = kv[1].trim();

	      if (properties.hasOwnProperty(key)) {
	        var currentValue = properties[key];

	        if (Array.isArray(currentValue)) {
	          currentValue.push(value);
	        } else {
	          properties[key] = [currentValue, value];
	        }
	      } else {
	        properties[key] = value;
	      }
	    }
	  }

	  if ("interact" == properties["type"]) {
	    properties["format"] = "interact";
	  } else if ("gcnv" === properties["type"]) {
	    properties["format"] = "gcnv";
	  }

	  return properties;
	}

	function parseColumnsDirective(line) {
	  var properties = {};
	  var t1 = line.split(/\s+/);

	  if (t1.length === 2) {
	    var t2 = t1[1].split(";");
	    t2.forEach(function (keyValue) {
	      var t = keyValue.split("=");

	      if (t[0] === "color") {
	        properties.colorColumn = Number.parseInt(t[1]) - 1;
	      } else if (t[0] === "thickness") {
	        properties.thicknessColumn = Number.parseInt(t[1]) - 1;
	      }
	    });
	  }

	  return properties;
	}

	function parseFixedStep(line) {
	  var tokens = line.split(/\s+/);
	  var chrom = tokens[1].split("=")[1];
	  var start = parseInt(tokens[2].split("=")[1], 10) - 1;
	  var step = parseInt(tokens[3].split("=")[1], 10);
	  var span = tokens.length > 4 ? parseInt(tokens[4].split("=")[1], 10) : 1;
	  return {
	    format: "fixedStep",
	    chrom: chrom,
	    start: start,
	    step: step,
	    span: span,
	    index: 0
	  };
	}

	function parseVariableStep(line) {
	  var tokens = line.split(/\s+/);
	  var chrom = tokens[1].split("=")[1];
	  var span = tokens.length > 2 ? parseInt(tokens[2].split("=")[1], 10) : 1;
	  return {
	    format: "variableStep",
	    chrom: chrom,
	    span: span
	  };
	}

	/**
	 *  Define parser for seg files  (.bed, .gff, .vcf, etc).  A parser should implement 2 methods
	 *
	 *     parseHeader(data) - return an object representing a header.  Details are format specific
	 *
	 *     parseFeatures(data) - return a list of features
	 *
	 */

	var sampleKeyColumn = 0,
	    sampleColumn = 0,
	    chrColumn = 1,
	    startColumn = 2,
	    endColumn = 3;

	var SegParser = /*#__PURE__*/function () {
	  function SegParser() {
	    _classCallCheck(this, SegParser);
	  }

	  _createClass(SegParser, [{
	    key: "parseHeader",
	    value: function parseHeader(data) {
	      var lines = splitLines(data);

	      var _iterator = _createForOfIteratorHelper(lines),
	          _step;

	      try {
	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          var line = _step.value;

	          if (line.startsWith("#")) {// skip
	          } else {
	            var tokens = line.split("\t");
	            this.header = {
	              headings: tokens
	            };
	            break;
	          }
	        }
	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }

	      return this.header;
	    }
	  }, {
	    key: "parseFeatures",
	    value: function parseFeatures(data) {
	      var dataWrapper = getDataWrapper(data);
	      var nextLine = dataWrapper.nextLine.bind(dataWrapper);
	      var allFeatures = [];

	      if (!this.header) {
	        this.header = this.parseHeader(nextLine()); // This will only work for non-indexed files
	      }

	      var dataColumn = this.header.headings.length - 1;
	      var line;

	      while ((line = nextLine()) !== undefined) {
	        var tokens = line.split("\t");

	        if (tokens.length > dataColumn) {
	          allFeatures.push({
	            sampleKey: tokens[sampleKeyColumn],
	            sample: tokens[sampleColumn],
	            chr: tokens[chrColumn],
	            start: parseInt(tokens[startColumn]),
	            end: parseInt(tokens[endColumn]),
	            value: parseFloat(tokens[dataColumn])
	          });
	        }
	      }

	      return allFeatures;
	    }
	  }]);

	  return SegParser;
	}();

	/**
	 * A collection of properties and methods shared by all (or most) track types.
	 *
	 * @param config
	 * @param browser
	 * @constructor
	 */

	var TrackBase = /*#__PURE__*/function () {
	  function TrackBase(config, browser) {
	    _classCallCheck(this, TrackBase);

	    if (config.displayMode) {
	      config.displayMode = config.displayMode.toUpperCase();
	    }

	    this.config = config;
	    this.browser = browser;
	    this.url = config.url;
	    this.type = config.type;
	    this.description = config.description;
	    this.supportHiDPI = config.supportHiDPI === undefined ? true : config.supportHiDPI;

	    if (config.name || config.label) {
	      this.name = config.name || config.label;
	    } else {
	      if (isFilePath(config.url)) this.name = config.url.name;else this.name = config.url;
	    }

	    this.id = this.config.id === undefined ? this.name : this.config.id;
	    this.order = config.order;
	    this.color = config.color;
	    this.altColor = config.altColor;

	    if ("civic-ws" === config.sourceType) {
	      // Ugly proxy for specialized track type
	      this.defaultColor = "rgb(155,20,20)";
	    } else {
	      this.defaultColor = "rgb(0,0,150)";
	    }

	    this.autoscaleGroup = config.autoscaleGroup;
	    this.removable = config.removable === undefined ? true : config.removable; // Defaults to true

	    this.height = config.height || 100;
	    this.autoHeight = config.autoHeight;
	    this.minHeight = config.minHeight || Math.min(25, this.height);
	    this.maxHeight = config.maxHeight || Math.max(1000, this.height);
	    this.visibilityWindow = config.visibilityWindow;
	  }
	  /**
	   * Default implementation -- update config with current values.
	   * to create session object for bookmarking, sharing.  Updates the track "config" object to reflect the
	   * current state.  Only simple properties (string, number, boolean) are updated.
	   */


	  _createClass(TrackBase, [{
	    key: "getState",
	    value: function getState() {
	      // Create copy of config, minus transient properties (convention is name starts with '_')
	      var state = {};

	      for (var _i = 0, _Object$keys = Object.keys(this.config); _i < _Object$keys.length; _i++) {
	        var key = _Object$keys[_i];

	        if (!key.startsWith("_")) {
	          state[key] = this.config[key];
	        }
	      } // Update original config values with any changes


	      for (var _i2 = 0, _Object$keys2 = Object.keys(state); _i2 < _Object$keys2.length; _i2++) {
	        var _key = _Object$keys2[_i2];
	        if (_key.startsWith("_")) continue; // transient property

	        var value = this[_key];

	        if (value && (isSimpleType(value) || typeof value === "boolean")) {
	          state[_key] = value;
	        }
	      }

	      if (this.color) state.color = this.color;
	      if (this.altColor) state.altColor = this.altColor; // Flatten dataRange if present

	      if (!this.autoscale && this.dataRange) {
	        state.min = this.dataRange.min;
	        state.max = this.dataRange.max;
	      } // Check for non-json-if-yable properties.  Perhaps we should test what can be saved.


	      for (var _i3 = 0, _Object$keys3 = Object.keys(state); _i3 < _Object$keys3.length; _i3++) {
	        var _key2 = _Object$keys3[_i3];

	        if (typeof state[_key2] === 'function') {
	          throw Error("Property '".concat(_key2, "' of track '").concat(this.name, " is a function. Functions cannot be saved in sessions."));
	        }

	        if (state[_key2] instanceof File) {
	          throw Error("Property '".concat(_key2, "' of track '").concat(this.name, " is a local File. Local file references cannot be saved in sessions."));
	        }

	        if (state[_key2] instanceof Promise) {
	          throw Error("Property '".concat(_key2, "' of track '").concat(this.name, " is a Promise. Promises cannot be saved in sessions."));
	        }
	      }

	      return state;
	    }
	  }, {
	    key: "supportsWholeGenome",
	    value: function supportsWholeGenome() {
	      return false;
	    }
	  }, {
	    key: "getGenomeId",
	    value: function getGenomeId() {
	      return this.browser.genome ? this.browser.genome.id : undefined;
	    }
	    /**
	     * Set certain track properties, usually from a "track" line.  Not all UCSC properties are supported.
	     *
	     * Track configuration settings have precendence over track line properties, so if both are present ignore the
	     * track line.
	     *
	     * @param properties
	     */

	  }, {
	    key: "setTrackProperties",
	    value: function setTrackProperties(properties) {
	      var tracklineConfg = {};
	      var tokens;

	      for (var _i4 = 0, _Object$keys4 = Object.keys(properties); _i4 < _Object$keys4.length; _i4++) {
	        var key = _Object$keys4[_i4];

	        switch (key.toLowerCase()) {
	          case "usescore":
	            tracklineConfg.useScore = properties[key] === 1 || properties[key] === "1" || properties[key] === "on" || properties[key] === true;
	            break;

	          case "visibility":
	            //0 - hide, 1 - dense, 2 - full, 3 - pack, and 4 - squish
	            switch (properties[key]) {
	              case "2":
	              case "3":
	              case "pack":
	              case "full":
	                tracklineConfg.displayMode = "EXPANDED";
	                break;

	              case "4":
	              case "squish":
	                tracklineConfg.displayMode = "SQUISHED";
	                break;

	              case "1":
	              case "dense":
	                tracklineConfg.displayMode = "COLLAPSED";
	            }

	            break;

	          case "color":
	          case "altcolor":
	            tracklineConfg[key] = properties[key].startsWith("rgb(") ? properties[key] : "rgb(" + properties[key] + ")";
	            break;

	          case "featurevisiblitywindow":
	          case "visibilitywindow":
	            tracklineConfg.visibilityWindow = Number.parseInt(properties[key]);
	            break;

	          case "maxheightpixels":
	            tokens = properties[key].split(":");

	            if (tokens.length === 3) {
	              tracklineConfg.minHeight = Number.parseInt(tokens[2]);
	              tracklineConfg.height = Number.parseInt(tokens[1]);
	              tracklineConfg.maxHeight = Number.parseInt(tokens[0]);
	            }

	            break;

	          case "viewlimits":
	            if (!this.config.autoscale) {
	              // autoscale in the config has precedence
	              tokens = properties[key].split(":");
	              var min = 0;
	              var max = void 0;

	              if (tokens.length == 1) {
	                max = Number.parseFloat(tokens[0]);
	              } else if (tokens.length == 2) {
	                min = Number.parseFloat(tokens[0]);
	                max = Number.parseFloat(tokens[1]);
	              }

	              tracklineConfg.autoscale = false;
	              tracklineConfg.dataRange = {
	                min: min,
	                max: max
	              };
	            }

	          case "name":
	            tracklineConfg[key] = properties[key];
	        }
	      } // Track configuration objects have precendence over track line properties


	      for (var _i5 = 0, _Object$keys5 = Object.keys(tracklineConfg); _i5 < _Object$keys5.length; _i5++) {
	        var _key3 = _Object$keys5[_i5];

	        if (!this.config.hasOwnProperty(_key3)) {
	          this[_key3] = tracklineConfg[_key3];
	        }
	      }
	    }
	  }, {
	    key: "getVisibilityWindow",
	    value: function getVisibilityWindow() {
	      return this.visibilityWindow;
	    }
	  }, {
	    key: "clickedFeatures",
	    value: function clickedFeatures(clickState) {
	      // We use the cached features rather than method to avoid async load.  If the
	      // feature is not already loaded this won't work,  but the user wouldn't be mousing over it either.
	      var features = clickState.viewport.getCachedFeatures();

	      if (!features || features.length === 0) {
	        return [];
	      }

	      var genomicLocation = clickState.genomicLocation; // When zoomed out we need some tolerance around genomicLocation

	      var tolerance = clickState.referenceFrame.bpPerPixel > 0.2 ? 3 * clickState.referenceFrame.bpPerPixel : 0;
	      var ss = Math.floor(genomicLocation) - tolerance;
	      var ee = Math.floor(genomicLocation) + tolerance;
	      return FeatureUtils.findOverlapping(features, ss, ee);
	    }
	    /**
	     * Default popup text function -- just extracts string and number properties in random order.
	     * @param feature
	     * @returns {Array}
	     */

	  }], [{
	    key: "extractPopupData",
	    value: function extractPopupData(feature, genomeId) {
	      var filteredProperties = new Set(['row', 'color', 'chr', 'start', 'end', 'cdStart', 'cdEnd', 'strand', 'alpha']);
	      var data = [];
	      var alleles, alleleFreqs;

	      for (var property in feature) {
	        if (feature.hasOwnProperty(property) && !filteredProperties.has(property) && isSimpleType(feature[property])) {
	          var value = feature[property];
	          data.push({
	            name: capitalize(property),
	            value: value
	          });

	          if (property === "alleles") {
	            alleles = feature[property];
	          } else if (property === "alleleFreqs") {
	            alleleFreqs = feature[property];
	          }
	        }
	      } //const genomeId = this.getGenomeId()


	      if (alleles && alleleFreqs) {
	        if (alleles.endsWith(",")) {
	          alleles = alleles.substr(0, alleles.length - 1);
	        }

	        if (alleleFreqs.endsWith(",")) {
	          alleleFreqs = alleleFreqs.substr(0, alleleFreqs.length - 1);
	        }

	        var a = alleles.split(",");
	        var af = alleleFreqs.split(",");

	        if (af.length > 1) {
	          var b = [];

	          for (var i = 0; i < af.length; i++) {
	            b.push({
	              a: a[i],
	              af: Number.parseFloat(af[i])
	            });
	          }

	          b.sort(function (x, y) {
	            return x.af - y.af;
	          });
	          var ref = b[b.length - 1].a;

	          if (ref.length === 1) {
	            for (var _i6 = b.length - 2; _i6 >= 0; _i6--) {
	              var alt = b[_i6].a;

	              if (alt.length === 1) {
	                var cravatLink = TrackBase.getCravatLink(feature.chr, feature.start + 1, ref, alt, genomeId);

	                if (cravatLink) {
	                  data.push("<hr/>");
	                  data.push(cravatLink);
	                }
	              }
	            }
	          }
	        }
	      }

	      if (feature.attributes) {
	        for (var _i7 = 0, _Object$keys6 = Object.keys(feature.attributes); _i7 < _Object$keys6.length; _i7++) {
	          var key = _Object$keys6[_i7];
	          data.push({
	            name: key,
	            value: feature.attributes[key]
	          });
	        }
	      } // final chr position


	      var posString = "".concat(feature.chr, ":").concat(numberFormatter(feature.start + 1), "-").concat(numberFormatter(feature.end));

	      if (feature.strand) {
	        posString += " (".concat(feature.strand, ")");
	      }

	      data.push('<hr\>');
	      data.push(posString);
	      return data;
	    }
	  }, {
	    key: "getCravatLink",
	    value: function getCravatLink(chr, position, ref, alt, genomeID) {
	      if ("hg38" === genomeID || "GRCh38" === genomeID) {
	        var cravatChr = chr.startsWith("chr") ? chr : "chr" + chr;
	        return "<a target=\"_blank\" href=\"https://run.opencravat.org/result/nocache/variant.html" + "?chrom=".concat(cravatChr, "&pos=").concat(position, "&ref_base=").concat(ref, "&alt_base=").concat(alt, "\">Cravat ").concat(ref, "->").concat(alt, "</a>"); // return "<a target='_blank' " +
	        //     "href='https://www.cravat.us/CRAVAT/variant.html?variant=" +
	        //     cravatChr + "_" + position + "_+_" + ref + "_" + alt + "'>Cravat " + ref + "->" + alt + "</a>"
	      } else {
	        return undefined;
	      }
	    }
	  }]);

	  return TrackBase;
	}();

	var knownAltBases = new Set(["A", "C", "T", "G"].map(function (c) {
	  return c.charCodeAt(0);
	}));

	function createVCFVariant(tokens) {
	  return new Variant(tokens);
	}

	var Variant = /*#__PURE__*/function () {
	  function Variant(tokens) {
	    _classCallCheck(this, Variant);

	    this.chr = tokens[0]; // TODO -- use genome aliases

	    this.pos = parseInt(tokens[1]);
	    this.names = tokens[2]; // id in VCF

	    this.referenceBases = tokens[3];
	    this.alternateBases = tokens[4];
	    this.quality = tokens[5];
	    this.filter = tokens[6];
	    this.info = getInfoObject(tokens[7]);
	    this.init();
	  }

	  _createClass(Variant, [{
	    key: "init",
	    value: function init() {
	      var ref = this.referenceBases;
	      var altBases = this.alternateBases;

	      if (this.info) {
	        if (this.info["VT"]) {
	          this.type = this.info["VT"];
	        } else if (this.info["SVTYPE"]) {
	          this.type = "SV";
	        } else if (this.info["PERIOD"]) {
	          this.type = "STR";
	        }
	      }

	      if (this.type === undefined) {
	        this.type = determineType(ref, altBases);
	      }

	      if (this.type === "NONVARIANT") {
	        this.heterozygosity = 0;
	      } // Determine start/end coordinates -- these are the coordinates representing the actual variant,
	      // not the leading or trailing reference


	      if (this.info["END"]) {
	        this.start = this.pos - 1;

	        if (this.info["CHR2"] && this.info["CHR2"] !== this.chr) {
	          this.end = this.start + 1;
	        } else {
	          this.end = Number.parseInt(this.info["END"]);
	        }
	      } else {
	        if (this.type === "NONVARIANT") {
	          this.start = this.pos - 1; // convert to 0-based coordinate convention

	          this.end = this.start + ref.length;
	        } else {
	          var altTokens = altBases.split(",").filter(function (token) {
	            return token.length > 0;
	          });
	          this.alleles = [];
	          this.start = undefined;
	          this.end = undefined;

	          var _iterator = _createForOfIteratorHelper(altTokens),
	              _step;

	          try {
	            for (_iterator.s(); !(_step = _iterator.n()).done;) {
	              var alt = _step.value;
	              this.alleles.push(alt); // We don't yet handle  SV and other special alt representations

	              if ("SV" !== this.type && isKnownAlt(alt)) {
	                var altLength = alt.length;
	                var lengthOnRef = ref.length; // Trim off matching bases.  Try first match, then right -> left,  then any remaining left -> right

	                var s = 0;

	                if (ref.charCodeAt(0) === alt.charCodeAt(0)) {
	                  s++;
	                  altLength--;
	                  lengthOnRef--;
	                } // right -> left from end


	                while (altLength > 0 && lengthOnRef > 0) {
	                  var altIdx = s + altLength - 1;
	                  var refIdx = s + lengthOnRef - 1;

	                  if (alt.charCodeAt(altIdx) === ref.charCodeAt(refIdx)) {
	                    altLength--;
	                    lengthOnRef--;
	                  } else {
	                    break;
	                  }
	                } // if any remaining, left -> right


	                while (altLength > 0 && lengthOnRef > 0) {
	                  var _altIdx = s;
	                  var _refIdx = s;

	                  if (alt.charCodeAt(_altIdx) === ref.charCodeAt(_refIdx)) {
	                    s++;
	                    altLength--;
	                    lengthOnRef--;
	                  } else {
	                    break;
	                  }
	                }

	                var alleleStart = this.pos + s - 1; // -1 for zero based coordinates

	                var alleleEnd = alleleStart + lengthOnRef; // insertions have zero length on ref, but we give them 1

	                this.start = this.start === undefined ? alleleStart : Math.min(this.start, alleleStart);
	                this.end = this.end === undefined ? alleleEnd : Math.max(this.end, alleleEnd);
	              }
	            }
	          } catch (err) {
	            _iterator.e(err);
	          } finally {
	            _iterator.f();
	          }
	        }
	      }
	    }
	  }, {
	    key: "popupData",
	    value: function popupData(genomicLocation, genomeId) {
	      var self = this,
	          fields,
	          gt;
	      var posString = this.end === this.pos ? this.pos : "".concat(this.pos, "-").concat(this.end);
	      fields = [{
	        name: "Chr",
	        value: this.chr
	      }, {
	        name: "Pos",
	        value: posString
	      }, {
	        name: "Names",
	        value: this.names ? this.names : ""
	      }, {
	        name: "Ref",
	        value: this.referenceBases
	      }, {
	        name: "Alt",
	        value: this.alternateBases.replace("<", "&lt;")
	      }, {
	        name: "Qual",
	        value: this.quality
	      }, {
	        name: "Filter",
	        value: this.filter
	      }];

	      if ("SNP" === this.type) {
	        var ref = this.referenceBases;

	        if (ref.length === 1) {
	          var altArray = this.alternateBases.split(",");

	          var _iterator2 = _createForOfIteratorHelper(altArray),
	              _step2;

	          try {
	            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	              var alt = _step2.value;

	              if (alt.length === 1) {
	                var l = TrackBase.getCravatLink(this.chr, this.pos, ref, alt, genomeId);

	                if (l) {
	                  fields.push("<hr/>");
	                  fields.push(l);
	                }
	              }
	            }
	          } catch (err) {
	            _iterator2.e(err);
	          } finally {
	            _iterator2.f();
	          }
	        }
	      }

	      if (this.hasOwnProperty("heterozygosity")) {
	        fields.push({
	          name: "Heterozygosity",
	          value: this.heterozygosity
	        });
	      }

	      if (this.info) {
	        fields.push('<hr>');
	        Object.keys(this.info).forEach(function (key) {
	          fields.push({
	            name: key,
	            value: arrayToString$1(self.info[key])
	          });
	        });
	      } // Special case of VCF with a single sample


	      if (this.calls && this.calls.length === 1) {
	        fields.push('<hr>');
	        gt = this.alleles[this.calls[0].genotype[0]] + this.alleles[this.calls[0].genotype[1]];
	        fields.push({
	          name: "Genotype",
	          value: gt
	        });
	      }

	      return fields;
	    }
	  }, {
	    key: "isRefBlock",
	    value: function isRefBlock() {
	      return "NONVARIANT" === this.type;
	    }
	  }]);

	  return Variant;
	}();

	function getInfoObject(infoStr) {
	  var info = {};

	  if (infoStr) {
	    infoStr.split(';').forEach(function (elem) {
	      var element = elem.split('=');
	      info[element[0]] = element[1];
	    });
	  }

	  return info;
	}

	function isKnownAlt(alt) {
	  for (var i = 0; i < alt.length; i++) {
	    if (!knownAltBases.has(alt.charCodeAt(i))) {
	      return false;
	    }
	  }

	  return true;
	}

	function determineType(ref, altAlleles) {
	  var refLength = ref.length;

	  if (altAlleles === undefined) {
	    return "UNKNOWN";
	  } else if (altAlleles.trim().length === 0 || altAlleles === "<NON_REF>" || altAlleles === "<*>" || altAlleles === ".") {
	    return "NONVARIANT";
	  } else {
	    var alleles = altAlleles.split(",");
	    var types = alleles.map(function (a) {
	      if (refLength === 1 && a.length === 1) {
	        return "SNP";
	      } else {
	        return "<NON_REF>" === a ? "NONVARIANT" : "OTHER";
	      }
	    });
	    var type = types[0];

	    var _iterator3 = _createForOfIteratorHelper(types),
	        _step3;

	    try {
	      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	        var t = _step3.value;

	        if (t !== type) {
	          return "MIXED";
	        }
	      }
	    } catch (err) {
	      _iterator3.e(err);
	    } finally {
	      _iterator3.f();
	    }

	    return type;
	  }
	}

	function arrayToString$1(value, delim) {
	  if (delim === undefined) delim = ",";

	  if (!Array.isArray(value)) {
	    return value;
	  }

	  return value.join(delim);
	}
	/**
	 * @deprecated - the GA4GH API has been deprecated.  This code no longer maintained.
	 * @param json
	 * @returns {Variant}
	 */


	function createGAVariant(json) {
	  var variant = new Variant();
	  variant.chr = json.referenceName;
	  variant.start = parseInt(json.start); // Might get overriden below

	  variant.end = parseInt(json.end); // Might get overriden below

	  variant.pos = variant.start + 1; // GA4GH is 0 based.

	  variant.names = arrayToString$1(json.names, "; ");
	  variant.referenceBases = json.referenceBases;
	  variant.alternateBases = arrayToString$1(json.alternateBases);
	  variant.quality = json.quality;
	  variant.filter = arrayToString$1(json.filter); // Flatten GA4GH attributes array

	  variant.info = {};

	  if (json.info) {
	    Object.keys(json.info).forEach(function (key) {
	      var value,
	          valueArray = json.info[key];

	      if (Array.isArray(valueArray)) {
	        value = valueArray.join(",");
	      } else {
	        value = valueArray;
	      }

	      variant.info[key] = value;
	    });
	  } // Need to build a hash of calls for fast lookup
	  // Note from the GA4GH spec on call ID:
	  //
	  // The ID of the call set this variant call belongs to. If this field is not present,
	  // the ordering of the call sets from a SearchCallSetsRequest over this GAVariantSet
	  // is guaranteed to match the ordering of the calls on this GAVariant.
	  // The number of results will also be the same.


	  variant.calls = {};
	  var id;

	  if (json.calls) {
	    json.calls.forEach(function (call) {
	      id = call.callSetId;
	      variant.calls[id] = call;
	    });
	  }

	  init(variant);
	  return variant;
	}

	/**
	 * Parser for VCF files.
	 */

	var VcfParser = function VcfParser() {};

	VcfParser.prototype.parseHeader = function (data) {
	  var header = {};
	  var dataWrapper = getDataWrapper(data); // First line must be file format

	  var line = dataWrapper.nextLine();

	  if (line.startsWith("##fileformat")) {
	    header.version = line.substr(13);
	  } else {
	    throw new Error("Invalid VCF file: missing fileformat line");
	  }

	  while ((line = dataWrapper.nextLine()) !== undefined) {
	    if (line.startsWith("#")) {
	      var id = void 0;
	      var values = {};

	      if (line.startsWith("##")) {
	        if (line.startsWith("##INFO") || line.startsWith("##FILTER") || line.startsWith("##FORMAT")) {
	          var ltIdx = line.indexOf("<");
	          var gtIdx = line.lastIndexOf(">");

	          if (!(ltIdx > 2 && gtIdx > 0)) {
	            continue;
	          }

	          var type = line.substring(2, ltIdx - 1);
	          if (!header[type]) header[type] = {}; //##INFO=<ID=AF,Number=A,Type=Float,Description="Allele frequency based on Flow Evaluator observation counts">
	          // ##FILTER=<ID=NOCALL,Description="Generic filter. Filtering details stored in FR info tag.">
	          // ##FORMAT=<ID=AF,Number=A,Type=Float,Description="Allele frequency based on Flow Evaluator observation counts">

	          var tokens = splitStringRespectingQuotes(line.substring(ltIdx + 1, gtIdx - 1), ",");

	          var _iterator = _createForOfIteratorHelper(tokens),
	              _step;

	          try {
	            for (_iterator.s(); !(_step = _iterator.n()).done;) {
	              var token = _step.value;
	              var kv = token.split("=");

	              if (kv.length > 1) {
	                if (kv[0] === "ID") {
	                  id = kv[1];
	                } else {
	                  values[kv[0]] = kv[1];
	                }
	              }
	            }
	          } catch (err) {
	            _iterator.e(err);
	          } finally {
	            _iterator.f();
	          }

	          if (id) {
	            header[type][id] = values;
	          }
	        }
	      } else if (line.startsWith("#CHROM")) {
	        var _tokens = line.split("\t");

	        if (_tokens.length > 8) {
	          // call set names -- use column index for id
	          header.callSets = [];

	          for (var j = 9; j < _tokens.length; j++) {
	            header.callSets.push({
	              id: j,
	              name: _tokens[j]
	            });
	          }
	        }
	      }
	    } else {
	      break;
	    }
	  }

	  this.header = header; // Will need to intrepret genotypes and info field

	  return header;
	};

	function extractCallFields(tokens) {
	  var callFields = {
	    genotypeIndex: -1,
	    fields: tokens
	  };

	  for (var i = 0; i < tokens.length; i++) {
	    if ("GT" === tokens[i]) {
	      callFields.genotypeIndex = i;
	    }
	  }

	  return callFields;
	}
	/**
	 * Parse data as a collection of Variant objects.
	 *
	 * @param data
	 * @returns {Array}
	 */


	VcfParser.prototype.parseFeatures = function (data) {
	  var allFeatures = [];
	  var callSets = this.header.callSets;
	  var dataWrapper = getDataWrapper(data);
	  var nExpectedColumns = 8 + (callSets ? callSets.length + 1 : 0);
	  var line;

	  while ((line = dataWrapper.nextLine()) !== undefined) {
	    if (line && !line.startsWith("#")) {
	      var tokens = line.split("\t");

	      if (tokens.length === nExpectedColumns) {
	        var variant = createVCFVariant(tokens);
	        variant.header = this.header; // Keep a pointer to the header to interpret fields for popup text

	        allFeatures.push(variant);

	        if (tokens.length > 9) {
	          var callSet, call;

	          (function () {
	            // Format
	            var callFields = extractCallFields(tokens[8].split(":"));
	            variant.calls = {};

	            for (var index = 9; index < tokens.length; index++) {
	              var token = tokens[index];
	              callSet = callSets[index - 9];
	              call = {
	                callSetName: callSet.name,
	                info: {}
	              };
	              variant.calls[callSet.id] = call;
	              token.split(":").forEach(function (callToken, idx) {
	                switch (idx) {
	                  case callFields.genotypeIndex:
	                    call.genotype = [];
	                    callToken.split(/[\|\/]/).forEach(function (s) {
	                      call.genotype.push('.' === s ? s : parseInt(s));
	                    });
	                    break;

	                  default:
	                    call.info[callFields.fields[idx]] = callToken;
	                }
	              });
	            }
	          })();
	        }
	      }
	    }
	  }

	  return allFeatures;
	};

	/**
	 * Parser for IGV desktop GWAS files.  See http://software.broadinstitute.org/software/igv/GWAS
	 */

	var GWASParser = /*#__PURE__*/function () {
	  function GWASParser(config) {
	    _classCallCheck(this, GWASParser);

	    // Defaults - can be overriden by header
	    this.config = config;

	    if (config.columns) {
	      if (config.columns.chromosome === undefined || config.columns.position === undefined || config.columns.value === undefined) {
	        throw Error("columns property must define chrCol, posCol, and valueCol");
	      }

	      this.posCol = config.columns.position - 1;
	      this.chrCol = config.columns.chromosome - 1;
	      this.pvalueCol = config.columns.value - 1;
	    } else {
	      // Defaults -- can be overriden in header
	      this.posCol = 2;
	      this.chrCol = 1;
	      this.pvalueCol = 3;
	    }
	  }

	  _createClass(GWASParser, [{
	    key: "parseHeader",
	    value: function parseHeader(data) {
	      var dataWrapper = getDataWrapper(data);
	      var headerLine = dataWrapper.nextLine();
	      return this.parseHeaderLine(headerLine);
	    }
	  }, {
	    key: "parseHeaderLine",
	    value: function parseHeaderLine(headerLine) {
	      this.columns = headerLine.split(/\t/);

	      if (!this.config.columns) {
	        for (var i = 0; i < this.columns.length; i++) {
	          var c = this.columns[i].toLowerCase();

	          switch (c) {
	            case 'chr':
	            case 'chromosome':
	            case 'chr_id':
	              this.chrCol = i;
	              break;

	            case 'bp':
	            case 'pos':
	            case 'position':
	            case 'chr_pos':
	              this.posCol = i;
	              break;

	            case 'p':
	            case 'pval':
	            case 'pvalue':
	            case 'p-value':
	            case 'p.value':
	              this.pvalueCol = i;
	              break;
	          }
	        }
	      }

	      return this.columns;
	    }
	  }, {
	    key: "parseFeatures",
	    value: function parseFeatures(data) {
	      if (!data) return null;
	      var dataWrapper = getDataWrapper(data);
	      var allFeatures = [];
	      var headerLine = dataWrapper.nextLine();

	      if (!this.columns) {
	        this.parseHeaderLine(headerLine);
	      }

	      var line;

	      while ((line = dataWrapper.nextLine()) !== undefined) {
	        var tokens = line.split(/\t/);

	        if (tokens.length === this.columns.length) {
	          var chr = tokens[this.chrCol];
	          var start = parseInt(tokens[this.posCol]) - 1;
	          var end = start + 1;
	          var value = parseFloat(tokens[this.pvalueCol]);
	          allFeatures.push(new GWASFeature({
	            chr: chr,
	            start: start,
	            end: end,
	            value: value,
	            line: line,
	            columns: this.columns
	          }));
	        }
	      }

	      return allFeatures;
	    }
	  }]);

	  return GWASParser;
	}();

	var GWASFeature = /*#__PURE__*/function () {
	  function GWASFeature(_ref) {
	    var chr = _ref.chr,
	        start = _ref.start,
	        end = _ref.end,
	        value = _ref.value,
	        line = _ref.line,
	        columns = _ref.columns;

	    _classCallCheck(this, GWASFeature);

	    this.chr = chr;
	    this.start = start;
	    this.end = end;
	    this.value = value;
	    this.line = line;
	    this.columns = columns;
	  }

	  _createClass(GWASFeature, [{
	    key: "popupData",
	    value: function popupData() {
	      var tokens = this.line.split(/\t/);
	      return this.columns.map(function (c, index) {
	        return {
	          name: c,
	          value: tokens[index]
	        };
	      });
	    }
	  }, {
	    key: "getAttribute",
	    value: function getAttribute(attrName) {
	      var tokens = this.line.split(/\t/);

	      for (var i = 0; i < this.columns.length; i++) {
	        if (this.columns[i] === attrName) {
	          return tokens[i];
	        }
	      }

	      return undefined;
	    }
	  }]);

	  return GWASFeature;
	}();

	/**
	 *  Define parsers for bed-like files  (.bed, .gff, .vcf, etc).  A parser should implement 2 methods
	 *
	 *     parseHeader(data) - return an object representing a header or metadata.  Details are format specific
	 *
	 *     parseFeatures(data) - return an array of features
	 *
	 */

	var aedRegexpNoNamespace = new RegExp("([^:]*)\\(([^)]*)\\)"); // name(type) for AED parsing (namespace undefined)

	var aedRegexpNamespace = new RegExp("([^:]*):([^(]*)\\(([^)]*)\\)"); // namespace:name(type) for AED parsing

	var AEDParser = /*#__PURE__*/function () {
	  function AEDParser(config) {
	    _classCallCheck(this, AEDParser);

	    var decode = config ? config.decode : undefined;
	    this.nameField = config ? config.nameField : undefined;
	    this.skipRows = 0; // The number of fixed header rows to skip.  Override for specific types as needed

	    if (decode) {
	      this.decode = decode;
	    } else {
	      this.decode = decodeAed;
	    }

	    this.delimiter = "\t";
	  }

	  _createClass(AEDParser, [{
	    key: "parseHeader",
	    value: function parseHeader(data) {
	      var line;
	      var header;
	      var dataWrapper = getDataWrapper(data);

	      while (line = dataWrapper.nextLine()) {
	        if (line.startsWith("track") || line.startsWith("#") || line.startsWith("browser")) {
	          if (line.startsWith("track") || line.startsWith("#track")) {
	            var h = parseTrackLine$1(line);

	            if (header) {
	              Object.assign(header, h);
	            } else {
	              header = h;
	            }
	          } else if (line.startsWith("#columns")) {
	            var _h = parseColumnsDirective$1(line);

	            if (header) {
	              Object.assign(header, _h);
	            } else {
	              header = _h;
	            }
	          } else if (line.startsWith("##gff-version 3")) {
	            this.format = "gff3";
	            if (!header) header = {};
	            header["format"] = "gff3";
	          }
	        } else {
	          break;
	        }
	      }

	      this.header = header; // Directives might be needed for parsing lines

	      return header;
	    }
	  }, {
	    key: "parseFeatures",
	    value: function parseFeatures(data) {
	      if (!data) return null;
	      var dataWrapper = getDataWrapper(data);
	      var nextLine = dataWrapper.nextLineNoTrim.bind(dataWrapper);
	      var allFeatures = [];
	      var decode = this.decode;
	      var delimiter = this.delimiter || "\t";
	      var i = 0;
	      var line;
	      var wig;

	      while ((line = nextLine()) !== undefined) {
	        i++;

	        if (i <= this.skipRows || line.startsWith("track") || line.startsWith("#") || line.startsWith("browser")) {
	          continue;
	        }

	        var tokens = readTokensAed();

	        if (tokens.length < 1) {
	          continue;
	        }

	        if (!this.aed) {
	          // Store information about the aed header in the parser itself
	          // This is done only once - on the first row
	          this.aed = parseAedHeaderRow(tokens);
	          continue;
	        }

	        var feature = decode.call(this, tokens, wig);

	        if (feature) {
	          allFeatures.push(feature);
	        }
	      }

	      return allFeatures; // Double quoted strings can contain newlines in AED
	      // "" is an escape for a ".
	      // Parse all this, clean it up, split into tokens in a custom way

	      function readTokensAed() {
	        var tokens = [],
	            token = "",
	            quotedString = false,
	            n,
	            c;

	        while (line || line === '') {
	          for (n = 0; n < line.length; n++) {
	            c = line.charAt(n);

	            if (c === delimiter) {
	              if (!quotedString) {
	                tokens.push(token);
	                token = "";
	              } else {
	                token += c;
	              }
	            } else if (c === "\"") {
	              // Look ahead to the next character
	              if (n + 1 < line.length && line.charAt(n + 1) === "\"") {
	                if (quotedString) {
	                  // Turn "" into a single " in the output string
	                  token += "\"";
	                } // Skip the next double quote


	                n++;
	              } else {
	                // We know the next character is NOT a double quote, flip our state
	                quotedString = !quotedString;
	              }
	            } else {
	              token += c;
	            }
	          } // We are at the end of the line


	          if (quotedString) {
	            token += '\n'; // Add newline to the token

	            line = nextLine(); // Keep going
	          } else {
	            // We can end the loop
	            break;
	          }
	        } // Push the last token


	        tokens.push(token);
	        return tokens;
	      }
	    }
	  }]);

	  return AEDParser;
	}();

	function parseAedToken(value) {
	  // Example: refseq:accessionNumber(aed:String)
	  // refseq - namespace, will be declared later
	  // accessionNumber - name of the field
	  // aed:String - type of the field
	  // The namespace part may be missing
	  var match = aedRegexpNamespace.exec(value);

	  if (match) {
	    return {
	      namespace: match[1],
	      name: match[2],
	      type: match[3]
	    };
	  }

	  match = aedRegexpNoNamespace.exec(value);

	  if (match) {
	    return {
	      namespace: '?',
	      name: match[1],
	      type: match[2]
	    };
	  } else {
	    throw new Error("Error parsing the header row of AED file - column not in ns:name(ns:type) format");
	  }
	}

	function parseAedHeaderRow(tokens) {
	  // First row of AED file defines column names
	  // Each header item is an aed token - see parseAedToken
	  var aed, k, token, aedToken; // Initialize aed section to be filled in

	  aed = {
	    columns: [// Information about the namespace, name and type of each column
	      // Example entry:
	      // { namespace: 'bio', name: 'start', type: 'aed:Integer' }
	    ],
	    metadata: {// Metadata about the entire AED file
	      // Example:
	      // {
	      //    aed: {
	      //       application: { value: "CHaS Browser 3.3.0.139 (r10838)", type: "aed:String" },
	      //       created: { value: "2018-01-02T10:20:30.123+01:00", type: "aed:DateTime" },
	      //       modified: { value: "2018-03-04T11:22:33.456+01:00", type: "aed:DateTime" },
	      //    }
	      //    affx: {
	      //       ucscGenomeVersion: { value: "hg19", type: "aed:String" }
	      //    },
	      //    namespace: {
	      //       omim: { value: "http://affymetrix.com/ontology/www.ncbi.nlm.nih.gov/omim/", type: "aed:URI" },
	      //       affx: { value: "http://affymetrix.com/ontology/", type: "aed:URI" },
	      //       refseq: { value: "http://affymetrix.com/ontology/www.ncbi.nlm.nih.gov/RefSeq/", type: "aed:URI" }
	      //    }
	      // }
	    }
	  };

	  for (k = 0; k < tokens.length; k++) {
	    token = tokens[k];
	    aedToken = parseAedToken(token);
	    aed.columns.push(aedToken);
	  }

	  return aed;
	}

	function parseTrackLine$1(line) {
	  var properties = {};
	  var tokens = line.split(/(?:")([^"]+)(?:")|([^\s"]+)(?=\s+|$)/g); // Clean up tokens array

	  var curr;
	  var tmp = [];

	  var _iterator = _createForOfIteratorHelper(tokens),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var tk = _step.value;
	      if (!tk || tk.trim().length === 0) continue;

	      if (tk.endsWith("=") > 0) {
	        curr = tk;
	      } else if (curr) {
	        tmp.push(curr + tk);
	        curr = undefined;
	      } else {
	        tmp.push(tk);
	      }
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }

	  for (var _i = 0, _tmp = tmp; _i < _tmp.length; _i++) {
	    var str = _tmp[_i];
	    if (!str) return;
	    var kv = str.split('=', 2);

	    if (kv.length === 2) {
	      var key = kv[0].trim();
	      var value = kv[1].trim();
	      properties[key] = value;
	    }
	  }

	  return properties;
	}

	function parseColumnsDirective$1(line) {
	  var properties = {};
	  var t1 = line.split(/\s+/);

	  if (t1.length === 2) {
	    var t2 = t1[1].split(";");
	    t2.forEach(function (keyValue) {
	      var t = keyValue.split("=");

	      if (t[0] === "color") {
	        properties.colorColumn = Number.parseInt(t[1]) - 1;
	      } else if (t[0] === "thickness") {
	        properties.thicknessColumn = Number.parseInt(t[1]) - 1;
	      }
	    });
	  }

	  return properties;
	}
	/**
	 * AED file feature.
	 *
	 * @param aed link to the AED file object containing file-level metadata and column descriptors
	 * @param allColumns All columns as parsed from the AED
	 *
	 * Other values are parsed one by one
	 */


	function AedFeature(aed, allColumns) {
	  var token,
	      aedColumn,
	      aedColumns = aed.columns; // Link to AED file (for metadata)

	  this.aed = aed; // Unparsed columns from AED file

	  this.allColumns = allColumns; // Prepare space for the parsed values

	  this.chr = null;
	  this.start = null;
	  this.end = null;
	  this.score = 1000;
	  this.strand = '.';
	  this.cdStart = null;
	  this.cdEnd = null;
	  this.name = null;
	  this.color = null;

	  for (var i = 0; i < allColumns.length; i++) {
	    token = allColumns[i];

	    if (!token) {
	      // Skip empty fields
	      continue;
	    }

	    aedColumn = aedColumns[i];

	    if (aedColumn.type === 'aed:Integer') {
	      token = parseInt(token);
	    }

	    var arr = [];

	    if (aedColumn.namespace.length > 0) {
	      for (var j = 0; j < aedColumn.namespace.length; j++) {
	        arr.push(aedColumn.namespace.charCodeAt(j));
	      }
	    }

	    if (aedColumn.namespace.trim() === 'bio') {
	      if (aedColumn.name === 'sequence') {
	        this.chr = token;
	      } else if (aedColumn.name === 'start') {
	        this.start = token;
	      } else if (aedColumn.name === 'end') {
	        this.end = token;
	      } else if (aedColumn.name === 'cdsMin') {
	        this.cdStart = token;
	      } else if (aedColumn.name === 'cdsMax') {
	        this.cdEnd = token;
	      } else if (aedColumn.name === 'strand') {
	        this.strand = token;
	      }
	    } else if (aedColumn.namespace === 'aed') {
	      if (aedColumn.name === 'name') {
	        this.name = token;
	      }
	    } else if (aedColumn.namespace === 'style') {
	      if (aedColumn.name === 'color') {
	        this.color = IGVColor.createColorString(token);
	      }
	    }
	  }
	}

	AedFeature.prototype.popupData = function () {
	  var data = [],
	      aed = this.aed; // Just dump everything we have for now

	  for (var i = 0; i < this.allColumns.length; i++) {
	    var featureValue = this.allColumns[i];
	    var name = aed.columns[i].name; // Skip columns that are not interesting - you know the sequence, and you can see color

	    if (name !== 'sequence' && name !== 'color') {
	      if (featureValue) {
	        data.push({
	          name: name,
	          value: featureValue
	        });
	      }
	    }
	  }

	  return data;
	};
	/**
	 * Decode the AED file format
	 * @param tokens
	 * @param ignore
	 * @returns decoded feature, or null if this is not a valid record
	 */


	function decodeAed(tokens, ignore) {
	  var name,
	      value,
	      token,
	      nonEmptyTokens = 0,
	      aedColumns = this.aed.columns,
	      aedColumn,
	      aedKey,
	      i; // Each aed row must match the exact number of columns or we skip it

	  if (tokens.length !== aedColumns.length) {
	    return undefined;
	  }

	  for (i = 0; i < tokens.length; i++) {
	    aedColumn = aedColumns[i];
	    token = tokens[i];

	    if (token !== '') {
	      nonEmptyTokens++;
	    }

	    if (aedColumn.name === 'name' && aedColumn.namespace === 'aed') {
	      name = token;
	    } else if (aedColumn.name === 'value' && aedColumn.namespace === 'aed') {
	      value = token;
	    }
	  }

	  if (nonEmptyTokens === 2 && name && value) {
	    // Special row that defines metadata for the entire file
	    aedKey = parseAedToken(name); // Store in the metadata section

	    if (!this.aed.metadata[aedKey.namespace]) {
	      this.aed.metadata[aedKey.namespace] = {};
	    }

	    if (!this.aed.metadata[aedKey.namespace][aedKey.name]) {
	      this.aed.metadata[aedKey.namespace][aedKey.name] = {
	        type: aedKey.type,
	        value: value
	      };
	    } // Ignore this value


	    return undefined;
	  }

	  var feature = new AedFeature(this.aed, tokens);

	  if (!feature.chr || !feature.start && feature.start !== 0 || !feature.end) {
	    return undefined;
	  }

	  return feature;
	}

	var columns = ["Chr", "Start", "End", "Name", "Null", "Strand", "ExcludedBases", "Coverage", "IntronDepth", "IntronDepth25Percentile", "IntronDepth50Percentile", "IntronDepth75Percentile", "ExonToIntronReadsLeft", "ExonToIntronReadsRight", "IntronDepthFirst50bp", "IntronDepthLast50bp", "SpliceLeft", "SpliceRight", "SpliceExact", "IRratio", "Warnings"];
	/**
	 * Parser for IGV desktop GWAS files.  See http://software.broadinstitute.org/software/igv/GWAS
	 */

	var IRFinderParser = /*#__PURE__*/function () {
	  function IRFinderParser(config) {
	    _classCallCheck(this, IRFinderParser);

	    this.config = config;
	  }

	  _createClass(IRFinderParser, [{
	    key: "parseFeatures",
	    value: function parseFeatures(data) {
	      if (!data) return null;
	      var dataWrapper = getDataWrapper(data);
	      var allFeatures = [];
	      var line;

	      while ((line = dataWrapper.nextLine()) !== undefined) {
	        var tokens = line.split(/\t/);

	        if (tokens.length === columns.length && tokens[0] != columns[0]) {
	          allFeatures.push(new IRFinderFeature(tokens));
	        }
	      }

	      return allFeatures;
	    }
	  }, {
	    key: "parseHeader",
	    value: function parseHeader() {
	      return columns;
	    }
	  }]);

	  return IRFinderParser;
	}();

	var IRFinderFeature = /*#__PURE__*/function () {
	  function IRFinderFeature(tokens) {
	    _classCallCheck(this, IRFinderFeature);

	    this.chr = tokens[0];
	    this.start = parseInt(tokens[1]) - 15;
	    this.end = parseInt(tokens[2]) + 15;
	    this.intronType = tokens[3].split("/")[2];
	    this.strand = tokens[5];
	    this.intronDepth = parseFloat(tokens[8]);
	    this.exonToIntron = [parseFloat(tokens[12]), parseFloat(tokens[13])];
	    this.flankDepth = [parseFloat(tokens[14]), parseFloat(tokens[15])];
	    this.splice = [parseInt(tokens[16]), parseInt(tokens[17]), parseInt(tokens[18])];
	    this.exons = [Math.ceil(this.flankDepth[0] + this.splice[0]), Math.ceil(this.flankDepth[1] + this.splice[1])];
	    this.value = Math.max.apply(Math, _toConsumableArray(this.exons)); // It's the maximum height

	    this.IRratio = parseFloat([tokens[19]]);
	    this.warning = tokens[20];
	    this.tokens = tokens;
	  }

	  _createClass(IRFinderFeature, [{
	    key: "popupData",
	    value: function popupData() {
	      var _this = this;

	      return columns.map(function (c, index) {
	        return {
	          name: c,
	          value: _this.tokens[index]
	        };
	      }).filter(function (f) {
	        return f.name != "Null";
	      });
	    }
	  }, {
	    key: "getAttribute",
	    value: function getAttribute(attrName) {
	      return this.tokens.find(function (n, idx) {
	        return columns[idx] == attrName;
	      });
	    }
	  }]);

	  return IRFinderFeature;
	}();

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2014 Broad Institute
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	// TODO -- big endian?
	var BinaryParser = /*#__PURE__*/function () {
	  function BinaryParser(dataView, littleEndian) {
	    _classCallCheck(this, BinaryParser);

	    this.littleEndian = littleEndian !== undefined ? littleEndian : true;
	    this.position = 0;
	    this.view = dataView;
	    this.length = dataView.byteLength;
	  }

	  _createClass(BinaryParser, [{
	    key: "available",
	    value: function available() {
	      return this.length - this.position;
	    }
	  }, {
	    key: "remLength",
	    value: function remLength() {
	      return this.length - this.position;
	    }
	  }, {
	    key: "hasNext",
	    value: function hasNext() {
	      return this.position < this.length - 1;
	    }
	  }, {
	    key: "getByte",
	    value: function getByte() {
	      var retValue = this.view.getUint8(this.position, this.littleEndian);
	      this.position++;
	      return retValue;
	    }
	  }, {
	    key: "getShort",
	    value: function getShort() {
	      var retValue = this.view.getInt16(this.position, this.littleEndian);
	      this.position += 2;
	      return retValue;
	    }
	  }, {
	    key: "getUShort",
	    value: function getUShort() {
	      // var byte1 = this.getByte(),
	      //     byte2 = this.getByte(),
	      //     retValue = ((byte2 << 24 >>> 16) + (byte1 << 24 >>> 24));
	      //     return retValue;
	      //
	      var retValue = this.view.getUint16(this.position, this.littleEndian);
	      this.position += 2;
	      return retValue;
	    }
	  }, {
	    key: "getInt",
	    value: function getInt() {
	      var retValue = this.view.getInt32(this.position, this.littleEndian);
	      this.position += 4;
	      return retValue;
	    }
	  }, {
	    key: "getUInt",
	    value: function getUInt() {
	      var retValue = this.view.getUint32(this.position, this.littleEndian);
	      this.position += 4;
	      return retValue;
	    }
	  }, {
	    key: "getLong",
	    value: function getLong() {
	      // DataView doesn't support long. So we'll try manually
	      var b = [];
	      b[0] = this.view.getUint8(this.position);
	      b[1] = this.view.getUint8(this.position + 1);
	      b[2] = this.view.getUint8(this.position + 2);
	      b[3] = this.view.getUint8(this.position + 3);
	      b[4] = this.view.getUint8(this.position + 4);
	      b[5] = this.view.getUint8(this.position + 5);
	      b[6] = this.view.getUint8(this.position + 6);
	      b[7] = this.view.getUint8(this.position + 7);
	      var value = 0;

	      if (this.littleEndian) {
	        for (var i = b.length - 1; i >= 0; i--) {
	          value = value * 256 + b[i];
	        }
	      } else {
	        for (var _i = 0; _i < b.length; _i++) {
	          value = value * 256 + b[_i];
	        }
	      }

	      this.position += 8;
	      return value;
	    }
	  }, {
	    key: "getString",
	    value: function getString(len) {
	      var s = "";
	      var c;

	      while ((c = this.view.getUint8(this.position++)) !== 0) {
	        s += String.fromCharCode(c);
	        if (len && s.length === len) break;
	      }

	      return s;
	    }
	  }, {
	    key: "getFixedLengthString",
	    value: function getFixedLengthString(len) {
	      var s = "";
	      var i;
	      var c;

	      for (i = 0; i < len; i++) {
	        c = this.view.getUint8(this.position++);

	        if (c > 0) {
	          s += String.fromCharCode(c);
	        }
	      }

	      return s;
	    }
	  }, {
	    key: "getFixedLengthTrimmedString",
	    value: function getFixedLengthTrimmedString(len) {
	      var s = "";
	      var i;
	      var c;

	      for (i = 0; i < len; i++) {
	        c = this.view.getUint8(this.position++);

	        if (c > 32) {
	          s += String.fromCharCode(c);
	        }
	      }

	      return s;
	    }
	  }, {
	    key: "getFloat",
	    value: function getFloat() {
	      var retValue = this.view.getFloat32(this.position, this.littleEndian);
	      this.position += 4;
	      return retValue;
	    }
	  }, {
	    key: "getDouble",
	    value: function getDouble() {
	      var retValue = this.view.getFloat64(this.position, this.littleEndian);
	      this.position += 8;
	      return retValue;
	    }
	  }, {
	    key: "skip",
	    value: function skip(n) {
	      this.position += n;
	      return this.position;
	    }
	    /**
	     * Return a bgzip (bam and tabix) virtual pointer
	     * TODO -- why isn't 8th byte used ?
	     * @returns {*}
	     */

	  }, {
	    key: "getVPointer",
	    value: function getVPointer() {
	      var position = this.position,
	          offset = this.view.getUint8(position + 1) << 8 | this.view.getUint8(position),
	          byte6 = (this.view.getUint8(position + 6) & 0xff) * 0x100000000,
	          byte5 = (this.view.getUint8(position + 5) & 0xff) * 0x1000000,
	          byte4 = (this.view.getUint8(position + 4) & 0xff) * 0x10000,
	          byte3 = (this.view.getUint8(position + 3) & 0xff) * 0x100,
	          byte2 = this.view.getUint8(position + 2) & 0xff,
	          block = byte6 + byte5 + byte4 + byte3 + byte2;
	      this.position += 8; //       if (block == 0 && offset == 0) {
	      //           return null;
	      //       } else {

	      return new VPointer(block, offset); //       }
	    }
	  }]);

	  return BinaryParser;
	}();

	var VPointer = /*#__PURE__*/function () {
	  function VPointer(block, offset) {
	    _classCallCheck(this, VPointer);

	    this.block = block;
	    this.offset = offset;
	  }

	  _createClass(VPointer, [{
	    key: "isLessThan",
	    value: function isLessThan(vp) {
	      return this.block < vp.block || this.block === vp.block && this.offset < vp.offset;
	    }
	  }, {
	    key: "isGreaterThan",
	    value: function isGreaterThan(vp) {
	      return this.block > vp.block || this.block === vp.block && this.offset > vp.offset;
	    }
	  }, {
	    key: "print",
	    value: function print() {
	      return "" + this.block + ":" + this.offset;
	    }
	  }]);

	  return VPointer;
	}();

	var CSI1_MAGIC = 21582659; // CSI\1

	var CSI2_MAGIC = 38359875; // CSI\2

	function parseCsiIndex(_x5, _x6) {
	  return _parseCsiIndex.apply(this, arguments);
	}

	function _parseCsiIndex() {
	  _parseCsiIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(arrayBuffer, genome) {
	    var idx;
	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            idx = new CSIIndex();
	            idx.parse(arrayBuffer, genome);
	            return _context2.abrupt("return", idx);

	          case 3:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	  return _parseCsiIndex.apply(this, arguments);
	}

	var CSIIndex = /*#__PURE__*/function () {
	  function CSIIndex(tabix) {
	    _classCallCheck(this, CSIIndex);

	    this.tabix = true; // Means whatever is indexed is bgzipped
	  }

	  _createClass(CSIIndex, [{
	    key: "parse",
	    value: function parse(arrayBuffer, genome) {
	      var parser = new BinaryParser(new DataView(arrayBuffer));
	      var magic = parser.getInt();

	      if (magic !== CSI1_MAGIC) {
	        if (magic === CSI2_MAGIC) {
	          throw Error("CSI version 2 is not supported.  Please enter an issue at https://github.com/igvteam/igv.js");
	        } else {
	          throw Error("Not a CSI index");
	        }
	      }

	      this.indices = [];
	      this.blockMin = Number.MAX_SAFE_INTEGER;
	      this.blockMax = 0;
	      this.sequenceIndexMap = {};
	      this.minShift = parser.getInt();
	      this.depth = parser.getInt();
	      var lAux = parser.getInt();

	      if (lAux >= 28) {
	        // Tabix header parameters aren't used, but they must be read to advance the pointer
	        var format = parser.getInt();
	        var col_seq = parser.getInt();
	        var col_beg = parser.getInt();
	        var col_end = parser.getInt();
	        var meta = parser.getInt();
	        var skip = parser.getInt();
	        var l_nm = parser.getInt();
	        var nameEndPos = parser.position + l_nm;
	        var i = 0;

	        while (parser.position < nameEndPos) {
	          var seq_name = parser.getString(); // Translate to "official" chr name.

	          if (genome) {
	            seq_name = genome.getChromosomeName(seq_name);
	          }

	          this.sequenceIndexMap[seq_name] = i;
	          i++;
	        }
	      }

	      var MAX_BIN = this.bin_limit() + 1;
	      var nref = parser.getInt();

	      for (var ref = 0; ref < nref; ref++) {
	        var binIndex = [];
	        var loffset = [];
	        var nbin = parser.getInt();

	        for (var b = 0; b < nbin; b++) {
	          var binNumber = parser.getInt();
	          loffset[binNumber] = parser.getVPointer();

	          if (binNumber > MAX_BIN) {
	            // This is a psuedo bin, not used but we have to consume the bytes
	            var nchnk = parser.getInt(); // # of chunks for this bin

	            var cs = parser.getVPointer(); // unmapped beg

	            var ce = parser.getVPointer(); // unmapped end

	            var n_maped = parser.getLong();
	            var nUnmapped = parser.getLong();
	          } else {
	            binIndex[binNumber] = [];

	            var _nchnk = parser.getInt(); // # of chunks for this bin


	            for (var _i = 0; _i < _nchnk; _i++) {
	              var _cs = parser.getVPointer(); //chunk_beg


	              var _ce = parser.getVPointer(); //chunk_end


	              if (_cs && _ce) {
	                if (_cs.block < this.blockMin) {
	                  this.blockMin = _cs.block; // Block containing first alignment
	                }

	                if (_ce.block > this.blockMax) {
	                  this.blockMax = _ce.block;
	                }

	                binIndex[binNumber].push([_cs, _ce]);
	              }
	            }
	          }
	        }

	        if (nbin > 0) {
	          this.indices[ref] = {
	            binIndex: binIndex,
	            loffset: loffset
	          };
	        }
	      }
	    }
	    /**
	     * Fetch blocks for a particular genomic range.  This method is public so it can be unit-tested.
	     *
	     * @param refId  the sequence dictionary index of the chromosome
	     * @param min  genomic start position
	     * @param max  genomic end position
	     * @param return an array of {minv: {filePointer, offset}, {maxv: {filePointer, offset}}
	     */

	  }, {
	    key: "blocksForRange",
	    value: function blocksForRange(refId, min, max) {
	      var ba = this.indices[refId];

	      if (!ba) {
	        return [];
	      } else {
	        var overlappingBins = this.reg2bins(min, max); // List of bin #s that overlap min, max

	        if (overlappingBins.length == 0) return [];
	        var chunks = []; // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned

	        var _iterator = _createForOfIteratorHelper(overlappingBins),
	            _step;

	        try {
	          for (_iterator.s(); !(_step = _iterator.n()).done;) {
	            var binRange = _step.value;

	            for (var bin = binRange[0]; bin <= binRange[1]; bin++) {
	              if (ba.binIndex[bin]) {
	                var binChunks = ba.binIndex[bin];
	                var nchnk = binChunks.length;

	                for (var c = 0; c < nchnk; ++c) {
	                  var cs = binChunks[c][0];
	                  var ce = binChunks[c][1];
	                  chunks.push({
	                    minv: cs,
	                    maxv: ce,
	                    bin: bin
	                  });
	                }
	              }
	            }
	          }
	        } catch (err) {
	          _iterator.e(err);
	        } finally {
	          _iterator.f();
	        }

	        var lowestOffset = ba.loffset[overlappingBins[0]];
	        return optimizeChunks(chunks, lowestOffset);
	      }
	    } // reg2bins implementation adapted from GMOD/tabix-js  https://github.com/GMOD/tabix-js/blob/master/src/csi.ts

	  }, {
	    key: "reg2bins",
	    value: function reg2bins(beg, end) {
	      beg -= 1; // < convert to 1-based closed

	      if (beg < 1) beg = 1;
	      if (end > Math.pow(2, 50)) end = Math.pow(2, 34); // 17 GiB ought to be enough for anybody

	      end -= 1;
	      var l = 0;
	      var t = 0;
	      var s = this.minShift + this.depth * 3;
	      var bins = [];

	      for (; l <= this.depth; s -= 3, t += 1 << l * 3, l += 1) {
	        var b = t + (beg >> s);
	        var e = t + (end >> s);
	        if (e - b + bins.length > this.maxBinNumber) throw new Error("query ".concat(beg, "-").concat(end, " is too large for current binning scheme (shift ").concat(this.minShift, ", depth ").concat(this.depth, "), try a smaller query or a coarser index binning scheme")); //for (let i = b; i <= e; i += 1) bins.push(i)

	        bins.push([b, e]);
	      }

	      return bins;
	    } // function reg2bins(beg, end, min_shift, depth) {
	    //     let l, t, n, s = min_shift + depth * 3;
	    //     const bins = [];
	    //     for (--end, l = n = t = 0; l <= depth; s -= 3, t += 1 << l * 3, ++l) {
	    //         let b = t + (beg >> s), e = t + (end >> s), i;
	    //         for (i = b; i <= e; ++i) bins[n++] = i;
	    //     }
	    //     return bins;
	    // }

	  }, {
	    key: "bin_limit",
	    value: function bin_limit() {
	      return ((1 << (this.depth + 1) * 3) - 1) / 7;
	    }
	  }]);

	  return CSIIndex;
	}();

	function optimizeChunks(chunks, lowest) {
	  var mergedChunks = [];
	  var lastChunk = null;
	  if (chunks.length === 0) return chunks;
	  chunks.sort(function (c0, c1) {
	    var dif = c0.minv.block - c1.minv.block;

	    if (dif !== 0) {
	      return dif;
	    } else {
	      return c0.minv.offset - c1.minv.offset;
	    }
	  });
	  chunks.forEach(function (chunk) {
	    if (!lowest || chunk.maxv.isGreaterThan(lowest)) {
	      if (lastChunk === null) {
	        mergedChunks.push(chunk);
	        lastChunk = chunk;
	      } else {
	        if (canMerge(lastChunk, chunk)) {
	          if (chunk.maxv.isGreaterThan(lastChunk.maxv)) {
	            lastChunk.maxv = chunk.maxv;
	          }
	        } else {
	          mergedChunks.push(chunk);
	          lastChunk = chunk;
	        }
	      }
	    }
	  });
	  return mergedChunks;
	}

	function canMerge(chunk1, chunk2) {
	  return chunk2.minv.block - chunk1.maxv.block < 65000 && chunk2.maxv.block - chunk1.minv.block < 5000000; // lastChunk.minv.block === lastChunk.maxv.block &&
	  // lastChunk.maxv.block === chunk.minv.block &&
	  // chunk.minv.block === chunk.maxv.block
	}

	var BAI_MAGIC = 21578050;
	var TABIX_MAGIC = 21578324;

	function parseBamIndex(_x5, _x6) {
	  return _parseBamIndex.apply(this, arguments);
	}

	function _parseBamIndex() {
	  _parseBamIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(arrayBuffer, genome) {
	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            return _context2.abrupt("return", parseIndex(arrayBuffer, false, genome));

	          case 1:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	  return _parseBamIndex.apply(this, arguments);
	}

	function parseTabixIndex(_x7, _x8) {
	  return _parseTabixIndex.apply(this, arguments);
	}

	function _parseTabixIndex() {
	  _parseTabixIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(arrayBuffer, genome) {
	    return regeneratorRuntime.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            return _context3.abrupt("return", parseIndex(arrayBuffer, true, genome));

	          case 1:
	          case "end":
	            return _context3.stop();
	        }
	      }
	    }, _callee3);
	  }));
	  return _parseTabixIndex.apply(this, arguments);
	}

	function parseIndex(_x9, _x10, _x11) {
	  return _parseIndex.apply(this, arguments);
	}

	function _parseIndex() {
	  _parseIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(arrayBuffer, tabix, genome) {
	    var indices, blockMin, blockMax, parser, magic, sequenceIndexMap, nref, format, col_seq, col_beg, col_end, meta, skip, l_nm, i, seq_name, ref, binIndex, linearIndex, nbin, b, binNumber, nchnk, cs, ce, n_maped, nUnmapped, _nchnk, _i, _cs, _ce, nintv, _i2, _cs2;

	    return regeneratorRuntime.wrap(function _callee4$(_context4) {
	      while (1) {
	        switch (_context4.prev = _context4.next) {
	          case 0:
	            indices = [];
	            blockMin = Number.MAX_SAFE_INTEGER;
	            blockMax = 0;
	            parser = new BinaryParser(new DataView(arrayBuffer));
	            magic = parser.getInt();
	            sequenceIndexMap = {};

	            if (!(magic === BAI_MAGIC || tabix && magic === TABIX_MAGIC)) {
	              _context4.next = 12;
	              break;
	            }

	            nref = parser.getInt();

	            if (tabix) {
	              // Tabix header parameters aren't used, but they must be read to advance the pointer
	              format = parser.getInt();
	              col_seq = parser.getInt();
	              col_beg = parser.getInt();
	              col_end = parser.getInt();
	              meta = parser.getInt();
	              skip = parser.getInt();
	              l_nm = parser.getInt();

	              for (i = 0; i < nref; i++) {
	                seq_name = parser.getString(); // Translate to "official" chr name.

	                if (genome) {
	                  seq_name = genome.getChromosomeName(seq_name);
	                }

	                sequenceIndexMap[seq_name] = i;
	              }
	            }

	            for (ref = 0; ref < nref; ref++) {
	              binIndex = {};
	              linearIndex = [];
	              nbin = parser.getInt();

	              for (b = 0; b < nbin; b++) {
	                binNumber = parser.getInt();

	                if (binNumber === 37450) {
	                  // This is a psuedo bin, not used but we have to consume the bytes
	                  nchnk = parser.getInt(); // # of chunks for this bin

	                  cs = parser.getVPointer(); // unmapped beg

	                  ce = parser.getVPointer(); // unmapped end

	                  n_maped = parser.getLong();
	                  nUnmapped = parser.getLong();
	                } else {
	                  binIndex[binNumber] = [];
	                  _nchnk = parser.getInt(); // # of chunks for this bin

	                  for (_i = 0; _i < _nchnk; _i++) {
	                    _cs = parser.getVPointer(); //chunk_beg

	                    _ce = parser.getVPointer(); //chunk_end

	                    if (_cs && _ce) {
	                      if (_cs.block < blockMin) {
	                        blockMin = _cs.block; // Block containing first alignment
	                      }

	                      if (_ce.block > blockMax) {
	                        blockMax = _ce.block;
	                      }

	                      binIndex[binNumber].push([_cs, _ce]);
	                    }
	                  }
	                }
	              }

	              nintv = parser.getInt();

	              for (_i2 = 0; _i2 < nintv; _i2++) {
	                _cs2 = parser.getVPointer();
	                linearIndex.push(_cs2); // Might be null
	              }

	              if (nbin > 0) {
	                indices[ref] = {
	                  binIndex: binIndex,
	                  linearIndex: linearIndex
	                };
	              }
	            }

	            _context4.next = 13;
	            break;

	          case 12:
	            throw new Error(indexURL + " is not a " + (tabix ? "tabix" : "bai") + " file");

	          case 13:
	            return _context4.abrupt("return", new BamIndex(indices, blockMin, blockMax, sequenceIndexMap, tabix));

	          case 14:
	          case "end":
	            return _context4.stop();
	        }
	      }
	    }, _callee4);
	  }));
	  return _parseIndex.apply(this, arguments);
	}

	var BamIndex = /*#__PURE__*/function () {
	  function BamIndex(indices, blockMin, blockMax, sequenceIndexMap, tabix) {
	    _classCallCheck(this, BamIndex);

	    this.firstAlignmentBlock = blockMin;
	    this.lastAlignmentBlock = blockMax;
	    this.indices = indices;
	    this.sequenceIndexMap = sequenceIndexMap;
	    this.tabix = tabix;
	  }
	  /**
	   * Fetch blocks for a particular genomic range.  This method is public so it can be unit-tested.
	   *
	   * @param refId  the sequence dictionary index of the chromosome
	   * @param min  genomic start position
	   * @param max  genomic end position
	   * @param return an array of {minv: {filePointer, offset}, {maxv: {filePointer, offset}}
	   */


	  _createClass(BamIndex, [{
	    key: "blocksForRange",
	    value: function blocksForRange(refId, min, max) {
	      var bam = this;
	      var ba = bam.indices[refId];

	      if (!ba) {
	        return [];
	      } else {
	        var overlappingBins = reg2bins(min, max); // List of bin #s that overlap min, max

	        var chunks = []; // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned

	        var _iterator = _createForOfIteratorHelper(overlappingBins),
	            _step;

	        try {
	          for (_iterator.s(); !(_step = _iterator.n()).done;) {
	            var binRange = _step.value;

	            for (var bin = binRange[0]; bin <= binRange[1]; bin++) {
	              if (ba.binIndex[bin]) {
	                var binChunks = ba.binIndex[bin],
	                    nchnk = binChunks.length;

	                for (var c = 0; c < nchnk; ++c) {
	                  var cs = binChunks[c][0];
	                  var ce = binChunks[c][1];
	                  chunks.push({
	                    minv: cs,
	                    maxv: ce,
	                    bin: bin
	                  });
	                }
	              }
	            }
	          } // Use the linear index to find minimum file position of chunks that could contain alignments in the region

	        } catch (err) {
	          _iterator.e(err);
	        } finally {
	          _iterator.f();
	        }

	        var nintv = ba.linearIndex.length;
	        var lowest = null;
	        var minLin = Math.min(min >> 14, nintv - 1);
	        var maxLin = Math.min(max >> 14, nintv - 1);

	        for (var i = minLin; i <= maxLin; ++i) {
	          var vp = ba.linearIndex[i];

	          if (vp) {
	            // todo -- I think, but am not sure, that the values in the linear index have to be in increasing order.  So the first non-null should be minimum
	            if (!lowest || vp.isLessThan(lowest)) {
	              lowest = vp;
	            }
	          }
	        }

	        return optimizeChunks$1(chunks, lowest);
	      }
	    }
	  }]);

	  return BamIndex;
	}();

	function optimizeChunks$1(chunks, lowest) {
	  var mergedChunks = [];
	  var lastChunk = null;
	  if (chunks.length === 0) return chunks;
	  chunks.sort(function (c0, c1) {
	    var dif = c0.minv.block - c1.minv.block;

	    if (dif !== 0) {
	      return dif;
	    } else {
	      return c0.minv.offset - c1.minv.offset;
	    }
	  });
	  chunks.forEach(function (chunk) {
	    if (!lowest || chunk.maxv.isGreaterThan(lowest)) {
	      if (lastChunk === null) {
	        mergedChunks.push(chunk);
	        lastChunk = chunk;
	      } else {
	        if (canMerge$1(lastChunk, chunk)) {
	          if (chunk.maxv.isGreaterThan(lastChunk.maxv)) {
	            lastChunk.maxv = chunk.maxv;
	          }
	        } else {
	          mergedChunks.push(chunk);
	          lastChunk = chunk;
	        }
	      }
	    }
	  });
	  return mergedChunks;
	}

	function canMerge$1(chunk1, chunk2) {
	  return chunk2.minv.block - chunk1.maxv.block < 65000 && chunk2.maxv.block - chunk1.minv.block < 5000000; // lastChunk.minv.block === lastChunk.maxv.block &&
	  // lastChunk.maxv.block === chunk.minv.block &&
	  // chunk.minv.block === chunk.maxv.block
	}
	/**
	 * Calculate the list of bins that overlap with region [beg, end]
	 *
	 */


	function reg2bins(beg, end) {
	  var list = [];
	  if (end >= 1 << 29) end = 1 << 29;
	  --end;
	  list.push(0);
	  list.push([1 + (beg >> 26), 1 + (end >> 26)]);
	  list.push([9 + (beg >> 23), 9 + (end >> 23)]);
	  list.push([73 + (beg >> 20), 73 + (end >> 20)]);
	  list.push([585 + (beg >> 17), 585 + (end >> 17)]);
	  list.push([4681 + (beg >> 14), 4681 + (end >> 14)]); // for (k = 1 + (beg >> 26); k <= 1 + (end >> 26); ++k) list.push(k);
	  // for (k = 9 + (beg >> 23); k <= 9 + (end >> 23); ++k) list.push(k);
	  // for (k = 73 + (beg >> 20); k <= 73 + (end >> 20); ++k) list.push(k);
	  // for (k = 585 + (beg >> 17); k <= 585 + (end >> 17); ++k) list.push(k);
	  // for (k = 4681 + (beg >> 14); k <= 4681 + (end >> 14); ++k) list.push(k);

	  return list;
	}

	function parseTribbleIndex(_x4, _x5) {
	  return _parseTribbleIndex.apply(this, arguments);
	}

	function _parseTribbleIndex() {
	  _parseTribbleIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(arrayBuffer, genome) {
	    var index, parser, nChrs, chrIdx, readHeader, readLinear;
	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            readLinear = function _readLinear(parser) {
	              var chr = parser.getString();

	              if (genome) chr = genome.getChromosomeName(chr);
	              var binWidth = parser.getInt();
	              var nBins = parser.getInt();
	              var longestFeature = parser.getInt();
	              var OLD_V3_INDEX = parser.getInt() > 0;
	              var nFeatures = parser.getInt(); // note the code below accounts for > 60% of the total time to read an index

	              var pos = parser.getLong();
	              var blocks = new Array();

	              for (var binNumber = 0; binNumber < nBins; binNumber++) {
	                var nextPos = parser.getLong();
	                blocks.push({
	                  min: pos,
	                  max: nextPos
	                }); //        {position: pos, size: size});

	                pos = nextPos;
	              }

	              return {
	                chr: chr,
	                blocks: blocks,
	                longestFeature: longestFeature,
	                binWidth: binWidth
	              };
	            };

	            readHeader = function _readHeader(parser) {
	              var magicNumber = parser.getInt(); //   view._getInt32(offset += 32, true);

	              var type = parser.getInt();
	              var version = parser.getInt();
	              var indexedFile = parser.getString();
	              var indexedFileSize = parser.getLong();
	              var indexedFileTS = parser.getLong();
	              var indexedFileMD5 = parser.getString();
	              var flags = parser.getInt();

	              if (version >= 3) {
	                var nProperties = parser.getInt();

	                while (nProperties-- > 0) {
	                  var key = parser.getString();
	                  var value = parser.getString();
	                }
	              }
	            };

	            index = {};
	            parser = new BinaryParser(new DataView(arrayBuffer));
	            readHeader(parser);
	            nChrs = parser.getInt();

	            while (nChrs-- > 0) {
	              // todo -- support interval tree index, we're assuming its a linear index
	              chrIdx = readLinear(parser);
	              index[chrIdx.chr] = chrIdx;
	            }

	            return _context2.abrupt("return", new TribbleIndex(index));

	          case 8:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	  return _parseTribbleIndex.apply(this, arguments);
	}

	var TribbleIndex = /*#__PURE__*/function () {
	  function TribbleIndex(chrIndexTable) {
	    _classCallCheck(this, TribbleIndex);

	    this.chrIndex = chrIndexTable; // Dictionary of chr -> tribble index
	  }
	  /**
	   * Fetch blocks for a particular genomic range.
	   *
	   * @param queryChr the sequence dictionary index of the chromosome
	   * @param min  genomic start position
	   * @param max  genomic end position
	   */


	  _createClass(TribbleIndex, [{
	    key: "blocksForRange",
	    value: function blocksForRange(queryChr, min, max) {
	      var chrIdx = this.chrIndex[queryChr];

	      if (chrIdx) {
	        var blocks = chrIdx.blocks;
	        var longestFeature = chrIdx.longestFeature;
	        var binWidth = chrIdx.binWidth;
	        var adjustedPosition = Math.max(min - longestFeature, 0);
	        var startBinNumber = Math.floor(adjustedPosition / binWidth);
	        if (startBinNumber >= blocks.length) // are we off the end of the bin list, so return nothing
	          return [];else {
	          var endBinNumber = Math.min(Math.floor((max - 1) / binWidth), blocks.length - 1); // By definition blocks are adjacent in the file for the liner index.  Combine them into one merged block

	          var startPos = blocks[startBinNumber].min;
	          var endPos = blocks[endBinNumber].max;
	          var size = endPos - startPos;

	          if (size === 0) {
	            return [];
	          } else {
	            var mergedBlock = {
	              minv: {
	                block: startPos,
	                offset: 0
	              },
	              maxv: {
	                block: endPos,
	                offset: 0
	              }
	            };
	            return [mergedBlock];
	          }
	        }
	      } else {
	        return undefined;
	      }
	    }
	  }]);

	  return TribbleIndex;
	}();

	var CSI1_MAGIC$1 = 21582659; // CSI\1

	var CSI2_MAGIC$1 = 38359875; // CSI\2

	var BAI_MAGIC$1 = 21578050;
	var TABIX_MAGIC$1 = 21578324;
	var TRIBBLE_MAGIC = 1480870228; //  byte[]{'T', 'I', 'D', 'X'};

	/**
	 * @param indexURL
	 * @param config
	 * @param tabix
	 *
	 */

	function loadIndex(_x, _x2, _x3) {
	  return _loadIndex.apply(this, arguments);
	}

	function _loadIndex() {
	  _loadIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(indexURL, config, genome) {
	    var arrayBuffer, dv, inflate, magic;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return igvxhr.loadArrayBuffer(indexURL, buildOptions(config));

	          case 2:
	            arrayBuffer = _context.sent;
	            dv = new DataView(arrayBuffer); // Some indexs are gzipped, specifically tabix, and csi.  Bam (bai) are not.  Tribble is usually not.
	            // Check first 2 bytes of file for gzip magic number, and inflate if neccessary

	            if (dv.getUint8(0) === 0x1f && dv.getUint8(1) === 0x8b) {
	              // gzipped
	              inflate = new Zlib$1.Gunzip(new Uint8Array(arrayBuffer));
	              arrayBuffer = inflate.decompress().buffer;
	              dv = new DataView(arrayBuffer);
	            }

	            magic = dv.getInt32(0, true);
	            _context.t0 = magic;
	            _context.next = _context.t0 === BAI_MAGIC$1 ? 9 : _context.t0 === TABIX_MAGIC$1 ? 10 : _context.t0 === CSI1_MAGIC$1 ? 11 : _context.t0 === TRIBBLE_MAGIC ? 12 : _context.t0 === CSI2_MAGIC$1 ? 13 : 14;
	            break;

	          case 9:
	            return _context.abrupt("return", parseBamIndex(arrayBuffer, genome));

	          case 10:
	            return _context.abrupt("return", parseTabixIndex(arrayBuffer, genome));

	          case 11:
	            return _context.abrupt("return", parseCsiIndex(arrayBuffer, genome));

	          case 12:
	            return _context.abrupt("return", parseTribbleIndex(arrayBuffer, genome));

	          case 13:
	            throw Error("CSI version 2 is not supported.");

	          case 14:
	            throw Error("Unrecognized index type: ".concat(indexURL));

	          case 15:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));
	  return _loadIndex.apply(this, arguments);
	}

	var isString$1 = isString;
	/**
	 * Reader for "bed like" files (tab delimited files with 1 feature per line: bed, gff, vcf, etc)
	 *
	 * @param config
	 * @constructor
	 */

	var FeatureFileReader = /*#__PURE__*/function () {
	  function FeatureFileReader(config, genome) {
	    _classCallCheck(this, FeatureFileReader);

	    var uriParts;
	    this.config = config || {};
	    this.genome = genome;
	    this.indexURL = config.indexURL;
	    this.indexed = config.indexed;

	    if (isFilePath(this.config.url)) {
	      this.filename = this.config.url.name;
	    } else if (isString$1(this.config.url) && this.config.url.startsWith('data:')) {
	      this.indexed = false; // by definition

	      this.dataURI = config.url;
	    } else {
	      uriParts = parseUri(this.config.url);
	      this.filename = config.filename || uriParts.file;
	    }

	    this.parser = this.getParser(this.config);

	    if (this.config.format === "vcf" && !this.config.indexURL) {
	      console.warn("Warning: index file not specified.  The entire vcf file will be loaded.");
	    }
	  }
	  /**
	   * Return a promise to load features for the genomic interval
	   * @param chr
	   * @param start
	   * @param end
	   */


	  _createClass(FeatureFileReader, [{
	    key: "readFeatures",
	    value: function () {
	      var _readFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, start, end) {
	        var index;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return this.getIndex();

	              case 2:
	                index = _context.sent;

	                if (!index) {
	                  _context.next = 8;
	                  break;
	                }

	                this.indexed = true;
	                return _context.abrupt("return", this.loadFeaturesWithIndex(chr, start, end));

	              case 8:
	                if (!this.dataURI) {
	                  _context.next = 13;
	                  break;
	                }

	                this.indexed = false;
	                return _context.abrupt("return", this.loadFeaturesFromDataURI());

	              case 13:
	                this.indexed = false;
	                return _context.abrupt("return", this.loadFeaturesNoIndex());

	              case 15:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function readFeatures(_x, _x2, _x3) {
	        return _readFeatures.apply(this, arguments);
	      }

	      return readFeatures;
	    }()
	  }, {
	    key: "readHeader",
	    value: function () {
	      var _readHeader = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	        var index, maxSize, dataStart, bsizeOptions, abuffer, bsize, options, data, _options, _data;

	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                if (!this.dataURI) {
	                  _context2.next = 5;
	                  break;
	                }

	                this.loadFeaturesFromDataURI(this.dataURI);
	                return _context2.abrupt("return", this.header);

	              case 5:
	                if (!this.config.indexURL) {
	                  _context2.next = 28;
	                  break;
	                }

	                _context2.next = 8;
	                return this.getIndex();

	              case 8:
	                index = _context2.sent;

	                if (index) {
	                  _context2.next = 11;
	                  break;
	                }

	                throw new Error("Unable to load index: " + this.config.indexURL);

	              case 11:
	                // Load the file header (not HTTP header) for an indexed file.
	                maxSize = "vcf" === this.config.format ? 65000 : 1000;
	                dataStart = index.firstAlignmentBlock ? index.firstAlignmentBlock : 0;

	                if (!index.tabix) {
	                  _context2.next = 20;
	                  break;
	                }

	                bsizeOptions = buildOptions(this.config, {
	                  range: {
	                    start: dataStart,
	                    size: 26
	                  }
	                });
	                _context2.next = 17;
	                return igvxhr.loadArrayBuffer(this.config.url, bsizeOptions);

	              case 17:
	                abuffer = _context2.sent;
	                bsize = bgzBlockSize(abuffer);
	                maxSize = dataStart + bsize;

	              case 20:
	                options = buildOptions(this.config, {
	                  bgz: index.tabix,
	                  range: {
	                    start: 0,
	                    size: maxSize
	                  }
	                });
	                _context2.next = 23;
	                return igvxhr.loadString(this.config.url, options);

	              case 23:
	                data = _context2.sent;
	                this.header = this.parser.parseHeader(data); // Cache header, might be needed to parse features

	                return _context2.abrupt("return", this.header);

	              case 28:
	                // If this is a non-indexed file we will load all features in advance
	                _options = buildOptions(this.config);
	                _context2.next = 31;
	                return igvxhr.loadString(this.config.url, _options);

	              case 31:
	                _data = _context2.sent;
	                this.header = this.parser.parseHeader(_data);
	                this.features = this.parser.parseFeatures(_data); // Temporarily cache features

	                return _context2.abrupt("return", this.header);

	              case 35:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function readHeader() {
	        return _readHeader.apply(this, arguments);
	      }

	      return readHeader;
	    }()
	  }, {
	    key: "getParser",
	    value: function getParser(config) {
	      switch (config.format) {
	        case "vcf":
	          return new VcfParser(config);

	        case "seg":
	          return new SegParser();

	        case "gwas":
	          return new GWASParser(config);

	        case "aed":
	          return new AEDParser(config);

	        case "irfinder":
	          return new IRFinderParser(config);

	        default:
	          return new FeatureParser(config);
	      }
	    }
	  }, {
	    key: "loadFeaturesNoIndex",
	    value: function () {
	      var _loadFeaturesNoIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	        var tmp, options, data, features;
	        return regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                if (!this.features) {
	                  _context3.next = 6;
	                  break;
	                }

	                // An optimization hack for non-indexed files, features are temporarily cached when header is read.
	                tmp = this.features;
	                delete this.features;
	                return _context3.abrupt("return", tmp);

	              case 6:
	                options = buildOptions(this.config); // Add oauth token, if any

	                _context3.next = 9;
	                return igvxhr.loadString(this.config.url, options);

	              case 9:
	                data = _context3.sent;

	                if (!this.header) {
	                  this.header = this.parser.parseHeader(data);
	                }

	                features = this.parser.parseFeatures(data); // <= PARSING DONE HERE

	                return _context3.abrupt("return", features);

	              case 13:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function loadFeaturesNoIndex() {
	        return _loadFeaturesNoIndex.apply(this, arguments);
	      }

	      return loadFeaturesNoIndex;
	    }()
	  }, {
	    key: "loadFeaturesWithIndex",
	    value: function () {
	      var _loadFeaturesWithIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(chr, start, end) {
	        var config, parser, tabix, refId, genome, blocks, allFeatures, _iterator, _step, block, startPos, startOffset, endOffset, endPos, lastBlockSize, bsizeOptions, abuffer, options, inflated, data, slicedData, slicedFeatures, inInterval, i, f, canonicalChromosome;

	        return regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                //console.log("Using index"
	                config = this.config;
	                parser = this.parser;
	                tabix = this.index.tabix;
	                refId = tabix ? this.index.sequenceIndexMap[chr] : chr;

	                if (!(refId === undefined)) {
	                  _context4.next = 6;
	                  break;
	                }

	                return _context4.abrupt("return", []);

	              case 6:
	                genome = this.genome;
	                blocks = this.index.blocksForRange(refId, start, end);

	                if (!(!blocks || blocks.length === 0)) {
	                  _context4.next = 12;
	                  break;
	                }

	                return _context4.abrupt("return", []);

	              case 12:
	                allFeatures = [];
	                _iterator = _createForOfIteratorHelper(blocks);
	                _context4.prev = 14;

	                _iterator.s();

	              case 16:
	                if ((_step = _iterator.n()).done) {
	                  _context4.next = 68;
	                  break;
	                }

	                block = _step.value;
	                startPos = block.minv.block;
	                startOffset = block.minv.offset;
	                endOffset = block.maxv.offset;
	                endPos = void 0;

	                if (!tabix) {
	                  _context4.next = 33;
	                  break;
	                }

	                lastBlockSize = 0;

	                if (!(endOffset > 0)) {
	                  _context4.next = 30;
	                  break;
	                }

	                bsizeOptions = buildOptions(config, {
	                  range: {
	                    start: block.maxv.block,
	                    size: 26
	                  }
	                });
	                _context4.next = 28;
	                return igvxhr.loadArrayBuffer(config.url, bsizeOptions);

	              case 28:
	                abuffer = _context4.sent;
	                lastBlockSize = bgzBlockSize(abuffer);

	              case 30:
	                endPos = block.maxv.block + lastBlockSize;
	                _context4.next = 34;
	                break;

	              case 33:
	                endPos = block.maxv.block;

	              case 34:
	                options = buildOptions(config, {
	                  range: {
	                    start: startPos,
	                    size: endPos - startPos + 1
	                  }
	                });
	                inflated = void 0;

	                if (!tabix) {
	                  _context4.next = 43;
	                  break;
	                }

	                _context4.next = 39;
	                return igvxhr.loadArrayBuffer(config.url, options);

	              case 39:
	                data = _context4.sent;
	                inflated = unbgzf(data);
	                _context4.next = 46;
	                break;

	              case 43:
	                _context4.next = 45;
	                return igvxhr.loadString(config.url, options);

	              case 45:
	                inflated = _context4.sent;

	              case 46:
	                slicedData = startOffset ? inflated.slice(startOffset) : inflated;
	                slicedFeatures = parser.parseFeatures(slicedData); // Filter features not in requested range.

	                inInterval = false;
	                i = 0;

	              case 50:
	                if (!(i < slicedFeatures.length)) {
	                  _context4.next = 66;
	                  break;
	                }

	                f = slicedFeatures[i];
	                canonicalChromosome = genome ? genome.getChromosomeName(f.chr) : f.chr;

	                if (!(canonicalChromosome !== chr)) {
	                  _context4.next = 59;
	                  break;
	                }

	                if (!(allFeatures.length === 0)) {
	                  _context4.next = 58;
	                  break;
	                }

	                return _context4.abrupt("continue", 63);

	              case 58:
	                return _context4.abrupt("break", 66);

	              case 59:
	                if (!(f.start > end)) {
	                  _context4.next = 62;
	                  break;
	                }

	                allFeatures.push(f); // First feature beyond interval

	                return _context4.abrupt("break", 66);

	              case 62:
	                if (f.end >= start && f.start <= end) {
	                  if (!inInterval) {
	                    inInterval = true;

	                    if (i > 0) {
	                      allFeatures.push(slicedFeatures[i - 1]);
	                    }
	                  }

	                  allFeatures.push(f);
	                }

	              case 63:
	                i++;
	                _context4.next = 50;
	                break;

	              case 66:
	                _context4.next = 16;
	                break;

	              case 68:
	                _context4.next = 73;
	                break;

	              case 70:
	                _context4.prev = 70;
	                _context4.t0 = _context4["catch"](14);

	                _iterator.e(_context4.t0);

	              case 73:
	                _context4.prev = 73;

	                _iterator.f();

	                return _context4.finish(73);

	              case 76:
	                allFeatures.sort(function (a, b) {
	                  return a.start - b.start;
	                });
	                return _context4.abrupt("return", allFeatures);

	              case 78:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this, [[14, 70, 73, 76]]);
	      }));

	      function loadFeaturesWithIndex(_x4, _x5, _x6) {
	        return _loadFeaturesWithIndex.apply(this, arguments);
	      }

	      return loadFeaturesWithIndex;
	    }()
	  }, {
	    key: "getIndex",
	    value: function () {
	      var _getIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
	        return regeneratorRuntime.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                if (!(this.index || !this.config.indexURL)) {
	                  _context5.next = 4;
	                  break;
	                }

	                return _context5.abrupt("return", this.index);

	              case 4:
	                _context5.next = 6;
	                return this.loadIndex();

	              case 6:
	                this.index = _context5.sent;
	                return _context5.abrupt("return", this.index);

	              case 8:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this);
	      }));

	      function getIndex() {
	        return _getIndex.apply(this, arguments);
	      }

	      return getIndex;
	    }()
	    /**
	     * Return a Promise for the async loaded index
	     */

	  }, {
	    key: "loadIndex",
	    value: function () {
	      var _loadIndex2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
	        var indexURL;
	        return regeneratorRuntime.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                indexURL = this.config.indexURL;
	                return _context6.abrupt("return", loadIndex(indexURL, this.config, this.genome));

	              case 2:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this);
	      }));

	      function loadIndex$1() {
	        return _loadIndex2.apply(this, arguments);
	      }

	      return loadIndex$1;
	    }()
	  }, {
	    key: "loadFeaturesFromDataURI",
	    value: function () {
	      var _loadFeaturesFromDataURI = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
	        var tmp, plain;
	        return regeneratorRuntime.wrap(function _callee7$(_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                if (!this.features) {
	                  _context7.next = 6;
	                  break;
	                }

	                // An optimization hack for non-indexed files, features are temporarily cached when header is read.
	                tmp = this.features;
	                delete this.features;
	                return _context7.abrupt("return", tmp);

	              case 6:
	                plain = decodeDataURI(this.dataURI);
	                this.header = this.parser.parseHeader(plain);

	                if (this.header instanceof String && this.header.startsWith("##gff-version 3")) {
	                  this.format = 'gff3';
	                }

	                this.features = this.parser.parseFeatures(plain);
	                return _context7.abrupt("return", this.features);

	              case 11:
	              case "end":
	                return _context7.stop();
	            }
	          }
	        }, _callee7, this);
	      }));

	      function loadFeaturesFromDataURI() {
	        return _loadFeaturesFromDataURI.apply(this, arguments);
	      }

	      return loadFeaturesFromDataURI;
	    }()
	  }]);

	  return FeatureFileReader;
	}();

	/**
	 * Object for caching lists of features.  Supports effecient queries for sub-range  (chr, start, end)
	 *
	 * @param featureList
	 * @param The genomic range spanned by featureList (optional)
	 * @constructor
	 */

	var FeatureCache = /*#__PURE__*/function () {
	  function FeatureCache(featureList, genome, range) {
	    _classCallCheck(this, FeatureCache);

	    this.treeMap = this.buildTreeMap(featureList, genome);
	    this.range = range;
	    this.count = featureList.length;
	  }

	  _createClass(FeatureCache, [{
	    key: "containsRange",
	    value: function containsRange(genomicRange) {
	      // No range means cache contains all features
	      return this.range === undefined || this.range.contains(genomicRange.chr, genomicRange.start, genomicRange.end);
	    }
	  }, {
	    key: "queryFeatures",
	    value: function queryFeatures(chr, start, end) {
	      var tree = this.treeMap[chr];
	      if (!tree) return [];
	      var intervals = tree.findOverlapping(start, end);

	      if (intervals.length === 0) {
	        return [];
	      } else {
	        // Trim the list of features in the intervals to those
	        // overlapping the requested range.
	        // Assumption: features are sorted by start position
	        var featureList = [];
	        var all = this.allFeatures[chr];

	        if (all) {
	          var _iterator = _createForOfIteratorHelper(intervals),
	              _step;

	          try {
	            for (_iterator.s(); !(_step = _iterator.n()).done;) {
	              var interval = _step.value;
	              var indexRange = interval.value;

	              for (var i = indexRange.start; i < indexRange.end; i++) {
	                var feature = all[i];
	                if (feature.start > end) break;else if (feature.end >= start) {
	                  featureList.push(feature);
	                }
	              }
	            }
	          } catch (err) {
	            _iterator.e(err);
	          } finally {
	            _iterator.f();
	          }

	          featureList.sort(function (a, b) {
	            return a.start - b.start;
	          });
	        }

	        return featureList;
	      }
	    }
	  }, {
	    key: "getAllFeatures",

	    /**
	     * Returns all features, unsorted.
	     *
	     * @returns {Array}
	     */
	    value: function getAllFeatures() {
	      return this.allFeatures;
	    }
	  }, {
	    key: "buildTreeMap",
	    value: function buildTreeMap(featureList, genome) {
	      var treeMap = {};
	      var chromosomes = [];
	      this.allFeatures = {};

	      if (featureList) {
	        var _iterator2 = _createForOfIteratorHelper(featureList),
	            _step2;

	        try {
	          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	            var feature = _step2.value;
	            var chr = feature.chr; // Translate to "official" name

	            if (genome) {
	              chr = genome.getChromosomeName(chr);
	            }

	            var geneList = this.allFeatures[chr];

	            if (!geneList) {
	              chromosomes.push(chr);
	              geneList = [];
	              this.allFeatures[chr] = geneList;
	            }

	            geneList.push(feature);
	          } // Now build interval tree for each chromosome

	        } catch (err) {
	          _iterator2.e(err);
	        } finally {
	          _iterator2.f();
	        }

	        var _iterator3 = _createForOfIteratorHelper(chromosomes),
	            _step3;

	        try {
	          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	            var _chr = _step3.value;
	            var chrFeatures = this.allFeatures[_chr];
	            chrFeatures.sort(function (f1, f2) {
	              return f1.start === f2.start ? 0 : f1.start > f2.start ? 1 : -1;
	            });
	            treeMap[_chr] = buildIntervalTree$1(chrFeatures);
	          }
	        } catch (err) {
	          _iterator3.e(err);
	        } finally {
	          _iterator3.f();
	        }
	      }

	      return treeMap;
	    }
	  }]);

	  return FeatureCache;
	}();
	/**
	 * Build an interval tree from the feature list for fast interval based queries.   We lump features in groups
	 * of 10, or total size / 100,   to reduce size of the tree.
	 *
	 * @param featureList
	 */


	function buildIntervalTree$1(featureList) {
	  var tree = new IntervalTree();
	  var len = featureList.length;
	  var chunkSize = Math.max(10, Math.round(len / 10));

	  for (var i = 0; i < len; i += chunkSize) {
	    var e = Math.min(len, i + chunkSize);
	    var subArray = new IndexRange(i, e); //featureList.slice(i, e);

	    var iStart = featureList[i].start; //

	    var iEnd = iStart;

	    for (var j = i; j < e; j++) {
	      iEnd = Math.max(iEnd, featureList[j].end);
	    }

	    tree.insert(iStart, iEnd, subArray);
	  }

	  return tree;
	}

	var IndexRange = function IndexRange(start, end) {
	  _classCallCheck(this, IndexRange);

	  this.start = start;
	  this.end = end;
	};

	var isString$2 = isString;

	var CustomServiceReader = /*#__PURE__*/function () {
	  function CustomServiceReader(config) {
	    _classCallCheck(this, CustomServiceReader);

	    this.config = config;
	  }

	  _createClass(CustomServiceReader, [{
	    key: "readFeatures",
	    value: function () {
	      var _readFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, start, end) {
	        var url, config, features, data, mappingKeys, _iterator, _step, f, _iterator2, _step2, key;

	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (typeof this.config.url === 'function') {
	                  url = this.config.url({
	                    chr: chr,
	                    start: start,
	                    end: end
	                  });
	                } else {
	                  url = this.config.url.replace("$CHR", chr).replace("$START", start).replace("$END", end);
	                }

	                config = Object.assign({}, this.config);

	                if (this.config.body !== undefined) {
	                  if (typeof this.config.body === 'function') {
	                    config.body = this.config.body({
	                      chr: chr,
	                      start: start,
	                      end: end
	                    });
	                  } else {
	                    config.body = this.config.body.replace("$CHR", chr).replace("$START", start).replace("$END", end);
	                  }
	                }

	                _context.next = 5;
	                return igvxhr.load(url, config);

	              case 5:
	                data = _context.sent;

	                if (data) {
	                  if (typeof this.config.parser === "function") {
	                    features = this.config.parser(data);
	                  } else if (isString$2(data)) {
	                    features = JSON.parse(data);
	                  } else {
	                    features = data;
	                  }
	                }

	                if (this.config.mappings) {
	                  mappingKeys = Object.keys(this.config.mappings);
	                  _iterator = _createForOfIteratorHelper(features);

	                  try {
	                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	                      f = _step.value;
	                      _iterator2 = _createForOfIteratorHelper(mappingKeys);

	                      try {
	                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	                          key = _step2.value;
	                          f[key] = f[this.config.mappings[key]];
	                        }
	                      } catch (err) {
	                        _iterator2.e(err);
	                      } finally {
	                        _iterator2.f();
	                      }
	                    }
	                  } catch (err) {
	                    _iterator.e(err);
	                  } finally {
	                    _iterator.f();
	                  }
	                }

	                return _context.abrupt("return", features);

	              case 9:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function readFeatures(_x, _x2, _x3) {
	        return _readFeatures.apply(this, arguments);
	      }

	      return readFeatures;
	    }()
	  }]);

	  return CustomServiceReader;
	}();

	var UCSCServiceReader = function UCSCServiceReader(config, genome) {
	  this.config = config;
	  this.genome = genome;
	  this.expandQueryInterval = false;
	};

	UCSCServiceReader.prototype.readFeatures = function (chr, start, end) {
	  var s = Math.max(0, Math.floor(start));
	  var e = Math.ceil(end);

	  if (this.genome) {
	    var c = this.genome.getChromosome(chr);

	    if (c && e > c.bpLength) {
	      e = c.bpLength;
	    }
	  }

	  var url = this.config.url + '?db=' + this.config.db + '&table=' + this.config.tableName + '&chr=' + chr + '&start=' + s + '&end=' + e;
	  return igvxhr.loadJson(url, this.config).then(function (data) {
	    if (data) {
	      data.forEach(function (sample) {
	        if (sample.hasOwnProperty('exonStarts') && sample.hasOwnProperty('exonEnds') && sample.hasOwnProperty('exonCount') && sample.hasOwnProperty('cdsStart') && sample.hasOwnProperty('cdsEnd')) {
	          addExons(sample);
	        }
	      });
	      return data;
	    } else {
	      return null;
	    }
	  });
	};

	function addExons(sample) {
	  var exonCount, exonStarts, exonEnds, exons, eStart, eEnd;
	  exonCount = sample['exonCount'];
	  exonStarts = sample['exonStarts'].split(',');
	  exonEnds = sample['exonEnds'].split(',');
	  exons = [];

	  for (var i = 0; i < exonCount; i++) {
	    eStart = parseInt(exonStarts[i]);
	    eEnd = parseInt(exonEnds[i]);
	    var exon = {
	      start: eStart,
	      end: eEnd
	    };
	    if (sample.cdsStart > eEnd || sample.cdsEnd < sample.cdsStart) exon.utr = true; // Entire exon is UTR

	    if (sample.cdsStart >= eStart && sample.cdsStart <= eEnd) exon.cdStart = sample.cdsStart;
	    if (sample.cdsEnd >= eStart && sample.cdsEnd <= eEnd) exon.cdEnd = sample.cdsEnd;
	    exons.push(exon);
	  }

	  sample.exons = exons;
	}

	/**
	 * Created by jrobinson on 4/7/16.
	 */

	var transcriptTypes = new Set(['transcript', 'primary_transcript', 'processed_transcript', 'mRNA', 'mrna']);
	var cdsTypes = new Set(['CDS', 'cds']);
	var codonTypes = new Set(['start_codon', 'stop_codon']);
	var utrTypes = new Set(['5UTR', '3UTR', 'UTR', 'five_prime_UTR', 'three_prime_UTR', "3'-UTR", "5'-UTR"]);
	var exonTypes = new Set(['exon', 'coding-exon']);
	var intronType = 'intron';

	var transcriptModelTypes = new Set();

	for (var _i = 0, _arr = [transcriptTypes, cdsTypes, codonTypes, utrTypes, exonTypes]; _i < _arr.length; _i++) {
	  var cltn = _arr[_i];

	  var _iterator = _createForOfIteratorHelper(cltn),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var t = _step.value;
	      transcriptModelTypes.add(t);
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }
	}

	var GFFHelper = /*#__PURE__*/function () {
	  function GFFHelper(options) {
	    _classCallCheck(this, GFFHelper);

	    this.format = options.format;
	    this.filterTypes = options.filterTypes === undefined ? new Set(['chromosome']) : new Set(options.filterTypes);
	  }

	  _createClass(GFFHelper, [{
	    key: "combineFeatures",
	    value: function combineFeatures(features) {
	      var combinedFeatures;

	      if ("gff3" === this.format) {
	        var tmp = this.combineFeaturesById(features);
	        combinedFeatures = this.combineFeaturesGFF(tmp);
	      } else {
	        combinedFeatures = this.combineFeaturesGTF(features);
	      }

	      combinedFeatures.sort(function (a, b) {
	        return a.start - b.start;
	      });
	      return combinedFeatures;
	    }
	  }, {
	    key: "combineFeaturesById",
	    value: function combineFeaturesById(features) {
	      var combinedFeatures = [];
	      var chrIdHash = {};

	      var _iterator2 = _createForOfIteratorHelper(features),
	          _step2;

	      try {
	        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	          var f = _step2.value;

	          if (f.id === undefined) {
	            combinedFeatures.push(f);
	          } else {
	            var _idHash = chrIdHash[f.chr];

	            if (!_idHash) {
	              _idHash = {};
	              chrIdHash[f.chr] = _idHash;
	            }

	            if (_idHash.hasOwnProperty(f.id)) {
	              var sf = _idHash[f.id];

	              if (sf.hasOwnProperty("exons")) {
	                sf.start = Math.min(sf.start, f.start);
	                sf.end = Math.max(sf.end, f.end);
	                sf.exons.push(f);
	              } else {
	                var cf = {
	                  id: f.id,
	                  type: f.type,
	                  chr: f.chr,
	                  strand: f.strand,
	                  start: Math.min(f.start, sf.start),
	                  end: Math.max(f.end, sf.end),
	                  exons: [sf, f]
	                };

	                if (f.parent && f.parent.trim() !== "") {
	                  cf.parent = f.parent;
	                }

	                _idHash[f.id] = cf;
	              }
	            } else {
	              _idHash[f.id] = f;
	            }
	          }
	        }
	      } catch (err) {
	        _iterator2.e(err);
	      } finally {
	        _iterator2.f();
	      }

	      for (var _i2 = 0, _Object$keys = Object.keys(chrIdHash); _i2 < _Object$keys.length; _i2++) {
	        var key = _Object$keys[_i2];
	        var idHash = chrIdHash[key];

	        for (var _i3 = 0, _Object$keys2 = Object.keys(idHash); _i3 < _Object$keys2.length; _i3++) {
	          var id = _Object$keys2[_i3];
	          combinedFeatures.push(idHash[id]);
	        }
	      }

	      return combinedFeatures;
	    }
	  }, {
	    key: "combineFeaturesGTF",
	    value: function combineFeaturesGTF(features) {
	      var transcripts = Object.create(null);
	      var combinedFeatures = [];
	      var consumedFeatures = new Set();
	      var filterTypes = this.filterTypes;
	      features = features.filter(function (f) {
	        return filterTypes === undefined || !filterTypes.has(f.type);
	      }); // 1. Build dictionary of transcripts

	      var _iterator3 = _createForOfIteratorHelper(features),
	          _step3;

	      try {
	        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	          var _f = _step3.value;

	          if (transcriptTypes.has(_f.type)) {
	            var transcriptId = _f.id;

	            if (undefined !== transcriptId) {
	              var gffTranscript = new GFFTranscript(_f);
	              transcripts[transcriptId] = gffTranscript;
	              combinedFeatures.push(gffTranscript);
	              consumedFeatures.add(_f);
	            }
	          }
	        } // Add exons

	      } catch (err) {
	        _iterator3.e(err);
	      } finally {
	        _iterator3.f();
	      }

	      var _iterator4 = _createForOfIteratorHelper(features),
	          _step4;

	      try {
	        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	          var _f2 = _step4.value;

	          if (exonTypes.has(_f2.type)) {
	            var id = _f2.id; // transcript_id,  GTF groups all features with the same ID, does not have a parent/child hierarchy

	            if (id) {
	              var transcript = transcripts[id];

	              if (transcript === undefined) {
	                transcript = new GFFTranscript(_f2); // GTF does not require an explicit transcript record

	                transcripts[id] = transcript;
	                combinedFeatures.push(transcript);
	              }

	              transcript.addExon(_f2);
	              consumedFeatures.add(_f2);
	            }
	          }
	        } // Apply CDS and UTR

	      } catch (err) {
	        _iterator4.e(err);
	      } finally {
	        _iterator4.f();
	      }

	      var _iterator5 = _createForOfIteratorHelper(features),
	          _step5;

	      try {
	        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
	          var _f3 = _step5.value;

	          if (cdsTypes.has(_f3.type) || utrTypes.has(_f3.type) || codonTypes.has(_f3.type)) {
	            var _id = _f3.id;

	            if (_id) {
	              var _transcript = transcripts[_id];

	              if (_transcript === undefined) {
	                _transcript = new GFFTranscript(_f3);
	                transcripts[_id] = _transcript;
	                combinedFeatures.push(_transcript);
	              }

	              if (utrTypes.has(_f3.type)) {
	                _transcript.addUTR(_f3);
	              } else if (cdsTypes.has(_f3.type)) {
	                _transcript.addCDS(_f3);
	              } else if (codonTypes.has(_f3.type)) {// Ignore for now
	              }

	              consumedFeatures.add(_f3);
	            }
	          }
	        } // Finish transcripts

	      } catch (err) {
	        _iterator5.e(err);
	      } finally {
	        _iterator5.f();
	      }

	      for (var _i4 = 0, _combinedFeatures = combinedFeatures; _i4 < _combinedFeatures.length; _i4++) {
	        var f = _combinedFeatures[_i4];

	        if (typeof f.finish === "function") {
	          f.finish();
	        }
	      } // Add other features


	      var others = features.filter(function (f) {
	        return !consumedFeatures.has(f);
	      });

	      var _iterator6 = _createForOfIteratorHelper(others),
	          _step6;

	      try {
	        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
	          var _f4 = _step6.value;
	          combinedFeatures.push(_f4);
	        }
	      } catch (err) {
	        _iterator6.e(err);
	      } finally {
	        _iterator6.f();
	      }

	      return combinedFeatures;
	    }
	  }, {
	    key: "combineFeaturesGFF",
	    value: function combineFeaturesGFF(features) {
	      // Build dictionary of genes (optional)
	      var genes = features.filter(function (f) {
	        return "gene" === f.type;
	      });
	      var geneMap = Object.create(null);

	      var _iterator7 = _createForOfIteratorHelper(genes),
	          _step7;

	      try {
	        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
	          var g = _step7.value;
	          geneMap[g.id] = g;
	        } // 1. Build dictionary of transcripts

	      } catch (err) {
	        _iterator7.e(err);
	      } finally {
	        _iterator7.f();
	      }

	      var transcripts = Object.create(null);
	      var combinedFeatures = [];
	      var consumedFeatures = new Set();
	      var filterTypes = this.filterTypes;
	      features = features.filter(function (f) {
	        return filterTypes === undefined || !filterTypes.has(f.type);
	      });

	      var _iterator8 = _createForOfIteratorHelper(features),
	          _step8;

	      try {
	        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
	          var f = _step8.value;

	          if (transcriptTypes.has(f.type)) {
	            var transcriptId = f.id; // getAttribute(f.attributeString, "transcript_id", /\s+/);

	            if (undefined !== transcriptId) {
	              var gffTranscript = new GFFTranscript(f);
	              transcripts[transcriptId] = gffTranscript;
	              combinedFeatures.push(gffTranscript);
	              consumedFeatures.add(f);
	              var _g = geneMap[f.parent];

	              if (_g) {
	                gffTranscript.gene = geneMap[f.parent];
	                consumedFeatures.add(_g);
	              }
	            }
	          }
	        } // Remove assigned genes
	        // Add exons

	      } catch (err) {
	        _iterator8.e(err);
	      } finally {
	        _iterator8.f();
	      }

	      var _iterator9 = _createForOfIteratorHelper(features),
	          _step9;

	      try {
	        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
	          var _f5 = _step9.value;

	          if (exonTypes.has(_f5.type)) {
	            var parents = getParents(_f5);

	            if (parents) {
	              var _iterator13 = _createForOfIteratorHelper(parents),
	                  _step13;

	              try {
	                for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
	                  var id = _step13.value;
	                  var transcript = transcripts[id];

	                  if (transcript !== undefined) {
	                    transcript.addExon(_f5);
	                    consumedFeatures.add(_f5);
	                  }
	                }
	              } catch (err) {
	                _iterator13.e(err);
	              } finally {
	                _iterator13.f();
	              }
	            }
	          }
	        } // Apply CDS and UTR

	      } catch (err) {
	        _iterator9.e(err);
	      } finally {
	        _iterator9.f();
	      }

	      var _iterator10 = _createForOfIteratorHelper(features),
	          _step10;

	      try {
	        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
	          var _f6 = _step10.value;

	          if (cdsTypes.has(_f6.type) || utrTypes.has(_f6.type) || codonTypes.has(_f6.type)) {
	            var _parents = getParents(_f6);

	            if (_parents) {
	              var _iterator14 = _createForOfIteratorHelper(_parents),
	                  _step14;

	              try {
	                for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
	                  var _id2 = _step14.value;
	                  var _transcript2 = transcripts[_id2];

	                  if (_transcript2 !== undefined) {
	                    if (utrTypes.has(_f6.type)) {
	                      _transcript2.addUTR(_f6);
	                    } else if (cdsTypes.has(_f6.type)) {
	                      _transcript2.addCDS(_f6);
	                    } else if (codonTypes.has(_f6.type)) {// Ignore for now
	                    }

	                    consumedFeatures.add(_f6);
	                  }
	                }
	              } catch (err) {
	                _iterator14.e(err);
	              } finally {
	                _iterator14.f();
	              }
	            }
	          }
	        } // Introns are ignored, but are consumed

	      } catch (err) {
	        _iterator10.e(err);
	      } finally {
	        _iterator10.f();
	      }

	      var introns = features.filter(function (f) {
	        return intronType === f.type;
	      });

	      var _iterator11 = _createForOfIteratorHelper(introns),
	          _step11;

	      try {
	        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
	          var i = _step11.value;

	          var _parents2 = getParents(i);

	          var _iterator15 = _createForOfIteratorHelper(_parents2),
	              _step15;

	          try {
	            for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
	              var _id3 = _step15.value;

	              if (transcripts[_id3]) {
	                consumedFeatures.add(i);
	                break;
	              }
	            }
	          } catch (err) {
	            _iterator15.e(err);
	          } finally {
	            _iterator15.f();
	          }
	        } // Finish transcripts

	      } catch (err) {
	        _iterator11.e(err);
	      } finally {
	        _iterator11.f();
	      }

	      combinedFeatures.forEach(function (f) {
	        if (typeof f.finish === "function") {
	          f.finish();
	        }
	      }); // Add other features

	      var others = features.filter(function (f) {
	        return !consumedFeatures.has(f);
	      });

	      var _iterator12 = _createForOfIteratorHelper(others),
	          _step12;

	      try {
	        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
	          var _f7 = _step12.value;
	          combinedFeatures.push(_f7);
	        }
	      } catch (err) {
	        _iterator12.e(err);
	      } finally {
	        _iterator12.f();
	      }

	      return combinedFeatures;

	      function getParents(f) {
	        if (f.parent && f.parent.trim() !== "") {
	          return f.parent.trim().split(",");
	        } else {
	          return null;
	        }
	      }
	    }
	  }]);

	  return GFFHelper;
	}();

	var GFFTranscript = function GFFTranscript(feature) {
	  Object.assign(this, feature);
	  this.exons = [];
	};

	GFFTranscript.prototype.addExon = function (feature) {
	  this.exons.push(feature); // Expand feature --  for transcripts not explicitly represented in the file

	  this.start = Math.min(this.start, feature.start);
	  this.end = Math.max(this.end, feature.end);
	};

	GFFTranscript.prototype.addCDS = function (cds) {
	  var exon;
	  var exons = this.exons; // Find exon containing CDS

	  for (var i = 0; i < exons.length; i++) {
	    if (exons[i].start <= cds.start && exons[i].end >= cds.end) {
	      exon = exons[i];
	      break;
	    }
	  }

	  if (exon) {
	    exon.cdStart = exon.cdStart ? Math.min(cds.start, exon.cdStart) : cds.start;
	    exon.cdEnd = exon.cdEnd ? Math.max(cds.end, exon.cdEnd) : cds.end;

	    if (!exon.children) {
	      exon.children = [];
	    }

	    exon.children.push(cds);
	  } else {
	    cds.cdStart = cds.start;
	    cds.cdEnd = cds.end;
	    exons.push(cds);
	  } // Expand feature --  for transcripts not explicitly represented in the file (gtf files)


	  this.start = Math.min(this.start, cds.start);
	  this.end = Math.max(this.end, cds.end);
	  this.cdStart = this.cdStart ? Math.min(cds.start, this.cdStart) : cds.start;
	  this.cdEnd = this.cdEnd ? Math.max(cds.end, this.cdEnd) : cds.end;
	};

	GFFTranscript.prototype.addUTR = function (utr) {
	  var exon;
	  var exons = this.exons; // Find exon containing CDS

	  for (var i = 0; i < exons.length; i++) {
	    if (exons[i].start <= utr.start && exons[i].end >= utr.end) {
	      exon = exons[i];
	      break;
	    }
	  }

	  if (exon) {
	    if (utr.start === exon.start && utr.end === exon.end) {
	      exon.utr = true;
	    } else {
	      if (utr.end < exon.end) {
	        exon.cdStart = utr.end;
	      }

	      if (utr.start > exon.start) {
	        exon.cdEnd = utr.start;
	      }
	    }

	    if (!exon.children) {
	      exon.children = [];
	    }

	    exon.children.push(utr);
	  } else {
	    utr.utr = true;
	    exons.push(utr);
	  } // Expand feature --  for transcripts not explicitly represented in the file


	  this.start = Math.min(this.start, utr.start);
	  this.end = Math.max(this.end, utr.end);
	};

	GFFTranscript.prototype.finish = function () {
	  var cdStart = this.cdStart;
	  var cdEnd = this.cdEnd;
	  this.exons.sort(function (a, b) {
	    return a.start - b.start;
	  }); // Search for UTR exons that were not explicitly tagged

	  if (cdStart) {
	    this.exons.forEach(function (exon) {
	      if (exon.end < cdStart || exon.start > cdEnd) exon.utr = true;
	    });
	  }
	};

	GFFTranscript.prototype.popupData = function (genomicLocation) {
	  var kvs = this.attributeString.split(';');
	  var pd = []; // If feature has an associated gene list its attributes first

	  if (this.gene && typeof this.gene.popupData === 'function') {
	    var gd = this.gene.popupData(genomicLocation);

	    var _iterator16 = _createForOfIteratorHelper(gd),
	        _step16;

	    try {
	      for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
	        var e = _step16.value;
	        pd.push(e);
	      }
	    } catch (err) {
	      _iterator16.e(err);
	    } finally {
	      _iterator16.f();
	    }

	    pd.push("<hr>");
	  }

	  if (this.name) {
	    pd.push({
	      name: 'name',
	      value: this.name
	    });
	  }

	  pd.push({
	    name: 'type',
	    value: this.type
	  });

	  var _iterator17 = _createForOfIteratorHelper(kvs),
	      _step17;

	  try {
	    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
	      var kv = _step17.value;
	      var t = kv.trim().split(this.delim, 2);

	      if (t.length === 2 && t[1] !== undefined) {
	        var key = t[0].trim();
	        if ('name' === key.toLowerCase()) continue;
	        var value = t[1].trim(); //Strip off quotes, if any

	        if (value.startsWith('"') && value.endsWith('"')) {
	          value = value.substr(1, value.length - 2);
	        }

	        pd.push({
	          name: key,
	          value: value
	        });
	      }
	    }
	  } catch (err) {
	    _iterator17.e(err);
	  } finally {
	    _iterator17.f();
	  }

	  pd.push({
	    name: 'position',
	    value: "".concat(this.chr, ":").concat(numberFormatter(this.start + 1), "-").concat(numberFormatter(this.end))
	  }); // If clicked over an exon add its attributes

	  var _iterator18 = _createForOfIteratorHelper(this.exons),
	      _step18;

	  try {
	    for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
	      var exon = _step18.value;

	      if (genomicLocation >= exon.start && genomicLocation < exon.end && typeof exon.popupData === 'function') {
	        pd.push("<hr>");
	        var exonData = exon.popupData(genomicLocation);

	        var _iterator19 = _createForOfIteratorHelper(exonData),
	            _step19;

	        try {
	          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
	            var _att = _step19.value;
	            pd.push(_att);
	          }
	        } catch (err) {
	          _iterator19.e(err);
	        } finally {
	          _iterator19.f();
	        }

	        if (exon.children) {
	          var _iterator20 = _createForOfIteratorHelper(exon.children),
	              _step20;

	          try {
	            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
	              var c = _step20.value;
	              pd.push("<hr>");

	              var _exonData = c.popupData(genomicLocation);

	              var _iterator21 = _createForOfIteratorHelper(_exonData),
	                  _step21;

	              try {
	                for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
	                  var att = _step21.value;
	                  pd.push(att);
	                }
	              } catch (err) {
	                _iterator21.e(err);
	              } finally {
	                _iterator21.f();
	              }
	            }
	          } catch (err) {
	            _iterator20.e(err);
	          } finally {
	            _iterator20.f();
	          }
	        }
	      }
	    }
	  } catch (err) {
	    _iterator18.e(err);
	  } finally {
	    _iterator18.f();
	  }

	  return pd;
	};

	var GtexReader = function GtexReader(config) {
	  this.config = config;
	  this.url = config.url;
	  this.tissueId = config.tissueSiteDetailId;
	  this.indexed = true;
	  this.datasetId = config.datasetId || "gtex_v8";
	};

	GtexReader.prototype.readFeatures = /*#__PURE__*/function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, bpStart, bpEnd) {
	    var self, queryChr, queryStart, queryEnd, datasetId, queryURL, json;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            self = this, queryChr = chr.startsWith("chr") ? chr : "chr" + chr, queryStart = Math.floor(bpStart), queryEnd = Math.ceil(bpEnd), datasetId = this.datasetId, queryURL = this.url + "?chromosome=" + queryChr + "&start=" + queryStart + "&end=" + queryEnd + "&tissueSiteDetailId=" + this.tissueId + "&datasetId=" + datasetId;
	            _context.next = 3;
	            return igvxhr.loadJson(queryURL, {
	              withCredentials: self.config.withCredentials
	            });

	          case 3:
	            json = _context.sent;

	            if (!(json && json.singleTissueEqtl)) {
	              _context.next = 9;
	              break;
	            }

	            //variants = json.variants;
	            //variants.sort(function (a, b) {
	            //    return a.POS - b.POS;
	            //});
	            //source.cache = new FeatureCache(chr, queryStart, queryEnd, variants);
	            json.singleTissueEqtl.forEach(function (eqtl) {
	              eqtl.chr = eqtl.chromosome;
	              eqtl.position = eqtl.pos;
	              eqtl.start = eqtl.pos - 1;
	              eqtl.end = eqtl.start + 1;
	              eqtl.snp = eqtl.snpId;
	              eqtl.geneName = eqtl.geneSymbol;
	              eqtl.geneId = eqtl.gencodeId;
	            });
	            return _context.abrupt("return", json.singleTissueEqtl);

	          case 9:
	            return _context.abrupt("return", undefined);

	          case 10:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee, this);
	  }));

	  return function (_x, _x2, _x3) {
	    return _ref.apply(this, arguments);
	  };
	}();

	// http://immvar.broadinstitute.org:3000/load_data?chromosome=&start=&end=&categories=

	var ImmVarReader = function ImmVarReader(config) {
	  this.config = config;
	  this.url = config.url;
	  this.cellConditionId = config.cellConditionId;
	  this.valueThreshold = config.valueThreshold ? config.valueThreshold : 5E-2;
	};

	ImmVarReader.prototype.readFeatures = function (queryChr, queryStart, queryEnd) {
	  var self = this,
	      queryURL = this.url + "?chromosome=" + queryChr + "&start=" + queryStart + "&end=" + queryEnd + "&cell_condition_id=" + this.cellConditionId;
	  return new Promise(function (fulfill, reject) {
	    igvxhr.loadJson(queryURL, {
	      withCredentials: self.config.withCredentials
	    }).then(function (json) {
	      if (json) {
	        //variants = json.variants;
	        //variants.sort(function (a, b) {
	        //    return a.POS - b.POS;
	        //});
	        //source.cache = new FeatureCache(chr, queryStart, queryEnd, variants);
	        json.eqtls.forEach(function (eqtl) {
	          eqtl.chr = eqtl.chromosome;
	          eqtl.start = eqtl.position;
	          eqtl.end = eqtl.position + 1;
	        });
	        fulfill(json.eqtls);
	      } else {
	        fulfill(null);
	      }
	    }).catch(function (error) {
	      reject(error);
	    });
	  });
	};

	var apiKey = igvxhr.apiKey;

	function ga4ghGet(options) {
	  var url = options.url + "/" + options.entity + "/" + options.entityId;
	  options.headers = ga4ghHeaders();
	  return igvxhr.loadJson(url, options); // Returns a promise
	}

	function ga4ghSearch(options) {
	  return new Promise(function (fulfill, reject) {
	    var results = options.results ? options.results : [],
	        url = options.url,
	        body = options.body,
	        decode = options.decode,
	        paramSeparator = "?",
	        fields = options.fields; // Partial response

	    if (apiKey) {
	      url = url + paramSeparator + "key=" + apiKey;
	      paramSeparator = "&";
	    }

	    if (fields) {
	      url = url + paramSeparator + "fields=" + fields;
	    } // Start the recursive load cycle.  Data is fetched in chunks, if more data is available a "nextPageToken" is returned.


	    return loadChunk();

	    function loadChunk(pageToken) {
	      if (pageToken) {
	        body.pageToken = pageToken;
	      } else {
	        if (body.pageToken !== undefined) delete body.pageToken; // Remove previous page token, if any
	      }

	      var sendData = JSON.stringify(body);
	      igvxhr.loadJson(url, {
	        sendData: sendData,
	        contentType: "application/json",
	        headers: ga4ghHeaders() //    oauthToken: ga4ghToken()

	      }).then(function (json) {
	        var nextPageToken, tmp;

	        if (json) {
	          tmp = decode ? decode(json) : json;

	          if (tmp) {
	            tmp.forEach(function (a) {

	              {
	                results.push(a);
	              }
	            });
	          }

	          nextPageToken = json["nextPageToken"];

	          if (nextPageToken) {
	            loadChunk(nextPageToken);
	          } else {
	            fulfill(results);
	          }
	        } else {
	          fulfill(results);
	        }
	      }).catch(function (error) {
	        reject(error);
	      });
	    }
	  });
	}

	function ga4ghHeaders() {
	  return {
	    "Cache-Control": "no-cache"
	  };
	}

	var Ga4ghVariantReader = function Ga4ghVariantReader(config, genome) {
	  this.config = config;
	  this.genome = genome;
	  this.url = config.url;
	  this.variantSetId = config.variantSetId;
	  this.callSetIds = config.callSetIds;
	  this.includeCalls = config.includeCalls === undefined ? true : config.includeCalls;
	}; // Simulate a VCF file header


	Ga4ghVariantReader.prototype.readHeader = function () {
	  var self = this;

	  if (self.header) {
	    return Promise.resolve(self.header);
	  } else {
	    self.header = {};

	    if (self.includeCalls === false) {
	      return Promise.resolve(self.header);
	    } else {
	      var readURL = self.url + "/callsets/search";
	      return ga4ghSearch({
	        url: readURL,
	        fields: "nextPageToken,callSets(id,name)",
	        body: {
	          "variantSetIds": Array.isArray(self.variantSetId) ? self.variantSetId : [self.variantSetId],
	          "pageSize": "10000"
	        },
	        decode: function decode(json) {
	          // If specific callSetIds are specified filter to those
	          if (self.callSetIds) {
	            var callSets = [],
	                csIdSet = new Set();
	            self.callSetIds.forEach(function (csid) {
	              csIdSet.add(csid);
	            });
	            json.callSets.forEach(function (cs) {
	              if (csIdSet.has(cs.id)) {
	                callSets.push(cs);
	              }
	            });
	            return callSets;
	          } else {
	            return json.callSets;
	          }
	        }
	      }).then(function (callSets) {
	        self.header.callSets = callSets;
	        return self.header;
	      });
	    }
	  }
	};

	Ga4ghVariantReader.prototype.readFeatures = function (chr, bpStart, bpEnd) {
	  var self = this;
	  var genome = this.genome;
	  return self.readHeader().then(function (header) {
	    return getChrAliasTable();
	  }).then(function (chrAliasTable) {
	    var queryChr = chrAliasTable.hasOwnProperty(chr) ? chrAliasTable[chr] : chr,
	        readURL = self.url + "/variants/search";
	    return ga4ghSearch({
	      url: readURL,
	      fields: self.includeCalls ? undefined : "nextPageToken,variants(id,variantSetId,names,referenceName,start,end,referenceBases,alternateBases,quality,filter,info)",
	      body: {
	        "variantSetIds": Array.isArray(self.variantSetId) ? self.variantSetId : [self.variantSetId],
	        "callSetIds": self.callSetIds ? self.callSetIds : undefined,
	        "referenceName": queryChr,
	        "start": bpStart.toString(),
	        "end": bpEnd.toString(),
	        "pageSize": "10000"
	      },
	      decode: function decode(json) {
	        var v;
	        var variants = [];
	        json.variants.forEach(function (json) {
	          v = createGAVariant(json);

	          if (!v.isRefBlock()) {
	            variants.push(v);
	          }
	        });
	        return variants;
	      }
	    });
	  });

	  function getChrAliasTable() {
	    return new Promise(function (fulfill, reject) {
	      if (self.chrAliasTable) {
	        fulfill(self.chrAliasTable);
	      } else {
	        self.readMetadata().then(function (json) {
	          self.metadata = json.metadata;
	          self.chrAliasTable = {};

	          if (json.referenceBounds && genome) {
	            json.referenceBounds.forEach(function (rb) {
	              var refName = rb.referenceName,
	                  alias = genome.getChromosomeName(refName);
	              self.chrAliasTable[alias] = refName;
	            });
	          }

	          fulfill(self.chrAliasTable);
	        });
	      }
	    });
	  }
	};

	Ga4ghVariantReader.prototype.readMetadata = function () {
	  return ga4ghGet({
	    url: this.url,
	    entity: "variantsets",
	    entityId: this.variantSetId
	  });
	};

	var CivicReader = /*#__PURE__*/function () {
	  function CivicReader(config) {
	    _classCallCheck(this, CivicReader);

	    this.config = config;
	  }

	  _createClass(CivicReader, [{
	    key: "readFeatures",
	    value: function () {
	      var _readFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, start, end) {
	        var json, records, features, _iterator, _step, record, id, coordinates;

	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return igvxhr.loadJson(this.config.url + "/variants/?count=50000");

	              case 2:
	                json = _context.sent;
	                records = json.records;
	                features = [];
	                _iterator = _createForOfIteratorHelper(records);

	                try {
	                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
	                    record = _step.value;

	                    if (record.coordinates) {
	                      id = record.id;
	                      coordinates = record.coordinates;

	                      if (coordinates.chromosome) {
	                        features.push(new CivicVariant(coordinates.chromosome, coordinates.start - 1, // UCSC 0 convention
	                        coordinates.stop, record));
	                      }

	                      if (coordinates.chromosome2) {
	                        features.push(new CivicVariant(coordinates.chromosome2, coordinates.start2 - 1, // UCSC 0 convention
	                        coordinates.stop2, record));
	                      }
	                    }
	                  }
	                } catch (err) {
	                  _iterator.e(err);
	                } finally {
	                  _iterator.f();
	                }

	                return _context.abrupt("return", features);

	              case 8:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function readFeatures(_x, _x2, _x3) {
	        return _readFeatures.apply(this, arguments);
	      }

	      return readFeatures;
	    }()
	  }]);

	  return CivicReader;
	}();

	var CivicVariant = /*#__PURE__*/function () {
	  function CivicVariant(chr, start, end, record) {
	    _classCallCheck(this, CivicVariant);

	    this.chr = chr;
	    this.start = start;
	    this.end = end;
	    this.id = record.id;
	    this.entrezName = record.entrez_name;
	    this.name = record.name;
	    this.actionabilityScore = record.civic_actionability_score;

	    if (record.coordinates.reference_bases) {
	      this.refBases = record.coordinates.reference_bases;
	    }

	    if (record.coordinates.variant_bases) {
	      this.altBases = record.coordinates.variant_bases;
	    }

	    if (record.variant_types) {
	      this.variant_types = record.variant_types;
	    }

	    this.locationString = this.chr + ":" + numberFormatter(this.start + 1) + "-" + numberFormatter(this.end); // Color based on actionability score

	    if (this.actionabilityScore !== undefined) {
	      var alpha;

	      if (this.actionabilityScore <= 10) {
	        alpha = 0.2;
	      } else {
	        var v = Math.min(30, this.actionabilityScore);
	        alpha = 0.2 + 0.8 * Math.log10((v - 10) / 2);
	      }

	      this.alpha = alpha;
	    }
	  }

	  _createClass(CivicVariant, [{
	    key: "popupData",
	    value: function popupData() {
	      var link = createLink("CIViC", "https://civicdb.org/links/variants/" + this.id);
	      var isSnp = this.refBases !== this.altBases && this.refBases && this.refBases.length === 1 && this.altBases && this.altBases.length === 1;
	      var pd = [link];
	      pd.push({
	        name: "Entrez",
	        value: createLink(this.entrezName, "https://ghr.nlm.nih.gov/gene/" + this.entrezName)
	      });
	      pd.push({
	        name: "Name",
	        value: this.name
	      });

	      if (this.variant_types && this.variant_types.length > 0) {
	        var name = this.variant_types.length === 1 ? "Type" : "Types";
	        var typeString;

	        var _iterator2 = _createForOfIteratorHelper(this.variant_types),
	            _step2;

	        try {
	          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	            var vt = _step2.value;
	            if (!typeString) typeString = vt.display_name;else typeString += ", " + vt.display_name;
	          }
	        } catch (err) {
	          _iterator2.e(err);
	        } finally {
	          _iterator2.f();
	        }

	        pd.push({
	          name: name,
	          value: typeString
	        });
	      }

	      pd.push({
	        name: "Actionability",
	        value: this.actionabilityScore
	      });
	      pd.push({
	        name: "Location",
	        value: this.locationString
	      });
	      return pd;

	      function createLink(text, href) {
	        return "<a target='_blank' " + "href='" + href + "'>" + text + "</a>";
	      }
	    }
	  }]);

	  return CivicVariant;
	}();

	// Assigns a row # to each feature.  If the feature does not fit in any row and #rows == maxRows no
	// row number is assigned.
	function pack$1(featureList, maxRows) {
	  maxRows = maxRows || Number.MAX_SAFE_INTEGER;
	  var rows = [];
	  featureList.sort(function (a, b) {
	    return a.start - b.start;
	  });
	  rows.push(-1000);

	  var _iterator = _createForOfIteratorHelper(featureList),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var feature = _step.value;
	      var r = 0;
	      var len = Math.min(rows.length, maxRows);

	      for (r = 0; r < len; r++) {
	        if (feature.start > rows[r]) {
	          feature.row = r;
	          rows[r] = feature.end;
	          break;
	        }
	      }

	      feature.row = r;
	      rows[r] = feature.end;
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }
	}

	/**
	 * feature source for "bed like" files (tab or whitespace delimited files with 1 feature per line: bed, gff, vcf, etc)
	 *
	 * @param config
	 * @constructor
	 */

	var TextFeatureSource = /*#__PURE__*/function () {
	  function TextFeatureSource(config, genome) {
	    _classCallCheck(this, TextFeatureSource);

	    this.config = config || {};
	    this.genome = genome;
	    this.sourceType = config.sourceType === undefined ? "file" : config.sourceType;
	    this.visibilityWindow = config.visibilityWindow;
	    var queryableFormats = new Set(["bigwig", "bw", "bigbed", "bb", "tdf"]);

	    if (config.features && Array.isArray(config.features)) {
	      var features = fixFeatures(config.features);
	      packFeatures(features);

	      if (config.mappings) {
	        mapProperties(features, config.mappings);
	      }

	      this.queryable = false;
	      this.featureCache = new FeatureCache(features, genome);
	    } else if (config.reader) {
	      this.reader = config.reader;
	      this.queryable = config.queryable !== undefined ? config.queryable : true;
	      this.expandQuery = config.expandQuery ? true : false;
	    } else if (config.sourceType === "ga4gh") {
	      this.reader = new Ga4ghVariantReader(config, genome);
	      this.queryable = true;
	    } else if (config.sourceType === "immvar") {
	      this.reader = new ImmVarReader(config);
	      this.queryable = true;
	    } else if (config.type === "eqtl" && config.sourceType === "gtex-ws") {
	      this.reader = new GtexReader(config);
	      this.queryable = true;
	      this.expandQuery = config.expandQuery ? true : false;
	    } else if (config.sourceType === 'ucscservice') {
	      this.reader = new UCSCServiceReader(config.source);
	      this.queryable = true;
	    } else if (config.sourceType === 'custom' || config.source !== undefined) {
	      // Second test for backward compatibility
	      this.reader = new CustomServiceReader(config.source);
	      this.queryable = config.source.queryable !== undefined ? config.source.queryable : true;
	      this.expandQuery = config.expandQuery ? true : false;
	    } else if ("civic-ws" === config.sourceType) {
	      this.reader = new CivicReader(config);
	      this.queryable = false;
	      this.expandQuery = config.expandQuery ? true : false;
	    } else {
	      this.reader = new FeatureFileReader(config, genome);

	      if (config.queryable !== undefined) {
	        this.queryable = config.queryable;
	      } else if (queryableFormats.has(config.format)) {
	        this.queryable = queryableFormats.has(config.format) || this.reader.indexed;
	      } else ;
	    }
	  }

	  _createClass(TextFeatureSource, [{
	    key: "supportsWholeGenome",
	    value: function supportsWholeGenome() {
	      return !this.queryable && (this.visibilityWindow === undefined || this.visibilityWindow <= 0);
	    }
	  }, {
	    key: "trackType",
	    value: function () {
	      var _trackType = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	        var header;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return this.getHeader();

	              case 2:
	                header = _context.sent;

	                if (!header) {
	                  _context.next = 7;
	                  break;
	                }

	                return _context.abrupt("return", header.type);

	              case 7:
	                return _context.abrupt("return", undefined);

	              case 8:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function trackType() {
	        return _trackType.apply(this, arguments);
	      }

	      return trackType;
	    }()
	  }, {
	    key: "getHeader",
	    value: function () {
	      var _getHeader = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	        var header;
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                if (this.header) {
	                  _context2.next = 9;
	                  break;
	                }

	                if (!(this.reader && typeof this.reader.readHeader === "function")) {
	                  _context2.next = 8;
	                  break;
	                }

	                _context2.next = 4;
	                return this.reader.readHeader();

	              case 4:
	                header = _context2.sent;

	                if (header) {
	                  this.header = header;

	                  if (header.format) {
	                    this.config.format = header.format;
	                  }
	                } else {
	                  this.header = {};
	                }

	                _context2.next = 9;
	                break;

	              case 8:
	                this.header = {};

	              case 9:
	                return _context2.abrupt("return", this.header);

	              case 10:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function getHeader() {
	        return _getHeader.apply(this, arguments);
	      }

	      return getHeader;
	    }()
	    /**
	     * Required function for all data source objects.  Fetches features for the
	     * range requested.
	     *
	     * This function is quite complex due to the variety of reader types backing it, some indexed, some queryable,
	     * some not.  The whole scheme could use a refactoring.
	     *
	     * @param chr
	     * @param start
	     * @param end
	     * @param bpPerPixel
	     */

	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref) {
	        var chr, start, end, bpPerPixel, visibilityWindow, genome, queryChr, isWholeGenome;
	        return regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                chr = _ref.chr, start = _ref.start, end = _ref.end, bpPerPixel = _ref.bpPerPixel, visibilityWindow = _ref.visibilityWindow;
	                genome = this.genome;
	                queryChr = genome ? genome.getChromosomeName(chr) : chr;
	                isWholeGenome = "all" === queryChr.toLowerCase(); // Various conditions that can create a feature load
	                // * view is "whole genome" but no features are loaded
	                // * cache is disabled
	                // * cache does not contain requested range

	                if (!(isWholeGenome && !this.getWGFeatures || this.config.disableCache || !this.featureCache || !this.featureCache.containsRange(new GenomicInterval(queryChr, start, end)))) {
	                  _context3.next = 7;
	                  break;
	                }

	                _context3.next = 7;
	                return this.loadFeatures(start, end, visibilityWindow, queryChr);

	              case 7:
	                if (!isWholeGenome) {
	                  _context3.next = 12;
	                  break;
	                }

	                if (!this.wgFeatures) {
	                  if (this.queryable) {
	                    // queryable sources don't support whole genome view
	                    this.wgFeatures = [];
	                  } else {
	                    this.wgFeatures = this.getWGFeatures(this.featureCache.getAllFeatures());
	                  }
	                }

	                return _context3.abrupt("return", this.wgFeatures);

	              case 12:
	                return _context3.abrupt("return", this.featureCache.queryFeatures(queryChr, start, end));

	              case 13:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function getFeatures(_x) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "loadFeatures",
	    value: function () {
	      var _loadFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(start, end, visibilityWindow, queryChr) {
	        var reader, intervalStart, intervalEnd, chromosome, expansionWindow, features, genomicInterval, maxRows;
	        return regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                reader = this.reader;
	                intervalStart = start;
	                intervalEnd = end; // Use visibility window to potentially expand query interval.
	                // This can save re-queries as we zoom out.  Visibility window <= 0 is a special case
	                // indicating whole chromosome should be read at once.

	                if ((!visibilityWindow || visibilityWindow <= 0) && this.expandQuery !== false) {
	                  // Whole chromosome
	                  chromosome = this.genome ? this.genome.getChromosome(queryChr) : undefined;
	                  intervalStart = 0;
	                  intervalEnd = chromosome ? chromosome.bpLength : Number.MAX_SAFE_INTEGER;
	                } else if (visibilityWindow > end - start && this.expandQuery !== false) {
	                  expansionWindow = Math.min(4.1 * (end - start), visibilityWindow);
	                  intervalStart = Math.max(0, (start + end - expansionWindow) / 2);
	                  intervalEnd = start + expansionWindow;
	                }

	                _context4.next = 6;
	                return reader.readFeatures(queryChr, intervalStart, intervalEnd);

	              case 6:
	                features = _context4.sent;

	                if (this.queryable === undefined) {
	                  this.queryable = reader.indexed;
	                }

	                genomicInterval = this.queryable ? new GenomicInterval(queryChr, intervalStart, intervalEnd) : undefined;

	                if (features) {
	                  if ("gtf" === this.config.format || "gff3" === this.config.format || "gff" === this.config.format) {
	                    features = new GFFHelper(this.config).combineFeatures(features);
	                  } // Assign overlapping features to rows


	                  if (this.config.format !== "wig" && this.config.type !== "junctions") {
	                    maxRows = this.config.maxRows || Number.MAX_SAFE_INTEGER;
	                    packFeatures(features, maxRows);
	                  } // Note - replacing previous cache with new one.  genomicInterval is optional (might be undefined => includes all features)


	                  this.featureCache = new FeatureCache(features, this.genome, genomicInterval); // If track is marked "searchable"< cache features by name -- use this with caution, memory intensive

	                  if (this.config.searchable) {
	                    this.addFeaturesToDB(features);
	                  }
	                } else {
	                  this.featureCache = new FeatureCache([], genomicInterval); // Empty cache
	                }

	              case 10:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      function loadFeatures(_x2, _x3, _x4, _x5) {
	        return _loadFeatures.apply(this, arguments);
	      }

	      return loadFeatures;
	    }()
	  }, {
	    key: "addFeaturesToDB",
	    value: function addFeaturesToDB(featureList) {
	      var _iterator = _createForOfIteratorHelper(featureList),
	          _step;

	      try {
	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          var feature = _step.value;

	          if (feature.name) {
	            this.genome.featureDB[feature.name.toUpperCase()] = feature;
	          }

	          if (feature.gene && feature.gene.name) {
	            this.genome.featureDB[feature.gene.name.toUpperCase()] = feature;
	          }
	        }
	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }
	    } // TODO -- filter by pixel size

	  }, {
	    key: "getWGFeatures",
	    value: function getWGFeatures(allFeatures) {
	      var genome = this.genome;
	      var wgChromosomeNames = new Set(genome.wgChromosomeNames);
	      var wgFeatures = [];

	      var _iterator2 = _createForOfIteratorHelper(genome.wgChromosomeNames),
	          _step2;

	      try {
	        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	          var c = _step2.value;
	          var features = allFeatures[c];

	          if (features) {
	            var _iterator3 = _createForOfIteratorHelper(features),
	                _step3;

	            try {
	              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	                var f = _step3.value;
	                var queryChr = genome.getChromosomeName(f.chr);

	                if (wgChromosomeNames.has(queryChr)) {
	                  var wg = Object.assign({}, f);
	                  wg.chr = "all";
	                  wg.start = genome.getGenomeCoordinate(f.chr, f.start);
	                  wg.end = genome.getGenomeCoordinate(f.chr, f.end);
	                  wg._f = f; // Don't draw exons in whole genome view

	                  if (wg["exons"]) delete wg["exons"];

	                  wg.popupData = function (genomeLocation) {
	                    if (typeof this._f.popupData === 'function') {
	                      return this._f.popupData();
	                    } else {
	                      return TrackBase.extractPopupData(this._f, genome.id);
	                    }
	                  };

	                  wgFeatures.push(wg);
	                }
	              }
	            } catch (err) {
	              _iterator3.e(err);
	            } finally {
	              _iterator3.f();
	            }
	          }
	        }
	      } catch (err) {
	        _iterator2.e(err);
	      } finally {
	        _iterator2.f();
	      }

	      wgFeatures.sort(function (a, b) {
	        return a.start - b.start;
	      });
	      return wgFeatures;
	    }
	  }]);

	  return TextFeatureSource;
	}();

	function packFeatures(features, maxRows) {
	  maxRows = maxRows || 1000;

	  if (features == null || features.length === 0) {
	    return;
	  } // Segregate by chromosome


	  var chrFeatureMap = {};
	  var chrs = [];

	  var _iterator4 = _createForOfIteratorHelper(features),
	      _step4;

	  try {
	    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	      var feature = _step4.value;
	      var _chr = feature.chr;
	      var flist = chrFeatureMap[_chr];

	      if (!flist) {
	        flist = [];
	        chrFeatureMap[_chr] = flist;
	        chrs.push(_chr);
	      }

	      flist.push(feature);
	    } // Loop through chrosomosomes and pack features;

	  } catch (err) {
	    _iterator4.e(err);
	  } finally {
	    _iterator4.f();
	  }

	  for (var _i = 0, _chrs = chrs; _i < _chrs.length; _i++) {
	    var chr = _chrs[_i];
	    pack$1(chrFeatureMap[chr], maxRows);
	  }
	}
	/**
	 * This function is used to apply properties normally added during parsing to  features supplied directly in the
	 * config as an array of objects.   At the moment the only application is bedpe type features.
	 * @param features
	 */


	function fixFeatures(features) {
	  if (!features || features.length === 0) return;
	  var isBedPE = features[0].chr === undefined && features[0].chr1 !== undefined;

	  if (isBedPE) {
	    var interChrFeatures = [];

	    var _iterator5 = _createForOfIteratorHelper(features),
	        _step5;

	    try {
	      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
	        var feature = _step5.value;

	        // Set total extent of feature
	        if (feature.chr1 === feature.chr2) {
	          feature.chr = feature.chr1;
	          feature.start = Math.min(feature.start1, feature.start2);
	          feature.end = Math.max(feature.end1, feature.end2);
	        } else {
	          interChrFeatures.push(feature);
	        }
	      } // Make copies of inter-chr features, one for each chromosome

	    } catch (err) {
	      _iterator5.e(err);
	    } finally {
	      _iterator5.f();
	    }

	    for (var _i2 = 0, _interChrFeatures = interChrFeatures; _i2 < _interChrFeatures.length; _i2++) {
	      var f1 = _interChrFeatures[_i2];
	      var f2 = Object.assign({
	        dup: true
	      }, f1);
	      features.push(f2);
	      f1.chr = f1.chr1;
	      f1.start = f1.start1;
	      f1.end = f1.end1;
	      f2.chr = f2.chr2;
	      f2.start = f2.start2;
	      f2.end = f2.end2;
	    }
	  }

	  return features;
	}

	function mapProperties(features, mappings) {
	  var mappingKeys = Object.keys(mappings);
	  features.forEach(function (f) {
	    mappingKeys.forEach(function (key) {
	      f[key] = f[mappings[key]];
	    });
	  });
	}

	var BufferedReader = /*#__PURE__*/function () {
	  function BufferedReader(config, contentLength, bufferSize) {
	    _classCallCheck(this, BufferedReader);

	    this.path = config.url;
	    this.bufferSize = bufferSize ? bufferSize : 512000;
	    this.range = {
	      start: -1,
	      size: -1
	    };
	    this.config = config;
	  }
	  /**
	   *
	   * @param requestedRange - byte rangeas {start, size}
	   * @param fulfill - function to receive result
	   * @param asUint8 - optional flag to return result as an UInt8Array
	   */


	  _createClass(BufferedReader, [{
	    key: "dataViewForRange",
	    value: function () {
	      var _dataViewForRange = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(requestedRange, asUint8) {
	        var hasData, bufferSize, loadRange, arrayBuffer, len, bufferStart;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                hasData = this.data && this.range.start <= requestedRange.start && this.range.start + this.range.size >= requestedRange.start + requestedRange.size;

	                if (hasData) {
	                  _context.next = 9;
	                  break;
	                }

	                // If requested range size is specified, potentially expand buffer size
	                if (requestedRange.size) {
	                  bufferSize = Math.max(this.bufferSize, requestedRange.size);
	                } else {
	                  bufferSize = this.bufferSize;
	                }

	                loadRange = {
	                  start: requestedRange.start,
	                  size: bufferSize
	                };
	                _context.next = 6;
	                return igvxhr.loadArrayBuffer(this.path, buildOptions(this.config, {
	                  range: loadRange
	                }));

	              case 6:
	                arrayBuffer = _context.sent;
	                this.data = arrayBuffer;
	                this.range = loadRange;

	              case 9:
	                len = this.data.byteLength;
	                bufferStart = requestedRange.start - this.range.start;
	                return _context.abrupt("return", asUint8 ? new Uint8Array(this.data, bufferStart, len - bufferStart) : new DataView(this.data, bufferStart, len - bufferStart));

	              case 12:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function dataViewForRange(_x, _x2) {
	        return _dataViewForRange.apply(this, arguments);
	      }

	      return dataViewForRange;
	    }()
	  }]);

	  return BufferedReader;
	}();

	function scoreShade(score, color) {
	  var alpha = Math.min(1, 0.11 + 0.89 * (score / 779));
	  return alpha.toString();
	}

	function parseAutoSQL(str) {
	  var table;
	  var fields = [];
	  var startDecoding = false;
	  var lines = str.trim().split(/\s*[\r\n]+\s*/g);

	  var _iterator = _createForOfIteratorHelper(lines),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var line = _step.value;

	      if (line.startsWith('table')) {
	        table = line.split(/\s+/)[1].trim();
	      } else if (line.startsWith('(')) {
	        startDecoding = true;
	      } else if (line.startsWith(')')) {} else if (startDecoding) {
	        if (line.length > 0) {
	          var idx = line.indexOf(';');
	          var tokens = line.substr(0, idx).split(/\s+/);
	          var description = line.substr(idx + 1).replace(/"/g, '').trim();
	          fields.push({
	            type: tokens[0],
	            name: tokens[1],
	            description: description
	          });
	        }
	      }
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }

	  return {
	    table: table,
	    fields: fields
	  };
	}

	function getDecoder(definedFieldCount, fieldCount, autoSql) {
	  if (autoSql && 'chromatinInteract' === autoSql.table) {
	    return decodeInteract;
	  } else {
	    var standardFieldCount = definedFieldCount - 3;
	    return function (feature, tokens) {
	      if (standardFieldCount > 0) {
	        feature.name = tokens[0];
	      }

	      if (standardFieldCount > 1) {
	        feature.score = parseFloat(tokens[1]);
	      }

	      if (standardFieldCount > 2) {
	        feature.strand = tokens[2];
	      }

	      if (standardFieldCount > 3) {
	        feature.cdStart = parseInt(tokens[3]);
	      }

	      if (standardFieldCount > 4) {
	        feature.cdEnd = parseInt(tokens[4]);
	      }

	      if (standardFieldCount > 5) {
	        if (tokens[5] !== "." && tokens[5] !== "0" && tokens[5] !== "-1") {
	          var c = IGVColor.createColorString(tokens[5]);
	          feature.color = c.startsWith("rgb") ? c : undefined;
	        }
	      }

	      if (standardFieldCount > 8) {
	        var exonCount = parseInt(tokens[6]);
	        var exonSizes = tokens[7].split(',');
	        var exonStarts = tokens[8].split(',');
	        var exons = [];

	        for (var i = 0; i < exonCount; i++) {
	          var eStart = feature.start + parseInt(exonStarts[i]);
	          var eEnd = eStart + parseInt(exonSizes[i]);
	          exons.push({
	            start: eStart,
	            end: eEnd
	          });
	        }

	        feature.exons = exons;
	      }

	      if (autoSql) {
	        // TODO -- these should be equal, validate?  fieldCount-definedFieldCount, as.fields.length, tokens.length-3
	        var extraStart = definedFieldCount;

	        for (var _i = extraStart; _i < fieldCount; _i++) {
	          if (_i < autoSql.fields.length) {
	            var name = autoSql.fields[_i].name;
	            var value = tokens[_i - 3];
	            feature[name] = value;
	          }
	        }
	      }
	    };
	  }

	  function decodeInteract(feature, tokens) {
	    feature.chr1 = tokens[5];
	    feature.start1 = Number.parseInt(tokens[6]);
	    feature.end1 = Number.parseInt(tokens[7]);
	    feature.chr2 = tokens[10];
	    feature.start2 = Number.parseInt(tokens[11]);
	    feature.end2 = Number.parseInt(tokens[12]);
	    feature.name = tokens[0];
	    feature.score = Number.parseFloat(tokens[1]);
	    feature.value = Number.parseFloat(tokens[2]);
	    feature.color = tokens[4] === '.' ? undefined : tokens[4] === "0" ? "rgb(0,0,0)" : tokens[4];
	    return feature;
	  }
	}

	var BIGWIG_MAGIC_LTH = 0x888FFC26; // BigWig Magic Low to High

	var BIGWIG_MAGIC_HTL = 0x26FC8F66; // BigWig Magic High to Low

	var BIGBED_MAGIC_LTH = 0x8789F2EB; // BigBed Magic Low to High

	var BIGBED_MAGIC_HTL = 0xEBF28987; // BigBed Magic High to Low

	var BBFILE_HEADER_SIZE = 64;
	var RPTREE_HEADER_SIZE = 48;
	var RPTREE_NODE_LEAF_ITEM_SIZE = 32; // leaf item size

	var RPTREE_NODE_CHILD_ITEM_SIZE = 24; // child item size

	var BUFFER_SIZE = 512000; //  buffer

	var BWReader = /*#__PURE__*/function () {
	  function BWReader(config, genome) {
	    _classCallCheck(this, BWReader);

	    this.path = config.url;
	    this.genome = genome;
	    this.rpTreeCache = {};
	    this.config = config;
	  }

	  _createClass(BWReader, [{
	    key: "readWGFeatures",
	    value: function () {
	      var _readWGFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(bpPerPixel, windowFunction) {
	        var chrIdx1, chrIdx2, chr1, chr2;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return this.loadHeader();

	              case 2:
	                chrIdx1 = 0;
	                chrIdx2 = this.chromTree.idToChrom.length - 1;
	                chr1 = this.chromTree.idToChrom[chrIdx1];
	                chr2 = this.chromTree.idToChrom[chrIdx2];
	                return _context.abrupt("return", this.readFeatures(chr1, 0, chr2, Number.MAX_VALUE, bpPerPixel, windowFunction));

	              case 7:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function readWGFeatures(_x, _x2) {
	        return _readWGFeatures.apply(this, arguments);
	      }

	      return readWGFeatures;
	    }()
	  }, {
	    key: "readFeatures",
	    value: function () {
	      var _readFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(chr1, bpStart, chr2, bpEnd, bpPerPixel, windowFunction) {
	        var chrIdx1, chrIdx2, treeOffset, decodeFunction, zoomLevelHeaders, zoomLevelHeader, rpTree, leafItems, start, end, _iterator, _step, item, size, arrayBuffer, allFeatures, buffer, _iterator2, _step2, _item, uint8Array, plain, isCompressed, inflate;

	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                _context2.next = 2;
	                return this.loadHeader();

	              case 2:
	                chrIdx1 = this.chromTree.chromToID[chr1];
	                chrIdx2 = this.chromTree.chromToID[chr2];

	                if (!(chrIdx1 === undefined || chrIdx2 === undefined)) {
	                  _context2.next = 6;
	                  break;
	                }

	                return _context2.abrupt("return", []);

	              case 6:
	                if (!(this.type === "bigwig")) {
	                  _context2.next = 14;
	                  break;
	                }

	                _context2.next = 9;
	                return this.getZoomHeaders();

	              case 9:
	                zoomLevelHeaders = _context2.sent;
	                zoomLevelHeader = bpPerPixel ? zoomLevelForScale(bpPerPixel, zoomLevelHeaders) : undefined;

	                if (zoomLevelHeader) {
	                  treeOffset = zoomLevelHeader.indexOffset;
	                  decodeFunction = decodeZoomData;
	                } else {
	                  treeOffset = this.header.fullIndexOffset;
	                  decodeFunction = decodeWigData;
	                }

	                _context2.next = 16;
	                break;

	              case 14:
	                // bigbed, zoom data is not currently used in igv for bed type features
	                treeOffset = this.header.fullIndexOffset;
	                decodeFunction = getBedDataDecoder.call(this);

	              case 16:
	                _context2.next = 18;
	                return this.loadRPTree(treeOffset);

	              case 18:
	                rpTree = _context2.sent;
	                _context2.next = 21;
	                return rpTree.findLeafItemsOverlapping(chrIdx1, bpStart, chrIdx2, bpEnd);

	              case 21:
	                leafItems = _context2.sent;

	                if (!(!leafItems || leafItems.length === 0)) {
	                  _context2.next = 26;
	                  break;
	                }

	                return _context2.abrupt("return", []);

	              case 26:
	                // Consolidate leaf items and get all data at once
	                start = Number.MAX_VALUE;
	                end = 0;
	                _iterator = _createForOfIteratorHelper(leafItems);

	                try {
	                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
	                    item = _step.value;
	                    start = Math.min(start, item.dataOffset);
	                    end = Math.max(end, item.dataOffset + item.dataSize);
	                  }
	                } catch (err) {
	                  _iterator.e(err);
	                } finally {
	                  _iterator.f();
	                }

	                size = end - start;
	                _context2.next = 33;
	                return igvxhr.loadArrayBuffer(this.config.url, buildOptions(this.config, {
	                  range: {
	                    start: start,
	                    size: size
	                  }
	                }));

	              case 33:
	                arrayBuffer = _context2.sent;
	                // Parse data and return features
	                allFeatures = [];
	                buffer = new Uint8Array(arrayBuffer);
	                _iterator2 = _createForOfIteratorHelper(leafItems);

	                try {
	                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	                    _item = _step2.value;
	                    uint8Array = buffer.subarray(_item.dataOffset - start, _item.dataOffset + _item.dataSize);
	                    plain = void 0;
	                    isCompressed = this.header.uncompressBuffSize > 0;

	                    if (isCompressed) {
	                      inflate = new Zlib$1.Inflate(uint8Array);
	                      plain = inflate.decompress();
	                    } else {
	                      plain = uint8Array;
	                    }

	                    decodeFunction.call(this, new DataView(plain.buffer), chrIdx1, bpStart, chrIdx2, bpEnd, allFeatures, this.chromTree.idToChrom, windowFunction);
	                  }
	                } catch (err) {
	                  _iterator2.e(err);
	                } finally {
	                  _iterator2.f();
	                }

	                allFeatures.sort(function (a, b) {
	                  return a.start - b.start;
	                });
	                return _context2.abrupt("return", allFeatures);

	              case 40:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function readFeatures(_x3, _x4, _x5, _x6, _x7, _x8) {
	        return _readFeatures.apply(this, arguments);
	      }

	      return readFeatures;
	    }()
	  }, {
	    key: "getZoomHeaders",
	    value: function () {
	      var _getZoomHeaders = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	        return regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                if (!this.zoomLevelHeaders) {
	                  _context3.next = 4;
	                  break;
	                }

	                return _context3.abrupt("return", this.zoomLevelHeaders);

	              case 4:
	                _context3.next = 6;
	                return this.loadHeader();

	              case 6:
	                return _context3.abrupt("return", this.zoomLevelHeaders);

	              case 7:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function getZoomHeaders() {
	        return _getZoomHeaders.apply(this, arguments);
	      }

	      return getZoomHeaders;
	    }()
	  }, {
	    key: "loadHeader",
	    value: function () {
	      var _loadHeader = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
	        var data, header, binaryParser, magic, _magic, startOffset, range, nZooms, i, zoomNumber, zlh, autoSqlString;

	        return regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                if (!this.header) {
	                  _context4.next = 4;
	                  break;
	                }

	                return _context4.abrupt("return", this.header);

	              case 4:
	                _context4.next = 6;
	                return igvxhr.loadArrayBuffer(this.path, buildOptions(this.config, {
	                  range: {
	                    start: 0,
	                    size: BBFILE_HEADER_SIZE
	                  }
	                }));

	              case 6:
	                data = _context4.sent;
	                // Assume low-to-high unless proven otherwise
	                this.littleEndian = true;
	                binaryParser = new BinaryParser(new DataView(data));
	                magic = binaryParser.getUInt();

	                if (magic === BIGWIG_MAGIC_LTH) {
	                  this.type = "bigwig";
	                } else if (magic === BIGBED_MAGIC_LTH) {
	                  this.type = "bigbed";
	                } else {
	                  //Try big endian order
	                  this.littleEndian = false;
	                  binaryParser.littleEndian = false;
	                  binaryParser.position = 0;
	                  _magic = binaryParser.getUInt();

	                  if (_magic === BIGWIG_MAGIC_HTL) {
	                    this.type = "bigwig";
	                  } else if (_magic === BIGBED_MAGIC_HTL) {
	                    this.type = "bigbed";
	                  } else ;
	                } // Table 5  "Common header for bigwig and bigbed files"


	                header = {
	                  bwVersion: binaryParser.getUShort(),
	                  nZoomLevels: binaryParser.getUShort(),
	                  chromTreeOffset: binaryParser.getLong(),
	                  fullDataOffset: binaryParser.getLong(),
	                  fullIndexOffset: binaryParser.getLong(),
	                  fieldCount: binaryParser.getUShort(),
	                  definedFieldCount: binaryParser.getUShort(),
	                  autoSqlOffset: binaryParser.getLong(),
	                  totalSummaryOffset: binaryParser.getLong(),
	                  uncompressBuffSize: binaryParser.getInt(),
	                  extensionOffset: binaryParser.getLong()
	                }; ///////////

	                startOffset = BBFILE_HEADER_SIZE;
	                range = {
	                  start: startOffset,
	                  size: header.fullDataOffset - startOffset + 5
	                };
	                _context4.next = 16;
	                return igvxhr.loadArrayBuffer(this.path, buildOptions(this.config, {
	                  range: range
	                }));

	              case 16:
	                data = _context4.sent;
	                nZooms = header.nZoomLevels;
	                binaryParser = new BinaryParser(new DataView(data));
	                this.zoomLevelHeaders = [];
	                this.firstZoomDataOffset = Number.MAX_SAFE_INTEGER;

	                for (i = 1; i <= nZooms; i++) {
	                  zoomNumber = nZooms - i;
	                  zlh = new ZoomLevelHeader(zoomNumber, binaryParser);
	                  this.firstZoomDataOffset = Math.min(zlh.dataOffset, this.firstZoomDataOffset);
	                  this.zoomLevelHeaders[zoomNumber] = zlh;
	                } // Autosql


	                if (header.autoSqlOffset > 0) {
	                  binaryParser.position = header.autoSqlOffset - startOffset;
	                  autoSqlString = binaryParser.getString();

	                  if (autoSqlString) {
	                    this.autoSql = parseAutoSQL(autoSqlString);
	                  }
	                } // Total summary


	                if (header.totalSummaryOffset > 0) {
	                  binaryParser.position = header.totalSummaryOffset - startOffset;
	                  this.totalSummary = new BWTotalSummary(binaryParser);
	                } // Chrom data index


	                if (!(header.chromTreeOffset > 0)) {
	                  _context4.next = 29;
	                  break;
	                }

	                binaryParser.position = header.chromTreeOffset - startOffset;
	                this.chromTree = new BPTree(binaryParser, startOffset, this.genome);
	                _context4.next = 30;
	                break;

	              case 29:
	                throw "BigWig chromosome tree offset <= 0";

	              case 30:
	                //Finally total data count
	                binaryParser.position = header.fullDataOffset - startOffset;
	                header.dataCount = binaryParser.getInt(); ///////////

	                this.setDefaultVisibilityWindow(header);
	                this.header = header;
	                return _context4.abrupt("return", this.header);

	              case 35:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      function loadHeader() {
	        return _loadHeader.apply(this, arguments);
	      }

	      return loadHeader;
	    }()
	  }, {
	    key: "loadRPTree",
	    value: function () {
	      var _loadRPTree = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(offset) {
	        var rpTree;
	        return regeneratorRuntime.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                rpTree = this.rpTreeCache[offset];

	                if (!rpTree) {
	                  _context5.next = 5;
	                  break;
	                }

	                return _context5.abrupt("return", rpTree);

	              case 5:
	                rpTree = new RPTree(offset, this.config, this.littleEndian);
	                _context5.next = 8;
	                return rpTree.load();

	              case 8:
	                this.rpTreeCache[offset] = rpTree;
	                return _context5.abrupt("return", rpTree);

	              case 10:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this);
	      }));

	      function loadRPTree(_x9) {
	        return _loadRPTree.apply(this, arguments);
	      }

	      return loadRPTree;
	    }()
	  }, {
	    key: "getType",
	    value: function () {
	      var _getType = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
	        return regeneratorRuntime.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                _context6.next = 2;
	                return this.loadHeader();

	              case 2:
	                return _context6.abrupt("return", this.type);

	              case 3:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this);
	      }));

	      function getType() {
	        return _getType.apply(this, arguments);
	      }

	      return getType;
	    }()
	  }, {
	    key: "getTrackType",
	    value: function () {
	      var _getTrackType = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
	        return regeneratorRuntime.wrap(function _callee7$(_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                _context7.next = 2;
	                return this.loadHeader();

	              case 2:
	                if (!(this.type === "bigwig")) {
	                  _context7.next = 6;
	                  break;
	                }

	                return _context7.abrupt("return", "wig");

	              case 6:
	                return _context7.abrupt("return", this.autoSql && this.autoSql.table === "chromatinInteract" ? "interact" : "annotation");

	              case 7:
	              case "end":
	                return _context7.stop();
	            }
	          }
	        }, _callee7, this);
	      }));

	      function getTrackType() {
	        return _getTrackType.apply(this, arguments);
	      }

	      return getTrackType;
	    }()
	  }, {
	    key: "setDefaultVisibilityWindow",
	    value: function setDefaultVisibilityWindow(header) {
	      if (this.type === "bigwig") {
	        this.visibilityWindow = -1;
	      } else {
	        // bigbed
	        var genomeSize = this.genome ? this.genome.getGenomeLength() : 3088286401; // Estimate window size to return ~ 1,000 features, assuming even distribution across the genome

	        this.visibilityWindow = header.dataCount < 1000 ? -1 : 1000 * (genomeSize / header.dataCount);
	      }
	    }
	  }]);

	  return BWReader;
	}();

	var ZoomLevelHeader = function ZoomLevelHeader(index, byteBuffer) {
	  _classCallCheck(this, ZoomLevelHeader);

	  this.index = index;
	  this.reductionLevel = byteBuffer.getInt();
	  this.reserved = byteBuffer.getInt();
	  this.dataOffset = byteBuffer.getLong();
	  this.indexOffset = byteBuffer.getLong();
	};

	var RPTree = /*#__PURE__*/function () {
	  function RPTree(fileOffset, config, littleEndian) {
	    _classCallCheck(this, RPTree);

	    this.config = config;
	    this.fileOffset = fileOffset; // File offset to beginning of tree

	    this.path = config.url;
	    this.littleEndian = littleEndian;
	  }

	  _createClass(RPTree, [{
	    key: "load",
	    value: function () {
	      var _load = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
	        var rootNodeOffset, bufferedReader;
	        return regeneratorRuntime.wrap(function _callee8$(_context8) {
	          while (1) {
	            switch (_context8.prev = _context8.next) {
	              case 0:
	                rootNodeOffset = this.fileOffset + RPTREE_HEADER_SIZE;
	                bufferedReader = new BufferedReader(this.config, BUFFER_SIZE);
	                _context8.next = 4;
	                return this.readNode(rootNodeOffset, bufferedReader);

	              case 4:
	                this.rootNode = _context8.sent;
	                return _context8.abrupt("return", this);

	              case 6:
	              case "end":
	                return _context8.stop();
	            }
	          }
	        }, _callee8, this);
	      }));

	      function load() {
	        return _load.apply(this, arguments);
	      }

	      return load;
	    }()
	  }, {
	    key: "readNode",
	    value: function () {
	      var _readNode = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(filePosition, bufferedReader) {
	        var dataView, binaryParser, type, isLeaf, reserved, count, bytesRequired, range2, items, i, item, _i, _item2;

	        return regeneratorRuntime.wrap(function _callee9$(_context9) {
	          while (1) {
	            switch (_context9.prev = _context9.next) {
	              case 0:
	                _context9.next = 2;
	                return bufferedReader.dataViewForRange({
	                  start: filePosition,
	                  size: 4
	                }, false);

	              case 2:
	                dataView = _context9.sent;
	                binaryParser = new BinaryParser(dataView, this.littleEndian);
	                type = binaryParser.getByte();
	                isLeaf = type === 1;
	                reserved = binaryParser.getByte();
	                count = binaryParser.getUShort();
	                filePosition += 4;
	                bytesRequired = count * (isLeaf ? RPTREE_NODE_LEAF_ITEM_SIZE : RPTREE_NODE_CHILD_ITEM_SIZE);
	                range2 = {
	                  start: filePosition,
	                  size: bytesRequired
	                };
	                _context9.next = 13;
	                return bufferedReader.dataViewForRange(range2, false);

	              case 13:
	                dataView = _context9.sent;
	                items = new Array(count);
	                binaryParser = new BinaryParser(dataView);

	                if (!isLeaf) {
	                  _context9.next = 21;
	                  break;
	                }

	                for (i = 0; i < count; i++) {
	                  item = {
	                    isLeaf: true,
	                    startChrom: binaryParser.getInt(),
	                    startBase: binaryParser.getInt(),
	                    endChrom: binaryParser.getInt(),
	                    endBase: binaryParser.getInt(),
	                    dataOffset: binaryParser.getLong(),
	                    dataSize: binaryParser.getLong()
	                  };
	                  items[i] = item;
	                }

	                return _context9.abrupt("return", new RPTreeNode(items));

	              case 21:
	                // non-leaf
	                for (_i = 0; _i < count; _i++) {
	                  _item2 = {
	                    isLeaf: false,
	                    startChrom: binaryParser.getInt(),
	                    startBase: binaryParser.getInt(),
	                    endChrom: binaryParser.getInt(),
	                    endBase: binaryParser.getInt(),
	                    childOffset: binaryParser.getLong()
	                  };
	                  items[_i] = _item2;
	                }

	                return _context9.abrupt("return", new RPTreeNode(items));

	              case 23:
	              case "end":
	                return _context9.stop();
	            }
	          }
	        }, _callee9, this);
	      }));

	      function readNode(_x10, _x11) {
	        return _readNode.apply(this, arguments);
	      }

	      return readNode;
	    }()
	  }, {
	    key: "findLeafItemsOverlapping",
	    value: function () {
	      var _findLeafItemsOverlapping = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(chrIdx1, startBase, chrIdx2, endBase) {
	        var self;
	        return regeneratorRuntime.wrap(function _callee10$(_context10) {
	          while (1) {
	            switch (_context10.prev = _context10.next) {
	              case 0:
	                self = this;
	                return _context10.abrupt("return", new Promise(function (fulfill, reject) {
	                  var leafItems = [],
	                      processing = new Set(),
	                      bufferedReader = new BufferedReader(self.config, BUFFER_SIZE);
	                  processing.add(0); // Zero represents the root node

	                  findLeafItems(self.rootNode, 0);

	                  function findLeafItems(node, nodeId) {
	                    if (overlaps(node, chrIdx1, startBase, chrIdx2, endBase)) {
	                      var items = node.items;
	                      items.forEach(function (item) {
	                        if (overlaps(item, chrIdx1, startBase, chrIdx2, endBase)) {
	                          if (item.isLeaf) {
	                            leafItems.push(item);
	                          } else {
	                            if (item.childNode) {
	                              findLeafItems(item.childNode);
	                            } else {
	                              processing.add(item.childOffset); // Represent node to-be-loaded by its file position

	                              self.readNode(item.childOffset, bufferedReader).then(function (node) {
	                                item.childNode = node;
	                                findLeafItems(node, item.childOffset);
	                              }).catch(reject);
	                            }
	                          }
	                        }
	                      });
	                    }

	                    if (nodeId !== undefined) processing.delete(nodeId); // Wait until all nodes are processed

	                    if (processing.size === 0) {
	                      fulfill(leafItems);
	                    }
	                  }
	                }));

	              case 2:
	              case "end":
	                return _context10.stop();
	            }
	          }
	        }, _callee10, this);
	      }));

	      function findLeafItemsOverlapping(_x12, _x13, _x14, _x15) {
	        return _findLeafItemsOverlapping.apply(this, arguments);
	      }

	      return findLeafItemsOverlapping;
	    }()
	  }]);

	  return RPTree;
	}();

	var RPTreeNode = function RPTreeNode(items) {
	  _classCallCheck(this, RPTreeNode);

	  this.items = items;
	  var minChromId = Number.MAX_SAFE_INTEGER,
	      maxChromId = 0,
	      minStartBase = Number.MAX_SAFE_INTEGER,
	      maxEndBase = 0,
	      i,
	      item;

	  for (i = 0; i < items.length; i++) {
	    item = items[i];
	    minChromId = Math.min(minChromId, item.startChrom);
	    maxChromId = Math.max(maxChromId, item.endChrom);
	    minStartBase = Math.min(minStartBase, item.startBase);
	    maxEndBase = Math.max(maxEndBase, item.endBase);
	  }

	  this.startChrom = minChromId;
	  this.endChrom = maxChromId;
	  this.startBase = minStartBase;
	  this.endBase = maxEndBase;
	};

	var BPTree = function BPTree(binaryParser, startOffset, genome) {
	  _classCallCheck(this, BPTree);

	  var magic = binaryParser.getInt();
	  var blockSize = binaryParser.getInt();
	  var keySize = binaryParser.getInt();
	  var valSize = binaryParser.getInt();
	  var itemCount = binaryParser.getLong();
	  var reserved = binaryParser.getLong();
	  var chromToId = {};
	  var idToChrom = [];
	  this.header = {
	    magic: magic,
	    blockSize: blockSize,
	    keySize: keySize,
	    valSize: valSize,
	    itemCount: itemCount,
	    reserved: reserved
	  };
	  this.chromToID = chromToId;
	  this.idToChrom = idToChrom; // Recursively walk tree to populate dictionary

	  readTreeNode(binaryParser, -1);

	  function readTreeNode(byteBuffer, offset) {
	    if (offset >= 0) byteBuffer.position = offset;
	    var type = byteBuffer.getByte(),
	        reserved = byteBuffer.getByte(),
	        count = byteBuffer.getUShort(),
	        i,
	        key,
	        chromId,
	        chromSize,
	        childOffset,
	        bufferOffset,
	        currOffset;

	    if (type === 1) {
	      for (i = 0; i < count; i++) {
	        key = byteBuffer.getFixedLengthTrimmedString(keySize);
	        chromId = byteBuffer.getInt();
	        chromSize = byteBuffer.getInt();
	        if (genome) key = genome.getChromosomeName(key); // Translate to canonical chr name

	        chromToId[key] = chromId;
	        idToChrom[chromId] = key;
	      }
	    } else {
	      // non-leaf
	      for (i = 0; i < count; i++) {
	        key = byteBuffer.getFixedLengthTrimmedString(keySize);
	        childOffset = byteBuffer.getLong();
	        bufferOffset = childOffset - startOffset;
	        currOffset = byteBuffer.position;
	        readTreeNode(byteBuffer, bufferOffset);
	        byteBuffer.position = currOffset;
	      }
	    }
	  }
	};
	/**
	 * Return true if {chrIdx1:startBase-chrIdx2:endBase} overlaps item's interval
	 * @returns {boolean}
	 */


	function overlaps(item, chrIdx1, startBase, chrIdx2, endBase) {
	  if (!item) {
	    return false;
	  }

	  return (chrIdx2 > item.startChrom || chrIdx2 === item.startChrom && endBase >= item.startBase) && (chrIdx1 < item.endChrom || chrIdx1 === item.endChrom && startBase <= item.endBase);
	}

	var BWTotalSummary = function BWTotalSummary(byteBuffer) {
	  _classCallCheck(this, BWTotalSummary);

	  if (byteBuffer) {
	    this.basesCovered = byteBuffer.getLong();
	    this.minVal = byteBuffer.getDouble();
	    this.maxVal = byteBuffer.getDouble();
	    this.sumData = byteBuffer.getDouble();
	    this.sumSquares = byteBuffer.getDouble();
	    computeStats.call(this);
	  } else {
	    this.basesCovered = 0;
	    this.minVal = 0;
	    this.maxVal = 0;
	    this.sumData = 0;
	    this.sumSquares = 0;
	    this.mean = 0;
	    this.stddev = 0;
	  }
	};

	function computeStats() {
	  var n = this.basesCovered;

	  if (n > 0) {
	    this.mean = this.sumData / n;
	    this.stddev = Math.sqrt(this.sumSquares / (n - 1));
	    var min = this.minVal < 0 ? this.mean - 2 * this.stddev : 0,
	        max = this.maxVal > 0 ? this.mean + 2 * this.stddev : 0;
	    this.defaultRange = {
	      min: min,
	      max: max
	    };
	  }
	}

	function zoomLevelForScale(bpPerPixel, zoomLevelHeaders) {
	  var level;

	  for (var _i2 = 0; _i2 < zoomLevelHeaders.length; _i2++) {
	    var zl = zoomLevelHeaders[_i2];

	    if (zl.reductionLevel < bpPerPixel) {
	      level = zl;
	      break;
	    }
	  }

	  return level;
	}

	function decodeWigData(data, chrIdx1, bpStart, chrIdx2, bpEnd, featureArray, chrDict) {
	  var binaryParser = new BinaryParser(data);
	  var chromId = binaryParser.getInt();
	  var chromStart = binaryParser.getInt();
	  var chromEnd = binaryParser.getInt();
	  var itemStep = binaryParser.getInt();
	  var itemSpan = binaryParser.getInt();
	  var type = binaryParser.getByte();
	  var reserved = binaryParser.getByte();
	  var itemCount = binaryParser.getUShort();

	  if (chromId >= chrIdx1 && chromId <= chrIdx2) {
	    while (itemCount-- > 0) {
	      var value = void 0;

	      switch (type) {
	        case 1:
	          chromStart = binaryParser.getInt();
	          chromEnd = binaryParser.getInt();
	          value = binaryParser.getFloat();
	          break;

	        case 2:
	          chromStart = binaryParser.getInt();
	          value = binaryParser.getFloat();
	          chromEnd = chromStart + itemSpan;
	          break;

	        case 3:
	          // Fixed step
	          value = binaryParser.getFloat();
	          chromEnd = chromStart + itemSpan;
	          chromStart += itemStep;
	          break;
	      }

	      if (chromId < chrIdx1 || chromId === chrIdx1 && chromEnd < bpStart) continue;else if (chromId > chrIdx2 || chromId === chrIdx2 && chromStart >= bpEnd) break;

	      if (Number.isFinite(value)) {
	        var chr = chrDict[chromId];
	        featureArray.push({
	          chr: chr,
	          start: chromStart,
	          end: chromEnd,
	          value: value
	        });
	      }
	    }
	  }
	}

	function getBedDataDecoder() {
	  var minSize = 3 * 4 + 1; // Minimum # of bytes required for a bed record

	  var decoder = getDecoder(this.header.definedFieldCount, this.header.fieldCount, this.autoSql);
	  return function (data, chrIdx1, bpStart, chrIdx2, bpEnd, featureArray, chrDict) {
	    var binaryParser = new BinaryParser(data);

	    while (binaryParser.remLength() >= minSize) {
	      var chromId = binaryParser.getInt();
	      var chr = chrDict[chromId];
	      var chromStart = binaryParser.getInt();
	      var chromEnd = binaryParser.getInt();
	      var rest = binaryParser.getString();
	      if (chromId < chrIdx1 || chromId === chrIdx1 && chromEnd < bpStart) continue;else if (chromId > chrIdx2 || chromId === chrIdx2 && chromStart >= bpEnd) break;

	      if (chromEnd > 0) {
	        var feature = {
	          chr: chr,
	          start: chromStart,
	          end: chromEnd
	        };
	        featureArray.push(feature);
	        var tokens = rest.split("\t");
	        decoder(feature, tokens);
	      }
	    }
	  };
	}

	function decodeZoomData(data, chrIdx1, bpStart, chrIdx2, bpEnd, featureArray, chrDict, windowFunction) {
	  var binaryParser = new BinaryParser(data);
	  var minSize = 8 * 4; // Minimum # of bytes required for a zoom record

	  while (binaryParser.remLength() >= minSize) {
	    var chromId = binaryParser.getInt();
	    var chr = chrDict[chromId];
	    var chromStart = binaryParser.getInt();
	    var chromEnd = binaryParser.getInt();
	    var validCount = binaryParser.getInt();
	    var minVal = binaryParser.getFloat();
	    var maxVal = binaryParser.getFloat();
	    var sumData = binaryParser.getFloat();
	    var sumSquares = binaryParser.getFloat();
	    var value = void 0;

	    switch (windowFunction) {
	      case "min":
	        value = minVal;
	        break;

	      case "max":
	        value = maxVal;
	        break;

	      default:
	        value = validCount === 0 ? 0 : sumData / validCount;
	    }

	    if (chromId < chrIdx1 || chromId === chrIdx1 && chromEnd < bpStart) continue;else if (chromId > chrIdx2 || chromId === chrIdx2 && chromStart >= bpEnd) break;

	    if (Number.isFinite(value)) {
	      featureArray.push({
	        chr: chr,
	        start: chromStart,
	        end: chromEnd,
	        value: value
	      });
	    }
	  }
	}

	var BWSource = /*#__PURE__*/function () {
	  function BWSource(config, genome) {
	    _classCallCheck(this, BWSource);

	    this.reader = new BWReader(config, genome);
	    this.genome = genome;
	    this.format = config.format || "bigwig";
	    this.wgValues = {};
	  }

	  _createClass(BWSource, [{
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
	        var chr, start, end, bpPerPixel, windowFunction, features, isBigWig;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                chr = _ref.chr, start = _ref.start, end = _ref.end, bpPerPixel = _ref.bpPerPixel, windowFunction = _ref.windowFunction;

	                if (!(chr.toLowerCase() === "all")) {
	                  _context.next = 7;
	                  break;
	                }

	                _context.next = 4;
	                return this.getWGValues(windowFunction);

	              case 4:
	                _context.t0 = _context.sent;
	                _context.next = 10;
	                break;

	              case 7:
	                _context.next = 9;
	                return this.reader.readFeatures(chr, start, chr, end, bpPerPixel, windowFunction);

	              case 9:
	                _context.t0 = _context.sent;

	              case 10:
	                features = _context.t0;
	                isBigWig = this.reader.type === "bigwig";

	                if (!isBigWig) {
	                  pack$1(features);
	                }

	                return _context.abrupt("return", features);

	              case 14:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function getFeatures(_x) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "getHeader",
	    value: function () {
	      var _getHeader = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                return _context2.abrupt("return", this.reader.loadHeader());

	              case 1:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function getHeader() {
	        return _getHeader.apply(this, arguments);
	      }

	      return getHeader;
	    }()
	  }, {
	    key: "getDefaultRange",
	    value: function getDefaultRange() {
	      if (this.reader.totalSummary !== undefined) {
	        return this.reader.totalSummary.defaultRange;
	      } else {
	        return undefined;
	      }
	    }
	  }, {
	    key: "defaultVisibilityWindow",
	    value: function () {
	      var _defaultVisibilityWindow = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	        return regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                return _context3.abrupt("return", this.reader.defaultVisibilityWindow);

	              case 1:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function defaultVisibilityWindow() {
	        return _defaultVisibilityWindow.apply(this, arguments);
	      }

	      return defaultVisibilityWindow;
	    }()
	  }, {
	    key: "getWGValues",
	    value: function () {
	      var _getWGValues = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(windowFunction) {
	        var nominalScreenWidth, genome, bpPerPixel, features, wgValues, _iterator, _step, f, chr, offset, wgFeature;

	        return regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                nominalScreenWidth = 1000; // This doesn't need to be precise

	                genome = this.genome;

	                if (!this.wgValues[windowFunction]) {
	                  _context4.next = 6;
	                  break;
	                }

	                return _context4.abrupt("return", this.wgValues[windowFunction]);

	              case 6:
	                bpPerPixel = genome.getGenomeLength() / nominalScreenWidth;
	                _context4.next = 9;
	                return this.reader.readWGFeatures(bpPerPixel, windowFunction);

	              case 9:
	                features = _context4.sent;
	                wgValues = [];
	                _iterator = _createForOfIteratorHelper(features);

	                try {
	                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
	                    f = _step.value;
	                    chr = f.chr;
	                    offset = genome.getCumulativeOffset(chr);
	                    wgFeature = Object.assign({}, f);
	                    wgFeature.chr = "all";
	                    wgFeature.start = offset + f.start;
	                    wgFeature.end = offset + f.end;
	                    wgValues.push(wgFeature);
	                  }
	                } catch (err) {
	                  _iterator.e(err);
	                } finally {
	                  _iterator.f();
	                }

	                this.wgValues[windowFunction] = wgValues;
	                return _context4.abrupt("return", wgValues);

	              case 15:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      function getWGValues(_x2) {
	        return _getWGValues.apply(this, arguments);
	      }

	      return getWGValues;
	    }()
	  }, {
	    key: "supportsWholeGenome",
	    value: function supportsWholeGenome() {
	      return this.reader.type === "bigwig" || this.defaultVisibilityWindow() <= 0;
	    }
	  }, {
	    key: "trackType",
	    value: function () {
	      var _trackType = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
	        return regeneratorRuntime.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                return _context5.abrupt("return", this.reader.getTrackType());

	              case 1:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this);
	      }));

	      function trackType() {
	        return _trackType.apply(this, arguments);
	      }

	      return trackType;
	    }()
	  }]);

	  return BWSource;
	}();

	var UNSUPPORTED_Y$3 = regexpStickyHelpers.UNSUPPORTED_Y; // `RegExp.prototype.flags` getter
	// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags

	if (descriptors && (/./g.flags != 'g' || UNSUPPORTED_Y$3)) {
	  objectDefineProperty.f(RegExp.prototype, 'flags', {
	    configurable: true,
	    get: regexpFlags
	  });
	}

	var GZIP_FLAG = 0x1;

	var TDFReader = /*#__PURE__*/function () {
	  function TDFReader(config, genome) {
	    _classCallCheck(this, TDFReader);

	    this.config = config;
	    this.genome = genome;
	    this.path = config.url;
	    this.groupCache = {};
	    this.datasetCache = {};
	  }

	  _createClass(TDFReader, [{
	    key: "readHeader",
	    value: function () {
	      var _readHeader = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	        var data, binaryParser, headerSize, nWindowFunctions, nTracks, nEntries, name, pos, size, _name, _pos, _size;

	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (!(this.magic !== undefined)) {
	                  _context.next = 2;
	                  break;
	                }

	                return _context.abrupt("return", this);

	              case 2:
	                _context.next = 4;
	                return igvxhr.loadArrayBuffer(this.path, buildOptions(this.config, {
	                  range: {
	                    start: 0,
	                    size: 64000
	                  }
	                }));

	              case 4:
	                data = _context.sent;
	                binaryParser = new BinaryParser(new DataView(data));
	                this.magic = binaryParser.getInt();
	                this.version = binaryParser.getInt();
	                this.indexPos = binaryParser.getLong();
	                this.indexSize = binaryParser.getInt();
	                headerSize = binaryParser.getInt();

	                if (this.version >= 2) {
	                  nWindowFunctions = binaryParser.getInt();
	                  this.windowFunctions = [];

	                  while (nWindowFunctions-- > 0) {
	                    this.windowFunctions.push(binaryParser.getString());
	                  }
	                }

	                this.trackType = binaryParser.getString();
	                this.trackLine = binaryParser.getString();
	                nTracks = binaryParser.getInt();
	                this.trackNames = [];

	                while (nTracks-- > 0) {
	                  this.trackNames.push(binaryParser.getString());
	                }

	                this.genomeID = binaryParser.getString();
	                this.flags = binaryParser.getInt();
	                this.compressed = (this.flags & GZIP_FLAG) !== 0; // Now read index

	                _context.next = 22;
	                return igvxhr.loadArrayBuffer(this.path, buildOptions(this.config, {
	                  range: {
	                    start: this.indexPos,
	                    size: this.indexSize
	                  }
	                }));

	              case 22:
	                data = _context.sent;
	                binaryParser = new BinaryParser(new DataView(data));
	                this.datasetIndex = {};
	                nEntries = binaryParser.getInt();

	                while (nEntries-- > 0) {
	                  name = binaryParser.getString();
	                  pos = binaryParser.getLong();
	                  size = binaryParser.getInt();
	                  this.datasetIndex[name] = {
	                    position: pos,
	                    size: size
	                  };
	                }

	                this.groupIndex = {};
	                nEntries = binaryParser.getInt();

	                while (nEntries-- > 0) {
	                  _name = binaryParser.getString();
	                  _pos = binaryParser.getLong();
	                  _size = binaryParser.getInt();
	                  this.groupIndex[_name] = {
	                    position: _pos,
	                    size: _size
	                  };
	                }

	                return _context.abrupt("return", this);

	              case 31:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function readHeader() {
	        return _readHeader.apply(this, arguments);
	      }

	      return readHeader;
	    }()
	  }, {
	    key: "readDataset",
	    value: function () {
	      var _readDataset = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(chr, windowFunction, zoom) {
	        var key, wf, zoomString, dsName, indexEntry, data, binaryParser, nAttributes, attributes, dataType, tileWidth, nTiles, tiles, dataset;
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                key = chr + "_" + windowFunction + "_" + zoom;

	                if (!this.datasetCache[key]) {
	                  _context2.next = 5;
	                  break;
	                }

	                return _context2.abrupt("return", this.datasetCache[key]);

	              case 5:
	                _context2.next = 7;
	                return this.readHeader();

	              case 7:
	                wf = this.version < 2 ? "" : "/" + windowFunction;
	                zoomString = chr.toLowerCase() === "all" || zoom === undefined ? "0" : zoom.toString();

	                if (windowFunction === "raw") {
	                  dsName = "/" + chr + "/raw";
	                } else {
	                  dsName = "/" + chr + "/z" + zoomString + wf;
	                }

	                indexEntry = this.datasetIndex[dsName];

	                if (!(indexEntry === undefined)) {
	                  _context2.next = 13;
	                  break;
	                }

	                return _context2.abrupt("return", undefined);

	              case 13:
	                _context2.next = 15;
	                return igvxhr.loadArrayBuffer(this.path, buildOptions(this.config, {
	                  range: {
	                    start: indexEntry.position,
	                    size: indexEntry.size
	                  }
	                }));

	              case 15:
	                data = _context2.sent;

	                if (data) {
	                  _context2.next = 18;
	                  break;
	                }

	                return _context2.abrupt("return", undefined);

	              case 18:
	                binaryParser = new BinaryParser(new DataView(data));
	                nAttributes = binaryParser.getInt();
	                attributes = {};

	                while (nAttributes-- > 0) {
	                  attributes[binaryParser.getString()] = binaryParser.getString();
	                }

	                dataType = binaryParser.getString();
	                tileWidth = binaryParser.getFloat();
	                nTiles = binaryParser.getInt();
	                tiles = [];

	                while (nTiles-- > 0) {
	                  tiles.push({
	                    position: binaryParser.getLong(),
	                    size: binaryParser.getInt()
	                  });
	                }

	                dataset = {
	                  name: dsName,
	                  attributes: attributes,
	                  dataType: dataType,
	                  tileWidth: tileWidth,
	                  tiles: tiles
	                };
	                this.datasetCache[key] = dataset;
	                return _context2.abrupt("return", dataset);

	              case 30:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function readDataset(_x, _x2, _x3) {
	        return _readDataset.apply(this, arguments);
	      }

	      return readDataset;
	    }()
	  }, {
	    key: "readRootGroup",
	    value: function () {
	      var _readRootGroup = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	        var genome, rootGroup, group, names, maxZoomString, totalCountString, chrAliasTable;
	        return regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                genome = this.genome;
	                rootGroup = this.groupCache["/"];

	                if (!rootGroup) {
	                  _context3.next = 6;
	                  break;
	                }

	                return _context3.abrupt("return", rootGroup);

	              case 6:
	                _context3.next = 8;
	                return this.readGroup("/");

	              case 8:
	                group = _context3.sent;
	                names = group["chromosomes"];
	                maxZoomString = group["maxZoom"]; // Now parse out interesting attributes.

	                if (maxZoomString) {
	                  this.maxZoom = Number(maxZoomString);
	                }

	                totalCountString = group["totalCount"];

	                if (totalCountString) {
	                  group.totalCount = Number.parseFloat(totalCountString);
	                } // Chromosome names


	                chrAliasTable = {};

	                if (names) {
	                  names.split(",").forEach(function (chr) {
	                    var canonicalName = genome.getChromosomeName(chr);
	                    chrAliasTable[canonicalName] = chr;
	                  });
	                }

	                this.chrAliasTable = chrAliasTable;
	                this.groupCache["/"] = group;
	                return _context3.abrupt("return", group);

	              case 19:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function readRootGroup() {
	        return _readRootGroup.apply(this, arguments);
	      }

	      return readRootGroup;
	    }()
	  }, {
	    key: "readGroup",
	    value: function () {
	      var _readGroup = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(name) {
	        var group, indexEntry, data, binaryParser, _group, nAttributes, key, value;

	        return regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                group = this.groupCache[name];

	                if (!group) {
	                  _context4.next = 5;
	                  break;
	                }

	                return _context4.abrupt("return", group);

	              case 5:
	                _context4.next = 7;
	                return this.readHeader();

	              case 7:
	                indexEntry = this.groupIndex[name];

	                if (!(indexEntry === undefined)) {
	                  _context4.next = 10;
	                  break;
	                }

	                return _context4.abrupt("return", undefined);

	              case 10:
	                _context4.next = 12;
	                return igvxhr.loadArrayBuffer(this.path, buildOptions(this.config, {
	                  range: {
	                    start: indexEntry.position,
	                    size: indexEntry.size
	                  }
	                }));

	              case 12:
	                data = _context4.sent;

	                if (data) {
	                  _context4.next = 15;
	                  break;
	                }

	                return _context4.abrupt("return", undefined);

	              case 15:
	                binaryParser = new BinaryParser(new DataView(data));
	                _group = {
	                  name: name
	                };
	                nAttributes = binaryParser.getInt();

	                while (nAttributes-- > 0) {
	                  key = binaryParser.getString();
	                  value = binaryParser.getString();
	                  _group[key] = value;
	                }

	                this.groupCache[name] = _group;
	                return _context4.abrupt("return", _group);

	              case 21:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      function readGroup(_x4) {
	        return _readGroup.apply(this, arguments);
	      }

	      return readGroup;
	    }()
	  }, {
	    key: "readTiles",
	    value: function () {
	      var _readTiles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(tileIndeces, nTracks) {
	        var firstEntry, lastEntry, position, size, data, tiles, _iterator, _step, indexEntry, start, _size2, tileData, inflate, plain, binaryParser, type, tile;

	        return regeneratorRuntime.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                tileIndeces.sort(function (a, b) {
	                  return a.position - b.position;
	                });
	                tileIndeces = tileIndeces.filter(function (idx) {
	                  return idx.size > 0;
	                });

	                if (!(tileIndeces.length === 0)) {
	                  _context5.next = 4;
	                  break;
	                }

	                return _context5.abrupt("return", Promise.resolve([]));

	              case 4:
	                firstEntry = tileIndeces[0];
	                lastEntry = tileIndeces[tileIndeces.length - 1];
	                position = firstEntry.position;
	                size = lastEntry.position + lastEntry.size - position;
	                _context5.next = 10;
	                return igvxhr.loadArrayBuffer(this.path, buildOptions(this.config, {
	                  range: {
	                    start: position,
	                    size: size
	                  }
	                }));

	              case 10:
	                data = _context5.sent;
	                tiles = []; // Loop through and decode tiles

	                _iterator = _createForOfIteratorHelper(tileIndeces);
	                _context5.prev = 13;

	                _iterator.s();

	              case 15:
	                if ((_step = _iterator.n()).done) {
	                  _context5.next = 38;
	                  break;
	                }

	                indexEntry = _step.value;
	                start = indexEntry.position - position;
	                _size2 = indexEntry.size;

	                if (!(_size2 > 0)) {
	                  _context5.next = 36;
	                  break;
	                }

	                tileData = void 0;

	                if (this.compressed) {
	                  inflate = new Zlib$1.Inflate(new Uint8Array(data, start, _size2));
	                  plain = inflate.decompress();
	                  tileData = plain.buffer;
	                } else {
	                  tileData = data.slice(start, start + _size2);
	                }

	                binaryParser = new BinaryParser(new DataView(tileData));
	                type = binaryParser.getString();
	                tile = void 0;
	                _context5.t0 = type;
	                _context5.next = _context5.t0 === "fixedStep" ? 28 : _context5.t0 === "variableStep" ? 30 : _context5.t0 === "bed" ? 32 : _context5.t0 === "bedWithName" ? 32 : 34;
	                break;

	              case 28:
	                tile = createFixedStep(binaryParser, nTracks);
	                return _context5.abrupt("break", 35);

	              case 30:
	                tile = createVariableStep(binaryParser, nTracks);
	                return _context5.abrupt("break", 35);

	              case 32:
	                tile = createBed(binaryParser, nTracks, type);
	                return _context5.abrupt("break", 35);

	              case 34:
	                throw "Unknown tile type: " + type;

	              case 35:
	                tiles.push(tile);

	              case 36:
	                _context5.next = 15;
	                break;

	              case 38:
	                _context5.next = 43;
	                break;

	              case 40:
	                _context5.prev = 40;
	                _context5.t1 = _context5["catch"](13);

	                _iterator.e(_context5.t1);

	              case 43:
	                _context5.prev = 43;

	                _iterator.f();

	                return _context5.finish(43);

	              case 46:
	                return _context5.abrupt("return", tiles);

	              case 47:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this, [[13, 40, 43, 46]]);
	      }));

	      function readTiles(_x5, _x6) {
	        return _readTiles.apply(this, arguments);
	      }

	      return readTiles;
	    }()
	  }, {
	    key: "readTile",
	    value: function () {
	      var _readTile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(indexEntry, nTracks) {
	        var data, inflate, plain, binaryParser, type;
	        return regeneratorRuntime.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                _context6.next = 2;
	                return igvxhr.loadArrayBuffer(this.path, buildOptions(this.config, {
	                  range: {
	                    start: indexEntry.position,
	                    size: indexEntry.size
	                  }
	                }));

	              case 2:
	                data = _context6.sent;

	                if (this.compressed) {
	                  inflate = new Zlib$1.Inflate(new Uint8Array(data));
	                  plain = inflate.decompress();
	                  data = plain.buffer;
	                }

	                binaryParser = new BinaryParser(new DataView(data));
	                type = binaryParser.getString();
	                _context6.t0 = type;
	                _context6.next = _context6.t0 === "fixedStep" ? 9 : _context6.t0 === "variableStep" ? 10 : _context6.t0 === "bed" ? 11 : _context6.t0 === "bedWithName" ? 11 : 12;
	                break;

	              case 9:
	                return _context6.abrupt("return", createFixedStep(binaryParser, nTracks));

	              case 10:
	                return _context6.abrupt("return", createVariableStep(binaryParser, nTracks));

	              case 11:
	                return _context6.abrupt("return", createBed(binaryParser, nTracks, type));

	              case 12:
	                throw "Unknown tile type: " + type;

	              case 13:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this);
	      }));

	      function readTile(_x7, _x8) {
	        return _readTile.apply(this, arguments);
	      }

	      return readTile;
	    }()
	  }]);

	  return TDFReader;
	}();

	function createFixedStep(binaryParser, nTracks) {
	  var nPositions = binaryParser.getInt();
	  var start = binaryParser.getInt();
	  var span = binaryParser.getFloat();
	  var data = [];
	  var nt = nTracks;

	  while (nt-- > 0) {
	    var np = nPositions;
	    var dtrack = [];

	    while (np-- > 0) {
	      dtrack.push(binaryParser.getFloat());
	    }

	    data.push(dtrack);
	  }

	  return {
	    type: "fixedStep",
	    start: start,
	    span: span,
	    data: data,
	    nTracks: nTracks,
	    nPositions: nPositions
	  };
	}

	function createVariableStep(binaryParser, nTracks) {
	  var tileStart = binaryParser.getInt();
	  var span = binaryParser.getFloat();
	  var nPositions = binaryParser.getInt();
	  var start = [];
	  var np = nPositions;

	  while (np-- > 0) {
	    start.push(binaryParser.getInt());
	  }

	  var nS = binaryParser.getInt(); // # of samples, ignored but should === nTracks

	  var data = [];
	  var nt = nTracks;

	  while (nt-- > 0) {
	    np = nPositions;
	    var dtrack = [];

	    while (np-- > 0) {
	      dtrack.push(binaryParser.getFloat());
	    }

	    data.push(dtrack);
	  }

	  return {
	    type: "variableStep",
	    tileStart: tileStart,
	    span: span,
	    start: start,
	    data: data,
	    nTracks: nTracks,
	    nPositions: nPositions
	  };
	}

	function createBed(binaryParser, nTracks, type) {
	  var nPositions = binaryParser.getInt();
	  var n = nPositions;
	  var start = [];

	  while (n-- > 0) {
	    start.push(binaryParser.getInt());
	  }

	  n = nPositions;
	  var end = [];

	  while (n-- > 0) {
	    end.push(binaryParser.getInt());
	  }

	  var nS = binaryParser.getInt(); // # of samples, ignored but should === nTracks

	  var data = [];
	  var nt = nTracks;

	  while (nt-- > 0) {
	    var np = nPositions;
	    var dtrack = [];

	    while (np-- > 0) {
	      dtrack.push(binaryParser.getFloat());
	    }

	    data.push(dtrack);
	  }

	  if (type === "bedWithName") {
	    n = nPositions;
	    var name = [];

	    while (n-- > 0) {
	      name.push(binaryParser.getString());
	    }
	  }

	  return {
	    type: type,
	    start: start,
	    end: end,
	    data: data,
	    nTracks: nTracks,
	    nPositions: nPositions
	  };
	}

	var TDFSource = /*#__PURE__*/function () {
	  function TDFSource(config, genome) {
	    _classCallCheck(this, TDFSource);

	    this.genome = genome;
	    this.windowFunction = config.windowFunction || "mean";
	    this.reader = new TDFReader(config, genome);
	  }

	  _createClass(TDFSource, [{
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
	        var chr, start, end, bpPerPixel, genomicInterval, genome, totalCount, zoom, queryChr, maxZoom, wf, dataset, tileWidth, startTile, endTile, NTRACKS, tiles, features, _iterator, _step, tile;

	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                chr = _ref.chr, start = _ref.start, end = _ref.end, bpPerPixel = _ref.bpPerPixel;
	                genomicInterval = new GenomicInterval(chr, start, end);
	                genome = this.genome;

	                if (this.rootGroup) {
	                  _context.next = 8;
	                  break;
	                }

	                _context.next = 6;
	                return this.reader.readRootGroup();

	              case 6:
	                this.rootGroup = _context.sent;

	                if (!this.normalizationFactor) {
	                  totalCount = this.rootGroup.totalCount;

	                  if (totalCount) {
	                    this.normalizationFactor = 1.0e6 / totalCount;
	                  }
	                }

	              case 8:
	                if (!(chr.toLowerCase() === "all")) {
	                  _context.next = 10;
	                  break;
	                }

	                return _context.abrupt("return", []);

	              case 10:
	                genomicInterval.bpPerPixel = bpPerPixel;
	                zoom = zoomLevelForScale$1(chr, bpPerPixel, genome);
	                queryChr = this.reader.chrAliasTable[chr];
	                maxZoom = this.reader.maxZoom;
	                if (queryChr === undefined) queryChr = chr;
	                if (maxZoom === undefined) maxZoom = -1;
	                wf = zoom > maxZoom ? "raw" : this.windowFunction;
	                _context.next = 19;
	                return this.reader.readDataset(queryChr, wf, zoom);

	              case 19:
	                dataset = _context.sent;

	                if (!(dataset == null)) {
	                  _context.next = 22;
	                  break;
	                }

	                return _context.abrupt("return", []);

	              case 22:
	                tileWidth = dataset.tileWidth;
	                startTile = Math.floor(start / tileWidth);
	                endTile = Math.floor(end / tileWidth);
	                NTRACKS = 1; // TODO read this

	                _context.next = 28;
	                return this.reader.readTiles(dataset.tiles.slice(startTile, endTile + 1), NTRACKS);

	              case 28:
	                tiles = _context.sent;
	                features = [];
	                _iterator = _createForOfIteratorHelper(tiles);
	                _context.prev = 31;

	                _iterator.s();

	              case 33:
	                if ((_step = _iterator.n()).done) {
	                  _context.next = 47;
	                  break;
	                }

	                tile = _step.value;
	                _context.t0 = tile.type;
	                _context.next = _context.t0 === "bed" ? 38 : _context.t0 === "variableStep" ? 40 : _context.t0 === "fixedStep" ? 42 : 44;
	                break;

	              case 38:
	                decodeBedTile(tile, chr, start, end, bpPerPixel, features);
	                return _context.abrupt("break", 45);

	              case 40:
	                decodeVaryTile(tile, chr, start, end, bpPerPixel, features);
	                return _context.abrupt("break", 45);

	              case 42:
	                decodeFixedTile(tile, chr, start, end, bpPerPixel, features);
	                return _context.abrupt("break", 45);

	              case 44:
	                throw "Unknown tile type: " + tile.type;

	              case 45:
	                _context.next = 33;
	                break;

	              case 47:
	                _context.next = 52;
	                break;

	              case 49:
	                _context.prev = 49;
	                _context.t1 = _context["catch"](31);

	                _iterator.e(_context.t1);

	              case 52:
	                _context.prev = 52;

	                _iterator.f();

	                return _context.finish(52);

	              case 55:
	                features.sort(function (a, b) {
	                  return a.start - b.start;
	                });
	                return _context.abrupt("return", features);

	              case 57:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this, [[31, 49, 52, 55]]);
	      }));

	      function getFeatures(_x) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "supportsWholeGenome",
	    value: function supportsWholeGenome() {
	      return false;
	    }
	  }]);

	  return TDFSource;
	}();

	function decodeBedTile(tile, chr, bpStart, bpEnd, bpPerPixel, features) {
	  var nPositions = tile.nPositions;
	  var starts = tile.start;
	  var ends = tile.end;
	  var data = tile.data[0]; // Single track for now

	  for (var i = 0; i < nPositions; i++) {
	    var s = starts[i];
	    var e = ends[i];
	    if (e < bpStart) continue;
	    if (s > bpEnd) break;
	    features.push({
	      chr: chr,
	      start: s,
	      end: e,
	      value: data[i]
	    });
	  }
	}

	function decodeVaryTile(tile, chr, bpStart, bpEnd, bpPerPixel, features) {
	  var nPositions = tile.nPositions;
	  var starts = tile.start;
	  var span = tile.span;
	  var data = tile.data[0]; // Single track for now

	  for (var i = 0; i < nPositions; i++) {
	    var s = starts[i];
	    var e = s + span;
	    if (e < bpStart) continue;
	    if (s > bpEnd) break;
	    features.push({
	      chr: chr,
	      start: s,
	      end: e,
	      value: data[i]
	    });
	  }
	}

	function decodeFixedTile(tile, chr, bpStart, bpEnd, bpPerPixel, features) {
	  var nPositions = tile.nPositions;
	  var s = tile.start;
	  var span = tile.span;
	  var data = tile.data[0]; // Single track for now

	  for (var i = 0; i < nPositions; i++) {
	    var e = s + span;
	    if (s > bpEnd) break;

	    if (e >= bpStart) {
	      if (!Number.isNaN(data[i])) {
	        features.push({
	          chr: chr,
	          start: s,
	          end: e,
	          value: data[i]
	        });
	      }
	    }

	    s = e;
	  }
	}

	var log2 = Math.log(2);

	function zoomLevelForScale$1(chr, bpPerPixel, genome) {
	  // Convert bpPerPixel to IGV "zoom" level.   This is a bit convoluted,  IGV computes zoom levels assuming
	  // display in a 700 pixel window.  The fully zoomed out view of a chromosome is zoom level "0".
	  // Zoom level 1 is magnified 2X,  and so forth
	  var chrSize = genome.getChromosome(chr).bpLength;
	  return Math.ceil(Math.log(Math.max(0, chrSize / (bpPerPixel * 700))) / log2);
	}

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2014-2015 Broad Institute
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	function FeatureSource(config, genome) {
	  var format = config.format ? config.format.toLowerCase() : undefined;

	  if ('bigwig' === format || 'bigbed' === format || 'bb' === format) {
	    return new BWSource(config, genome);
	  } else if ("tdf" === format) {
	    return new TDFSource(config, genome);
	  } else {
	    return new TextFeatureSource(config, genome);
	  }
	}

	var colorPalettes = {
	  Set1: ["rgb(228,26,28)", "rgb(55,126,184)", "rgb(77,175,74)", "rgb(166,86,40)", "rgb(152,78,163)", "rgb(255,127,0)", "rgb(247,129,191)", "rgb(153,153,153)", "rgb(255,255,51)"],
	  Dark2: ["rgb(27,158,119)", "rgb(217,95,2)", "rgb(117,112,179)", "rgb(231,41,138)", "rgb(102,166,30)", "rgb(230,171,2)", "rgb(166,118,29)", "rgb(102,102,102)"],
	  Set2: ["rgb(102, 194,165)", "rgb(252,141,98)", "rgb(141,160,203)", "rgb(231,138,195)", "rgb(166,216,84)", "rgb(255,217,47)", "rgb(229,196,148)", "rgb(179,179,179)"],
	  Set3: ["rgb(141,211,199)", "rgb(255,255,179)", "rgb(190,186,218)", "rgb(251,128,114)", "rgb(128,177,211)", "rgb(253,180,98)", "rgb(179,222,105)", "rgb(252,205,229)", "rgb(217,217,217)", "rgb(188,128,189)", "rgb(204,235,197)", "rgb(255,237,111)"],
	  Pastel1: ["rgb(251,180,174)", "rgb(179,205,227)", "rgb(204,235,197)", "rgb(222,203,228)", "rgb(254,217,166)", "rgb(255,255,204)", "rgb(229,216,189)", "rgb(253,218,236)"],
	  Pastel2: ["rgb(173,226,207)", "rgb(253,205,172)", "rgb(203,213,232)", "rgb(244,202,228)", "rgb(230,245,201)", "rgb(255,242,174)", "rgb(243,225,206)"],
	  Accent: ["rgb(127,201,127)", "rgb(190,174,212)", "rgb(253,192,134)", "rgb(255,255,153)", "rgb(56,108,176)", "rgb(240,2,127)", "rgb(191,91,23)"]
	};

	function PaletteColorTable(palette) {
	  this.colors = colorPalettes[palette];
	  if (!Array.isArray(this.colors)) this.colors = [];
	  this.colorTable = {};
	  this.nextIdx = 0;
	  this.colorGenerator = new RandomColorGenerator();
	}

	PaletteColorTable.prototype.getColor = function (key) {
	  if (!this.colorTable.hasOwnProperty(key)) {
	    if (this.nextIdx < this.colors.length) {
	      this.colorTable[key] = this.colors[this.nextIdx];
	    } else {
	      this.colorTable[key] = this.colorGenerator.get();
	    }

	    this.nextIdx++;
	  }

	  return this.colorTable[key];
	}; // Random color generator from https://github.com/sterlingwes/RandomColor/blob/master/rcolor.js
	// Free to use & distribute under the MIT license
	// Wes Johnson (@SterlingWes)
	//
	// inspired by http://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/


	function RandomColorGenerator() {
	  this.hue = Math.random();
	  this.goldenRatio = 0.618033988749895;
	  this.hexwidth = 2;
	}

	RandomColorGenerator.prototype.hsvToRgb = function (h, s, v) {
	  var h_i = Math.floor(h * 6),
	      f = h * 6 - h_i,
	      p = v * (1 - s),
	      q = v * (1 - f * s),
	      t = v * (1 - (1 - f) * s),
	      r = 255,
	      g = 255,
	      b = 255;

	  switch (h_i) {
	    case 0:
	      r = v, g = t, b = p;
	      break;

	    case 1:
	      r = q, g = v, b = p;
	      break;

	    case 2:
	      r = p, g = v, b = t;
	      break;

	    case 3:
	      r = p, g = q, b = v;
	      break;

	    case 4:
	      r = t, g = p, b = v;
	      break;

	    case 5:
	      r = v, g = p, b = q;
	      break;
	  }

	  return [Math.floor(r * 256), Math.floor(g * 256), Math.floor(b * 256)];
	};

	RandomColorGenerator.prototype.padHex = function (str) {
	  if (str.length > this.hexwidth) return str;
	  return new Array(this.hexwidth - str.length + 1).join('0') + str;
	};

	RandomColorGenerator.prototype.get = function (saturation, value) {
	  this.hue += this.goldenRatio;
	  this.hue %= 1;
	  if (typeof saturation !== "number") saturation = 0.5;
	  if (typeof value !== "number") value = 0.95;
	  var rgb = this.hsvToRgb(this.hue, saturation, value);
	  return "#" + this.padHex(rgb[0].toString(16)) + this.padHex(rgb[1].toString(16)) + this.padHex(rgb[2].toString(16));
	};

	var randomColorGenerator = new RandomColorGenerator();

	function randomColor() {
	  return randomColorGenerator.get();
	} // Returns a random number between min (inclusive) and max (exclusive)

	var GtexUtils = {
	  getTissueInfo: function getTissueInfo(datasetId, baseURL) {
	    datasetId = datasetId || 'gtex_v8';
	    baseURL = baseURL || 'https://gtexportal.org/rest/v1';
	    var url = baseURL + '/dataset/tissueInfo?datasetId=' + datasetId;
	    return igvxhr.loadJson(url, {});
	  },
	  //https://gtexportal.org/rest/v1/association/singleTissueEqtlByLocation?chromosome=7&start=98358766&end=101523798&tissueName=Liver&datasetId=gtex_v7
	  //https://gtexportal.org/rest/v1/association/singleTissueEqtlByLocation?chromosome=7&start=98358766&end=101523798&tissueSiteDetailId=Liver&datasetId=gtex_v8
	  trackConfiguration: function trackConfiguration(tissueSummary, baseURL) {
	    baseURL = baseURL || 'https://gtexportal.org/rest/v1';
	    return {
	      type: "eqtl",
	      sourceType: "gtex-ws",
	      url: baseURL + '/association/singleTissueEqtlByLocation',
	      tissueSiteDetailId: tissueSummary.tissueSiteDetailId,
	      name: tissueSummary.tissueSiteDetailId.split('_').join(' '),
	      visibilityWindow: 250000
	    };
	  }
	};

	var JUNCTION_MOTIF_PALETTE = new PaletteColorTable("Dark2"); // Lock in color-to-motif mapping so it's independent of data loading order. This list may not include all possible
	// motif values as this varies depending on the RNA-seq pipeline. The current list is based on STAR v2.4 docs.

	var someMotifValues = ['GT/AG', 'CT/AC', 'GC/AG', 'CT/GC', 'AT/AC', 'GT/AT', 'non-canonical'];
	someMotifValues.forEach(function (motif) {
	  JUNCTION_MOTIF_PALETTE.getColor(motif);
	});

	var FeatureTrack = /*#__PURE__*/function (_TrackBase) {
	  _inherits(FeatureTrack, _TrackBase);

	  var _super = _createSuper(FeatureTrack);

	  function FeatureTrack(config, browser) {
	    var _this;

	    _classCallCheck(this, FeatureTrack);

	    _this = _super.call(this, config, browser); // Set maxRows -- protects against pathological feature packing cases (# of rows of overlapping feaures)

	    _this.maxRows = config.maxRows === undefined ? 1000 : config.maxRows;
	    _this.displayMode = config.displayMode || "EXPANDED"; // COLLAPSED | EXPANDED | SQUISHED

	    _this.labelDisplayMode = config.labelDisplayMode;

	    if (config._featureSource) {
	      _this.featureSource = config._featureSource;
	      delete config._featureSource;
	    } else {
	      _this.featureSource = config.featureSource ? config.featureSource : FeatureSource(config, browser.genome);
	    } // Set default heights


	    _this.autoHeight = config.autoHeight;
	    _this.margin = config.margin === undefined ? 10 : config.margin;
	    _this.featureHeight = config.featureHeight || 14;

	    if ("FusionJuncSpan" === config.type) {
	      _this.squishedRowHeight = config.squishedRowHeight || 50;
	      _this.expandedRowHeight = config.expandedRowHeight || 50;
	      _this.height = config.height || _this.margin + 2 * _this.expandedRowHeight;
	    } else if ('snp' === config.type) {
	      _this.expandedRowHeight = config.expandedRowHeight || 10;
	      _this.squishedRowHeight = config.squishedRowHeight || 5;
	      _this.height = config.height || 30;
	    } else {
	      _this.squishedRowHeight = config.squishedRowHeight || 15;
	      _this.expandedRowHeight = config.expandedRowHeight || 30;
	      _this.height = config.height || _this.margin + 2 * _this.expandedRowHeight;
	    }

	    if (_this.height === undefined || !_this.height) {
	      _this.height = 100;
	    } //set defaults


	    if ('spliceJunctions' === config.type && config.colorByNumReadsThreshold === undefined) {
	      config.colorByNumReadsThreshold = 5;
	    } // Set the render function.  This can optionally be passed in the config


	    if (config.render) {
	      _this.render = config.render;
	    } else if ("FusionJuncSpan" === config.type) {
	      _this.render = renderFusionJuncSpan;
	    } else if ('spliceJunctions' === config.type) {
	      _this.render = renderJunctions;
	    } else if ('snp' === config.type) {
	      _this.render = renderSnp; // colors ordered based on priority least to greatest

	      _this.snpColors = ['rgb(0,0,0)', 'rgb(0,0,255)', 'rgb(0,255,0)', 'rgb(255,0,0)'];
	      _this.colorBy = 'function';
	    } else {
	      _this.render = renderFeature;
	      _this.arrowSpacing = 30; // adjust label positions to make sure they're always visible

	      monitorTrackDrag(_assertThisInitialized(_this));
	    } //UCSC useScore option


	    _this.useScore = config.useScore;
	    return _this;
	  }

	  _createClass(FeatureTrack, [{
	    key: "postInit",
	    value: function () {
	      var _postInit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (!(typeof this.featureSource.getHeader === "function")) {
	                  _context.next = 4;
	                  break;
	                }

	                _context.next = 3;
	                return this.featureSource.getHeader();

	              case 3:
	                this.header = _context.sent;

	              case 4:
	                // Set properties from track line
	                if (this.header) {
	                  this.setTrackProperties(this.header);
	                }

	                if (!(this.visibilityWindow === undefined && typeof this.featureSource.defaultVisibilityWindow === 'function')) {
	                  _context.next = 10;
	                  break;
	                }

	                _context.next = 8;
	                return this.featureSource.defaultVisibilityWindow();

	              case 8:
	                this.visibilityWindow = _context.sent;
	                this.featureSource.visibilityWindow = this.visibilityWindow; // <- this looks odd

	              case 10:
	                return _context.abrupt("return", this);

	              case 11:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function postInit() {
	        return _postInit.apply(this, arguments);
	      }

	      return postInit;
	    }()
	  }, {
	    key: "supportsWholeGenome",
	    value: function supportsWholeGenome() {
	      return (this.config.indexed === false || !this.config.indexURL) && this.config.supportsWholeGenome !== false;
	    }
	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(chr, start, end, bpPerPixel) {
	        var visibilityWindow;
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                visibilityWindow = this.visibilityWindow;
	                return _context2.abrupt("return", this.featureSource.getFeatures({
	                  chr: chr,
	                  start: start,
	                  end: end,
	                  bpPerPixel: bpPerPixel,
	                  visibilityWindow: visibilityWindow
	                }));

	              case 2:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function getFeatures(_x, _x2, _x3, _x4) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "computePixelHeight",

	    /**
	     * The required height in pixels required for the track content.   This is not the visible track height, which
	     * can be smaller (with a scrollbar) or larger.
	     *
	     * @param features
	     * @returns {*}
	     */
	    value: function computePixelHeight(features) {
	      if (this.type === 'spliceJunctions') {
	        return this.height;
	      } else if (this.displayMode === "COLLAPSED") {
	        return this.margin + this.expandedRowHeight;
	      } else {
	        var maxRow = 0;

	        if (features && typeof features.forEach === "function") {
	          var _iterator = _createForOfIteratorHelper(features),
	              _step;

	          try {
	            for (_iterator.s(); !(_step = _iterator.n()).done;) {
	              var feature = _step.value;

	              if (feature.row && feature.row > maxRow) {
	                maxRow = feature.row;
	              }
	            }
	          } catch (err) {
	            _iterator.e(err);
	          } finally {
	            _iterator.f();
	          }
	        }

	        var height = this.margin + (maxRow + 1) * ("SQUISHED" === this.displayMode ? this.squishedRowHeight : this.expandedRowHeight);
	        return height;
	      }
	    }
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      var featureList = options.features;
	      var ctx = options.context;
	      var bpPerPixel = options.bpPerPixel;
	      var bpStart = options.bpStart;
	      var pixelWidth = options.pixelWidth;
	      var pixelHeight = options.pixelHeight;
	      var bpEnd = bpStart + pixelWidth * bpPerPixel + 1;

	      if (!this.config.isMergedTrack) {
	        IGVGraphics.fillRect(ctx, 0, options.pixelTop, pixelWidth, pixelHeight, {
	          'fillStyle': "rgb(255, 255, 255)"
	        });
	      }

	      if (featureList) {
	        var rowFeatureCount = [];
	        options.rowLastX = [];

	        var _iterator2 = _createForOfIteratorHelper(featureList),
	            _step2;

	        try {
	          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	            var feature = _step2.value;
	            var row = feature.row || 0;

	            if (rowFeatureCount[row] === undefined) {
	              rowFeatureCount[row] = 1;
	            } else {
	              rowFeatureCount[row]++;
	            }

	            options.rowLastX[row] = -Number.MAX_SAFE_INTEGER;
	          }
	        } catch (err) {
	          _iterator2.e(err);
	        } finally {
	          _iterator2.f();
	        }

	        var lastPxEnd = [];

	        var _iterator3 = _createForOfIteratorHelper(featureList),
	            _step3;

	        try {
	          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	            var _feature = _step3.value;
	            if (_feature.end < bpStart) continue;
	            if (_feature.start > bpEnd) break;

	            var _row = this.displayMode === 'COLLAPSED' ? 0 : _feature.row;

	            var featureDensity = pixelWidth / rowFeatureCount[_row];
	            options.drawLabel = options.labelAllFeatures || featureDensity > 10;
	            var pxEnd = Math.ceil((_feature.end - bpStart) / bpPerPixel);
	            var last = lastPxEnd[_row];

	            if (!last || pxEnd > last || this.config.type === 'spliceJunctions') {
	              this.render.call(this, _feature, bpStart, bpPerPixel, pixelHeight, ctx, options);

	              if (this.config.type !== 'spliceJunctions') {
	                // Ensure a visible gap between features
	                var pxStart = Math.floor((_feature.start - bpStart) / bpPerPixel);

	                if (last && pxStart - last <= 0) {
	                  ctx.globalAlpha = 0.5;
	                  IGVGraphics.strokeLine(ctx, pxStart, 0, pxStart, pixelHeight, {
	                    'strokeStyle': "rgb(255, 255, 255)"
	                  });
	                  ctx.globalAlpha = 1.0;
	                }

	                lastPxEnd[_row] = pxEnd;
	              }
	            }
	          }
	        } catch (err) {
	          _iterator3.e(err);
	        } finally {
	          _iterator3.f();
	        }
	      }
	    }
	  }, {
	    key: "clickedFeatures",
	    value: function clickedFeatures(clickState) {
	      var y = clickState.y - this.margin;

	      var allFeatures = _get(_getPrototypeOf(FeatureTrack.prototype), "clickedFeatures", this).call(this, clickState);

	      var row;

	      switch (this.displayMode) {
	        case 'SQUISHED':
	          row = Math.floor(y / this.squishedRowHeight);
	          break;

	        case 'EXPANDED':
	          row = Math.floor(y / this.expandedRowHeight);
	          break;

	        default:
	          row = undefined;
	      }

	      return allFeatures.filter(function (feature) {
	        return row === undefined || feature.row === undefined || row === feature.row;
	      });
	    }
	    /**
	     * Return "popup data" for feature @ genomic location.  Data is an array of key-value pairs
	     */

	  }, {
	    key: "popupData",
	    value: function popupData(clickState, features) {
	      if (!features) features = this.clickedFeatures(clickState);
	      var genomicLocation = clickState.genomicLocation;
	      var data = [];

	      var _iterator4 = _createForOfIteratorHelper(features),
	          _step4;

	      try {
	        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	          var feature = _step4.value;
	          var featureData = typeof feature.popupData === "function" ? feature.popupData(genomicLocation) : TrackBase.extractPopupData(feature, this.getGenomeId());

	          if (featureData) {
	            if (data.length > 0) {
	              data.push("<HR>");
	            }

	            Array.prototype.push.apply(data, featureData);
	          }
	        }
	      } catch (err) {
	        _iterator4.e(err);
	      } finally {
	        _iterator4.f();
	      }

	      return data;
	    }
	  }, {
	    key: "menuItemList",
	    value: function menuItemList() {
	      var self = this;
	      var menuItems = [];

	      if (this.render === renderSnp) {
	        ["function", "class"].forEach(function (colorScheme) {
	          menuItems.push({
	            object: createCheckbox$1('Color by ' + colorScheme, colorScheme === self.colorBy),
	            click: function click() {
	              self.colorBy = colorScheme;
	              self.trackView.repaintViews();
	            }
	          });
	        });
	        menuItems.push({
	          object: $('<div class="igv-track-menu-border-top">')
	        });
	      }

	      menuItems.push({
	        object: $('<div class="igv-track-menu-border-top">')
	      });
	      ["COLLAPSED", "SQUISHED", "EXPANDED"].forEach(function (displayMode) {
	        var lut = {
	          "COLLAPSED": "Collapse",
	          "SQUISHED": "Squish",
	          "EXPANDED": "Expand"
	        };
	        menuItems.push({
	          object: createCheckbox$1(lut[displayMode], displayMode === self.displayMode),
	          click: function click() {
	            self.displayMode = displayMode;
	            self.config.displayMode = displayMode;
	            self.trackView.checkContentHeight();
	            self.trackView.repaintViews();
	          }
	        });
	      });
	      return menuItems;
	    }
	  }, {
	    key: "description",
	    value: function description() {
	      // if('snp' === this.type) {
	      if (renderSnp === this.render) {
	        var desc = "<html>" + this.name + "<hr>";
	        desc += '<em>Color By Function:</em><br>';
	        desc += '<span style="color:red">Red</span>: Coding-Non-Synonymous, Splice Site<br>';
	        desc += '<span style="color:green">Green</span>: Coding-Synonymous<br>';
	        desc += '<span style="color:blue">Blue</span>: Untranslated<br>';
	        desc += '<span style="color:black">Black</span>: Intron, Locus, Unknown<br><br>';
	        desc += '<em>Color By Class:</em><br>';
	        desc += '<span style="color:red">Red</span>: Deletion<br>';
	        desc += '<span style="color:green">Green</span>: MNP<br>';
	        desc += '<span style="color:blue">Blue</span>: Microsatellite, Named<br>';
	        desc += '<span style="color:black">Black</span>: Indel, Insertion, SNP';
	        desc += "</html>";
	        return desc;
	      } else {
	        return this.name;
	      }
	    }
	  }, {
	    key: "dispose",

	    /**
	     * Called when the track is removed.  Do any needed cleanup here
	     */
	    value: function dispose() {
	      this.trackView = undefined;
	    }
	  }]);

	  return FeatureTrack;
	}(TrackBase);
	/**
	 * Monitors track drag events, updates label position to ensure that they're always visible.
	 * @param track
	 */


	function monitorTrackDrag(track) {
	  if (track.browser.on) {
	    track.browser.on('trackdragend', onDragEnd);
	    track.browser.on('trackremoved', unSubscribe);
	  }

	  function onDragEnd() {
	    if (!track.trackView || !track.trackView.tile || track.displayMode === "SQUISHED") {
	      return;
	    }

	    track.trackView.repaintViews();
	  }

	  function unSubscribe(removedTrack) {
	    if (track.browser.un && track === removedTrack) {
	      track.browser.un('trackdrag', onDragEnd);
	      track.browser.un('trackremoved', unSubscribe);
	    }
	  }
	}
	/**
	 * @param feature
	 * @param bpStart  genomic location of the left edge of the current canvas
	 * @param xScale  scale in base-pairs per pixel
	 * @returns {{px: number, px1: number, pw: number, h: number, py: number}}
	 */


	function calculateFeatureCoordinates(feature, bpStart, xScale) {
	  var px = (feature.start - bpStart) / xScale;
	  var px1 = (feature.end - bpStart) / xScale; //px = Math.round((feature.start - bpStart) / xScale),
	  //px1 = Math.round((feature.end - bpStart) / xScale),

	  var pw = px1 - px;

	  if (pw < 3) {
	    pw = 3;
	    px -= 1.5;
	  }

	  return {
	    px: px,
	    px1: px1,
	    pw: pw
	  };
	}
	/**
	 * Return color for feature.  Called in the context of a FeatureTrack instance.
	 * @param feature
	 * @returns {string}
	 */


	function getColorForFeature(feature) {
	  var color;

	  if (this.altColor && "-" === feature.strand) {
	    color = this.altColor;
	  } else if (this.color) {
	    color = this.color; // Explicit setting via menu, or possibly track line if !config.color
	  } else if (this.config.colorBy) {
	    var colorByValue = feature[this.config.colorBy.field];

	    if (colorByValue) {
	      color = this.config.colorBy.pallete[colorByValue]; // This is an undocumented option, and its not clear if its used
	    }
	  } else if (feature.color) {
	    color = feature.color; // Explicit color for feature
	  } else {
	    color = this.defaultColor; // Track default
	  }

	  if (feature.alpha && feature.alpha !== 1) {
	    color = IGVColor.addAlpha(color, feature.alpha);
	  } else if (this.useScore && feature.score && !Number.isNaN(feature.score)) {
	    // UCSC useScore option, for scores between 0-1000.  See https://genome.ucsc.edu/goldenPath/help/customTrack.html#TRACK
	    var min = this.config.min ? this.config.min : 0; //getViewLimitMin(track);

	    var max = this.config.max ? this.config.max : 1000; //getViewLimitMax(track);

	    var alpha = getAlpha(min, max, feature.score);
	    feature.alpha = alpha; // Avoid computing again

	    color = IGVColor.addAlpha(color, alpha);
	  }

	  function getAlpha(min, max, score) {
	    var binWidth = (max - min) / 9;
	    var binNumber = Math.floor((score - min) / binWidth);
	    return Math.min(1.0, 0.2 + binNumber * 0.8 / 9);
	  }

	  return color;
	}
	/**
	 *
	 * @param feature
	 * @param bpStart  genomic location of the left edge of the current canvas
	 * @param xScale  scale in base-pairs per pixel
	 * @param pixelHeight  pixel height of the current canvas
	 * @param ctx  the canvas 2d context
	 * @param options  genomic state
	 */


	function renderFeature(feature, bpStart, xScale, pixelHeight, ctx, options) {
	  var browser = this.browser;
	  var color = getColorForFeature.call(this, feature);
	  ctx.fillStyle = color;
	  ctx.strokeStyle = color;
	  var h;
	  var py;

	  if (this.displayMode === "SQUISHED" && feature.row !== undefined) {
	    h = this.featureHeight / 2;
	    py = this.margin + this.squishedRowHeight * feature.row;
	  } else if (this.displayMode === "EXPANDED" && feature.row !== undefined) {
	    h = this.featureHeight;
	    py = this.margin + this.expandedRowHeight * feature.row;
	  } else {
	    // collapsed
	    h = this.featureHeight;
	    py = this.margin;
	  }

	  var cy = py + h / 2;
	  var h2 = h / 2;
	  var py2 = cy - h2 / 2;
	  var exonCount = feature.exons ? feature.exons.length : 0;
	  var coord = calculateFeatureCoordinates(feature, bpStart, xScale);
	  var step = this.arrowSpacing;
	  var direction = feature.strand === '+' ? 1 : feature.strand === '-' ? -1 : 0;

	  if (exonCount === 0) {
	    // single-exon transcript
	    ctx.fillRect(coord.px, py, coord.pw, h); // Arrows
	    // Do not draw if strand is not +/-

	    if (direction !== 0) {
	      ctx.fillStyle = "white";
	      ctx.strokeStyle = "white";

	      for (var x = coord.px + step / 2; x < coord.px1; x += step) {
	        // draw arrowheads along central line indicating transcribed orientation
	        IGVGraphics.strokeLine(ctx, x - direction * 2, cy - 2, x, cy);
	        IGVGraphics.strokeLine(ctx, x - direction * 2, cy + 2, x, cy);
	      }

	      ctx.fillStyle = color;
	      ctx.strokeStyle = color;
	    }
	  } else {
	    // multi-exon transcript
	    IGVGraphics.strokeLine(ctx, coord.px + 1, cy, coord.px1 - 1, cy); // center line for introns

	    var pixelWidth = options.pixelWidth;
	    var xLeft = Math.max(0, coord.px) + step / 2;
	    var xRight = Math.min(pixelWidth, coord.px1);

	    for (var _x5 = xLeft; _x5 < xRight; _x5 += step) {
	      // draw arrowheads along central line indicating transcribed orientation
	      IGVGraphics.strokeLine(ctx, _x5 - direction * 2, cy - 2, _x5, cy);
	      IGVGraphics.strokeLine(ctx, _x5 - direction * 2, cy + 2, _x5, cy);
	    }

	    for (var e = 0; e < exonCount; e++) {
	      // draw the exons
	      var exon = feature.exons[e];
	      var ePx = Math.round((exon.start - bpStart) / xScale);
	      var ePx1 = Math.round((exon.end - bpStart) / xScale);
	      var ePw = Math.max(1, ePx1 - ePx);
	      var ePxU = void 0;

	      if (ePx + ePw < 0) {
	        continue; // Off the left edge
	      }

	      if (ePx > pixelWidth) {
	        break; // Off the right edge
	      }

	      if (exon.utr) {
	        ctx.fillRect(ePx, py2, ePw, h2); // Entire exon is UTR
	      } else {
	        if (exon.cdStart) {
	          ePxU = Math.round((exon.cdStart - bpStart) / xScale);
	          ctx.fillRect(ePx, py2, ePxU - ePx, h2); // start is UTR

	          ePw -= ePxU - ePx;
	          ePx = ePxU;
	        }

	        if (exon.cdEnd) {
	          ePxU = Math.round((exon.cdEnd - bpStart) / xScale);
	          ctx.fillRect(ePxU, py2, ePx1 - ePxU, h2); // start is UTR

	          ePw -= ePx1 - ePxU;
	          ePx1 = ePxU;
	        }

	        ctx.fillRect(ePx, py, ePw, h); // Arrows

	        if (ePw > step + 5 && direction !== 0) {
	          ctx.fillStyle = "white";
	          ctx.strokeStyle = "white";

	          for (var _x6 = ePx + step / 2; _x6 < ePx1; _x6 += step) {
	            // draw arrowheads along central line indicating transcribed orientation
	            IGVGraphics.strokeLine(ctx, _x6 - direction * 2, cy - 2, _x6, cy);
	            IGVGraphics.strokeLine(ctx, _x6 - direction * 2, cy + 2, _x6, cy);
	          }

	          ctx.fillStyle = color;
	          ctx.strokeStyle = color;
	        }
	      }
	    }
	  }

	  var windowX = Math.round(options.viewportContainerX); // const nLoci = browser.referenceFrameList ? browser.referenceFrameList.length : 1
	  // const windowX1 = windowX + options.viewportContainerWidth / nLoci;

	  var windowX1 = windowX + options.viewportWidth;

	  if (options.drawLabel) {
	    renderFeatureLabel.call(this, ctx, feature, coord.px, coord.px1, py, windowX, windowX1, options.referenceFrame, options);
	  }
	}
	/**
	 * @param ctx       the canvas 2d context
	 * @param feature
	 * @param featureX  feature start x-coordinate
	 * @param featureX1 feature end x-coordinate
	 * @param featureY  feature y-coordinate
	 * @param windowX   visible window start x-coordinate
	 * @param windowX1  visible window end x-coordinate
	 * @param referenceFrame  genomic state
	 * @param options  options
	 */


	function renderFeatureLabel(ctx, feature, featureX, featureX1, featureY, windowX, windowX1, referenceFrame, options) {
	  var name = feature.name;
	  if (name === undefined && feature.gene) name = feature.gene.name;
	  if (name === undefined) name = feature.id || feature.ID;
	  if (!name || name === '.') return; // feature outside of viewable window

	  var boxX;
	  var boxX1;

	  if (featureX1 < windowX || featureX > windowX1) {
	    boxX = featureX;
	    boxX1 = featureX1;
	  } else {
	    // center label within visible portion of the feature
	    boxX = Math.max(featureX, windowX);
	    boxX1 = Math.min(featureX1, windowX1);
	  }

	  var color = getColorForFeature.call(this, feature);
	  var geneColor;
	  var gtexSelection = false;

	  if (referenceFrame.selection && GtexUtils.gtexLoaded) {
	    // TODO -- for gtex, figure out a better way to do this
	    gtexSelection = true;
	    geneColor = referenceFrame.selection.colorForGene(name);
	  }

	  if (this.displayMode !== "SQUISHED") {
	    var geneFontStyle = {
	      textAlign: "SLANT" === this.labelDisplayMode ? undefined : 'center',
	      fillStyle: geneColor || color,
	      strokeStyle: geneColor || color
	    };
	    var transform;

	    if (this.displayMode === "COLLAPSED" && this.labelDisplayMode === "SLANT") {
	      transform = {
	        rotate: {
	          angle: 45
	        }
	      };
	    }

	    var labelX = boxX + (boxX1 - boxX) / 2;
	    var labelY = getFeatureLabelY(featureY, transform);
	    var textBox = ctx.measureText(name);
	    var xleft = labelX - textBox.width / 2;
	    var xright = labelX + textBox.width / 2;

	    if (options.labelAllFeatures || xleft > options.rowLastX[feature.row] || gtexSelection) {
	      options.rowLastX[feature.row] = xright; // This is for compatibility with JuiceboxJS.

	      if (options.labelTransform) {
	        ctx.save();
	        options.labelTransform(ctx, labelX);
	        IGVGraphics.fillText(ctx, name, labelX, labelY, geneFontStyle, undefined);
	        ctx.restore();
	      } else {
	        IGVGraphics.fillText(ctx, name, labelX, labelY, geneFontStyle, transform);
	      }
	    }
	  }
	}

	function getFeatureLabelY(featureY, transform) {
	  return transform ? featureY + 20 : featureY + 25;
	}
	/**
	 *
	 * @param feature
	 * @param bpStart  genomic location of the left edge of the current canvas
	 * @param xScale  scale in base-pairs per pixel
	 * @param pixelHeight  pixel height of the current canvas
	 * @param ctx  the canvas 2d context
	 */


	function renderFusionJuncSpan(feature, bpStart, xScale, pixelHeight, ctx) {
	  var py;
	  var rowHeight = this.displayMode === "EXPANDED" ? this.expandedRowHeight : this.squishedRowHeight;

	  if (this.display === "COLLAPSED") {
	    py = this.margin;
	  }

	  if (this.displayMode === "SQUISHED" && feature.row !== undefined) {
	    py = this.margin + rowHeight * feature.row;
	  } else if (this.displayMode === "EXPANDED" && feature.row !== undefined) {
	    py = this.margin + rowHeight * feature.row;
	  }

	  var cy = py + 0.5 * rowHeight;
	  var topY = cy - 0.5 * rowHeight;
	  var bottomY = cy + 0.5 * rowHeight; // draw the junction arc

	  var junctionLeftPx = Math.round((feature.junction_left - bpStart) / xScale);
	  var junctionRightPx = Math.round((feature.junction_right - bpStart) / xScale);
	  ctx.beginPath();
	  ctx.moveTo(junctionLeftPx, cy);
	  ctx.bezierCurveTo(junctionLeftPx, topY, junctionRightPx, topY, junctionRightPx, cy);
	  ctx.lineWidth = 1 + Math.log(feature.num_junction_reads) / Math.log(2);
	  ctx.strokeStyle = 'blue';
	  ctx.stroke(); // draw the spanning arcs

	  var spanningCoords = feature.spanning_frag_coords;

	  for (var i = 0; i < spanningCoords.length; i++) {
	    var spanningInfo = spanningCoords[i];
	    var spanLeftPx = Math.round((spanningInfo.left - bpStart) / xScale);
	    var spanRightPx = Math.round((spanningInfo.right - bpStart) / xScale);
	    ctx.beginPath();
	    ctx.moveTo(spanLeftPx, cy);
	    ctx.bezierCurveTo(spanLeftPx, bottomY, spanRightPx, bottomY, spanRightPx, cy);
	    ctx.lineWidth = 1;
	    ctx.strokeStyle = 'purple';
	    ctx.stroke();
	  }
	}
	/**
	 *
	 * @param feature
	 * @param bpStart  genomic location of the left edge of the current canvas
	 * @param xScale  scale in base-pairs per pixel
	 * @param pixelHeight  pixel height of the current canvas
	 * @param ctx  the canvas 2d context
	 */


	function renderJunctions(feature, bpStart, xScale, pixelHeight, ctx) {
	  // TODO: cache filter and pixel calculations by doing them earlier when features are initially parsed?
	  if (this.config.hideAnnotatedJunctions && feature.attributes.annotated_junction === "true") {
	    return;
	  }

	  if (this.config.hideUnannotatedJunctions && feature.attributes.annotated_junction === "false") {
	    return;
	  }

	  if (this.config.hideMotifs && this.config.hideMotifs.includes(feature.attributes.motif)) {
	    return;
	  }

	  if (this.config.hideStrand === feature.strand) {
	    return;
	  }

	  var uniquelyMappedReadCount = parseInt(feature.attributes.uniquely_mapped);

	  if (uniquelyMappedReadCount < this.config.minUniquelyMappedReads) {
	    return;
	  }

	  var multiMappedReadCount = parseInt(feature.attributes.multi_mapped);
	  var totalReadCount = uniquelyMappedReadCount + multiMappedReadCount;

	  if (totalReadCount < this.config.minTotalReads) {
	    return;
	  }

	  if (totalReadCount > 0 && multiMappedReadCount / totalReadCount > this.config.maxFractionMultiMappedReads) {
	    return;
	  }

	  var maximumSplicedAlignmentOverhang = parseInt(feature.attributes.maximum_spliced_alignment_overhang);

	  if (maximumSplicedAlignmentOverhang < this.config.minSplicedAlignmentOverhang) {
	    return;
	  }

	  var py = this.margin;
	  var rowHeight = this.height;
	  var cy = py + 0.5 * rowHeight;
	  var topY = py;
	  var bottomY = py + rowHeight;
	  var bezierBottomY = bottomY - 10; // draw the junction arc

	  var junctionLeftPx = Math.round((feature.start - bpStart) / xScale);
	  var junctionRightPx = Math.round((feature.end - bpStart) / xScale);
	  var junctionMiddlePx = (junctionLeftPx + junctionRightPx) / 2;
	  var bezierControlLeftPx = (junctionLeftPx + junctionMiddlePx) / 2;
	  var bezierControlRightPx = (junctionMiddlePx + junctionRightPx) / 2;
	  var lineWidth;

	  if (this.config.thicknessBasedOn === undefined || this.config.thicknessBasedOn === 'numUniqueReads') {
	    lineWidth = uniquelyMappedReadCount;
	  } else if (this.config.thicknessBasedOn === 'numReads') {
	    lineWidth = totalReadCount;
	  } else if (this.config.thicknessBasedOn === 'isAnnotatedJunction') {
	    lineWidth = feature.attributes.annotated_junction === "true" ? 20 : 100;
	  }

	  lineWidth = 1 + Math.log(lineWidth + 1) / Math.log(12);
	  var bounceHeight;

	  if (this.config.bounceHeightBasedOn === undefined || this.config.bounceHeightBasedOn === 'random') {
	    // randomly but deterministically stagger topY coordinates to reduce overlap
	    bounceHeight = (feature.start + feature.end) % 7;
	  } else if (this.config.bounceHeightBasedOn === 'distance') {
	    bounceHeight = (feature.end - feature.start) / 1000;
	  } else if (this.config.bounceHeightBasedOn === 'thickness') {
	    bounceHeight = 2 * lineWidth;
	  }

	  topY += rowHeight * Math.max(7 - bounceHeight, 0) / 10;
	  var color;

	  if (feature.color) {
	    color = feature.color; // Explicit setting
	  } else if (this.config.colorBy === undefined || this.config.colorBy === 'numUniqueReads') {
	    color = uniquelyMappedReadCount > this.config.colorByNumReadsThreshold ? 'blue' : '#AAAAAA'; // color gradient?
	  } else if (this.config.colorBy === 'numReads') {
	    color = totalReadCount > this.config.colorByNumReadsThreshold ? 'blue' : '#AAAAAA';
	  } else if (this.config.colorBy === 'isAnnotatedJunction') {
	    color = feature.attributes.annotated_junction === "true" ? '#b0b0ec' : 'orange';
	  } else if (this.config.colorBy === 'strand') {
	    color = feature.strand === "+" ? '#b0b0ec' : '#ecb0b0';
	  } else if (this.config.colorBy === 'motif') {
	    color = JUNCTION_MOTIF_PALETTE.getColor(feature.attributes.motif);
	  }

	  var label = '';

	  if (this.config.labelUniqueReadCount === undefined && this.config.labelMultiMappedReadCount === undefined && this.config.labelTotalReadCount === undefined) {
	    //default label
	    label += uniquelyMappedReadCount + (multiMappedReadCount == 0 ? '' : '(+' + multiMappedReadCount + ')');
	  } else {
	    if (this.config.labelTotalReadCount) {
	      label += totalReadCount;
	    } else if (this.config.labelUniqueReadCount) {
	      label += uniquelyMappedReadCount;
	    }

	    if (this.config.labelMultiMappedReadCount && multiMappedReadCount > 0) {
	      label += ' (+' + multiMappedReadCount + ')';
	    }
	  }

	  if (this.config.labelAnnotatedJunction && feature.attributes.annotated_junction === "true") {
	    label += this.config.labelAnnotatedJunction;
	  }

	  if (this.config.labelMotif && feature.attributes.motif) {
	    label += " ".concat(feature.attributes.motif);
	  } // data source: STAR splice junctions (eg. SJ.out.tab file converted to bed).
	  // .bed "name" field used to store unique + multi-mapped read counts, so:
	  // feature.score:  unique spanning read counts
	  // feature.name:   unique + multi-mapped spanning read counts
	  //example feature:  { chr: "chr17", start: 39662344, end: 39662803, name: "59", row: 0, score: 38, strand: "+"}


	  ctx.beginPath();
	  ctx.moveTo(junctionLeftPx, bezierBottomY);
	  ctx.bezierCurveTo(bezierControlLeftPx, topY, bezierControlRightPx, topY, junctionRightPx, bezierBottomY);
	  ctx.lineWidth = lineWidth;
	  ctx.strokeStyle = color;
	  ctx.stroke();
	  ctx.fillText(label, junctionMiddlePx - ctx.measureText(label).width / 2, (7 * topY + cy) / 8);
	} // SNP constants


	var codingNonSynonSet = new Set(['nonsense', 'missense', 'stop-loss', 'frameshift', 'cds-indel']);
	var codingSynonSet = new Set(['coding-synon']);
	var spliceSiteSet = new Set(['splice-3', 'splice-5']);
	var untranslatedSet = new Set(['untranslated-5', 'untranslated-3']);
	/**
	 * Renderer for a UCSC snp track
	 *
	 * @param snp
	 * @param bpStart  genomic location of the left edge of the current canvas
	 * @param xScale  scale in base-pairs per pixel
	 * @param pixelHeight  pixel height of the current canvas
	 * @param ctx  the canvas 2d context
	 */

	function renderSnp(snp, bpStart, xScale, pixelHeight, ctx) {
	  var coord = calculateFeatureCoordinates(snp, bpStart, xScale),
	      py = this.margin,
	      h,
	      colorArrLength = this.snpColors.length,
	      colorPriority;
	  h = this.displayMode === "squished" ? this.squishedRowHeight : this.expandedRowHeight;

	  switch (this.colorBy) {
	    case 'function':
	      colorPriority = colorByFunc(snp.func);
	      break;

	    case 'class':
	      colorPriority = colorByClass(snp['class']);
	  }

	  ctx.fillStyle = this.snpColors[colorPriority];
	  ctx.fillRect(coord.px, py, coord.pw, h); // Coloring functions, convert a value to a priority

	  function colorByFunc(theFunc) {
	    var priorities;
	    var funcArray = theFunc.split(','); // possible func values

	    priorities = funcArray.map(function (func) {
	      if (codingNonSynonSet.has(func) || spliceSiteSet.has(func)) {
	        return colorArrLength - 1;
	      } else if (codingSynonSet.has(func)) {
	        return colorArrLength - 2;
	      } else if (untranslatedSet.has(func)) {
	        return colorArrLength - 3;
	      } else {
	        // locusSet.has(func) || intronSet.has(func)
	        return 0;
	      }
	    });
	    return priorities.reduce(function (a, b) {
	      return Math.max(a, b);
	    });
	  }

	  function colorByClass(cls) {
	    if (cls === 'deletion') {
	      return colorArrLength - 1;
	    } else if (cls === 'mnp') {
	      return colorArrLength - 2;
	    } else if (cls === 'microsatellite' || cls === 'named') {
	      return colorArrLength - 3;
	    } else {
	      // cls === 'single' || cls === 'in-del' || cls === 'insertion'
	      return 0;
	    }
	  }
	}

	var defaultSequenceTrackOrder = Number.MIN_SAFE_INTEGER * 1e-4;
	var complement = {
	  'A': 'T',
	  'C': 'G',
	  'G': 'C',
	  'T': 'A'
	};
	var translationDict = {
	  'TTT': 'F',
	  'TTC': 'F',
	  'TTA': 'L',
	  'TTG': 'L',
	  'CTT': 'L',
	  'CTC': 'L',
	  'CTA': 'L',
	  'CTG': 'L',
	  'ATT': 'I',
	  'ATC': 'I',
	  'ATA': 'I',
	  'ATG': 'M',
	  'GTT': 'V',
	  'GTC': 'V',
	  'GTA': 'V',
	  'GTG': 'V',
	  'TCT': 'S',
	  'TCC': 'S',
	  'TCA': 'S',
	  'TCG': 'S',
	  'CCT': 'P',
	  'CCC': 'P',
	  'CCA': 'P',
	  'CCG': 'P',
	  'ACT': 'T',
	  'ACC': 'T',
	  'ACA': 'T',
	  'ACG': 'T',
	  'GCT': 'A',
	  'GCC': 'A',
	  'GCA': 'A',
	  'GCG': 'A',
	  'TAT': 'Y',
	  'TAC': 'Y',
	  'TAA': 'STOP',
	  'TAG': 'STOP',
	  'CAT': 'H',
	  'CAC': 'H',
	  'CAA': 'Q',
	  'CAG': 'Q',
	  'AAT': 'N',
	  'AAC': 'N',
	  'AAA': 'K',
	  'AAG': 'K',
	  'GAT': 'D',
	  'GAC': 'D',
	  'GAA': 'E',
	  'GAG': 'E',
	  'TGT': 'C',
	  'TGC': 'C',
	  'TGA': 'STOP',
	  'TGG': 'W',
	  'CGT': 'R',
	  'CGC': 'R',
	  'CGA': 'R',
	  'CGG': 'R',
	  'AGT': 'S',
	  'AGC': 'S',
	  'AGA': 'R',
	  'AGG': 'R',
	  'GGT': 'G',
	  'GGC': 'G',
	  'GGA': 'G',
	  'GGG': 'G'
	};

	var SequenceTrack = /*#__PURE__*/function () {
	  function SequenceTrack(config, browser) {
	    _classCallCheck(this, SequenceTrack);

	    this.type = "sequence";
	    this.browser = browser;
	    this.removable = false;
	    this.config = config;
	    this.name = "";
	    this.id = "sequence";
	    this.sequenceType = config.sequenceType || "dna"; //   dna | rna | prot

	    this.height = 25;
	    this.disableButtons = false;
	    this.order = config.order || defaultSequenceTrackOrder;
	    this.ignoreTrackMenu = false;
	    this.reversed = false;
	    this.frameTranslate = false;
	  }

	  _createClass(SequenceTrack, [{
	    key: "menuItemList",
	    value: function menuItemList() {
	      var _this = this;

	      return [{
	        name: this.reversed ? "Forward" : "Reverse",
	        click: function click() {
	          _this.reversed = !_this.reversed;

	          _this.trackView.repaintViews();
	        }
	      }, {
	        name: this.frameTranslate ? "Close Translation" : "Three-frame Translate",
	        click: function click() {
	          _this.frameTranslate = !_this.frameTranslate;

	          if (_this.frameTranslate) {
	            var _iterator = _createForOfIteratorHelper(_this.trackView.viewports),
	                _step;

	            try {
	              for (_iterator.s(); !(_step = _iterator.n()).done;) {
	                var vp = _step.value;
	                vp.setContentHeight(115);
	              }
	            } catch (err) {
	              _iterator.e(err);
	            } finally {
	              _iterator.f();
	            }

	            _this.trackView.setTrackHeight(115);
	          } else {
	            var _iterator2 = _createForOfIteratorHelper(_this.trackView.viewports),
	                _step2;

	            try {
	              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	                var _vp = _step2.value;

	                _vp.setContentHeight(25);
	              }
	            } catch (err) {
	              _iterator2.e(err);
	            } finally {
	              _iterator2.f();
	            }

	            _this.trackView.setTrackHeight(25);
	          }

	          _this.trackView.repaintViews();
	        }
	      }];
	    }
	  }, {
	    key: "translateSequence",
	    value: function translateSequence(seq) {
	      var threeFrame = [[], [], []];

	      for (var _i = 0, _arr = [0, 1, 2]; _i < _arr.length; _i++) {
	        var fNum = _arr[_i];
	        var idx = fNum;
	        var obj, st;

	        while (seq.length - idx >= 3) {
	          obj = {};
	          st = seq.slice(idx, idx + 3);

	          if (this.reversed) {
	            st = st.split('').reverse().join('');
	          }

	          obj.codons = st;
	          obj.aminoA = translationDict[st.toUpperCase()];
	          threeFrame[fNum].push(obj);
	          obj = null;
	          idx += 3;
	        }
	      }

	      return threeFrame;
	    }
	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, start, end, bpPerPixel) {
	        var sequence;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (!(bpPerPixel && bpPerPixel > 1)) {
	                  _context.next = 4;
	                  break;
	                }

	                return _context.abrupt("return", null);

	              case 4:
	                _context.next = 6;
	                return this.browser.genome.sequence.getSequence(chr, start, end);

	              case 6:
	                sequence = _context.sent;
	                return _context.abrupt("return", {
	                  bpStart: start,
	                  sequence: sequence
	                });

	              case 8:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function getFeatures(_x, _x2, _x3, _x4) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      var ctx = options.context;

	      if (options.features) {
	        var sequence = options.features.sequence;
	        var sequenceBpStart = options.features.bpStart;
	        var bpEnd = 1 + options.bpStart + options.pixelWidth * options.bpPerPixel;
	        var height = 15;

	        for (var bp = sequenceBpStart; bp <= bpEnd; bp++) {
	          var seqOffsetBp = Math.floor(bp - sequenceBpStart);

	          if (seqOffsetBp < sequence.length) {
	            var letter = sequence[seqOffsetBp];

	            if (this.reversed) {
	              letter = complement[letter.toUpperCase()];
	            }

	            var offsetBP = bp - options.bpStart;
	            var aPixel = offsetBP / options.bpPerPixel;
	            var bPixel = (offsetBP + 1) / options.bpPerPixel;
	            var color = this.fillColor(letter);

	            if (options.bpPerPixel > 1 / 10) {
	              IGVGraphics.fillRect(ctx, aPixel, 5, bPixel - aPixel, height - 5, {
	                fillStyle: color
	              });
	            } else {
	              var xPixel = 0.5 * (aPixel + bPixel - ctx.measureText(letter).width);
	              IGVGraphics.strokeText(ctx, letter, xPixel, height, {
	                strokeStyle: color
	              });
	            }
	          }
	        }

	        if (this.frameTranslate) {
	          var transSeq;

	          if (this.reversed) {
	            transSeq = sequence.split('').map(function (cv) {
	              return complement[cv];
	            });
	            transSeq = transSeq.join('');
	          } else {
	            transSeq = sequence;
	          }

	          var y = height;
	          var translatedSequence = this.translateSequence(transSeq);

	          var _iterator3 = _createForOfIteratorHelper(translatedSequence),
	              _step3;

	          try {
	            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	              var arr = _step3.value;
	              var i = translatedSequence.indexOf(arr);
	              var fNum = i;
	              var h = 25;
	              y = i === 0 ? y + 10 : y + 30; //Little less room at first.

	              var _iterator4 = _createForOfIteratorHelper(arr),
	                  _step4;

	              try {
	                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	                  var cv = _step4.value;
	                  var aaS = void 0;
	                  var idx = arr.indexOf(cv);
	                  var xSeed = idx + fNum + 2 * idx;

	                  var _color = 0 === idx % 2 ? 'rgb(160,160,160)' : 'rgb(224,224,224)';

	                  var p0 = Math.floor(xSeed / options.bpPerPixel);
	                  var p1 = Math.floor((xSeed + 3) / options.bpPerPixel);
	                  var pc = Math.round((p0 + p1) / 2);

	                  if (cv.aminoA.indexOf('STOP') > -1) {
	                    _color = 'rgb(255, 0, 0)';
	                    aaS = 'STOP'; //Color blind accessible
	                  } else {
	                    aaS = cv.aminoA;
	                  }

	                  if (cv.aminoA === 'M') {
	                    _color = 'rgb(0, 153, 0)';
	                    aaS = 'START'; //Color blind accessible
	                  }

	                  IGVGraphics.fillRect(ctx, p0, y, p1 - p0, h, {
	                    fillStyle: _color
	                  });

	                  if (options.bpPerPixel <= 1 / 10) {
	                    IGVGraphics.strokeText(ctx, aaS, pc - ctx.measureText(aaS).width / 2, y + 15);
	                  }
	                }
	              } catch (err) {
	                _iterator4.e(err);
	              } finally {
	                _iterator4.f();
	              }
	            }
	          } catch (err) {
	            _iterator3.e(err);
	          } finally {
	            _iterator3.f();
	          }
	        }
	      }
	    }
	  }, {
	    key: "supportsWholeGenome",
	    value: function supportsWholeGenome() {
	      return false;
	    }
	  }, {
	    key: "computePixelHeight",
	    value: function computePixelHeight(ignore) {
	      return this.height;
	    }
	  }, {
	    key: "fillColor",
	    value: function fillColor(index) {
	      if (this.color) {
	        return this.color;
	      } else if ("dna" === this.sequenceType) {
	        return this.browser.nucleotideColors[index] || 'gray';
	      } else {
	        return 'rgb(0, 0, 150)';
	      }
	    }
	  }]);

	  return SequenceTrack;
	}();

	function paintAxis(ctx, pixelWidth, pixelHeight) {
	  var x1,
	      x2,
	      y1,
	      y2,
	      a,
	      b,
	      reference,
	      shim,
	      font = {
	    'font': 'normal 10px Arial',
	    'textAlign': 'right',
	    'strokeStyle': "black"
	  };

	  if (undefined === this.dataRange || undefined === this.dataRange.max || undefined === this.dataRange.min) {
	    return;
	  }

	  IGVGraphics.fillRect(ctx, 0, 0, pixelWidth, pixelHeight, {
	    'fillStyle': "rgb(255, 255, 255)"
	  });
	  reference = 0.95 * pixelWidth;
	  x1 = reference - 8;
	  x2 = reference; //shim = 0.5 * 0.125;

	  shim = .01;
	  y1 = y2 = shim * pixelHeight;
	  a = {
	    x: x2,
	    y: y1
	  }; // tick

	  IGVGraphics.strokeLine(ctx, x1, y1, x2, y2, font);
	  IGVGraphics.fillText(ctx, prettyPrint(this.dataRange.max), x1 + 4, y1 + 12, font); //shim = 0.25 * 0.125;

	  y1 = y2 = (1.0 - shim) * pixelHeight;
	  b = {
	    x: x2,
	    y: y1
	  }; // tick

	  IGVGraphics.strokeLine(ctx, x1, y1, x2, y2, font);
	  IGVGraphics.fillText(ctx, prettyPrint(this.dataRange.min), x1 + 4, y1 - 4, font);
	  IGVGraphics.strokeLine(ctx, a.x, a.y, b.x, b.y, font);

	  function prettyPrint(number) {
	    // if number >= 100, show whole number
	    // if >= 1 show 1 significant digits
	    // if <  1 show 2 significant digits
	    if (number === 0) {
	      return "0";
	    } else if (Math.abs(number) >= 10) {
	      return number.toFixed();
	    } else if (Math.abs(number) >= 1) {
	      return number.toFixed(1);
	    } else {
	      return number.toFixed(2);
	    }
	  }
	}

	var DEFAULT_COLOR = "rgb(150,150,150)";

	var WigTrack = /*#__PURE__*/function (_TrackBase) {
	  _inherits(WigTrack, _TrackBase);

	  var _super = _createSuper(WigTrack);

	  function WigTrack(config, browser) {
	    var _this;

	    _classCallCheck(this, WigTrack);

	    _this = _super.call(this, config, browser);
	    _this.type = "wig";
	    _this.height = config.height || 50;
	    _this.featureType = 'numeric';
	    var format = config.format ? config.format.toLowerCase() : config.format;

	    if ("bigwig" === format) {
	      _this.featureSource = new BWSource(config, browser.genome);
	    } else if ("tdf" === format) {
	      _this.featureSource = new TDFSource(config, browser.genome);
	    } else {
	      _this.featureSource = FeatureSource(config, browser.genome);
	    }

	    _this.autoscale = config.autoscale || config.max === undefined;

	    if (!_this.autoscale) {
	      _this.dataRange = {
	        min: config.min || 0,
	        max: config.max
	      };
	    }

	    _this.windowFunction = config.windowFunction || "mean";
	    _this.paintAxis = paintAxis;
	    _this.graphType = config.graphType || "bar";
	    _this.normalize = config.normalize; // boolean, for use with "TDF" files

	    _this.scaleFactor = config.scaleFactor; // optional scale factor, ignored if normalize === true;

	    return _this;
	  }

	  _createClass(WigTrack, [{
	    key: "postInit",
	    value: function () {
	      var _postInit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	        var header;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return this.getHeader();

	              case 2:
	                header = _context.sent;
	                if (header) this.setTrackProperties(header);

	              case 4:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function postInit() {
	        return _postInit.apply(this, arguments);
	      }

	      return postInit;
	    }()
	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(chr, start, end, bpPerPixel) {
	        var features, scaleFactor, _iterator, _step, f, _scaleFactor, _iterator2, _step2, _f;

	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                _context2.next = 2;
	                return this.featureSource.getFeatures({
	                  chr: chr,
	                  start: start,
	                  end: end,
	                  bpPerPixel: bpPerPixel,
	                  windowFunction: this.windowFunction
	                });

	              case 2:
	                features = _context2.sent;

	                if (this.normalize && this.featureSource.normalizationFactor) {
	                  scaleFactor = this.featureSource.normalizationFactor;
	                  _iterator = _createForOfIteratorHelper(features);

	                  try {
	                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	                      f = _step.value;
	                      f.value *= scaleFactor;
	                    }
	                  } catch (err) {
	                    _iterator.e(err);
	                  } finally {
	                    _iterator.f();
	                  }
	                }

	                if (this.scaleFactor) {
	                  _scaleFactor = this.scaleFactor;
	                  _iterator2 = _createForOfIteratorHelper(features);

	                  try {
	                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	                      _f = _step2.value;
	                      _f.value *= _scaleFactor;
	                    }
	                  } catch (err) {
	                    _iterator2.e(err);
	                  } finally {
	                    _iterator2.f();
	                  }
	                }

	                return _context2.abrupt("return", features);

	              case 6:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function getFeatures(_x, _x2, _x3, _x4) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "menuItemList",
	    value: function menuItemList() {
	      return MenuUtils.numericDataMenuItems(this.trackView);
	    }
	  }, {
	    key: "getHeader",
	    value: function () {
	      var _getHeader = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	        return regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                if (!(typeof this.featureSource.getHeader === "function")) {
	                  _context3.next = 4;
	                  break;
	                }

	                _context3.next = 3;
	                return this.featureSource.getHeader();

	              case 3:
	                this.header = _context3.sent;

	              case 4:
	                return _context3.abrupt("return", this.header);

	              case 5:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function getHeader() {
	        return _getHeader.apply(this, arguments);
	      }

	      return getHeader;
	    }()
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      var _this2 = this;

	      var features = options.features;
	      var ctx = options.context;
	      var bpPerPixel = options.bpPerPixel;
	      var bpStart = options.bpStart;
	      var pixelWidth = options.pixelWidth;
	      var pixelHeight = options.pixelHeight;
	      var bpEnd = bpStart + pixelWidth * bpPerPixel + 1;
	      var lastPixelEnd = -1;
	      var lastValue = -1;
	      var lastNegValue = 1;
	      var posColor = this.color || DEFAULT_COLOR;
	      var baselineColor;

	      if (typeof posColor === "string" && posColor.startsWith("rgb(")) {
	        baselineColor = IGVColor.addAlpha(posColor, 0.1);
	      }

	      var yScale = function yScale(yValue) {
	        return (_this2.dataRange.max - yValue) / (_this2.dataRange.max - _this2.dataRange.min) * pixelHeight;
	      };

	      if (features && features.length > 0) {
	        if (this.dataRange.min === undefined) this.dataRange.min = 0; // Max can be less than min if config.min is set but max left to autoscale.   If that's the case there is
	        // nothing to paint.

	        if (this.dataRange.max > this.dataRange.min) {
	          var y0 = this.dataRange.min == 0 ? pixelHeight : yScale(0);

	          var _iterator3 = _createForOfIteratorHelper(features),
	              _step3;

	          try {
	            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	              var f = _step3.value;
	              if (f.end < bpStart) continue;
	              if (f.start > bpEnd) break;
	              var x = Math.floor((f.start - bpStart) / bpPerPixel);
	              if (isNaN(x)) continue;
	              var y = yScale(f.value);
	              var rectEnd = Math.ceil((f.end - bpStart) / bpPerPixel);
	              var width = Math.max(1, rectEnd - x);
	              var c = f.value < 0 && this.altColor ? this.altColor : posColor;
	              var color = typeof c === "function" ? c(f.value) : c;

	              if (this.graphType === "points") {
	                var pointSize = this.config.pointSize || 3;
	                var px = x + width / 2;
	                IGVGraphics.fillCircle(ctx, px, y, pointSize / 2, {
	                  "fillStyle": color,
	                  "strokeStyle": color
	                });
	              } else {
	                var height = y - y0;

	                if (Math.abs(height) < 1) {
	                  height = height < 0 ? -1 : 1;
	                }

	                var pixelEnd = x + width;

	                if (pixelEnd > lastPixelEnd || f.value >= 0 && f.value > lastValue || f.value < 0 && f.value < lastNegValue) {
	                  IGVGraphics.fillRect(ctx, x, y0, width, height, {
	                    fillStyle: color
	                  });
	                }

	                lastValue = f.value;
	                lastPixelEnd = pixelEnd;
	              }
	            } // If the track includes negative values draw a baseline

	          } catch (err) {
	            _iterator3.e(err);
	          } finally {
	            _iterator3.f();
	          }

	          if (this.dataRange.min < 0) {
	            var basepx = this.dataRange.max / (this.dataRange.max - this.dataRange.min) * options.pixelHeight;
	            IGVGraphics.strokeLine(ctx, 0, basepx, options.pixelWidth, basepx, {
	              strokeStyle: baselineColor
	            });
	          }
	        }
	      } // Draw guidelines


	      if (this.config.hasOwnProperty('guideLines')) {
	        var _iterator4 = _createForOfIteratorHelper(this.config.guideLines),
	            _step4;

	        try {
	          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	            var line = _step4.value;

	            if (line.hasOwnProperty('color') && line.hasOwnProperty('y') && line.hasOwnProperty('dotted')) {
	              var _y = yScale(line.y);

	              var props = {
	                'strokeStyle': line['color'],
	                'strokeWidth': 2
	              };
	              if (line['dotted']) IGVGraphics.dashedLine(options.context, 0, _y, options.pixelWidth, _y, 5, props);else IGVGraphics.strokeLine(options.context, 0, _y, options.pixelWidth, _y, props);
	            }
	          }
	        } catch (err) {
	          _iterator4.e(err);
	        } finally {
	          _iterator4.f();
	        }
	      }
	    }
	  }, {
	    key: "popupData",
	    value: function popupData(clickState, features) {
	      // We use the featureCache property rather than method to avoid async load.  If the
	      // feature is not already loaded this won't work,  but the user wouldn't be mousing over it either.
	      if (!features) features = this.clickedFeatures(clickState);

	      if (features && features.length > 0) {
	        var genomicLocation = clickState.genomicLocation;
	        var referenceFrame = clickState.viewport.referenceFrame;
	        var popupData = []; // We need some tolerance around genomicLocation, start with +/- 2 pixels

	        var tolerance = 2 * referenceFrame.bpPerPixel;
	        var selectedFeature = binarySearch(features, genomicLocation, tolerance);

	        if (selectedFeature) {
	          var posString = selectedFeature.end - selectedFeature.start === 1 ? numberFormatter(selectedFeature.start + 1) : numberFormatter(selectedFeature.start + 1) + "-" + numberFormatter(selectedFeature.end);
	          popupData.push({
	            name: "Position:",
	            value: posString
	          });
	          popupData.push({
	            name: "Value:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
	            value: numberFormatter(selectedFeature.value)
	          });
	        }

	        return popupData;
	      } else {
	        return [];
	      }
	    }
	  }, {
	    key: "supportsWholeGenome",
	    value: function supportsWholeGenome() {
	      if (typeof this.featureSource.supportsWholeGenome === 'function') {
	        return this.featureSource.supportsWholeGenome();
	      } else {
	        return false;
	      }
	    }
	    /**
	     * Called when the track is removed.  Do any needed cleanup here
	     */

	  }, {
	    key: "dispose",
	    value: function dispose() {
	      this.trackView = undefined;
	    }
	  }]);

	  return WigTrack;
	}(TrackBase);
	/**
	 * Return the closest feature to the genomic position +/- the specified tolerance.  Closest is defined
	 * by the minimum of the distance between position and start or end of the feature.
	 *
	 * @param features
	 * @param position
	 * @returns {*}
	 */


	function binarySearch(features, position, tolerance) {
	  var startIndex = 0,
	      stopIndex = features.length - 1,
	      index = startIndex + stopIndex >> 1,
	      candidateFeature,
	      tmp; // Use binary search to get the index of at least 1 feature in the click tolerance bounds

	  while (!test(features[index], position, tolerance) && startIndex < stopIndex) {
	    if (position < features[index].start) {
	      stopIndex = index - 1;
	    } else if (position > features[index].end) {
	      startIndex = index + 1;
	    }

	    index = startIndex + stopIndex >> 1;
	  }

	  if (test(features[index], position, tolerance)) {
	    candidateFeature = features[index];
	    if (test(candidateFeature, position, 0)) return candidateFeature; // Else, find closest feature to click

	    tmp = index;

	    while (tmp-- >= 0) {
	      if (!test(features[tmp]), tolerance) {
	        break;
	      }

	      if (test(features[tmp], position, 0)) {
	        return features[tmp];
	      }

	      if (delta(features[tmp], position) < delta(candidateFeature, position)) {
	        candidateFeature = features[tmp];
	      }

	      tmp = index;

	      while (tmp++ < features.length) {
	        if (!test(features[tmp]), tolerance) {
	          break;
	        }

	        if (test(features[tmp], position, 0)) {
	          return features[tmp];
	        }

	        if (delta(features[tmp], position) < delta(candidateFeature, position)) {
	          candidateFeature = features[tmp];
	        }
	      }
	    }

	    return candidateFeature;
	  } else {
	    return undefined;
	  }

	  function test(feature, position, tolerance) {
	    return position >= feature.start - tolerance && position <= feature.end + tolerance;
	  }

	  function delta(feature, position) {
	    return Math.min(Math.abs(feature.start - position), Math.abs(feature.end - position));
	  }
	}

	/**
	 *
	 * @param cs - object containing
	 * 1) array of threshold values defining bin boundaries in ascending order
	 * 2) array of colors for bins  (length == thresholds.length + 1)
	 * @constructor
	 */
	function BinnedColorScale(cs) {
	  this.thresholds = cs.thresholds;
	  this.colors = cs.colors;
	}

	BinnedColorScale.prototype.getColor = function (value) {
	  var _iterator = _createForOfIteratorHelper(this.thresholds),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var threshold = _step.value;

	      if (value < threshold) {
	        return this.colors[this.thresholds.indexOf(threshold)];
	      }
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }

	  return this.colors[this.colors.length - 1];
	};
	/**
	 *
	 * @param scale - object with the following properties
	 *           low
	 *           lowR
	 *           lowG
	 *           lowB
	 *           high
	 *           highR
	 *           highG
	 *           highB
	 *
	 * @constructor
	 */


	function GradientColorScale(scale) {
	  this.scale = scale;
	  this.lowColor = "rgb(" + scale.lowR + "," + scale.lowG + "," + scale.lowB + ")";
	  this.highColor = "rgb(" + scale.highR + "," + scale.highG + "," + scale.highB + ")";
	  this.diff = scale.high - scale.low;
	}

	GradientColorScale.prototype.getColor = function (value) {
	  var scale = this.scale,
	      r,
	      g,
	      b,
	      frac;
	  if (value <= scale.low) return this.lowColor;else if (value >= scale.high) return this.highColor;
	  frac = (value - scale.low) / this.diff;
	  r = Math.floor(scale.lowR + frac * (scale.highR - scale.lowR));
	  g = Math.floor(scale.lowG + frac * (scale.highG - scale.lowG));
	  b = Math.floor(scale.lowB + frac * (scale.highB - scale.lowB));
	  return "rgb(" + r + "," + g + "," + b + ")";
	};

	var ConstantColorScale = /*#__PURE__*/function () {
	  function ConstantColorScale(color) {
	    _classCallCheck(this, ConstantColorScale);

	    this.color = color;
	  }

	  _createClass(ConstantColorScale, [{
	    key: "getColor",
	    value: function getColor() {
	      return this.color;
	    }
	  }]);

	  return ConstantColorScale;
	}();

	var SegTrack = /*#__PURE__*/function (_TrackBase) {
	  _inherits(SegTrack, _TrackBase);

	  var _super = _createSuper(SegTrack);

	  function SegTrack(config, browser) {
	    var _this;

	    _classCallCheck(this, SegTrack);

	    _this = _super.call(this, config, browser);
	    _this.isLog = config.isLog;
	    _this.displayMode = config.displayMode || "SQUISHED"; // EXPANDED | SQUISHED

	    _this.maxHeight = config.maxHeight || 500;
	    _this.squishedRowHeight = config.sampleSquishHeight || config.squishedRowHeight || 2;
	    _this.expandedRowHeight = config.sampleExpandHeight || config.expandedRowHeight || 12;
	    _this.posColorScale = config.posColorScale || new GradientColorScale({
	      low: 0.1,
	      lowR: 255,
	      lowG: 255,
	      lowB: 255,
	      high: 1.5,
	      highR: 255,
	      highG: 0,
	      highB: 0
	    });
	    _this.negColorScale = config.negColorScale || new GradientColorScale({
	      low: -1.5,
	      lowR: 0,
	      lowG: 0,
	      lowB: 255,
	      high: -0.1,
	      highR: 255,
	      highG: 255,
	      highB: 255
	    });

	    if (config.samples) {
	      _this.sampleKeys = config.samples;
	      _this.explicitSamples = true;
	    } else {
	      _this.sampleKeys = [];
	    } //   this.featureSource = config.sourceType === "bigquery" ?
	    //       new igv.BigQueryFeatureSource(this.config) :


	    _this.featureSource = FeatureSource(_this.config, browser.genome);
	    _this.initialSort = config.sort;
	    return _this;
	  }

	  _createClass(SegTrack, [{
	    key: "postInit",
	    value: function () {
	      var _postInit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (!(typeof this.featureSource.getHeader === "function")) {
	                  _context.next = 4;
	                  break;
	                }

	                _context.next = 3;
	                return this.featureSource.getHeader();

	              case 3:
	                this.header = _context.sent;

	              case 4:
	                // Set properties from track line
	                if (this.header) {
	                  this.setTrackProperties(this.header);
	                }

	              case 5:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function postInit() {
	        return _postInit.apply(this, arguments);
	      }

	      return postInit;
	    }()
	  }, {
	    key: "menuItemList",
	    value: function menuItemList() {
	      var self = this;
	      var menuItems = [];
	      var lut = {
	        "SQUISHED": "Squish",
	        "EXPANDED": "Expand",
	        "FILL": "Fill"
	      };
	      menuItems.push("<hr/>");
	      menuItems.push("Sample Height");
	      ["SQUISHED", "EXPANDED", "FILL"].forEach(function (displayMode) {
	        menuItems.push({
	          object: createCheckbox$1(lut[displayMode], displayMode === self.displayMode),
	          click: function click() {
	            self.displayMode = displayMode;
	            self.config.displayMode = displayMode;
	            self.trackView.checkContentHeight();
	            self.trackView.repaintViews();
	          }
	        });
	      });
	      return menuItems;
	    }
	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(chr, start, end) {
	        var features, sort;
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                _context2.next = 2;
	                return this.featureSource.getFeatures({
	                  chr: chr,
	                  start: start,
	                  end: end
	                });

	              case 2:
	                features = _context2.sent;

	                if (this.initialSort) {
	                  sort = this.initialSort;
	                  this.sortSamples(sort.chr, sort.start, sort.end, sort.direction, features);
	                  this.initialSort = undefined; // Sample order is sorted,
	                }

	                return _context2.abrupt("return", features);

	              case 5:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function getFeatures(_x, _x2, _x3) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      var self = this;
	      var v2 = IGVMath.log2(2);
	      var ctx = options.context;
	      var pixelTop = options.pixelTop;
	      var pixelWidth = options.pixelWidth;
	      var pixelHeight = options.pixelHeight;
	      IGVGraphics.fillRect(ctx, 0, options.pixelTop, pixelWidth, pixelHeight, {
	        'fillStyle': "rgb(255, 255, 255)"
	      });
	      var featureList = options.features;

	      if (featureList && featureList.length > 0) {
	        if (self.isLog === undefined) checkForLog(featureList);
	        var bpPerPixel = options.bpPerPixel;
	        var bpStart = options.bpStart;
	        var bpEnd = bpStart + pixelWidth * bpPerPixel + 1;
	        var xScale = bpPerPixel;
	        this.updateSampleKeys(featureList); // Create a map for fast id -> row lookup

	        var samples = {};
	        this.sampleKeys.forEach(function (id, index) {
	          samples[id] = index;
	        });
	        var sampleHeight;
	        var border;

	        switch (this.displayMode) {
	          case "FILL":
	            sampleHeight = options.pixelHeight / this.sampleKeys.length;
	            border = 0;
	            break;

	          case "SQUISHED":
	            sampleHeight = this.squishedRowHeight;
	            border = 0;
	            break;

	          default:
	            // EXPANDED
	            sampleHeight = this.expandedRowHeight;
	            border = 1;
	        }

	        var _pixelBottom = options.pixelTop + options.pixelHeight;

	        var _iterator = _createForOfIteratorHelper(featureList),
	            _step;

	        try {
	          for (_iterator.s(); !(_step = _iterator.n()).done;) {
	            var segment = _step.value;
	            if (segment.end < bpStart) continue;
	            if (segment.start > bpEnd) break;
	            var sampleKey = segment.sampleKey || segment.sample;
	            segment.row = samples[sampleKey];
	            var y = pixelTop + segment.row * sampleHeight + border;
	            var bottom = y + sampleHeight;

	            if (bottom < pixelTop || y > _pixelBottom) {
	              continue;
	            }

	            var value = segment.value;

	            if (!self.isLog) {
	              value = IGVMath.log2(value / 2);
	            }

	            var segmentStart = Math.max(segment.start, bpStart); // const segmentStart = segment.start;

	            var px = Math.round((segmentStart - bpStart) / xScale);
	            var segmentEnd = Math.min(segment.end, bpEnd); // const segmentEnd = segment.end;

	            var px1 = Math.round((segmentEnd - bpStart) / xScale);
	            var pw = Math.max(1, px1 - px); // const sign = px < 0 ? '-' : '+';
	            // console.log('start ' + sign + numberFormatter(Math.abs(px)) + ' width ' + numberFormatter(pw) + ' end ' + numberFormatter(px + pw));

	            var color = void 0;

	            if (value < -0.1) {
	              color = self.negColorScale.getColor(value);
	            } else if (value > 0.1) {
	              color = self.posColorScale.getColor(value);
	            } else {
	              color = "white";
	            }

	            ctx.fillStyle = color; // Enhance the contrast of sub-pixel displays (FILL mode) by adjusting sample height.

	            var sh = sampleHeight;

	            if (sampleHeight < 0.25) {
	              var f = 0.1 + 2 * Math.abs(value);
	              sh = Math.min(1, f * sampleHeight);
	            }

	            segment.pixelRect = {
	              x: px,
	              y: y,
	              w: pw,
	              h: sh - 2 * border
	            };
	            ctx.fillRect(px, y, pw, sh - 2 * border); //IGVGraphics.fillRect(ctx, px, y, pw, sampleHeight - 2 * border, {fillStyle: color});
	          }
	        } catch (err) {
	          _iterator.e(err);
	        } finally {
	          _iterator.f();
	        }
	      }

	      function checkForLog(featureList) {
	        if (self.isLog === undefined) {
	          self.isLog = false;

	          var _iterator2 = _createForOfIteratorHelper(featureList),
	              _step2;

	          try {
	            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	              var feature = _step2.value;

	              if (feature.value < 0) {
	                self.isLog = true;
	                return;
	              }
	            }
	          } catch (err) {
	            _iterator2.e(err);
	          } finally {
	            _iterator2.f();
	          }
	        }
	      }
	    }
	  }, {
	    key: "computePixelHeight",

	    /**
	     * Optional method to compute pixel height to accomodate the list of features.  The implementation below
	     * has side effects (modifiying the samples hash).  This is unfortunate, but harmless.
	     *
	     * @param features
	     * @returns {number}
	     */
	    value: function computePixelHeight(features) {
	      if (!features) return 0;
	      var sampleHeight = "SQUISHED" === this.displayMode ? this.squishedRowHeight : this.expandedRowHeight;
	      this.updateSampleKeys(features);
	      return this.sampleKeys.length * sampleHeight;
	    }
	    /**
	     * Sort samples by the average value over the genomic range in the direction indicated (1 = ascending, -1 descending)
	     */

	  }, {
	    key: "sortSamples",
	    value: function () {
	      var _sortSamples = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(chr, start, end, direction, featureList) {
	        var scores, bpLength, _iterator3, _step3, segment, min, max, f, sampleKey, s, d2;

	        return regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                if (featureList) {
	                  _context3.next = 4;
	                  break;
	                }

	                _context3.next = 3;
	                return this.featureSource.getFeatures({
	                  chr: chr,
	                  start: start,
	                  end: end
	                });

	              case 3:
	                featureList = _context3.sent;

	              case 4:
	                if (featureList) {
	                  _context3.next = 6;
	                  break;
	                }

	                return _context3.abrupt("return");

	              case 6:
	                this.updateSampleKeys(featureList);
	                scores = {};
	                bpLength = end - start + 1; // Compute weighted average score for each sample

	                _iterator3 = _createForOfIteratorHelper(featureList);
	                _context3.prev = 10;

	                _iterator3.s();

	              case 12:
	                if ((_step3 = _iterator3.n()).done) {
	                  _context3.next = 26;
	                  break;
	                }

	                segment = _step3.value;

	                if (!(segment.end < start)) {
	                  _context3.next = 16;
	                  break;
	                }

	                return _context3.abrupt("continue", 24);

	              case 16:
	                if (!(segment.start > end)) {
	                  _context3.next = 18;
	                  break;
	                }

	                return _context3.abrupt("break", 26);

	              case 18:
	                min = Math.max(start, segment.start);
	                max = Math.min(end, segment.end);
	                f = (max - min) / bpLength;
	                sampleKey = segment.sampleKey || segment.sample;
	                s = scores[sampleKey] || 0;
	                scores[sampleKey] = s + f * segment.value;

	              case 24:
	                _context3.next = 12;
	                break;

	              case 26:
	                _context3.next = 31;
	                break;

	              case 28:
	                _context3.prev = 28;
	                _context3.t0 = _context3["catch"](10);

	                _iterator3.e(_context3.t0);

	              case 31:
	                _context3.prev = 31;

	                _iterator3.f();

	                return _context3.finish(31);

	              case 34:
	                // Now sort sample names by score
	                d2 = direction === "ASC" ? 1 : -1;
	                this.sampleKeys.sort(function (a, b) {
	                  var s1 = scores[a];
	                  var s2 = scores[b];
	                  if (!s1) s1 = d2 * Number.MAX_VALUE;
	                  if (!s2) s2 = d2 * Number.MAX_VALUE;
	                  if (s1 === s2) return 0;else if (s1 > s2) return d2;else return d2 * -1;
	                });
	                this.trackView.repaintViews(); // self.trackView.$viewport.scrollTop(0);

	              case 37:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this, [[10, 28, 31, 34]]);
	      }));

	      function sortSamples(_x4, _x5, _x6, _x7, _x8) {
	        return _sortSamples.apply(this, arguments);
	      }

	      return sortSamples;
	    }()
	  }, {
	    key: "clickedFeatures",
	    value: function clickedFeatures(clickState) {
	      var allFeatures = _get(_getPrototypeOf(SegTrack.prototype), "clickedFeatures", this).call(this, clickState);

	      return filterByRow(allFeatures, clickState.y);

	      function filterByRow(features, y) {
	        return features.filter(function (feature) {
	          var rect = feature.pixelRect;
	          return rect && y >= rect.y && y <= rect.y + rect.h;
	        });
	      }
	    }
	  }, {
	    key: "popupData",
	    value: function popupData(clickState, featureList) {
	      if (!featureList) featureList = this.clickedFeatures(clickState);
	      var items = [];

	      var _iterator4 = _createForOfIteratorHelper(featureList),
	          _step4;

	      try {
	        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	          var f = _step4.value;
	        }
	      } catch (err) {
	        _iterator4.e(err);
	      } finally {
	        _iterator4.f();
	      }

	      featureList.forEach(function (f) {
	        extractPopupData(f, items);
	      });
	      return items;

	      function extractPopupData(feature, data) {
	        var filteredProperties = new Set(['row', 'color', 'sampleKey', 'uniqueSampleKey', 'uniquePatientKey']); // hack for whole genome properties

	        var f;

	        if (feature.hasOwnProperty('realChr')) {
	          f = Object.assign({}, feature);
	          f.chr = feature.realChr;
	          f.start = feature.realStart;
	          f.end = feature.realEnd;
	          delete f.realChr;
	          delete f.realStart;
	          delete f.realEnd;
	        } else {
	          f = feature;
	        }

	        for (var _i = 0, _Object$keys = Object.keys(f); _i < _Object$keys.length; _i++) {
	          var property = _Object$keys[_i];

	          if (!filteredProperties.has(property) && isSimpleType(f[property])) {
	            data.push({
	              name: property,
	              value: f[property]
	            });
	          }
	        }
	      }
	    }
	  }, {
	    key: "contextMenuItemList",
	    value: function contextMenuItemList(clickState) {
	      var _this2 = this;

	      var referenceFrame = clickState.viewport.referenceFrame;
	      var genomicLocation = clickState.genomicLocation; // Define a region 5 "pixels" wide in genomic coordinates

	      var sortDirection = this.config.sort ? this.config.sort.direction === "ASC" ? "DESC" : "ASC" : // Toggle from previous sort
	      "DESC";
	      var bpWidth = referenceFrame.toBP(2.5);

	      var sortHandler = function sortHandler(sort) {
	        var viewport = clickState.viewport;
	        var features = viewport.getCachedFeatures();

	        _this2.sortSamples(sort.chr, sort.start, sort.end, sort.direction, features);
	      };

	      return [{
	        label: 'Sort by value',
	        click: function click(e) {
	          var sort = {
	            direction: sortDirection,
	            chr: clickState.viewport.referenceFrame.chr,
	            start: genomicLocation - bpWidth,
	            end: genomicLocation + bpWidth
	          };
	          sortHandler(sort);
	          _this2.config.sort = sort;
	        }
	      }];
	    }
	  }, {
	    key: "supportsWholeGenome",
	    value: function supportsWholeGenome() {
	      return (this.config.indexed === false || !this.config.indexURL) && this.config.supportsWholeGenome !== false;
	    }
	  }, {
	    key: "updateSampleKeys",
	    value: function updateSampleKeys(featureList) {
	      if (this.explicitSamples) return;
	      var samples = new Set(this.sampleKeys);

	      var _iterator5 = _createForOfIteratorHelper(featureList),
	          _step5;

	      try {
	        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
	          var feature = _step5.value;
	          var sampleKey = feature.sampleKey || feature.sample;

	          if (!samples.has(sampleKey)) {
	            samples.add(sampleKey);
	            this.sampleKeys.push(sampleKey);
	          }
	        }
	      } catch (err) {
	        _iterator5.e(err);
	      } finally {
	        _iterator5.f();
	      }
	    }
	  }]);

	  return SegTrack;
	}(TrackBase);

	var MergedTrack = /*#__PURE__*/function (_TrackBase) {
	  _inherits(MergedTrack, _TrackBase);

	  var _super = _createSuper(MergedTrack);

	  function MergedTrack(config, browser) {
	    _classCallCheck(this, MergedTrack);

	    if (!config.tracks) {
	      throw Error("Error: no tracks defined for merged track" + config);
	    }

	    return _super.call(this, config, browser);
	  }

	  _createClass(MergedTrack, [{
	    key: "postInit",
	    value: function () {
	      var _postInit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	        var _iterator, _step, tconf, t;

	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                this.tracks = [];
	                _iterator = _createForOfIteratorHelper(this.config.tracks);
	                _context.prev = 2;

	                _iterator.s();

	              case 4:
	                if ((_step = _iterator.n()).done) {
	                  _context.next = 14;
	                  break;
	                }

	                tconf = _step.value;
	                if (!tconf.type) inferTrackType(tconf);
	                tconf.isMergedTrack = true;
	                _context.next = 10;
	                return this.browser.createTrack(tconf);

	              case 10:
	                t = _context.sent;

	                if (t) {
	                  t.autoscale = false; // Scaling done from merged track

	                  this.tracks.push(t);
	                } else {
	                  console.warn("Could not create track " + tconf);
	                }

	              case 12:
	                _context.next = 4;
	                break;

	              case 14:
	                _context.next = 19;
	                break;

	              case 16:
	                _context.prev = 16;
	                _context.t0 = _context["catch"](2);

	                _iterator.e(_context.t0);

	              case 19:
	                _context.prev = 19;

	                _iterator.f();

	                return _context.finish(19);

	              case 22:
	                Object.defineProperty(this, "height", {
	                  get: function get() {
	                    return this._height;
	                  },
	                  set: function set(h) {
	                    this._height = h;

	                    var _iterator2 = _createForOfIteratorHelper(this.tracks),
	                        _step2;

	                    try {
	                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	                        var t = _step2.value;
	                        t.height = h;
	                        t.config.height = h;
	                      }
	                    } catch (err) {
	                      _iterator2.e(err);
	                    } finally {
	                      _iterator2.f();
	                    }
	                  }
	                });
	                this.height = this.config.height || 100;

	              case 24:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this, [[2, 16, 19, 22]]);
	      }));

	      function postInit() {
	        return _postInit.apply(this, arguments);
	      }

	      return postInit;
	    }()
	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(chr, bpStart, bpEnd, bpPerPixel) {
	        var promises;
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                promises = this.tracks.map(function (t) {
	                  return t.getFeatures(chr, bpStart, bpEnd, bpPerPixel);
	                });
	                return _context2.abrupt("return", Promise.all(promises));

	              case 2:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function getFeatures(_x, _x2, _x3, _x4) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      var i, len, mergedFeatures, trackOptions, dataRange;
	      mergedFeatures = options.features; // Array of feature arrays, 1 for each track

	      dataRange = autoscale(options.referenceFrame.chr, mergedFeatures); //IGVGraphics.fillRect(options.context, 0, options.pixelTop, options.pixelWidth, options.pixelHeight, {'fillStyle': "rgb(255, 255, 255)"});

	      for (i = 0, len = this.tracks.length; i < len; i++) {
	        trackOptions = Object.assign({}, options);
	        trackOptions.features = mergedFeatures[i];
	        this.tracks[i].dataRange = dataRange;
	        this.tracks[i].draw(trackOptions);
	      }
	    }
	  }, {
	    key: "paintAxis",
	    value: function paintAxis(ctx, pixelWidth, pixelHeight) {
	      var i, len, autoscale, track;
	      autoscale = true; // Hardcoded for now

	      for (i = 0, len = this.tracks.length; i < len; i++) {
	        track = this.tracks[i];

	        if (typeof track.paintAxis === 'function') {
	          track.paintAxis(ctx, pixelWidth, pixelHeight);
	          if (autoscale) break;
	        }
	      }
	    }
	  }, {
	    key: "popupData",
	    value: function popupData(clickState, features) {
	      var featuresArray = features || clickState.viewport.getCachedFeatures();

	      if (featuresArray && featuresArray.length === this.tracks.length) {
	        // Array of feature arrays, 1 for each track
	        var popupData = [];

	        for (var i = 0; i < this.tracks.length; i++) {
	          if (i > 0) popupData.push("<hr/>");
	          popupData.push("<b>".concat(this.tracks[i].name, "</b>"));
	          var trackPopupData = this.tracks[i].popupData(clickState, featuresArray[i]);
	          popupData.push.apply(popupData, _toConsumableArray(trackPopupData));
	        }

	        return popupData;
	      }
	    }
	  }]);

	  return MergedTrack;
	}(TrackBase);

	function autoscale(chr, featureArrays) {
	  var min = 0,
	      max = -Number.MAX_VALUE;
	 // if (chr === 'all') {
	  //     allValues = [];
	  //     featureArrays.forEach(function (features) {
	  //         features.forEach(function (f) {
	  //             if (!Number.isNaN(f.value)) {
	  //                 allValues.push(f.value);
	  //             }
	  //         });
	  //     });
	  //
	  //     min = Math.min(0, IGVMath.percentile(allValues, .1));
	  //     max = IGVMath.percentile(allValues, 99.9);
	  //
	  // }
	  // else {

	  featureArrays.forEach(function (features, i) {
	    features.forEach(function (f) {
	      if (typeof f.value !== 'undefined' && !Number.isNaN(f.value)) {
	        min = Math.min(min, f.value);
	        max = Math.max(max, f.value);
	      }
	    });
	  }); //  }

	  return {
	    min: min,
	    max: max
	  };
	}

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2016 University of California San Diego
	 * Author: Jim Robinson
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var PairedAlignment = /*#__PURE__*/function () {
	  function PairedAlignment(firstAlignment) {
	    _classCallCheck(this, PairedAlignment);

	    this.paired = true;
	    this.firstAlignment = firstAlignment;
	    this.chr = firstAlignment.chr;
	    this.readName = firstAlignment.readName;

	    if (firstAlignment.start < firstAlignment.mate.position) {
	      this.start = firstAlignment.start;
	      this.scStart = firstAlignment.scStart;
	      this.connectingStart = firstAlignment.start + firstAlignment.lengthOnRef;
	      this.connectingEnd = firstAlignment.mate.position;
	    } else {
	      this.start = firstAlignment.mate.position;
	      this.scStart = this.start;
	      this.connectingStart = firstAlignment.mate.position;
	      this.connectingEnd = firstAlignment.start;
	    }

	    this.end = Math.max(firstAlignment.mate.position, firstAlignment.start + firstAlignment.lengthOnRef); // Approximate

	    this.lengthOnRef = this.end - this.start;
	    var scEnd = Math.max(this.end, firstAlignment.scStart + firstAlignment.scLengthOnRef);
	    this.scLengthOnRef = scEnd - this.scStart;
	  }

	  _createClass(PairedAlignment, [{
	    key: "setSecondAlignment",
	    value: function setSecondAlignment(secondAlignment) {
	      // TODO -- check the chrs are equal,  error otherwise
	      this.secondAlignment = secondAlignment;
	      var firstAlignment = this.firstAlignment;

	      if (secondAlignment.start > firstAlignment.start) {
	        this.connectingEnd = secondAlignment.start;
	      } else {
	        this.connectingStart = secondAlignment.start + secondAlignment.lengthOnRef;
	      }

	      this.start = Math.min(firstAlignment.start, secondAlignment.start);
	      this.end = Math.max(firstAlignment.start + firstAlignment.lengthOnRef, secondAlignment.start + secondAlignment.lengthOnRef);
	      this.lengthOnRef = this.end - this.start;
	      this.scStart = Math.min(firstAlignment.scStart, secondAlignment.scStart);
	      var scEnd = Math.max(firstAlignment.scStart + firstAlignment.scLengthOnRef, secondAlignment.scStart + secondAlignment.scLengthOnRef);
	      this.scLengthOnRef = scEnd - this.scStart;
	    }
	  }, {
	    key: "containsLocation",
	    value: function containsLocation(genomicLocation, showSoftClips) {
	      var s = showSoftClips ? this.scStart : this.start;
	      var l = showSoftClips ? this.scLengthOnRef : this.lengthOnRef;
	      return genomicLocation >= s && genomicLocation <= s + l;
	    }
	  }, {
	    key: "alignmentContaining",
	    value: function alignmentContaining(genomicLocation, showSoftClips) {
	      if (this.firstAlignment.containsLocation(genomicLocation, showSoftClips)) {
	        return this.firstAlignment;
	      } else if (this.secondAlignment && this.secondAlignment.containsLocation(genomicLocation, showSoftClips)) {
	        return this.secondAlignment;
	      } else {
	        return undefined;
	      }
	    }
	  }, {
	    key: "popupData",
	    value: function popupData(genomicLocation) {
	      var nameValues = this.firstAlignment.popupData(genomicLocation);

	      if (this.secondAlignment) {
	        nameValues.push("-------------------------------");
	        nameValues = nameValues.concat(this.secondAlignment.popupData(genomicLocation));
	      }

	      return nameValues;
	    }
	  }, {
	    key: "isPaired",
	    value: function isPaired() {
	      return true; // By definition
	    }
	  }, {
	    key: "firstOfPairStrand",
	    value: function firstOfPairStrand() {
	      if (this.firstAlignment.isFirstOfPair()) {
	        return this.firstAlignment.strand;
	      } else if (this.secondAlignment && this.secondAlignment.isFirstOfPair()) {
	        return this.secondAlignment.strand;
	      } else {
	        return this.firstAlignment.mate.strand; // Assumption is mate is first-of-pair
	      }
	    }
	  }]);

	  return PairedAlignment;
	}();

	var isString$3 = isString;
	var hashCode$1 = hashCode;

	var BamAlignmentRow = /*#__PURE__*/function () {
	  function BamAlignmentRow() {
	    _classCallCheck(this, BamAlignmentRow);

	    this.alignments = [];
	    this.score = undefined;
	  }

	  _createClass(BamAlignmentRow, [{
	    key: "findAlignment",
	    value: function findAlignment(genomicLocation) {
	      var alignmentContains = function alignmentContains(a, genomicLocation) {
	        return genomicLocation >= a.start && genomicLocation < a.start + a.lengthOnRef;
	      }; // find single alignment that overlaps sort location


	      var centerAlignment;

	      for (var i = 0; i < this.alignments.length; i++) {
	        var a = this.alignments[i];

	        if (genomicLocation >= a.start && genomicLocation < a.start + a.lengthOnRef) {
	          if (a.paired) {
	            if (a.firstAlignment && alignmentContains(a.firstAlignment, genomicLocation)) {
	              centerAlignment = a.firstAlignment;
	            } else if (a.secondAlignment && alignmentContains(a.secondAlignment, genomicLocation)) {
	              centerAlignment = a.secondAlignment;
	            }
	          } else {
	            centerAlignment = a;
	          }

	          break;
	        }
	      }

	      return centerAlignment;
	    }
	  }, {
	    key: "updateScore",
	    value: function updateScore(options, alignmentContainer) {
	      this.score = this.calculateScore(options, alignmentContainer);
	    }
	  }, {
	    key: "calculateScore",
	    value: function calculateScore(_ref, alignmentContainer) {
	      var position = _ref.position,
	          sortOption = _ref.sortOption,
	          direction = _ref.direction,
	          tag = _ref.tag;
	      if (!sortOption) sortOption = "BASE";
	      var alignment = this.findAlignment(position);

	      if (undefined === alignment) {
	        return direction ? Number.MAX_VALUE : -Number.MAX_VALUE;
	      }

	      var mate;

	      switch (sortOption) {
	        case "NUCLEOTIDE":
	        case "BASE":
	          {
	            var readBase = alignment.readBaseAt(position);
	            var quality = alignment.readBaseQualityAt(position);

	            if (!readBase) {
	              return direction ? Number.MAX_VALUE : -Number.MAX_VALUE;
	            } else {
	              return calculateBaseScore(readBase, quality, alignmentContainer, position);
	            }
	          }

	        case "STRAND":
	          return alignment.strand ? 1 : -1;

	        case "START":
	          return alignment.start;

	        case "TAG":
	          {
	            var tagValue = alignment.tags()[tag];

	            if (tagValue !== undefined) {
	              return isString$3(tagValue) ? hashCode$1(tagValue) : tagValue;
	            } else {
	              return Number.MAX_VALUE;
	            }
	          }

	        case "INSERT_SIZE":
	          return -Math.abs(alignment.fragmentLength);

	        case "GAP_SIZE":
	          return -alignment.gapSizeAt(position);

	        case "MATE_CHR":
	          mate = alignment.mate;

	          if (!mate) {
	            return Number.MAX_VALUE;
	          } else {
	            if (mate.chr === alignment.chr) {
	              return Number.MAX_VALUE - 1;
	            } else {
	              return hashCode$1(mate.chr);
	            }
	          }

	        case "MQ":
	          return alignment.mq === undefined ? Number.MAX_VALUE : -alignment.mq;

	        default:
	          return Number.MAX_VALUE;
	      }

	      function calculateBaseScore(base, quality, alignmentContainer, genomicLocation) {
	        var reference;
	        var idx = Math.floor(genomicLocation) - alignmentContainer.start;

	        if (idx < alignmentContainer.sequence.length) {
	          reference = alignmentContainer.sequence.charAt(idx);
	        }

	        if (!reference) {
	          return undefined;
	        }

	        if (undefined === base) {
	          return Number.MAX_VALUE;
	        }

	        if ('N' === base) {
	          return 2;
	        } else if (reference === base || '=' === base) {
	          return 4 - quality / 1000;
	        } else if ("X" === base || reference !== base) {
	          var _idx = Math.floor(genomicLocation) - alignmentContainer.coverageMap.bpStart;

	          if (_idx > 0 && _idx < alignmentContainer.coverageMap.coverage.length) {
	            var coverage = alignmentContainer.coverageMap.coverage[_idx];
	            var count = coverage["pos" + base] + coverage["neg" + base];
	            return -(count + quality / 1000);
	          } else {
	            return -(1 + quality / 1000);
	          }
	        }

	        return 0;
	      }
	    }
	  }]);

	  return BamAlignmentRow;
	}();

	function canBePaired(alignment) {
	  return alignment.isPaired() && alignment.mate && alignment.isMateMapped() && alignment.chr === alignment.mate.chr && (alignment.isFirstOfPair() || alignment.isSecondOfPair()) && !(alignment.isSecondary() || alignment.isSupplementary());
	}

	function pairAlignments(rows) {
	  var pairCache = {};
	  var result = [];

	  var _iterator = _createForOfIteratorHelper(rows),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var row = _step.value;

	      var _iterator2 = _createForOfIteratorHelper(row.alignments),
	          _step2;

	      try {
	        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	          var alignment = _step2.value;

	          if (canBePaired(alignment)) {
	            var pairedAlignment = pairCache[alignment.readName];

	            if (pairedAlignment) {
	              pairedAlignment.setSecondAlignment(alignment);
	              pairCache[alignment.readName] = undefined; // Don't need to track this anymore.
	            } else {
	              pairedAlignment = new PairedAlignment(alignment);
	              pairCache[alignment.readName] = pairedAlignment;
	              result.push(pairedAlignment);
	            }
	          } else {
	            result.push(alignment);
	          }
	        }
	      } catch (err) {
	        _iterator2.e(err);
	      } finally {
	        _iterator2.f();
	      }
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }

	  return result;
	}

	function unpairAlignments(rows) {
	  var result = [];

	  var _iterator3 = _createForOfIteratorHelper(rows),
	      _step3;

	  try {
	    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	      var row = _step3.value;

	      var _iterator4 = _createForOfIteratorHelper(row.alignments),
	          _step4;

	      try {
	        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	          var alignment = _step4.value;

	          if (alignment instanceof PairedAlignment) {
	            if (alignment.firstAlignment) result.push(alignment.firstAlignment); // shouldn't need the null test

	            if (alignment.secondAlignment) result.push(alignment.secondAlignment);
	          } else {
	            result.push(alignment);
	          }
	        }
	      } catch (err) {
	        _iterator4.e(err);
	      } finally {
	        _iterator4.f();
	      }
	    }
	  } catch (err) {
	    _iterator3.e(err);
	  } finally {
	    _iterator3.f();
	  }

	  return result;
	}

	function packAlignmentRows(alignments, start, end, showSoftClips) {
	  if (!alignments) {
	    return undefined;
	  } else if (alignments.length === 0) {
	    return [];
	  } else {
	    alignments.sort(function (a, b) {
	      return showSoftClips ? a.scStart - b.scStart : a.start - b.start;
	    }); // bucketStart = Math.max(start, alignments[0].start);

	    var firstAlignment = alignments[0];
	    var bucketStart = Math.max(start, showSoftClips ? firstAlignment.scStart : firstAlignment.start);
	    var nextStart = bucketStart;
	    var bucketList = [];

	    var _iterator5 = _createForOfIteratorHelper(alignments),
	        _step5;

	    try {
	      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
	        var _alignment = _step5.value;
	        //var buckListIndex = Math.max(0, alignment.start - bucketStart);
	        var s = showSoftClips ? _alignment.scStart : _alignment.start;
	        var buckListIndex = Math.max(0, s - bucketStart);

	        if (bucketList[buckListIndex] === undefined) {
	          bucketList[buckListIndex] = [];
	        }

	        bucketList[buckListIndex].push(_alignment);
	      }
	    } catch (err) {
	      _iterator5.e(err);
	    } finally {
	      _iterator5.f();
	    }

	    var allocatedCount = 0;
	    var lastAllocatedCount = 0;
	    var packedAlignmentRows = [];
	    var alignmentSpace = 2;

	    try {
	      while (allocatedCount < alignments.length) {
	        var alignmentRow = new BamAlignmentRow();

	        while (nextStart <= end) {
	          var bucket = undefined;
	          var index = void 0;

	          while (!bucket && nextStart <= end) {
	            index = nextStart - bucketStart;

	            if (bucketList[index] === undefined) {
	              ++nextStart; // No alignments at this index
	            } else {
	              bucket = bucketList[index];
	            }
	          } // while (bucket)


	          if (!bucket) {
	            break;
	          }

	          var alignment = bucket.pop();

	          if (0 === bucket.length) {
	            bucketList[index] = undefined;
	          }

	          alignmentRow.alignments.push(alignment);
	          nextStart = showSoftClips ? alignment.scStart + alignment.scLengthOnRef + alignmentSpace : alignment.start + alignment.lengthOnRef + alignmentSpace;
	          ++allocatedCount;
	        } // while (nextStart)


	        if (alignmentRow.alignments.length > 0) {
	          packedAlignmentRows.push(alignmentRow);
	        }

	        nextStart = bucketStart;
	        if (allocatedCount === lastAllocatedCount) break; // Protect from infinite loops

	        lastAllocatedCount = allocatedCount;
	      } // while (allocatedCount)

	    } catch (e) {
	      console.error(e);
	      throw e;
	    }

	    return packedAlignmentRows;
	  }
	}

	var AlignmentContainer = /*#__PURE__*/function () {
	  function AlignmentContainer(chr, start, end, samplingWindowSize, samplingDepth, pairsSupported, alleleFreqThreshold) {
	    _classCallCheck(this, AlignmentContainer);

	    this.chr = chr;
	    this.start = Math.floor(start);
	    this.end = Math.ceil(end);
	    this.length = end - start;
	    this.alleleFreqThreshold = alleleFreqThreshold === undefined ? 0.2 : alleleFreqThreshold;
	    this.coverageMap = new CoverageMap(chr, start, end, this.alleleFreqThreshold);
	    this.alignments = [];
	    this.downsampledIntervals = [];
	    this.samplingWindowSize = samplingWindowSize === undefined ? 100 : samplingWindowSize;
	    this.samplingDepth = samplingDepth === undefined ? 1000 : samplingDepth;
	    this.pairsSupported = pairsSupported === undefined ? true : pairsSupported;
	    this.paired = false; // false until proven otherwise

	    this.pairsCache = {}; // working cache of paired alignments by read name

	    this.downsampledReads = new Set();
	    this.currentBucket = new DownsampleBucket(this.start, this.start + this.samplingWindowSize, this);

	    this.filter = function filter(alignment) {
	      // TODO -- pass this in
	      return alignment.isMapped() && !alignment.isFailsVendorQualityCheck();
	    };

	    this.pairedEndStats = new PairedEndStats();
	  }

	  _createClass(AlignmentContainer, [{
	    key: "push",
	    value: function push(alignment) {
	      if (this.filter(alignment) === false) return;

	      if (alignment.isPaired()) {
	        this.pairedEndStats.push(alignment);
	      }

	      this.coverageMap.incCounts(alignment); // Count coverage before any downsampling

	      if (this.pairsSupported && this.downsampledReads.has(alignment.readName)) {
	        return; // Mate already downsampled -- pairs are treated as a single alignment for downsampling
	      }

	      if (alignment.start >= this.currentBucket.end) {
	        this.finishBucket();
	        this.currentBucket = new DownsampleBucket(alignment.start, alignment.start + this.samplingWindowSize, this);
	      }

	      this.currentBucket.addAlignment(alignment);
	    }
	  }, {
	    key: "forEach",
	    value: function forEach(callback) {
	      this.alignments.forEach(callback);
	    }
	  }, {
	    key: "finish",
	    value: function finish() {
	      if (this.currentBucket !== undefined) {
	        this.finishBucket();
	      }

	      this.alignments.sort(function (a, b) {
	        return a.start - b.start;
	      });
	      this.pairsCache = undefined;
	      this.downsampledReads = undefined;
	      this.pairedEndStats.compute();
	    }
	  }, {
	    key: "contains",
	    value: function contains(chr, start, end) {
	      return this.chr === chr && this.start <= start && this.end >= end;
	    }
	  }, {
	    key: "hasDownsampledIntervals",
	    value: function hasDownsampledIntervals() {
	      return this.downsampledIntervals && this.downsampledIntervals.length > 0;
	    }
	  }, {
	    key: "finishBucket",
	    value: function finishBucket() {
	      this.alignments = this.alignments.concat(this.currentBucket.alignments);

	      if (this.currentBucket.downsampledCount > 0) {
	        this.downsampledIntervals.push(new DownsampledInterval(this.currentBucket.start, this.currentBucket.end, this.currentBucket.downsampledCount));
	      }

	      this.paired = this.paired || this.currentBucket.paired;
	    }
	  }, {
	    key: "setViewAsPairs",
	    value: function setViewAsPairs(bool) {
	      var alignments;

	      if (bool) {
	        alignments = pairAlignments(this.packedAlignmentRows);
	      } else {
	        alignments = unpairAlignments(this.packedAlignmentRows);
	      }

	      this.packedAlignmentRows = packAlignmentRows(alignments, this.start, this.end);
	    }
	  }, {
	    key: "setShowSoftClips",
	    value: function setShowSoftClips(bool) {
	      var alignments = this.allAlignments();
	      this.packedAlignmentRows = packAlignmentRows(alignments, this.start, this.end, bool);
	    }
	  }, {
	    key: "allAlignments",
	    value: function allAlignments() {
	      var alignments = [];

	      var _iterator = _createForOfIteratorHelper(this.packedAlignmentRows),
	          _step;

	      try {
	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          var row = _step.value;

	          var _iterator2 = _createForOfIteratorHelper(row.alignments),
	              _step2;

	          try {
	            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	              var alignment = _step2.value;
	              alignments.push(alignment);
	            }
	          } catch (err) {
	            _iterator2.e(err);
	          } finally {
	            _iterator2.f();
	          }
	        }
	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }

	      return alignments;
	    }
	  }, {
	    key: "getMax",
	    value: function getMax(start, end) {
	      return this.coverageMap.getMax(start, end);
	    }
	  }]);

	  return AlignmentContainer;
	}();

	var DownsampleBucket = /*#__PURE__*/function () {
	  function DownsampleBucket(start, end, alignmentContainer) {
	    _classCallCheck(this, DownsampleBucket);

	    this.start = start;
	    this.end = end;
	    this.alignments = [];
	    this.downsampledCount = 0;
	    this.samplingDepth = alignmentContainer.samplingDepth;
	    this.pairsSupported = alignmentContainer.pairsSupported;
	    this.downsampledReads = alignmentContainer.downsampledReads;
	    this.pairsCache = alignmentContainer.pairsCache;
	  }

	  _createClass(DownsampleBucket, [{
	    key: "addAlignment",
	    value: function addAlignment(alignment) {
	      var idx, replacedAlignment, pairedAlignment;

	      if (this.pairsSupported && canBePaired(alignment)) {
	        pairedAlignment = this.pairsCache[alignment.readName];

	        if (pairedAlignment) {
	          // Not subject to downsampling, just update the existing alignment
	          pairedAlignment.setSecondAlignment(alignment);
	          this.pairsCache[alignment.readName] = undefined; // Don't need to track this anymore. NOTE: Don't "delete", causes runtime performance issues

	          return;
	        }
	      }

	      if (this.alignments.length < this.samplingDepth) {
	        if (this.pairsSupported && canBePaired(alignment)) {
	          // First alignment in a pair
	          pairedAlignment = new PairedAlignment(alignment);
	          this.paired = true;
	          this.pairsCache[alignment.readName] = pairedAlignment;
	          this.alignments.push(pairedAlignment);
	        } else {
	          this.alignments.push(alignment);
	        }
	      } else {
	        idx = Math.floor(Math.random() * (this.samplingDepth + this.downsampledCount - 1));

	        if (idx < this.samplingDepth) {
	          // Keep the new item
	          //  idx = Math.floor(Math.random() * (this.alignments.length - 1));
	          replacedAlignment = this.alignments[idx]; // To be replaced

	          if (this.pairsSupported && canBePaired(alignment)) {
	            if (this.pairsCache[replacedAlignment.readName] !== undefined) {
	              this.pairsCache[replacedAlignment.readName] = undefined;
	            }

	            pairedAlignment = new PairedAlignment(alignment);
	            this.paired = true;
	            this.pairsCache[alignment.readName] = pairedAlignment;
	            this.alignments[idx] = pairedAlignment;
	          } else {
	            this.alignments[idx] = alignment;
	          }

	          this.downsampledReads.add(replacedAlignment.readName);
	        } else {
	          this.downsampledReads.add(alignment.readName);
	        }

	        this.downsampledCount++;
	      }
	    }
	  }]);

	  return DownsampleBucket;
	}();

	var CoverageMap = /*#__PURE__*/function () {
	  function CoverageMap(chr, start, end, alleleFreqThreshold) {
	    _classCallCheck(this, CoverageMap);

	    this.chr = chr;
	    this.bpStart = start;
	    this.length = end - start;
	    this.coverage = new Array(this.length);
	    this.maximum = 0;
	    this.threshold = alleleFreqThreshold;
	    this.qualityWeight = true;
	  }
	  /**
	   * Return the maximum coverage value between start and end.  This is used for autoscaling.
	   * @param start
	   * @param end
	   */


	  _createClass(CoverageMap, [{
	    key: "getMax",
	    value: function getMax(start, end) {
	      var max = 0;
	      var len = this.coverage.length;

	      for (var i = 0; i < len; i++) {
	        var pos = this.bpStart + i;
	        if (pos > end) break;
	        var cov = this.coverage[i];

	        if (pos >= start && cov) {
	          max = Math.max(max, cov.total);
	        }
	      }

	      return max;
	    }
	  }, {
	    key: "incCounts",
	    value: function incCounts(alignment) {
	      var self = this;

	      if (alignment.blocks === undefined) {
	        incBlockCount(alignment);
	      } else {
	        alignment.blocks.forEach(function (block) {
	          incBlockCount(block);
	        });
	      }

	      if (alignment.gaps) {
	        var _iterator3 = _createForOfIteratorHelper(alignment.gaps),
	            _step3;

	        try {
	          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	            var del = _step3.value;

	            if (del.type === 'D') {
	              var offset = del.start - self.bpStart;

	              for (var i = offset; i < offset + del.len; i++) {
	                if (i < 0) continue;

	                if (!this.coverage[i]) {
	                  this.coverage[i] = new Coverage(self.threshold);
	                }

	                this.coverage[i].del++;
	              }
	            }
	          }
	        } catch (err) {
	          _iterator3.e(err);
	        } finally {
	          _iterator3.f();
	        }
	      }

	      if (alignment.insertions) {
	        var _iterator4 = _createForOfIteratorHelper(alignment.insertions),
	            _step4;

	        try {
	          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	            var _del = _step4.value;

	            var _i = _del.start - this.bpStart;

	            if (_i < 0) continue;

	            if (!this.coverage[_i]) {
	              this.coverage[_i] = new Coverage(self.threshold);
	            }

	            this.coverage[_i].ins++;
	          }
	        } catch (err) {
	          _iterator4.e(err);
	        } finally {
	          _iterator4.f();
	        }
	      }

	      function incBlockCount(block) {
	        if ('S' === block.type) return;
	        var seq = alignment.seq;
	        var qual = alignment.qual;
	        var seqOffset = block.seqOffset;

	        for (var _i2 = block.start - self.bpStart, j = 0; j < block.len; _i2++, j++) {
	          if (!self.coverage[_i2]) {
	            self.coverage[_i2] = new Coverage(self.threshold);
	          }

	          var base = seq.charAt(seqOffset + j);
	          var key = alignment.strand ? "pos" + base : "neg" + base;
	          var q = qual && seqOffset + j < qual.length ? qual[seqOffset + j] : 30;
	          self.coverage[_i2][key] += 1;
	          self.coverage[_i2]["qual" + base] += q;
	          self.coverage[_i2].total += 1;
	          self.coverage[_i2].qual += q;
	          self.maximum = Math.max(self.coverage[_i2].total, self.maximum);
	        }
	      }
	    }
	  }]);

	  return CoverageMap;
	}();

	var Coverage = /*#__PURE__*/function () {
	  function Coverage(alleleThreshold) {
	    _classCallCheck(this, Coverage);

	    this.qualityWeight = true;
	    this.posA = 0;
	    this.negA = 0;
	    this.posT = 0;
	    this.negT = 0;
	    this.posC = 0;
	    this.negC = 0;
	    this.posG = 0;
	    this.negG = 0;
	    this.posN = 0;
	    this.negN = 0;
	    this.pos = 0;
	    this.neg = 0;
	    this.qualA = 0;
	    this.qualT = 0;
	    this.qualC = 0;
	    this.qualG = 0;
	    this.qualN = 0;
	    this.qual = 0;
	    this.total = 0;
	    this.del = 0;
	    this.ins = 0;
	    this.threshold = alleleThreshold;
	  }

	  _createClass(Coverage, [{
	    key: "isMismatch",
	    value: function isMismatch(refBase) {
	      var threshold = this.threshold * (this.qualityWeight && this.qual ? this.qual : this.total);
	      var mismatchQualitySum = 0;

	      for (var _i3 = 0, _arr = ["A", "T", "C", "G"]; _i3 < _arr.length; _i3++) {
	        var base = _arr[_i3];

	        if (base !== refBase) {
	          mismatchQualitySum += this.qualityWeight && this.qual ? this["qual" + base] : this["pos" + base] + this["neg" + base];
	        }
	      }

	      return mismatchQualitySum >= threshold;
	    }
	  }]);

	  return Coverage;
	}();

	var DownsampledInterval = /*#__PURE__*/function () {
	  function DownsampledInterval(start, end, counts) {
	    _classCallCheck(this, DownsampledInterval);

	    this.start = start;
	    this.end = end;
	    this.counts = counts;
	  }

	  _createClass(DownsampledInterval, [{
	    key: "popupData",
	    value: function popupData(genomicLocation) {
	      return [{
	        name: "start",
	        value: this.start + 1
	      }, {
	        name: "end",
	        value: this.end
	      }, {
	        name: "# downsampled:",
	        value: this.counts
	      }];
	    }
	  }]);

	  return DownsampledInterval;
	}();

	var PairedEndStats = /*#__PURE__*/function () {
	  function PairedEndStats(lowerPercentile, upperPercentile) {
	    _classCallCheck(this, PairedEndStats);

	    this.totalCount = 0;
	    this.frCount = 0;
	    this.rfCount = 0;
	    this.ffCount = 0;
	    this.sumF = 0;
	    this.sumF2 = 0; //this.lp = lowerPercentile === undefined ? 0.005 : lowerPercentile;
	    //this.up = upperPercentile === undefined ? 0.995 : upperPercentile;
	    //this.digest = new Digest();
	  }

	  _createClass(PairedEndStats, [{
	    key: "push",
	    value: function push(alignment) {
	      if (alignment.isProperPair()) {
	        var fragmentLength = Math.abs(alignment.fragmentLength); //this.digest.push(fragmentLength);

	        this.sumF += fragmentLength;
	        this.sumF2 += fragmentLength * fragmentLength;
	        var po = alignment.pairOrientation;

	        if (typeof po === "string" && po.length === 4) {
	          var tmp = '' + po.charAt(0) + po.charAt(2);

	          switch (tmp) {
	            case 'FF':
	            case 'RR':
	              this.ffCount++;
	              break;

	            case "FR":
	              this.frCount++;
	              break;

	            case "RF":
	              this.rfCount++;
	          }
	        }

	        this.totalCount++;
	      }
	    }
	  }, {
	    key: "compute",
	    value: function compute() {
	      if (this.totalCount > 100) {
	        if (this.ffCount / this.totalCount > 0.9) this.orienation = "ff";else if (this.frCount / this.totalCount > 0.9) this.orienation = "fr";else if (this.rfCount / this.totalCount > 0.9) this.orienation = "rf";
	        var fMean = this.sumF / this.totalCount;
	        var stdDev = Math.sqrt((this.totalCount * this.sumF2 - this.sumF * this.sumF) / (this.totalCount * this.totalCount));
	        this.lowerFragmentLength = fMean - 3 * stdDev;
	        this.upperFragmentLength = fMean + 3 * stdDev; //this.lowerFragmentLength = this.digest.percentile(this.lp);
	        //this.upperFragmentLength = this.digest.percentile(this.up);
	        //this.digest = undefined;
	      }
	    }
	  }]);

	  return PairedEndStats;
	}();

	var READ_PAIRED_FLAG = 0x1;
	var PROPER_PAIR_FLAG = 0x2;
	var READ_UNMAPPED_FLAG = 0x4;
	var MATE_UNMAPPED_FLAG = 0x8;
	var READ_STRAND_FLAG = 0x10;
	var MATE_STRAND_FLAG = 0x20;
	var FIRST_OF_PAIR_FLAG = 0x40;
	var SECOND_OF_PAIR_FLAG = 0x80;
	var SECONDARY_ALIGNMNET_FLAG = 0x100;
	var READ_FAILS_VENDOR_QUALITY_CHECK_FLAG = 0x200;
	var DUPLICATE_READ_FLAG = 0x400;
	var SUPPLEMENTARY_ALIGNMENT_FLAG = 0x800;
	var ELEMENT_SIZE = {
	  c: 1,
	  C: 1,
	  s: 2,
	  S: 2,
	  i: 4,
	  I: 4,
	  f: 4
	};
	/**
	 * readName
	 * chr
	 * cigar
	 * lengthOnRef
	 * start
	 * seq
	 * qual
	 * mq
	 * strand
	 * blocks
	 */

	var BamAlignment = /*#__PURE__*/function () {
	  function BamAlignment() {
	    _classCallCheck(this, BamAlignment);

	    this.hidden = false;
	  }

	  _createClass(BamAlignment, [{
	    key: "isMapped",
	    value: function isMapped() {
	      return (this.flags & READ_UNMAPPED_FLAG) === 0;
	    }
	  }, {
	    key: "isPaired",
	    value: function isPaired() {
	      return (this.flags & READ_PAIRED_FLAG) !== 0;
	    }
	  }, {
	    key: "isProperPair",
	    value: function isProperPair() {
	      return (this.flags & PROPER_PAIR_FLAG) !== 0;
	    }
	  }, {
	    key: "isFirstOfPair",
	    value: function isFirstOfPair() {
	      return (this.flags & FIRST_OF_PAIR_FLAG) !== 0;
	    }
	  }, {
	    key: "isSecondOfPair",
	    value: function isSecondOfPair() {
	      return (this.flags & SECOND_OF_PAIR_FLAG) !== 0;
	    }
	  }, {
	    key: "isSecondary",
	    value: function isSecondary() {
	      return (this.flags & SECONDARY_ALIGNMNET_FLAG) !== 0;
	    }
	  }, {
	    key: "isSupplementary",
	    value: function isSupplementary() {
	      return (this.flags & SUPPLEMENTARY_ALIGNMENT_FLAG) !== 0;
	    }
	  }, {
	    key: "isFailsVendorQualityCheck",
	    value: function isFailsVendorQualityCheck() {
	      return (this.flags & READ_FAILS_VENDOR_QUALITY_CHECK_FLAG) !== 0;
	    }
	  }, {
	    key: "isDuplicate",
	    value: function isDuplicate() {
	      return (this.flags & DUPLICATE_READ_FLAG) !== 0;
	    }
	  }, {
	    key: "isMateMapped",
	    value: function isMateMapped() {
	      return (this.flags & MATE_UNMAPPED_FLAG) === 0;
	    }
	  }, {
	    key: "isNegativeStrand",
	    value: function isNegativeStrand() {
	      return (this.flags & READ_STRAND_FLAG) !== 0;
	    }
	  }, {
	    key: "isMateNegativeStrand",
	    value: function isMateNegativeStrand() {
	      return (this.flags & MATE_STRAND_FLAG) !== 0;
	    }
	  }, {
	    key: "tags",
	    value: function tags() {
	      if (!this.tagDict) {
	        if (this.tagBA) {
	          this.tagDict = decodeTags(this.tagBA);
	          this.tagBA = undefined;
	        } else {
	          this.tagDict = {}; // Mark so we don't try again.  The record has no tags
	        }
	      }

	      return this.tagDict;

	      function decodeTags(ba) {
	        var p = 0;
	        var len = ba.length;
	        var tags = {};

	        while (p < len) {
	          var tag = String.fromCharCode(ba[p]) + String.fromCharCode(ba[p + 1]);
	          p += 2;
	          var type = String.fromCharCode(ba[p++]);
	          var value = void 0;

	          if (type === 'A') {
	            value = String.fromCharCode(ba[p]);
	            p++;
	          } else if (type === 'i' || type === 'I') {
	            value = readInt(ba, p);
	            p += 4;
	          } else if (type === 'c' || type === 'C') {
	            value = ba[p];
	            p++;
	          } else if (type === 's' || type === 'S') {
	            value = readShort(ba, p);
	            p += 2;
	          } else if (type === 'f') {
	            value = readFloat(ba, p);
	            p += 4;
	          } else if (type === 'Z') {
	            value = '';

	            for (;;) {
	              var cc = ba[p++];

	              if (cc === 0) {
	                break;
	              } else {
	                value += String.fromCharCode(cc);
	              }
	            }
	          } else if (type === 'B') {
	            var elementType = String.fromCharCode(ba[p++]);
	            var elementSize = ELEMENT_SIZE[elementType];

	            if (elementSize === undefined) {
	              tags[tag] = "Error: unknown element type '".concat(elementType, "'");
	              break;
	            }

	            var numElements = readInt(ba, p);
	            p += 4 + numElements * elementSize;
	            value = '[not shown]';
	          } else {
	            //'Unknown type ' + type;
	            value = 'Error unknown type: ' + type;
	            tags[tag] = value;
	            break;
	          }

	          tags[tag] = value;
	        }

	        return tags;
	      }
	    }
	    /**
	     * Does alignment (or alignment extended by soft clips) contain the genomic location?
	     *
	     * @param genomicLocation
	     * @param showSoftClips
	     * @returns {boolean|boolean}
	     */

	  }, {
	    key: "containsLocation",
	    value: function containsLocation(genomicLocation, showSoftClips) {
	      var s = showSoftClips ? this.scStart : this.start;
	      var l = showSoftClips ? this.scLengthOnRef : this.lengthOnRef;
	      return genomicLocation >= s && genomicLocation <= s + l;
	    }
	  }, {
	    key: "popupData",
	    value: function popupData(genomicLocation) {
	      // if the user clicks on a base next to an insertion, show just the
	      // inserted bases in a popup (like in desktop IGV).
	      var nameValues = []; // Consert genomic location to int

	      genomicLocation = Math.floor(genomicLocation);

	      if (this.insertions) {
	        var seq = this.seq;

	        var _iterator = _createForOfIteratorHelper(this.insertions),
	            _step;

	        try {
	          for (_iterator.s(); !(_step = _iterator.n()).done;) {
	            var insertion = _step.value;
	            var ins_start = insertion.start;

	            if (genomicLocation === ins_start || genomicLocation === ins_start - 1) {
	              nameValues.push({
	                name: 'Insertion',
	                value: seq.substr(insertion.seqOffset, insertion.len)
	              });
	              nameValues.push({
	                name: 'Location',
	                value: ins_start
	              });
	              return nameValues;
	            }
	          }
	        } catch (err) {
	          _iterator.e(err);
	        } finally {
	          _iterator.f();
	        }
	      }

	      nameValues.push({
	        name: 'Read Name',
	        value: this.readName
	      }); // Sample
	      // Read group

	      nameValues.push("<hr>"); // Add 1 to genomic location to map from 0-based computer units to user-based units

	      nameValues.push({
	        name: 'Alignment Start',
	        value: numberFormatter(1 + this.start),
	        borderTop: true
	      });
	      nameValues.push({
	        name: 'Read Strand',
	        value: true === this.strand ? '(+)' : '(-)',
	        borderTop: true
	      });
	      nameValues.push({
	        name: 'Cigar',
	        value: this.cigar
	      });
	      nameValues.push({
	        name: 'Mapped',
	        value: yesNo(this.isMapped())
	      });
	      nameValues.push({
	        name: 'Mapping Quality',
	        value: this.mq
	      });
	      nameValues.push({
	        name: 'Secondary',
	        value: yesNo(this.isSecondary())
	      });
	      nameValues.push({
	        name: 'Supplementary',
	        value: yesNo(this.isSupplementary())
	      });
	      nameValues.push({
	        name: 'Duplicate',
	        value: yesNo(this.isDuplicate())
	      });
	      nameValues.push({
	        name: 'Failed QC',
	        value: yesNo(this.isFailsVendorQualityCheck())
	      });

	      if (this.isPaired()) {
	        nameValues.push("<hr>");
	        nameValues.push({
	          name: 'First in Pair',
	          value: !this.isSecondOfPair(),
	          borderTop: true
	        });
	        nameValues.push({
	          name: 'Mate is Mapped',
	          value: yesNo(this.isMateMapped())
	        });

	        if (this.pairOrientation) {
	          nameValues.push({
	            name: 'Pair Orientation',
	            value: this.pairOrientation
	          });
	        }

	        if (this.isMateMapped()) {
	          nameValues.push({
	            name: 'Mate Chromosome',
	            value: this.mate.chr
	          });
	          nameValues.push({
	            name: 'Mate Start',
	            value: this.mate.position + 1
	          });
	          nameValues.push({
	            name: 'Mate Strand',
	            value: true === this.mate.strand ? '(+)' : '(-)'
	          });
	          nameValues.push({
	            name: 'Insert Size',
	            value: this.fragmentLength
	          }); // Mate Start
	          // Mate Strand
	          // Insert Size
	        } // First in Pair
	        // Pair Orientation

	      }

	      nameValues.push("<hr>");
	      var tagDict = this.tags();
	      var isFirst = true;

	      for (var key in tagDict) {
	        if (tagDict.hasOwnProperty(key)) {
	          if (isFirst) {
	            nameValues.push({
	              name: key,
	              value: tagDict[key],
	              borderTop: true
	            });
	            isFirst = false;
	          } else {
	            nameValues.push({
	              name: key,
	              value: tagDict[key]
	            });
	          }
	        }
	      }

	      nameValues.push("<hr>");
	      nameValues.push({
	        name: 'Genomic Location: ',
	        value: numberFormatter(1 + genomicLocation)
	      });
	      nameValues.push({
	        name: 'Read Base:',
	        value: this.readBaseAt(genomicLocation)
	      });
	      nameValues.push({
	        name: 'Base Quality:',
	        value: this.readBaseQualityAt(genomicLocation)
	      });
	      return nameValues;

	      function yesNo(bool) {
	        return bool ? 'Yes' : 'No';
	      }
	    }
	  }, {
	    key: "readBaseAt",
	    value: function readBaseAt(genomicLocation) {
	      var block = blockAtGenomicLocation(this.blocks, genomicLocation);

	      if (block) {
	        if ("*" === this.seq) {
	          return "*";
	        } else {
	          var idx = block.seqIndexAt(genomicLocation); // if (idx >= 0 && idx < this.seq.length) {

	          return this.seq[idx]; //  }
	        }
	      } else {
	        return undefined;
	      }
	    }
	  }, {
	    key: "readBaseQualityAt",
	    value: function readBaseQualityAt(genomicLocation) {
	      var block = blockAtGenomicLocation(this.blocks, genomicLocation);

	      if (block) {
	        if ("*" === this.qual) {
	          return 30;
	        } else {
	          var idx = block.seqIndexAt(genomicLocation);

	          if (idx >= 0 && this.qual && idx < this.qual.length) {
	            return this.qual[idx];
	          } else {
	            return 30;
	          }
	        }
	      } else {
	        return undefined;
	      }
	    }
	  }, {
	    key: "gapSizeAt",
	    value: function gapSizeAt(genomicLocation) {
	      if (this.gaps) {
	        var _iterator2 = _createForOfIteratorHelper(this.gaps),
	            _step2;

	        try {
	          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	            var gap = _step2.value;

	            if (genomicLocation >= gap.start && genomicLocation < gap.start + gap.len) {
	              return gap.len;
	            }
	          }
	        } catch (err) {
	          _iterator2.e(err);
	        } finally {
	          _iterator2.f();
	        }
	      }

	      return 0;
	    }
	  }]);

	  return BamAlignment;
	}();

	function blockAtGenomicLocation(blocks, genomicLocation) {
	  for (var i = 0; i < blocks.length; i++) {
	    var block = blocks[i];

	    if (genomicLocation >= block.start && genomicLocation < block.start + block.len) {
	      return block;
	    }
	  }

	  return undefined;
	}

	function readInt(ba, offset) {
	  return ba[offset + 3] << 24 | ba[offset + 2] << 16 | ba[offset + 1] << 8 | ba[offset];
	}

	function readShort(ba, offset) {
	  return ba[offset + 1] << 8 | ba[offset];
	}

	function readFloat(ba, offset) {
	  var dataView = new DataView(ba.buffer),
	      littleEndian = true;
	  return dataView.getFloat32(offset, littleEndian);
	}

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2016-2017 The Regents of the University of California
	 * Author: Jim Robinson
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * Created by jrobinso on 4/5/18.
	 */
	var AlignmentBlock = /*#__PURE__*/function () {
	  function AlignmentBlock(b) {
	    _classCallCheck(this, AlignmentBlock);

	    if (b) {
	      Object.assign(this, b);
	    }
	  }

	  _createClass(AlignmentBlock, [{
	    key: "seqIndexAt",
	    value: function seqIndexAt(genomicLocation) {
	      return Math.floor(genomicLocation) - this.start + this.seqOffset;
	    }
	  }]);

	  return AlignmentBlock;
	}();

	var BamFilter = /*#__PURE__*/function () {
	  function BamFilter(options) {
	    _classCallCheck(this, BamFilter);

	    if (!options) options = {};
	    this.vendorFailed = options.vendorFailed === undefined ? true : options.vendorFailed;
	    this.duplicates = options.duplicates === undefined ? true : options.duplicates;
	    this.secondary = options.secondary || false;
	    this.supplementary = options.supplementary || false;
	    this.mqThreshold = options.mqThreshold === undefined ? 0 : options.mqThreshold;

	    if (options.readgroups) {
	      this.readgroups = new Set(options.readgroups);
	    }
	  }

	  _createClass(BamFilter, [{
	    key: "pass",
	    value: function pass(alignment) {
	      if (this.vendorFailed && alignment.isFailsVendorQualityCheck()) return false;
	      if (this.duplicates && alignment.isDuplicate()) return false;
	      if (this.secondary && alignment.isSecondary()) return false;
	      if (this.supplementary && alignment.isSupplementary()) return false;
	      if (alignment.mq < this.mqThreshold) return false;

	      if (this.readgroups) {
	        var rg = alignment.tags()['RG'];
	        return this.readgroups.has(rg);
	      }

	      return true;
	    }
	  }]);

	  return BamFilter;
	}();

	/**
	 * This code is based on the Biodalliance BAM reader by Thomas Down,  2011
	 *
	 * https://github.com/dasmoth/dalliance/blob/master/js/bam.js
	 */

	var SEQ_DECODER = ['=', 'A', 'C', 'x', 'G', 'x', 'x', 'x', 'T', 'x', 'x', 'x', 'x', 'x', 'x', 'N'];
	var CIGAR_DECODER = ['M', 'I', 'D', 'N', 'S', 'H', 'P', '=', 'X', '?', '?', '?', '?', '?', '?', '?'];
	var READ_STRAND_FLAG$1 = 0x10;
	var MATE_STRAND_FLAG$1 = 0x20;
	var BAM1_MAGIC_BYTES = new Uint8Array([0x42, 0x41, 0x4d, 0x01]); // BAM\1

	var BAM1_MAGIC_NUMBER = readInt$1(BAM1_MAGIC_BYTES, 0);
	var DEFAULT_ALLELE_FREQ_THRESHOLD = 0.2;
	var DEFAULT_SAMPLING_WINDOW_SIZE = 100;
	var DEFAULT_SAMPLING_DEPTH = 500;
	var MAXIMUM_SAMPLING_DEPTH = 10000;
	var BamUtils = {
	  readHeader: function readHeader(url, options, genome) {
	    return igvxhr.loadArrayBuffer(url, options).then(function (compressedBuffer) {
	      var header, unc, uncba;
	      unc = unbgzf(compressedBuffer);
	      uncba = unc;
	      header = BamUtils.decodeBamHeader(uncba, genome);
	      return header;
	    });
	  },

	  /**
	   *
	   * @param ba  bytes to decode as a UInt8Array
	   * @param genome  optional igv genome object
	   * @returns {{ magicNumer: number, size: number, chrNames: Array, chrToIndex: ({}|*), chrAliasTable: ({}|*) }}
	   */
	  decodeBamHeader: function decodeBamHeader(ba, genome) {
	    var magic, samHeaderLen, samHeader, chrToIndex, chrNames, chrAliasTable, alias;
	    magic = readInt$1(ba, 0);

	    if (magic !== BAM1_MAGIC_NUMBER) {
	      throw new Error('BAM header errror: bad magic number.  This could be caused by either a corrupt or missing file.');
	    }

	    samHeaderLen = readInt$1(ba, 4);
	    samHeader = '';

	    for (var i = 0; i < samHeaderLen; ++i) {
	      samHeader += String.fromCharCode(ba[i + 8]);
	    }

	    var nRef = readInt$1(ba, samHeaderLen + 8);
	    var p = samHeaderLen + 12;
	    chrToIndex = {};
	    chrNames = [];
	    chrAliasTable = {};

	    for (i = 0; i < nRef; ++i) {
	      var lName = readInt$1(ba, p);
	      var name = '';

	      for (var j = 0; j < lName - 1; ++j) {
	        name += String.fromCharCode(ba[p + 4 + j]);
	      }

	      var lRef = readInt$1(ba, p + lName + 4); //dlog(name + ': ' + lRef);

	      chrToIndex[name] = i;
	      chrNames[i] = name;

	      if (genome) {
	        alias = genome.getChromosomeName(name);
	        chrAliasTable[alias] = name;
	      }

	      p = p + 8 + lName;
	    }

	    return {
	      magicNumber: magic,
	      size: p,
	      chrNames: chrNames,
	      chrToIndex: chrToIndex,
	      chrAliasTable: chrAliasTable
	    };
	  },
	  bam_tag2cigar: function bam_tag2cigar(ba, block_end, seq_offset, lseq, al, cigarArray) {
	    function type2size(x) {
	      if (x === 'C' || x === 'c' || x === 'A') return 1;else if (x === 'S' || x === 's') return 2;else if (x === 'I' || x === 'i' || x === 'f') return 4;else return 0;
	    } // test if the real CIGAR is encoded in a CG:B,I tag


	    if (cigarArray.length !== 1 || al.start < 0) return false;
	    var p = seq_offset + (lseq + 1 >> 1) + lseq;

	    while (p + 4 < block_end) {
	      var tag = String.fromCharCode(ba[p]) + String.fromCharCode(ba[p + 1]);
	      if (tag === 'CG') break;
	      var type = String.fromCharCode(ba[p + 2]);

	      if (type === 'B') {
	        // the binary array type
	        type = String.fromCharCode(ba[p + 3]);
	        var size = type2size(type);
	        var len = readInt$1(ba, p + 4);
	        p += 8 + size * len;
	      } else if (type === 'Z' || type === 'H') {
	        // 0-terminated string
	        p += 3;

	        while (ba[p++] !== 0) {}
	      } else {
	        // other atomic types
	        p += 3 + type2size(type);
	      }
	    }

	    if (p >= block_end) return false; // no CG tag

	    if (String.fromCharCode(ba[p + 2]) !== 'B' || String.fromCharCode(ba[p + 3]) !== 'I') return false; // not of type B,I
	    // now we know the real CIGAR length and its offset in the binary array

	    var cigar_len = readInt$1(ba, p + 4);
	    var cigar_offset = p + 8; // 4 for "CGBI" and 4 for length

	    if (cigar_offset + cigar_len * 4 > block_end) return false; // out of bound
	    // decode CIGAR

	    var cigar = '';
	    var lengthOnRef = 0;
	    cigarArray.length = 0; // empty the old array

	    p = cigar_offset;

	    for (var k = 0; k < cigar_len; ++k, p += 4) {
	      var cigop = readInt$1(ba, p);
	      var opLen = cigop >> 4;
	      var opLtr = CIGAR_DECODER[cigop & 0xf];
	      if (opLtr === 'M' || opLtr === 'EQ' || opLtr === 'X' || opLtr === 'D' || opLtr === 'N' || opLtr === '=') lengthOnRef += opLen;
	      cigar = cigar + opLen + opLtr;
	      cigarArray.push({
	        len: opLen,
	        ltr: opLtr
	      });
	    } // update alignment record. We are not updating bin, as apparently it is not used.


	    al.cigar = cigar;
	    al.lengthOnRef = lengthOnRef;
	    return true;
	  },

	  /**
	   *
	   * @param ba                 bytes to decode as an UInt8Array
	   * @param offset             offset position of ba array to start decoding
	   * @param alignmentContainer container to receive the decoded alignments
	   * @param min                minimum genomic position
	   * @param max                maximum genomic position
	   * @param chrIdx             chromosome index
	   * @param chrNames            array of chromosome names
	   * @param filter             a BamFilter object
	   *
	   * @return true if we have moved beyond the right end of the genomic range.
	   */
	  decodeBamRecords: function decodeBamRecords(ba, offset, alignmentContainer, chrNames, chrIdx, min, max, filter) {
	    while (offset < ba.length) {
	      var blockSize = readInt$1(ba, offset);
	      var blockEnd = offset + blockSize + 4;
	      var alignment = new BamAlignment();
	      var refID = readInt$1(ba, offset + 4);
	      var pos = readInt$1(ba, offset + 8);

	      if (blockEnd > ba.length) {
	        return;
	      }

	      if (refID < 0) {
	        offset = blockEnd;
	        continue; // unmapped read
	      } else if (chrIdx !== undefined && (refID > chrIdx || pos > max)) {
	        return true; // off right edge, we're done
	      } else if (chrIdx !== undefined && refID < chrIdx) {
	        offset = blockEnd;
	        continue; // ref ID to left of start, not sure this is possible
	      }

	      var bin_mq_nl = readInt$1(ba, offset + 12);
	      var mq = (bin_mq_nl & 0xff00) >> 8;
	      var nl = bin_mq_nl & 0xff;
	      var flag_nc = readInt$1(ba, offset + 16);
	      var flag = (flag_nc & 0xffff0000) >> 16;
	      var nc = flag_nc & 0xffff;
	      var lseq = readInt$1(ba, offset + 20);
	      var mateChrIdx = readInt$1(ba, offset + 24);
	      var matePos = readInt$1(ba, offset + 28);
	      var tlen = readInt$1(ba, offset + 32);
	      var readName = [];

	      for (var j = 0; j < nl - 1; ++j) {
	        readName.push(String.fromCharCode(ba[offset + 36 + j]));
	      }

	      readName = readName.join('');
	      var lengthOnRef = 0;
	      var cigar = '';
	      var p = offset + 36 + nl;
	      var cigarArray = []; // concatenate M,=,EQ,and X

	      var lastCigRecord = void 0;

	      for (var c = 0; c < nc; ++c) {
	        var cigop = readInt$1(ba, p);
	        var opLen = cigop >> 4;
	        var opLtr = CIGAR_DECODER[cigop & 0xf];
	        if (opLtr === 'M' || opLtr === 'EQ' || opLtr === 'X' || opLtr === 'D' || opLtr === 'N' || opLtr === '=') lengthOnRef += opLen;
	        cigar = cigar + opLen + opLtr;
	        p += 4; // if(mOperators.has(opLtr) && mOperators.has(lastCigRecord.ltr)) {
	        //     lastCigRecord.len += opLen;
	        //     lastCigRecord.ltr = 'M'
	        // }
	        // else {

	        lastCigRecord = {
	          len: opLen,
	          ltr: opLtr
	        };
	        cigarArray.push(lastCigRecord); //}
	      }

	      alignment.chr = chrNames[refID];
	      alignment.start = pos;
	      alignment.flags = flag;
	      alignment.strand = !(flag & READ_STRAND_FLAG$1);
	      alignment.readName = readName;
	      alignment.cigar = cigar;
	      alignment.lengthOnRef = lengthOnRef;
	      alignment.fragmentLength = tlen;
	      alignment.mq = mq;
	      BamUtils.bam_tag2cigar(ba, blockEnd, p, lseq, alignment, cigarArray);
	      alignment.end = alignment.start + alignment.lengthOnRef;

	      if (alignment.end < min) {
	        offset = blockEnd;
	        continue;
	      } // Record out-of-range "to the left", skip to next one


	      var seq = [];
	      var seqBytes = lseq + 1 >> 1;

	      for (var _j = 0; _j < seqBytes; ++_j) {
	        var sb = ba[p + _j];
	        seq.push(SEQ_DECODER[(sb & 0xf0) >> 4]);
	        seq.push(SEQ_DECODER[sb & 0x0f]);
	      }

	      seq = seq.slice(0, lseq).join(''); // seq might have one extra character (if lseq is an odd number)

	      p += seqBytes;
	      var qualArray = [];

	      for (var _j2 = 0; _j2 < lseq; ++_j2) {
	        qualArray.push(ba[p + _j2]);
	      }

	      p += lseq;

	      if (mateChrIdx >= 0) {
	        alignment.mate = {
	          chr: chrNames[mateChrIdx],
	          position: matePos,
	          strand: !(flag & MATE_STRAND_FLAG$1)
	        };
	      }

	      alignment.seq = seq;
	      alignment.qual = qualArray;
	      alignment.tagBA = new Uint8Array(ba.buffer.slice(p, blockEnd)); // decode these on demand

	      this.setPairOrientation(alignment);

	      if (undefined === filter || filter.pass(alignment)) {
	        makeBlocks(alignment, cigarArray);
	        alignmentContainer.push(alignment);
	      }

	      offset = blockEnd;
	    }
	  },
	  decodeSamRecords: function decodeSamRecords(sam, alignmentContainer, chr, min, max, filter) {
	    var lines, i, j, len, tokens, qualString, rnext, lengthOnRef, alignment, cigarArray, started;
	    lines = splitLines(sam);
	    len = lines.length;
	    started = false;

	    for (i = 0; i < len; i++) {
	      tokens = lines[i].split('\t');
	      alignment = new BamAlignment();
	      alignment.chr = tokens[2];
	      alignment.start = Number.parseInt(tokens[3]) - 1;
	      alignment.flags = Number.parseInt(tokens[1]);
	      alignment.readName = tokens[0];
	      alignment.strand = !(alignment.flags & READ_STRAND_FLAG$1);
	      alignment.mq = Number.parseInt(tokens[4]);
	      alignment.cigar = tokens[5];
	      alignment.fragmentLength = Number.parseInt(tokens[8]);
	      alignment.seq = tokens[9];
	      if (alignment.chr === '*' || !alignment.isMapped()) continue; // Unmapped

	      if (alignment.chr !== chr) {
	        if (started) break; // Off the right edge, we're done
	        else continue; // Possibly to the left, skip but keep looping
	      } else if (alignment.start > max) {
	        break; // off right edge, we're done
	      }

	      lengthOnRef = 0;
	      cigarArray = buildOperators(alignment.cigar);
	      cigarArray.forEach(function (op) {
	        var opLen = op.len;
	        var opLtr = op.ltr;
	        if (opLtr === 'M' || opLtr === 'EQ' || opLtr === 'X' || opLtr === 'D' || opLtr === 'N' || opLtr === '=') lengthOnRef += opLen;
	      });
	      alignment.lengthOnRef = lengthOnRef; // TODO for lh3: parse the CG:B,I tag in SAM here

	      if (alignment.start + lengthOnRef < min) {
	        continue; // To the left, skip and continue
	      }

	      qualString = tokens[10];
	      alignment.qual = [];

	      for (j = 0; j < qualString.length; j++) {
	        alignment.qual[j] = qualString.charCodeAt(j) - 33;
	      }

	      alignment.tagDict = tokens.length < 11 ? {} : decodeSamTags(tokens.slice(11));

	      if (alignment.isMateMapped()) {
	        rnext = tokens[6];
	        alignment.mate = {
	          chr: rnext === '=' ? alignment.chr : rnext,
	          position: Number.parseInt(tokens[7]),
	          strand: !(alignment.flags & MATE_STRAND_FLAG$1)
	        };
	      }

	      this.setPairOrientation(alignment);

	      if (undefined === filter || filter.pass(alignment)) {
	        makeBlocks(alignment, cigarArray);
	        alignmentContainer.push(alignment);
	      }
	    }
	  },
	  setReaderDefaults: function setReaderDefaults(reader, config) {
	    reader.filter = new BamFilter(config.filter);

	    if (config.readgroup) {
	      reader.filter.readgroups = new Set([config.readgroup]);
	    }

	    reader.alleleFreqThreshold = config.alleleFreqThreshold === undefined ? DEFAULT_ALLELE_FREQ_THRESHOLD : config.alleleFreqThreshold;
	    reader.samplingWindowSize = config.samplingWindowSize === undefined ? DEFAULT_SAMPLING_WINDOW_SIZE : config.samplingWindowSize;
	    reader.samplingDepth = config.samplingDepth === undefined ? DEFAULT_SAMPLING_DEPTH : config.samplingDepth;

	    if (reader.samplingDepth > MAXIMUM_SAMPLING_DEPTH) {
	      reader.samplingDepth = MAXIMUM_SAMPLING_DEPTH;
	    }

	    if (config.viewAsPairs) {
	      reader.pairsSupported = true;
	    } else {
	      reader.pairsSupported = config.pairsSupported === undefined ? true : config.pairsSupported;
	    }
	  },
	  setPairOrientation: function setPairOrientation(alignment) {
	    if (alignment.isMapped() && alignment.mate && alignment.isMateMapped() && alignment.mate.chr === alignment.chr) {
	      var s1 = alignment.strand ? 'F' : 'R';
	      var mate = alignment.mate;
	      var s2 = mate.strand ? 'F' : 'R';
	      var o1 = ' ';
	      var o2 = ' ';

	      if (alignment.isFirstOfPair()) {
	        o1 = '1';
	        o2 = '2';
	      } else if (alignment.isSecondOfPair()) {
	        o1 = '2';
	        o2 = '1';
	      }

	      var tmp = [];
	      var isize = alignment.fragmentLength;
	      var estReadLen = alignment.end - alignment.start;

	      if (isize === 0) {
	        //isize not recorded.  Need to estimate.  This calculation was validated against an Illumina
	        // -> <- library bam.
	        var estMateEnd = alignment.start < mate.position ? mate.position + estReadLen : mate.position - estReadLen;
	        isize = estMateEnd - alignment.start;
	      } //if (isize > estReadLen) {


	      if (isize > 0) {
	        tmp[0] = s1;
	        tmp[1] = o1;
	        tmp[2] = s2;
	        tmp[3] = o2;
	      } else {
	        tmp[2] = s1;
	        tmp[3] = o1;
	        tmp[0] = s2;
	        tmp[1] = o2;
	      } // }


	      alignment.pairOrientation = tmp.join('');
	    }
	  }
	};
	/**
	 * Split the alignment record into blocks as specified in the cigarArray.  Each aligned block contains
	 * its portion of the read sequence and base quality strings.  A read sequence or base quality string
	 * of "*" indicates the value is not recorded.  In all other cases the length of the block sequence (block.seq)
	 * and quality string (block.qual) must == the block length.
	 *
	 * @param alignment
	 * @param cigarArray
	 * @returns array of blocks
	 */

	function makeBlocks(alignment, cigarArray) {
	  var blocks = [];
	  var insertions;
	  var gaps;
	  var seqOffset = 0;
	  var pos = alignment.start;
	  alignment.scStart = alignment.start;
	  alignment.scLengthOnRef = alignment.lengthOnRef;

	  var _iterator = _createForOfIteratorHelper(cigarArray),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var c = _step.value;
	      var scPos = void 0;

	      switch (c.ltr) {
	        case 'H':
	          break;
	        // ignore hard clips

	        case 'P':
	          break;
	        // ignore pads

	        case 'S':
	          scPos = pos;
	          alignment.scLengthOnRef += c.len;

	          if (blocks.length === 0) {
	            alignment.scStart -= c.len;
	            scPos -= c.len;
	          }

	          blocks.push(new AlignmentBlock({
	            start: scPos,
	            seqOffset: seqOffset,
	            len: c.len,
	            type: 'S'
	          }));
	          seqOffset += c.len;
	          break;
	        // soft clip read bases

	        case 'N':
	        case 'D':
	          if (gaps === undefined) {
	            gaps = [];
	          }

	          gaps.push({
	            start: pos,
	            len: c.len,
	            type: c.ltr
	          });
	          pos += c.len;
	          break;

	        case 'I':
	          if (insertions === undefined) {
	            insertions = [];
	          }

	          insertions.push(new AlignmentBlock({
	            start: pos,
	            len: c.len,
	            seqOffset: seqOffset,
	            type: 'I'
	          }));
	          seqOffset += c.len;
	          break;

	        case 'M':
	        case 'EQ':
	        case '=':
	        case 'X':
	          blocks.push(new AlignmentBlock({
	            start: pos,
	            seqOffset: seqOffset,
	            len: c.len,
	            type: 'M'
	          }));
	          seqOffset += c.len;
	          pos += c.len;
	          break;

	        default:
	          void 0;
	      }
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }

	  alignment.blocks = blocks;
	  alignment.insertions = insertions;
	  alignment.gaps = gaps;
	}

	function readInt$1(ba, offset) {
	  return ba[offset + 3] << 24 | ba[offset + 2] << 16 | ba[offset + 1] << 8 | ba[offset];
	}
	/**
	 * Build a list of cigar operators from a cigarString.  Removes padding operators and concatenates consecutive
	 * operators of the same type
	 *
	 * @param cigarString
	 * @return
	 */


	function buildOperators(cigarString) {
	  var operators, buffer, i, len, prevOp, next, op, nBases;
	  operators = [];
	  buffer = []; // Create list of cigar operators

	  prevOp = null;
	  len = cigarString.length;

	  for (i = 0; i < len; i++) {
	    next = cigarString.charAt(i);

	    if (isDigit(next)) {
	      buffer.push(next);
	    } else {
	      op = next;
	      nBases = Number.parseInt(buffer.join(''));
	      buffer = [];

	      if (prevOp !== null && prevOp.ltr === op) {
	        prevOp.len += nBases;
	      } else {
	        prevOp = {
	          len: nBases,
	          ltr: op
	        };
	        operators.push(prevOp);
	      }
	    }
	  }

	  return operators;
	}

	function isDigit(a) {
	  var charCode = a.charCodeAt(0);
	  return charCode >= 48 && charCode <= 57; // 0-9
	}

	function decodeSamTags(tags) {
	  var tagDict = {};
	  tags.forEach(function (tag) {
	    var tokens = tag.split(':');
	    tagDict[tokens[0]] = tokens[2];
	  });
	  return tagDict;
	}

	var isString$4 = isString;
	/**
	 * Class for reading a bam file
	 *
	 * @param config
	 * @constructor
	 */

	var BamReaderNonIndexed = /*#__PURE__*/function () {
	  function BamReaderNonIndexed(config, genome) {
	    _classCallCheck(this, BamReaderNonIndexed);

	    this.config = config;
	    this.genome = genome;
	    this.bamPath = config.url;
	    this.isDataUri = isString$4(config.url) && config.url.startsWith("data:");
	    BamUtils.setReaderDefaults(this, config);
	  } // Return an alignment container


	  _createClass(BamReaderNonIndexed, [{
	    key: "readAlignments",
	    value: function () {
	      var _readAlignments = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, bpStart, bpEnd) {
	        var genome, header, queryChr, qAlignments, alignmentContainer, _iterator, _step, a, data, unc, arrayBuffer, _unc, parseAlignments, fetchAlignments;

	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                fetchAlignments = function _fetchAlignments(chr, bpStart, bpEnd) {
	                  var header, queryChr, qAlignments, alignmentContainer;
	                  header = this.header;
	                  queryChr = header.chrAliasTable.hasOwnProperty(chr) ? header.chrAliasTable[chr] : chr;
	                  qAlignments = this.alignmentCache.queryFeatures(queryChr, bpStart, bpEnd);
	                  alignmentContainer = new AlignmentContainer(chr, bpStart, bpEnd, this.samplingWindowSize, this.samplingDepth, this.pairsSupported);

	                  var _iterator2 = _createForOfIteratorHelper(qAlignments),
	                      _step2;

	                  try {
	                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	                      var _a = _step2.value;
	                      alignmentContainer.push(_a);
	                    }
	                  } catch (err) {
	                    _iterator2.e(err);
	                  } finally {
	                    _iterator2.f();
	                  }

	                  alignmentContainer.finish();
	                  return alignmentContainer;
	                };

	                parseAlignments = function _parseAlignments(data) {
	                  var alignments = [];
	                  this.header = BamUtils.decodeBamHeader(data);
	                  BamUtils.decodeBamRecords(data, this.header.size, alignments, this.header.chrNames);
	                  this.alignmentCache = new FeatureCache(alignments, genome);
	                };

	                genome = this.genome;

	                if (!this.alignmentCache) {
	                  _context.next = 14;
	                  break;
	                }

	                header = this.header;
	                queryChr = header.chrAliasTable.hasOwnProperty(chr) ? header.chrAliasTable[chr] : chr;
	                qAlignments = this.alignmentCache.queryFeatures(queryChr, bpStart, bpEnd);
	                alignmentContainer = new AlignmentContainer(chr, bpStart, bpEnd, this.samplingWindowSize, this.samplingDepth, this.pairsSupported, this.alleleFreqThreshold);
	                _iterator = _createForOfIteratorHelper(qAlignments);

	                try {
	                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
	                    a = _step.value;
	                    alignmentContainer.push(a);
	                  }
	                } catch (err) {
	                  _iterator.e(err);
	                } finally {
	                  _iterator.f();
	                }

	                alignmentContainer.finish();
	                return _context.abrupt("return", alignmentContainer);

	              case 14:
	                if (!this.isDataUri) {
	                  _context.next = 21;
	                  break;
	                }

	                data = decodeDataURI$1(this.bamPath);
	                unc = unbgzf(data.buffer);
	                parseAlignments.call(this, unc);
	                return _context.abrupt("return", fetchAlignments.call(this, chr, bpStart, bpEnd));

	              case 21:
	                _context.next = 23;
	                return igvxhr.loadArrayBuffer(this.bamPath, buildOptions(this.config));

	              case 23:
	                arrayBuffer = _context.sent;
	                _unc = unbgzf(arrayBuffer);
	                parseAlignments.call(this, _unc);
	                return _context.abrupt("return", fetchAlignments.call(this, chr, bpStart, bpEnd));

	              case 27:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function readAlignments(_x, _x2, _x3) {
	        return _readAlignments.apply(this, arguments);
	      }

	      return readAlignments;
	    }()
	  }]);

	  return BamReaderNonIndexed;
	}();

	function decodeDataURI$1(dataURI) {
	  var split = dataURI.split(',');
	  var info = split[0].split(':')[1];
	  var dataString = split[1];

	  if (info.indexOf('base64') >= 0) {
	    dataString = atob(dataString);
	  } else {
	    dataString = decodeURI(dataString);
	  }

	  var bytes = new Uint8Array(dataString.length);

	  for (var i = 0; i < dataString.length; i++) {
	    bytes[i] = dataString.charCodeAt(i);
	  }

	  return bytes;
	}

	/**
	 * Class for reading a bam file
	 *
	 * @param config
	 * @constructor
	 */

	var BamReader = /*#__PURE__*/function () {
	  function BamReader(config, genome) {
	    _classCallCheck(this, BamReader);

	    this.config = config;
	    this.genome = genome;
	    this.bamPath = config.url; // Todo - deal with Picard convention.  WHY DOES THERE HAVE TO BE 2?

	    this.baiPath = config.indexURL;

	    if (!this.baiPath && config.indexed !== false && !(this.bamPath instanceof File)) {
	      this.baiPath = inferIndexPath(this.bamPath, "bai");
	      console.error("Warning: no indexURL specified for ".concat(this.config.url, ".  Guessing ").concat(this.baiPath));
	    }

	    BamUtils.setReaderDefaults(this, config);
	  }

	  _createClass(BamReader, [{
	    key: "readAlignments",
	    value: function () {
	      var _readAlignments = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, bpStart, bpEnd) {
	        var chrToIndex, queryChr, chrId, alignmentContainer, bamIndex, chunks, _iterator, _step, c, lastBlockSize, bsizeOptions, abuffer, fetchMin, fetchMax, range, compressed, ba, done;

	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return this.getChrIndex();

	              case 2:
	                chrToIndex = _context.sent;
	                queryChr = this.chrAliasTable.hasOwnProperty(chr) ? this.chrAliasTable[chr] : chr;
	                chrId = chrToIndex[queryChr];
	                alignmentContainer = new AlignmentContainer(chr, bpStart, bpEnd, this.config.samplingWindowSize, this.config.samplingDepth, this.config.pairsSupported, this.config.alleleFreqThreshold);

	                if (!(chrId === undefined)) {
	                  _context.next = 10;
	                  break;
	                }

	                return _context.abrupt("return", alignmentContainer);

	              case 10:
	                _context.next = 12;
	                return this.getIndex();

	              case 12:
	                bamIndex = _context.sent;
	                chunks = bamIndex.blocksForRange(chrId, bpStart, bpEnd);

	                if (!(!chunks || chunks.length === 0)) {
	                  _context.next = 16;
	                  break;
	                }

	                return _context.abrupt("return", alignmentContainer);

	              case 16:
	                _iterator = _createForOfIteratorHelper(chunks);
	                _context.prev = 18;

	                _iterator.s();

	              case 20:
	                if ((_step = _iterator.n()).done) {
	                  _context.next = 45;
	                  break;
	                }

	                c = _step.value;
	                lastBlockSize = void 0;

	                if (!(c.maxv.offset === 0)) {
	                  _context.next = 27;
	                  break;
	                }

	                lastBlockSize = 0; // Don't need to read the last block.

	                _context.next = 32;
	                break;

	              case 27:
	                bsizeOptions = buildOptions(this.config, {
	                  range: {
	                    start: c.maxv.block,
	                    size: 26
	                  }
	                });
	                _context.next = 30;
	                return igvxhr.loadArrayBuffer(this.bamPath, bsizeOptions);

	              case 30:
	                abuffer = _context.sent;
	                lastBlockSize = bgzBlockSize(abuffer);

	              case 32:
	                fetchMin = c.minv.block;
	                fetchMax = c.maxv.block + lastBlockSize;
	                range = {
	                  start: fetchMin,
	                  size: fetchMax - fetchMin + 1
	                };
	                _context.next = 37;
	                return igvxhr.loadArrayBuffer(this.bamPath, buildOptions(this.config, {
	                  range: range
	                }));

	              case 37:
	                compressed = _context.sent;
	                ba = unbgzf(compressed); //new Uint8Array(unbgzf(compressed)); //, c.maxv.block - c.minv.block + 1));

	                done = BamUtils.decodeBamRecords(ba, c.minv.offset, alignmentContainer, this.indexToChr, chrId, bpStart, bpEnd, this.filter);

	                if (!done) {
	                  _context.next = 42;
	                  break;
	                }

	                return _context.abrupt("break", 45);

	              case 42:

	              case 43:
	                _context.next = 20;
	                break;

	              case 45:
	                _context.next = 50;
	                break;

	              case 47:
	                _context.prev = 47;
	                _context.t0 = _context["catch"](18);

	                _iterator.e(_context.t0);

	              case 50:
	                _context.prev = 50;

	                _iterator.f();

	                return _context.finish(50);

	              case 53:
	                alignmentContainer.finish();
	                return _context.abrupt("return", alignmentContainer);

	              case 55:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this, [[18, 47, 50, 53]]);
	      }));

	      function readAlignments(_x, _x2, _x3) {
	        return _readAlignments.apply(this, arguments);
	      }

	      return readAlignments;
	    }()
	  }, {
	    key: "getHeader",
	    value: function () {
	      var _getHeader = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	        var genome, index, len, bsizeOptions, abuffer, bsize, options;
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                if (this.header) {
	                  _context2.next = 19;
	                  break;
	                }

	                genome = this.genome;
	                _context2.next = 4;
	                return this.getIndex();

	              case 4:
	                index = _context2.sent;

	                if (!index.firstAlignmentBlock) {
	                  _context2.next = 14;
	                  break;
	                }

	                bsizeOptions = buildOptions(this.config, {
	                  range: {
	                    start: index.firstAlignmentBlock,
	                    size: 26
	                  }
	                });
	                _context2.next = 9;
	                return igvxhr.loadArrayBuffer(this.bamPath, bsizeOptions);

	              case 9:
	                abuffer = _context2.sent;
	                bsize = bgzBlockSize(abuffer);
	                len = index.firstAlignmentBlock + bsize; // Insure we get the complete compressed block containing the header

	                _context2.next = 15;
	                break;

	              case 14:
	                len = 64000;

	              case 15:
	                options = buildOptions(this.config, {
	                  range: {
	                    start: 0,
	                    size: len
	                  }
	                });
	                _context2.next = 18;
	                return BamUtils.readHeader(this.bamPath, options, genome);

	              case 18:
	                this.header = _context2.sent;

	              case 19:
	                return _context2.abrupt("return", this.header);

	              case 20:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function getHeader() {
	        return _getHeader.apply(this, arguments);
	      }

	      return getHeader;
	    }()
	  }, {
	    key: "getIndex",
	    value: function () {
	      var _getIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	        var genome;
	        return regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                genome = this.genome;

	                if (this.index) {
	                  _context3.next = 5;
	                  break;
	                }

	                _context3.next = 4;
	                return loadIndex(this.baiPath, this.config, genome);

	              case 4:
	                this.index = _context3.sent;

	              case 5:
	                return _context3.abrupt("return", this.index);

	              case 6:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function getIndex() {
	        return _getIndex.apply(this, arguments);
	      }

	      return getIndex;
	    }()
	  }, {
	    key: "getChrIndex",
	    value: function () {
	      var _getChrIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
	        var header;
	        return regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                if (!this.chrToIndex) {
	                  _context4.next = 4;
	                  break;
	                }

	                return _context4.abrupt("return", this.chrToIndex);

	              case 4:
	                _context4.next = 6;
	                return this.getHeader();

	              case 6:
	                header = _context4.sent;
	                this.chrToIndex = header.chrToIndex;
	                this.indexToChr = header.chrNames;
	                this.chrAliasTable = header.chrAliasTable;
	                return _context4.abrupt("return", this.chrToIndex);

	              case 11:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      function getChrIndex() {
	        return _getChrIndex.apply(this, arguments);
	      }

	      return getChrIndex;
	    }()
	  }]);

	  return BamReader;
	}();

	var ShardedBamReader = /*#__PURE__*/function () {
	  function ShardedBamReader(config, genome) {
	    _classCallCheck(this, ShardedBamReader);

	    this.config = config;
	    this.genome = genome;
	    var bamReaders = {};
	    var chrAliasTable = {};
	    config.sources.sequences.forEach(function (chr) {
	      bamReaders[chr] = null; // Placeholder

	      if (genome) {
	        var alias = genome.getChromosomeName(chr);
	        chrAliasTable[alias] = chr;
	      }
	    });
	    this.chrAliasTable = chrAliasTable;
	    this.bamReaders = bamReaders;
	    BamUtils.setReaderDefaults(this, config);
	  }

	  _createClass(ShardedBamReader, [{
	    key: "readAlignments",
	    value: function () {
	      var _readAlignments = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, start, end) {
	        var genome, self, queryChr, reader, tmp, bamConfig;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                genome = this.genome;
	                self = this;
	                queryChr = self.chrAliasTable.hasOwnProperty(chr) ? self.chrAliasTable[chr] : chr;

	                if (!(!this.bamReaders.hasOwnProperty(queryChr) || "none" === this.bamReaders[queryChr])) {
	                  _context.next = 7;
	                  break;
	                }

	                return _context.abrupt("return", Promise.resolve(new AlignmentContainer(chr, start, end)));

	              case 7:
	                reader = self.bamReaders[queryChr];

	                if (!reader) {
	                  tmp = {
	                    url: self.config.sources.url.replace("$CHR", queryChr)
	                  };

	                  if (self.config.sources.indexURL) {
	                    tmp.indexURL = self.config.sources.indexURL.replace("$CHR", queryChr);
	                  }

	                  bamConfig = Object.assign(self.config, tmp);
	                  reader = new BamReader(bamConfig);
	                  self.bamReaders[queryChr] = reader;
	                }

	                return _context.abrupt("return", reader.readAlignments(queryChr, start, end).catch(function (error) {
	                  console.error(error);
	                  var str = "Error reading BAM or index file for: ".concat(tmp ? tmp.url : '');
	                  Alert.presentAlert(new Error(str));
	                  self.bamReaders[queryChr] = "none";
	                  return new AlignmentContainer(chr, start, end); // Empty alignment container
	                }));

	              case 10:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function readAlignments(_x, _x2, _x3) {
	        return _readAlignments.apply(this, arguments);
	      }

	      return readAlignments;
	    }()
	  }]);

	  return ShardedBamReader;
	}();

	/**
	 * Class for reading bam records from an igv.js-flask server backed by pysam.  Deprecated.
	 *
	 * @param config
	 * @constructor
	 */

	var BamWebserviceReader = function BamWebserviceReader(config, genome) {
	  this.config = config;
	  this.genome = genome;
	  BamUtils.setReaderDefaults(this, config);
	}; // Example http://localhost:5000/alignments/?reference=/Users/jrobinso/hg19mini.fa&file=/Users/jrobinso/cram_with_crai_index.cram&region=1:100-2000


	BamWebserviceReader.prototype.readAlignments = function (chr, bpStart, bpEnd) {
	  var self = this;
	  return getHeader.call(self).then(function (header) {
	    var queryChr, url;
	    queryChr = header.chrAliasTable.hasOwnProperty(chr) ? header.chrAliasTable[chr] : chr;
	    url = self.config.url + "?reference=" + self.config.referenceFile + "&file=" + self.config.alignmentFile + "" + "&region=" + queryChr + ":" + bpStart + "-" + bpEnd;
	    return igvxhr.loadString(url, buildOptions(self.config)).then(function (sam) {
	      var alignmentContainer, chrId;
	      chrId = header.chrToIndex[queryChr];
	      alignmentContainer = new AlignmentContainer(chr, bpStart, bpEnd, self.samplingWindowSize, self.samplingDepth, self.pairsSupported, self.alleleFreqThreshold);
	      BamUtils.decodeSamRecords(sam, alignmentContainer, queryChr, bpStart, bpEnd, self.filter);
	      return alignmentContainer;
	    });
	  });
	}; // Example  http://localhost:5000/alignments/?reference=/Users/jrobinso/hg19mini.fa&file=/Users/jrobinso/cram_with_crai_index.cram&options=-b%20-H


	function getHeader() {
	  var self = this;
	  var genome = this.genome;

	  if (this.header) {
	    return Promise.resolve(this.header);
	  } else {
	    var url = this.config.url + "?file=" + this.config.alignmentFile + "&options=-b,-H";
	    var options = buildOptions(this.config);
	    return BamUtils.readHeader(url, options, genome).then(function (header) {
	      self.header = header;
	      return header;
	    });
	  }
	}

	var HtsgetReader = /*#__PURE__*/function () {
	  function HtsgetReader(config, genome) {
	    _classCallCheck(this, HtsgetReader);

	    this.config = config;
	    this.genome = genome;
	    BamUtils.setReaderDefaults(this, config);
	  }

	  _createClass(HtsgetReader, [{
	    key: "readAlignments",
	    value: function () {
	      var _readAlignments = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, start, end, retryCount) {
	        var genome, queryChr, endpointURL, url, data, dataArr, compressedData, unc, ba, chrIdx, alignmentContainer;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (!(this.config.format && this.config.format.toUpperCase() !== "BAM")) {
	                  _context.next = 2;
	                  break;
	                }

	                throw Error("htsget format ".concat(this.config.format, " is not supported"));

	              case 2:
	                genome = this.genome;

	                if (this.header) {
	                  queryChr = this.header.chrAliasTable.hasOwnProperty(chr) ? this.header.chrAliasTable[chr] : chr;
	                } else {
	                  queryChr = chr;
	                }

	                if (!this.config.url) {
	                  endpointURL = this.config.endpoint + '/reads/'; // Backward compatibility
	                } else {
	                  endpointURL = this.config.url + this.config.endpoint;
	                }

	                url = endpointURL + this.config.id + '?format=BAM' + '&referenceName=' + queryChr + '&start=' + start + '&end=' + end;
	                _context.next = 8;
	                return igvxhr.loadJson(url, this.config);

	              case 8:
	                data = _context.sent;
	                _context.next = 11;
	                return loadUrls(data.htsget.urls);

	              case 11:
	                dataArr = _context.sent;
	                compressedData = concatArrays(dataArr); // In essence a complete bam file

	                unc = unbgzf(compressedData.buffer);
	                ba = unc;
	                this.header = BamUtils.decodeBamHeader(ba, genome);
	                chrIdx = this.header.chrToIndex[chr];
	                alignmentContainer = new AlignmentContainer(chr, start, end, this.samplingWindowSize, this.samplingDepth, this.pairsSupported, this.alleleFreqThreshold);
	                BamUtils.decodeBamRecords(ba, this.header.size, alignmentContainer, this.header.chrNames, chrIdx, start, end);
	                alignmentContainer.finish();

	                if (!(alignmentContainer.alignments.length === 0)) {
	                  _context.next = 29;
	                  break;
	                }

	                if (!(chrIdx === undefined && this.header.chrAliasTable.hasOwnProperty(chr) && !retryCount)) {
	                  _context.next = 26;
	                  break;
	                }

	                queryChr = this.header.chrAliasTable[chr];
	                return _context.abrupt("return", this.readAlignments(queryChr, start, end, 1));

	              case 26:
	                return _context.abrupt("return", alignmentContainer);

	              case 27:
	                _context.next = 30;
	                break;

	              case 29:
	                return _context.abrupt("return", alignmentContainer);

	              case 30:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function readAlignments(_x, _x2, _x3, _x4) {
	        return _readAlignments.apply(this, arguments);
	      }

	      return readAlignments;
	    }()
	  }]);

	  return HtsgetReader;
	}();

	function loadUrls(_x5) {
	  return _loadUrls.apply(this, arguments);
	}
	/**
	 * Concatenate a list of Uint8Arrays
	 * @param arrays
	 */


	function _loadUrls() {
	  _loadUrls = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(urls) {
	    var promiseArray;
	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            promiseArray = [];
	            urls.forEach(function (urlData) {
	              if (urlData.url.startsWith('data:')) {
	                // this is a data-uri
	                promiseArray.push(Promise.resolve(dataUriToBytes(urlData.url)));
	              } else {
	                var options = {};

	                if (urlData.headers) {
	                  options.headers = urlData.headers;

	                  if (options.headers.hasOwnProperty("referer")) {
	                    delete options.headers["referer"];
	                  }
	                }

	                promiseArray.push(new Promise(function (fulfill, reject) {
	                  igvxhr.loadArrayBuffer(urlData.url, options).then(function (buffer) {
	                    fulfill(new Uint8Array(buffer));
	                  });
	                }));
	              }
	            });
	            return _context2.abrupt("return", Promise.all(promiseArray));

	          case 3:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	  return _loadUrls.apply(this, arguments);
	}

	function concatArrays(arrays) {
	  var len = 0;
	  arrays.forEach(function (a) {
	    len += a.length;
	  });
	  var offset = 0;
	  var newArray = new Uint8Array(len);
	  arrays.forEach(function (a) {
	    newArray.set(a, offset);
	    offset += a.length;
	  });
	  return newArray;
	}

	function dataUriToBytes(dataUri) {
	  var split = dataUri.split(',');
	  var info = split[0].split(':')[1];
	  var dataString = split[1];

	  if (info.indexOf('base64') >= 0) {
	    dataString = atob(dataString);
	  } else {
	    dataString = decodeURI(dataString);
	  }

	  var bytes = new Uint8Array(dataString.length);

	  for (var i = 0; i < dataString.length; i++) {
	    bytes[i] = dataString.charCodeAt(i);
	  }

	  return bytes;
	}

	// https://tc39.github.io/ecma262/#sec-map-objects


	var es_map = collection('Map', function (init) {
	  return function Map() {
	    return init(this, arguments.length ? arguments[0] : undefined);
	  };
	}, collectionStrong);

	// https://tc39.github.io/ecma262/#sec-symbol.hasinstance

	defineWellKnownSymbol('hasInstance');

	// https://tc39.github.io/ecma262/#sec-symbol.species

	defineWellKnownSymbol('species');

	// https://tc39.github.io/ecma262/#sec-symbol.tostringtag

	defineWellKnownSymbol('toStringTag');

	var $some$1 = arrayIteration.some;
	var STRICT_METHOD$5 = arrayMethodIsStrict('some');
	var USES_TO_LENGTH$a = arrayMethodUsesToLength('some'); // `Array.prototype.some` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.some

	_export({
	  target: 'Array',
	  proto: true,
	  forced: !STRICT_METHOD$5 || !USES_TO_LENGTH$a
	}, {
	  some: function some(callbackfn
	  /* , thisArg */
	  ) {
	    return $some$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.github.io/ecma262/#sec-get-array-@@species

	setSpecies('Array');

	var ARRAY_BUFFER$1 = 'ArrayBuffer';
	var ArrayBuffer$2 = arrayBuffer[ARRAY_BUFFER$1];
	var NativeArrayBuffer$1 = global_1[ARRAY_BUFFER$1]; // `ArrayBuffer` constructor
	// https://tc39.github.io/ecma262/#sec-arraybuffer-constructor

	_export({
	  global: true,
	  forced: NativeArrayBuffer$1 !== ArrayBuffer$2
	}, {
	  ArrayBuffer: ArrayBuffer$2
	});
	setSpecies(ARRAY_BUFFER$1);

	var HAS_INSTANCE = wellKnownSymbol('hasInstance');
	var FunctionPrototype$1 = Function.prototype; // `Function.prototype[@@hasInstance]` method
	// https://tc39.github.io/ecma262/#sec-function.prototype-@@hasinstance

	if (!(HAS_INSTANCE in FunctionPrototype$1)) {
	  objectDefineProperty.f(FunctionPrototype$1, HAS_INSTANCE, {
	    value: function (O) {
	      if (typeof this != 'function' || !isObject(O)) return false;
	      if (!isObject(this.prototype)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

	      while (O = objectGetPrototypeOf(O)) if (this.prototype === O) return true;

	      return false;
	    }
	  });
	}

	// https://tc39.github.io/ecma262/#sec-json-@@tostringtag

	setToStringTag(global_1.JSON, 'JSON', true);

	// https://tc39.github.io/ecma262/#sec-math-@@tostringtag

	setToStringTag(Math, 'Math', true);

	var onFreeze = internalMetadata.onFreeze;
	var nativeFreeze = Object.freeze;
	var FAILS_ON_PRIMITIVES$3 = fails(function () {
	  nativeFreeze(1);
	}); // `Object.freeze` method
	// https://tc39.github.io/ecma262/#sec-object.freeze

	_export({
	  target: 'Object',
	  stat: true,
	  forced: FAILS_ON_PRIMITIVES$3,
	  sham: !freezing
	}, {
	  freeze: function freeze(it) {
	    return nativeFreeze && isObject(it) ? nativeFreeze(onFreeze(it)) : it;
	  }
	});

	var nativeGetOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;
	var FAILS_ON_PRIMITIVES$4 = fails(function () {
	  nativeGetOwnPropertyDescriptor$2(1);
	});
	var FORCED$a = !descriptors || FAILS_ON_PRIMITIVES$4; // `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor

	_export({
	  target: 'Object',
	  stat: true,
	  forced: FORCED$a,
	  sham: !descriptors
	}, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
	    return nativeGetOwnPropertyDescriptor$2(toIndexedObject(it), key);
	  }
	});

	var quot = /"/g; // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	// https://tc39.github.io/ecma262/#sec-createhtml

	var createHtml = function (string, tag, attribute, value) {
	  var S = String(requireObjectCoercible(string));
	  var p1 = '<' + tag;
	  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};

	// of a tag and escaping quotes in arguments

	var stringHtmlForced = function (METHOD_NAME) {
	  return fails(function () {
	    var test = ''[METHOD_NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  });
	};

	// https://tc39.github.io/ecma262/#sec-string.prototype.sub


	_export({
	  target: 'String',
	  proto: true,
	  forced: stringHtmlForced('sub')
	}, {
	  sub: function sub() {
	    return createHtml(this, 'sub', '', '');
	  }
	});

	// https://tc39.github.io/ecma262/#sec-typedarray-objects

	typedArrayConstructor('Float32', function (init) {
	  return function Float32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// https://tc39.github.io/ecma262/#sec-typedarray-objects

	typedArrayConstructor('Float64', function (init) {
	  return function Float64Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// https://tc39.github.io/ecma262/#sec-typedarray-objects

	typedArrayConstructor('Int32', function (init) {
	  return function Int32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// https://tc39.github.io/ecma262/#sec-typedarray-objects

	typedArrayConstructor('Uint16', function (init) {
	  return function Uint16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var FORCED$b = !global_1.setImmediate || !global_1.clearImmediate; // http://w3c.github.io/setImmediate/

	_export({
	  global: true,
	  bind: true,
	  enumerable: true,
	  forced: FORCED$b
	}, {
	  // `setImmediate` method
	  // http://w3c.github.io/setImmediate/#si-setImmediate
	  setImmediate: task.set,
	  // `clearImmediate` method
	  // http://w3c.github.io/setImmediate/#si-clearImmediate
	  clearImmediate: task.clear
	});

	var eval2 = eval;

	var gmodCRAM = function (e) {
	  var t = {};

	  function r(n) {
	    if (t[n]) return t[n].exports;
	    var i = t[n] = {
	      i: n,
	      l: !1,
	      exports: {}
	    };
	    return e[n].call(i.exports, i, i.exports, r), i.l = !0, i.exports;
	  }

	  return r.m = e, r.c = t, r.d = function (e, t, n) {
	    r.o(e, t) || Object.defineProperty(e, t, {
	      enumerable: !0,
	      get: n
	    });
	  }, r.r = function (e) {
	    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
	      value: "Module"
	    }), Object.defineProperty(e, "__esModule", {
	      value: !0
	    });
	  }, r.t = function (e, t) {
	    if (1 & t && (e = r(e)), 8 & t) return e;
	    if (4 & t && "object" == _typeof(e) && e && e.__esModule) return e;
	    var n = Object.create(null);
	    if (r.r(n), Object.defineProperty(n, "default", {
	      enumerable: !0,
	      value: e
	    }), 2 & t && "string" != typeof e) for (var i in e) {
	      r.d(n, i, function (t) {
	        return e[t];
	      }.bind(null, i));
	    }
	    return n;
	  }, r.n = function (e) {
	    var t = e && e.__esModule ? function () {
	      return e.default;
	    } : function () {
	      return e;
	    };
	    return r.d(t, "a", t), t;
	  }, r.o = function (e, t) {
	    return Object.prototype.hasOwnProperty.call(e, t);
	  }, r.p = "", r(r.s = 35);
	}([function (e, t) {
	  var r = /*#__PURE__*/function (_Error) {
	    _inherits(r, _Error);

	    var _super = _createSuper(r);

	    function r() {
	      _classCallCheck(this, r);

	      return _super.apply(this, arguments);
	    }

	    return r;
	  }( /*#__PURE__*/_wrapNativeSuper(Error));

	  var n = /*#__PURE__*/function (_r) {
	    _inherits(n, _r);

	    var _super2 = _createSuper(n);

	    function n() {
	      _classCallCheck(this, n);

	      return _super2.apply(this, arguments);
	    }

	    return n;
	  }(r);

	  e.exports = {
	    CramBufferOverrunError: /*#__PURE__*/function (_n) {
	      _inherits(CramBufferOverrunError, _n);

	      var _super3 = _createSuper(CramBufferOverrunError);

	      function CramBufferOverrunError() {
	        _classCallCheck(this, CramBufferOverrunError);

	        return _super3.apply(this, arguments);
	      }

	      return CramBufferOverrunError;
	    }(n),
	    CramMalformedError: n,
	    CramUnimplementedError: /*#__PURE__*/function (_Error2) {
	      _inherits(CramUnimplementedError, _Error2);

	      var _super4 = _createSuper(CramUnimplementedError);

	      function CramUnimplementedError() {
	        _classCallCheck(this, CramUnimplementedError);

	        return _super4.apply(this, arguments);
	      }

	      return CramUnimplementedError;
	    }( /*#__PURE__*/_wrapNativeSuper(Error)),
	    CramSizeLimitError: /*#__PURE__*/function (_r2) {
	      _inherits(CramSizeLimitError, _r2);

	      var _super5 = _createSuper(CramSizeLimitError);

	      function CramSizeLimitError() {
	        _classCallCheck(this, CramSizeLimitError);

	        return _super5.apply(this, arguments);
	      }

	      return CramSizeLimitError;
	    }(r),
	    CramArgumentError: /*#__PURE__*/function (_r3) {
	      _inherits(CramArgumentError, _r3);

	      var _super6 = _createSuper(CramArgumentError);

	      function CramArgumentError() {
	        _classCallCheck(this, CramArgumentError);

	        return _super6.apply(this, arguments);
	      }

	      return CramArgumentError;
	    }(r)
	  };
	}, function (e, t, r) {

	  (function (e) {
	    /*!
	     * The buffer module from node.js, for the browser.
	     *
	     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	     * @license  MIT
	     */
	    var n = r(37),
	        i = r(38),
	        o = r(19);

	    function s() {
	      return h.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
	    }

	    function a(e, t) {
	      if (s() < t) throw new RangeError("Invalid typed array length");
	      return h.TYPED_ARRAY_SUPPORT ? (e = new Uint8Array(t)).__proto__ = h.prototype : (null === e && (e = new h(t)), e.length = t), e;
	    }

	    function h(e, t, r) {
	      if (!(h.TYPED_ARRAY_SUPPORT || this instanceof h)) return new h(e, t, r);

	      if ("number" == typeof e) {
	        if ("string" == typeof t) throw new Error("If encoding is specified then the first argument must be a string");
	        return c(this, e);
	      }

	      return f(this, e, t, r);
	    }

	    function f(e, t, r, n) {
	      if ("number" == typeof t) throw new TypeError('"value" argument must not be a number');
	      return "undefined" != typeof ArrayBuffer && t instanceof ArrayBuffer ? function (e, t, r, n) {
	        if (t.byteLength, r < 0 || t.byteLength < r) throw new RangeError("'offset' is out of bounds");
	        if (t.byteLength < r + (n || 0)) throw new RangeError("'length' is out of bounds");
	        t = void 0 === r && void 0 === n ? new Uint8Array(t) : void 0 === n ? new Uint8Array(t, r) : new Uint8Array(t, r, n);
	        h.TYPED_ARRAY_SUPPORT ? (e = t).__proto__ = h.prototype : e = l(e, t);
	        return e;
	      }(e, t, r, n) : "string" == typeof t ? function (e, t, r) {
	        "string" == typeof r && "" !== r || (r = "utf8");
	        if (!h.isEncoding(r)) throw new TypeError('"encoding" must be a valid string encoding');
	        var n = 0 | p(t, r),
	            i = (e = a(e, n)).write(t, r);
	        i !== n && (e = e.slice(0, i));
	        return e;
	      }(e, t, r) : function (e, t) {
	        if (h.isBuffer(t)) {
	          var r = 0 | d(t.length);
	          return 0 === (e = a(e, r)).length ? e : (t.copy(e, 0, 0, r), e);
	        }

	        if (t) {
	          if ("undefined" != typeof ArrayBuffer && t.buffer instanceof ArrayBuffer || "length" in t) return "number" != typeof t.length || (n = t.length) != n ? a(e, 0) : l(e, t);
	          if ("Buffer" === t.type && o(t.data)) return l(e, t.data);
	        }

	        var n;
	        throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
	      }(e, t);
	    }

	    function u(e) {
	      if ("number" != typeof e) throw new TypeError('"size" argument must be a number');
	      if (e < 0) throw new RangeError('"size" argument must not be negative');
	    }

	    function c(e, t) {
	      if (u(t), e = a(e, t < 0 ? 0 : 0 | d(t)), !h.TYPED_ARRAY_SUPPORT) for (var r = 0; r < t; ++r) {
	        e[r] = 0;
	      }
	      return e;
	    }

	    function l(e, t) {
	      var r = t.length < 0 ? 0 : 0 | d(t.length);
	      e = a(e, r);

	      for (var n = 0; n < r; n += 1) {
	        e[n] = 255 & t[n];
	      }

	      return e;
	    }

	    function d(e) {
	      if (e >= s()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + s().toString(16) + " bytes");
	      return 0 | e;
	    }

	    function p(e, t) {
	      if (h.isBuffer(e)) return e.length;
	      if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(e) || e instanceof ArrayBuffer)) return e.byteLength;
	      "string" != typeof e && (e = "" + e);
	      var r = e.length;
	      if (0 === r) return 0;

	      for (var n = !1;;) {
	        switch (t) {
	          case "ascii":
	          case "latin1":
	          case "binary":
	            return r;

	          case "utf8":
	          case "utf-8":
	          case void 0:
	            return D(e).length;

	          case "ucs2":
	          case "ucs-2":
	          case "utf16le":
	          case "utf-16le":
	            return 2 * r;

	          case "hex":
	            return r >>> 1;

	          case "base64":
	            return j(e).length;

	          default:
	            if (n) return D(e).length;
	            t = ("" + t).toLowerCase(), n = !0;
	        }
	      }
	    }

	    function g(e, t, r) {
	      var n = e[t];
	      e[t] = e[r], e[r] = n;
	    }

	    function m(e, t, r, n, i) {
	      if (0 === e.length) return -1;

	      if ("string" == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, isNaN(r) && (r = i ? 0 : e.length - 1), r < 0 && (r = e.length + r), r >= e.length) {
	        if (i) return -1;
	        r = e.length - 1;
	      } else if (r < 0) {
	        if (!i) return -1;
	        r = 0;
	      }

	      if ("string" == typeof t && (t = h.from(t, n)), h.isBuffer(t)) return 0 === t.length ? -1 : _(e, t, r, n, i);
	      if ("number" == typeof t) return t &= 255, h.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : _(e, [t], r, n, i);
	      throw new TypeError("val must be string, number or Buffer");
	    }

	    function _(e, t, r, n, i) {
	      var o,
	          s = 1,
	          a = e.length,
	          h = t.length;

	      if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {
	        if (e.length < 2 || t.length < 2) return -1;
	        s = 2, a /= 2, h /= 2, r /= 2;
	      }

	      function f(e, t) {
	        return 1 === s ? e[t] : e.readUInt16BE(t * s);
	      }

	      if (i) {
	        var u = -1;

	        for (o = r; o < a; o++) {
	          if (f(e, o) === f(t, -1 === u ? 0 : o - u)) {
	            if (-1 === u && (u = o), o - u + 1 === h) return u * s;
	          } else -1 !== u && (o -= o - u), u = -1;
	        }
	      } else for (r + h > a && (r = a - h), o = r; o >= 0; o--) {
	        for (var c = !0, l = 0; l < h; l++) {
	          if (f(e, o + l) !== f(t, l)) {
	            c = !1;
	            break;
	          }
	        }

	        if (c) return o;
	      }

	      return -1;
	    }

	    function y(e, t, r, n) {
	      r = Number(r) || 0;
	      var i = e.length - r;
	      n ? (n = Number(n)) > i && (n = i) : n = i;
	      var o = t.length;
	      if (o % 2 != 0) throw new TypeError("Invalid hex string");
	      n > o / 2 && (n = o / 2);

	      for (var s = 0; s < n; ++s) {
	        var a = parseInt(t.substr(2 * s, 2), 16);
	        if (isNaN(a)) return s;
	        e[r + s] = a;
	      }

	      return s;
	    }

	    function b(e, t, r, n) {
	      return q(D(t, e.length - r), e, r, n);
	    }

	    function w(e, t, r, n) {
	      return q(function (e) {
	        for (var t = [], r = 0; r < e.length; ++r) {
	          t.push(255 & e.charCodeAt(r));
	        }

	        return t;
	      }(t), e, r, n);
	    }

	    function v(e, t, r, n) {
	      return w(e, t, r, n);
	    }

	    function E(e, t, r, n) {
	      return q(j(t), e, r, n);
	    }

	    function S(e, t, r, n) {
	      return q(function (e, t) {
	        for (var r, n, i, o = [], s = 0; s < e.length && !((t -= 2) < 0); ++s) {
	          r = e.charCodeAt(s), n = r >> 8, i = r % 256, o.push(i), o.push(n);
	        }

	        return o;
	      }(t, e.length - r), e, r, n);
	    }

	    function A(e, t, r) {
	      return 0 === t && r === e.length ? n.fromByteArray(e) : n.fromByteArray(e.slice(t, r));
	    }

	    function k(e, t, r) {
	      r = Math.min(e.length, r);

	      for (var n = [], i = t; i < r;) {
	        var o,
	            s,
	            a,
	            h,
	            f = e[i],
	            u = null,
	            c = f > 239 ? 4 : f > 223 ? 3 : f > 191 ? 2 : 1;
	        if (i + c <= r) switch (c) {
	          case 1:
	            f < 128 && (u = f);
	            break;

	          case 2:
	            128 == (192 & (o = e[i + 1])) && (h = (31 & f) << 6 | 63 & o) > 127 && (u = h);
	            break;

	          case 3:
	            o = e[i + 1], s = e[i + 2], 128 == (192 & o) && 128 == (192 & s) && (h = (15 & f) << 12 | (63 & o) << 6 | 63 & s) > 2047 && (h < 55296 || h > 57343) && (u = h);
	            break;

	          case 4:
	            o = e[i + 1], s = e[i + 2], a = e[i + 3], 128 == (192 & o) && 128 == (192 & s) && 128 == (192 & a) && (h = (15 & f) << 18 | (63 & o) << 12 | (63 & s) << 6 | 63 & a) > 65535 && h < 1114112 && (u = h);
	        }
	        null === u ? (u = 65533, c = 1) : u > 65535 && (u -= 65536, n.push(u >>> 10 & 1023 | 55296), u = 56320 | 1023 & u), n.push(u), i += c;
	      }

	      return function (e) {
	        var t = e.length;
	        if (t <= x) return String.fromCharCode.apply(String, e);
	        var r = "",
	            n = 0;

	        for (; n < t;) {
	          r += String.fromCharCode.apply(String, e.slice(n, n += x));
	        }

	        return r;
	      }(n);
	    }

	    t.Buffer = h, t.SlowBuffer = function (e) {
	      +e != e && (e = 0);
	      return h.alloc(+e);
	    }, t.INSPECT_MAX_BYTES = 50, h.TYPED_ARRAY_SUPPORT = void 0 !== e.TYPED_ARRAY_SUPPORT ? e.TYPED_ARRAY_SUPPORT : function () {
	      try {
	        var e = new Uint8Array(1);
	        return e.__proto__ = {
	          __proto__: Uint8Array.prototype,
	          foo: function foo() {
	            return 42;
	          }
	        }, 42 === e.foo() && "function" == typeof e.subarray && 0 === e.subarray(1, 1).byteLength;
	      } catch (e) {
	        return !1;
	      }
	    }(), t.kMaxLength = s(), h.poolSize = 8192, h._augment = function (e) {
	      return e.__proto__ = h.prototype, e;
	    }, h.from = function (e, t, r) {
	      return f(null, e, t, r);
	    }, h.TYPED_ARRAY_SUPPORT && (h.prototype.__proto__ = Uint8Array.prototype, h.__proto__ = Uint8Array, "undefined" != typeof Symbol && Symbol.species && h[Symbol.species] === h && Object.defineProperty(h, Symbol.species, {
	      value: null,
	      configurable: !0
	    })), h.alloc = function (e, t, r) {
	      return function (e, t, r, n) {
	        return u(t), t <= 0 ? a(e, t) : void 0 !== r ? "string" == typeof n ? a(e, t).fill(r, n) : a(e, t).fill(r) : a(e, t);
	      }(null, e, t, r);
	    }, h.allocUnsafe = function (e) {
	      return c(null, e);
	    }, h.allocUnsafeSlow = function (e) {
	      return c(null, e);
	    }, h.isBuffer = function (e) {
	      return !(null == e || !e._isBuffer);
	    }, h.compare = function (e, t) {
	      if (!h.isBuffer(e) || !h.isBuffer(t)) throw new TypeError("Arguments must be Buffers");
	      if (e === t) return 0;

	      for (var r = e.length, n = t.length, i = 0, o = Math.min(r, n); i < o; ++i) {
	        if (e[i] !== t[i]) {
	          r = e[i], n = t[i];
	          break;
	        }
	      }

	      return r < n ? -1 : n < r ? 1 : 0;
	    }, h.isEncoding = function (e) {
	      switch (String(e).toLowerCase()) {
	        case "hex":
	        case "utf8":
	        case "utf-8":
	        case "ascii":
	        case "latin1":
	        case "binary":
	        case "base64":
	        case "ucs2":
	        case "ucs-2":
	        case "utf16le":
	        case "utf-16le":
	          return !0;

	        default:
	          return !1;
	      }
	    }, h.concat = function (e, t) {
	      if (!o(e)) throw new TypeError('"list" argument must be an Array of Buffers');
	      if (0 === e.length) return h.alloc(0);
	      var r;
	      if (void 0 === t) for (t = 0, r = 0; r < e.length; ++r) {
	        t += e[r].length;
	      }
	      var n = h.allocUnsafe(t),
	          i = 0;

	      for (r = 0; r < e.length; ++r) {
	        var s = e[r];
	        if (!h.isBuffer(s)) throw new TypeError('"list" argument must be an Array of Buffers');
	        s.copy(n, i), i += s.length;
	      }

	      return n;
	    }, h.byteLength = p, h.prototype._isBuffer = !0, h.prototype.swap16 = function () {
	      var e = this.length;
	      if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");

	      for (var t = 0; t < e; t += 2) {
	        g(this, t, t + 1);
	      }

	      return this;
	    }, h.prototype.swap32 = function () {
	      var e = this.length;
	      if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");

	      for (var t = 0; t < e; t += 4) {
	        g(this, t, t + 3), g(this, t + 1, t + 2);
	      }

	      return this;
	    }, h.prototype.swap64 = function () {
	      var e = this.length;
	      if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");

	      for (var t = 0; t < e; t += 8) {
	        g(this, t, t + 7), g(this, t + 1, t + 6), g(this, t + 2, t + 5), g(this, t + 3, t + 4);
	      }

	      return this;
	    }, h.prototype.toString = function () {
	      var e = 0 | this.length;
	      return 0 === e ? "" : 0 === arguments.length ? k(this, 0, e) : function (e, t, r) {
	        var n = !1;
	        if ((void 0 === t || t < 0) && (t = 0), t > this.length) return "";
	        if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";
	        if ((r >>>= 0) <= (t >>>= 0)) return "";

	        for (e || (e = "utf8");;) {
	          switch (e) {
	            case "hex":
	              return T(this, t, r);

	            case "utf8":
	            case "utf-8":
	              return k(this, t, r);

	            case "ascii":
	              return C(this, t, r);

	            case "latin1":
	            case "binary":
	              return R(this, t, r);

	            case "base64":
	              return A(this, t, r);

	            case "ucs2":
	            case "ucs-2":
	            case "utf16le":
	            case "utf-16le":
	              return I(this, t, r);

	            default:
	              if (n) throw new TypeError("Unknown encoding: " + e);
	              e = (e + "").toLowerCase(), n = !0;
	          }
	        }
	      }.apply(this, arguments);
	    }, h.prototype.equals = function (e) {
	      if (!h.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
	      return this === e || 0 === h.compare(this, e);
	    }, h.prototype.inspect = function () {
	      var e = "",
	          r = t.INSPECT_MAX_BYTES;
	      return this.length > 0 && (e = this.toString("hex", 0, r).match(/.{2}/g).join(" "), this.length > r && (e += " ... ")), "<Buffer " + e + ">";
	    }, h.prototype.compare = function (e, t, r, n, i) {
	      if (!h.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
	      if (void 0 === t && (t = 0), void 0 === r && (r = e ? e.length : 0), void 0 === n && (n = 0), void 0 === i && (i = this.length), t < 0 || r > e.length || n < 0 || i > this.length) throw new RangeError("out of range index");
	      if (n >= i && t >= r) return 0;
	      if (n >= i) return -1;
	      if (t >= r) return 1;
	      if (this === e) return 0;

	      for (var o = (i >>>= 0) - (n >>>= 0), s = (r >>>= 0) - (t >>>= 0), a = Math.min(o, s), f = this.slice(n, i), u = e.slice(t, r), c = 0; c < a; ++c) {
	        if (f[c] !== u[c]) {
	          o = f[c], s = u[c];
	          break;
	        }
	      }

	      return o < s ? -1 : s < o ? 1 : 0;
	    }, h.prototype.includes = function (e, t, r) {
	      return -1 !== this.indexOf(e, t, r);
	    }, h.prototype.indexOf = function (e, t, r) {
	      return m(this, e, t, r, !0);
	    }, h.prototype.lastIndexOf = function (e, t, r) {
	      return m(this, e, t, r, !1);
	    }, h.prototype.write = function (e, t, r, n) {
	      if (void 0 === t) n = "utf8", r = this.length, t = 0;else if (void 0 === r && "string" == typeof t) n = t, r = this.length, t = 0;else {
	        if (!isFinite(t)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
	        t |= 0, isFinite(r) ? (r |= 0, void 0 === n && (n = "utf8")) : (n = r, r = void 0);
	      }
	      var i = this.length - t;
	      if ((void 0 === r || r > i) && (r = i), e.length > 0 && (r < 0 || t < 0) || t > this.length) throw new RangeError("Attempt to write outside buffer bounds");
	      n || (n = "utf8");

	      for (var o = !1;;) {
	        switch (n) {
	          case "hex":
	            return y(this, e, t, r);

	          case "utf8":
	          case "utf-8":
	            return b(this, e, t, r);

	          case "ascii":
	            return w(this, e, t, r);

	          case "latin1":
	          case "binary":
	            return v(this, e, t, r);

	          case "base64":
	            return E(this, e, t, r);

	          case "ucs2":
	          case "ucs-2":
	          case "utf16le":
	          case "utf-16le":
	            return S(this, e, t, r);

	          default:
	            if (o) throw new TypeError("Unknown encoding: " + n);
	            n = ("" + n).toLowerCase(), o = !0;
	        }
	      }
	    }, h.prototype.toJSON = function () {
	      return {
	        type: "Buffer",
	        data: Array.prototype.slice.call(this._arr || this, 0)
	      };
	    };
	    var x = 4096;

	    function C(e, t, r) {
	      var n = "";
	      r = Math.min(e.length, r);

	      for (var i = t; i < r; ++i) {
	        n += String.fromCharCode(127 & e[i]);
	      }

	      return n;
	    }

	    function R(e, t, r) {
	      var n = "";
	      r = Math.min(e.length, r);

	      for (var i = t; i < r; ++i) {
	        n += String.fromCharCode(e[i]);
	      }

	      return n;
	    }

	    function T(e, t, r) {
	      var n = e.length;
	      (!t || t < 0) && (t = 0), (!r || r < 0 || r > n) && (r = n);

	      for (var i = "", o = t; o < r; ++o) {
	        i += z(e[o]);
	      }

	      return i;
	    }

	    function I(e, t, r) {
	      for (var n = e.slice(t, r), i = "", o = 0; o < n.length; o += 2) {
	        i += String.fromCharCode(n[o] + 256 * n[o + 1]);
	      }

	      return i;
	    }

	    function B(e, t, r) {
	      if (e % 1 != 0 || e < 0) throw new RangeError("offset is not uint");
	      if (e + t > r) throw new RangeError("Trying to access beyond buffer length");
	    }

	    function L(e, t, r, n, i, o) {
	      if (!h.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
	      if (t > i || t < o) throw new RangeError('"value" argument is out of bounds');
	      if (r + n > e.length) throw new RangeError("Index out of range");
	    }

	    function N(e, t, r, n) {
	      t < 0 && (t = 65535 + t + 1);

	      for (var i = 0, o = Math.min(e.length - r, 2); i < o; ++i) {
	        e[r + i] = (t & 255 << 8 * (n ? i : 1 - i)) >>> 8 * (n ? i : 1 - i);
	      }
	    }

	    function F(e, t, r, n) {
	      t < 0 && (t = 4294967295 + t + 1);

	      for (var i = 0, o = Math.min(e.length - r, 4); i < o; ++i) {
	        e[r + i] = t >>> 8 * (n ? i : 3 - i) & 255;
	      }
	    }

	    function M(e, t, r, n, i, o) {
	      if (r + n > e.length) throw new RangeError("Index out of range");
	      if (r < 0) throw new RangeError("Index out of range");
	    }

	    function O(e, t, r, n, o) {
	      return o || M(e, 0, r, 4), i.write(e, t, r, n, 23, 4), r + 4;
	    }

	    function P(e, t, r, n, o) {
	      return o || M(e, 0, r, 8), i.write(e, t, r, n, 52, 8), r + 8;
	    }

	    h.prototype.slice = function (e, t) {
	      var r,
	          n = this.length;
	      if ((e = ~~e) < 0 ? (e += n) < 0 && (e = 0) : e > n && (e = n), (t = void 0 === t ? n : ~~t) < 0 ? (t += n) < 0 && (t = 0) : t > n && (t = n), t < e && (t = e), h.TYPED_ARRAY_SUPPORT) (r = this.subarray(e, t)).__proto__ = h.prototype;else {
	        var i = t - e;
	        r = new h(i, void 0);

	        for (var o = 0; o < i; ++o) {
	          r[o] = this[o + e];
	        }
	      }
	      return r;
	    }, h.prototype.readUIntLE = function (e, t, r) {
	      e |= 0, t |= 0, r || B(e, t, this.length);

	      for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256);) {
	        n += this[e + o] * i;
	      }

	      return n;
	    }, h.prototype.readUIntBE = function (e, t, r) {
	      e |= 0, t |= 0, r || B(e, t, this.length);

	      for (var n = this[e + --t], i = 1; t > 0 && (i *= 256);) {
	        n += this[e + --t] * i;
	      }

	      return n;
	    }, h.prototype.readUInt8 = function (e, t) {
	      return t || B(e, 1, this.length), this[e];
	    }, h.prototype.readUInt16LE = function (e, t) {
	      return t || B(e, 2, this.length), this[e] | this[e + 1] << 8;
	    }, h.prototype.readUInt16BE = function (e, t) {
	      return t || B(e, 2, this.length), this[e] << 8 | this[e + 1];
	    }, h.prototype.readUInt32LE = function (e, t) {
	      return t || B(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];
	    }, h.prototype.readUInt32BE = function (e, t) {
	      return t || B(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
	    }, h.prototype.readIntLE = function (e, t, r) {
	      e |= 0, t |= 0, r || B(e, t, this.length);

	      for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256);) {
	        n += this[e + o] * i;
	      }

	      return n >= (i *= 128) && (n -= Math.pow(2, 8 * t)), n;
	    }, h.prototype.readIntBE = function (e, t, r) {
	      e |= 0, t |= 0, r || B(e, t, this.length);

	      for (var n = t, i = 1, o = this[e + --n]; n > 0 && (i *= 256);) {
	        o += this[e + --n] * i;
	      }

	      return o >= (i *= 128) && (o -= Math.pow(2, 8 * t)), o;
	    }, h.prototype.readInt8 = function (e, t) {
	      return t || B(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
	    }, h.prototype.readInt16LE = function (e, t) {
	      t || B(e, 2, this.length);
	      var r = this[e] | this[e + 1] << 8;
	      return 32768 & r ? 4294901760 | r : r;
	    }, h.prototype.readInt16BE = function (e, t) {
	      t || B(e, 2, this.length);
	      var r = this[e + 1] | this[e] << 8;
	      return 32768 & r ? 4294901760 | r : r;
	    }, h.prototype.readInt32LE = function (e, t) {
	      return t || B(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
	    }, h.prototype.readInt32BE = function (e, t) {
	      return t || B(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
	    }, h.prototype.readFloatLE = function (e, t) {
	      return t || B(e, 4, this.length), i.read(this, e, !0, 23, 4);
	    }, h.prototype.readFloatBE = function (e, t) {
	      return t || B(e, 4, this.length), i.read(this, e, !1, 23, 4);
	    }, h.prototype.readDoubleLE = function (e, t) {
	      return t || B(e, 8, this.length), i.read(this, e, !0, 52, 8);
	    }, h.prototype.readDoubleBE = function (e, t) {
	      return t || B(e, 8, this.length), i.read(this, e, !1, 52, 8);
	    }, h.prototype.writeUIntLE = function (e, t, r, n) {
	      (e = +e, t |= 0, r |= 0, n) || L(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
	      var i = 1,
	          o = 0;

	      for (this[t] = 255 & e; ++o < r && (i *= 256);) {
	        this[t + o] = e / i & 255;
	      }

	      return t + r;
	    }, h.prototype.writeUIntBE = function (e, t, r, n) {
	      (e = +e, t |= 0, r |= 0, n) || L(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
	      var i = r - 1,
	          o = 1;

	      for (this[t + i] = 255 & e; --i >= 0 && (o *= 256);) {
	        this[t + i] = e / o & 255;
	      }

	      return t + r;
	    }, h.prototype.writeUInt8 = function (e, t, r) {
	      return e = +e, t |= 0, r || L(this, e, t, 1, 255, 0), h.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), this[t] = 255 & e, t + 1;
	    }, h.prototype.writeUInt16LE = function (e, t, r) {
	      return e = +e, t |= 0, r || L(this, e, t, 2, 65535, 0), h.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8) : N(this, e, t, !0), t + 2;
	    }, h.prototype.writeUInt16BE = function (e, t, r) {
	      return e = +e, t |= 0, r || L(this, e, t, 2, 65535, 0), h.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 8, this[t + 1] = 255 & e) : N(this, e, t, !1), t + 2;
	    }, h.prototype.writeUInt32LE = function (e, t, r) {
	      return e = +e, t |= 0, r || L(this, e, t, 4, 4294967295, 0), h.TYPED_ARRAY_SUPPORT ? (this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = 255 & e) : F(this, e, t, !0), t + 4;
	    }, h.prototype.writeUInt32BE = function (e, t, r) {
	      return e = +e, t |= 0, r || L(this, e, t, 4, 4294967295, 0), h.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e) : F(this, e, t, !1), t + 4;
	    }, h.prototype.writeIntLE = function (e, t, r, n) {
	      if (e = +e, t |= 0, !n) {
	        var i = Math.pow(2, 8 * r - 1);
	        L(this, e, t, r, i - 1, -i);
	      }

	      var o = 0,
	          s = 1,
	          a = 0;

	      for (this[t] = 255 & e; ++o < r && (s *= 256);) {
	        e < 0 && 0 === a && 0 !== this[t + o - 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;
	      }

	      return t + r;
	    }, h.prototype.writeIntBE = function (e, t, r, n) {
	      if (e = +e, t |= 0, !n) {
	        var i = Math.pow(2, 8 * r - 1);
	        L(this, e, t, r, i - 1, -i);
	      }

	      var o = r - 1,
	          s = 1,
	          a = 0;

	      for (this[t + o] = 255 & e; --o >= 0 && (s *= 256);) {
	        e < 0 && 0 === a && 0 !== this[t + o + 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;
	      }

	      return t + r;
	    }, h.prototype.writeInt8 = function (e, t, r) {
	      return e = +e, t |= 0, r || L(this, e, t, 1, 127, -128), h.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;
	    }, h.prototype.writeInt16LE = function (e, t, r) {
	      return e = +e, t |= 0, r || L(this, e, t, 2, 32767, -32768), h.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8) : N(this, e, t, !0), t + 2;
	    }, h.prototype.writeInt16BE = function (e, t, r) {
	      return e = +e, t |= 0, r || L(this, e, t, 2, 32767, -32768), h.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 8, this[t + 1] = 255 & e) : N(this, e, t, !1), t + 2;
	    }, h.prototype.writeInt32LE = function (e, t, r) {
	      return e = +e, t |= 0, r || L(this, e, t, 4, 2147483647, -2147483648), h.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24) : F(this, e, t, !0), t + 4;
	    }, h.prototype.writeInt32BE = function (e, t, r) {
	      return e = +e, t |= 0, r || L(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), h.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e) : F(this, e, t, !1), t + 4;
	    }, h.prototype.writeFloatLE = function (e, t, r) {
	      return O(this, e, t, !0, r);
	    }, h.prototype.writeFloatBE = function (e, t, r) {
	      return O(this, e, t, !1, r);
	    }, h.prototype.writeDoubleLE = function (e, t, r) {
	      return P(this, e, t, !0, r);
	    }, h.prototype.writeDoubleBE = function (e, t, r) {
	      return P(this, e, t, !1, r);
	    }, h.prototype.copy = function (e, t, r, n) {
	      if (r || (r = 0), n || 0 === n || (n = this.length), t >= e.length && (t = e.length), t || (t = 0), n > 0 && n < r && (n = r), n === r) return 0;
	      if (0 === e.length || 0 === this.length) return 0;
	      if (t < 0) throw new RangeError("targetStart out of bounds");
	      if (r < 0 || r >= this.length) throw new RangeError("sourceStart out of bounds");
	      if (n < 0) throw new RangeError("sourceEnd out of bounds");
	      n > this.length && (n = this.length), e.length - t < n - r && (n = e.length - t + r);
	      var i,
	          o = n - r;
	      if (this === e && r < t && t < n) for (i = o - 1; i >= 0; --i) {
	        e[i + t] = this[i + r];
	      } else if (o < 1e3 || !h.TYPED_ARRAY_SUPPORT) for (i = 0; i < o; ++i) {
	        e[i + t] = this[i + r];
	      } else Uint8Array.prototype.set.call(e, this.subarray(r, r + o), t);
	      return o;
	    }, h.prototype.fill = function (e, t, r, n) {
	      if ("string" == typeof e) {
	        if ("string" == typeof t ? (n = t, t = 0, r = this.length) : "string" == typeof r && (n = r, r = this.length), 1 === e.length) {
	          var i = e.charCodeAt(0);
	          i < 256 && (e = i);
	        }

	        if (void 0 !== n && "string" != typeof n) throw new TypeError("encoding must be a string");
	        if ("string" == typeof n && !h.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);
	      } else "number" == typeof e && (e &= 255);

	      if (t < 0 || this.length < t || this.length < r) throw new RangeError("Out of range index");
	      if (r <= t) return this;
	      var o;
	      if (t >>>= 0, r = void 0 === r ? this.length : r >>> 0, e || (e = 0), "number" == typeof e) for (o = t; o < r; ++o) {
	        this[o] = e;
	      } else {
	        var s = h.isBuffer(e) ? e : D(new h(e, n).toString()),
	            a = s.length;

	        for (o = 0; o < r - t; ++o) {
	          this[o + t] = s[o % a];
	        }
	      }
	      return this;
	    };
	    var U = /[^+\/0-9A-Za-z-_]/g;

	    function z(e) {
	      return e < 16 ? "0" + e.toString(16) : e.toString(16);
	    }

	    function D(e, t) {
	      var r;
	      t = t || 1 / 0;

	      for (var n = e.length, i = null, o = [], s = 0; s < n; ++s) {
	        if ((r = e.charCodeAt(s)) > 55295 && r < 57344) {
	          if (!i) {
	            if (r > 56319) {
	              (t -= 3) > -1 && o.push(239, 191, 189);
	              continue;
	            }

	            if (s + 1 === n) {
	              (t -= 3) > -1 && o.push(239, 191, 189);
	              continue;
	            }

	            i = r;
	            continue;
	          }

	          if (r < 56320) {
	            (t -= 3) > -1 && o.push(239, 191, 189), i = r;
	            continue;
	          }

	          r = 65536 + (i - 55296 << 10 | r - 56320);
	        } else i && (t -= 3) > -1 && o.push(239, 191, 189);

	        if (i = null, r < 128) {
	          if ((t -= 1) < 0) break;
	          o.push(r);
	        } else if (r < 2048) {
	          if ((t -= 2) < 0) break;
	          o.push(r >> 6 | 192, 63 & r | 128);
	        } else if (r < 65536) {
	          if ((t -= 3) < 0) break;
	          o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
	        } else {
	          if (!(r < 1114112)) throw new Error("Invalid code point");
	          if ((t -= 4) < 0) break;
	          o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
	        }
	      }

	      return o;
	    }

	    function j(e) {
	      return n.toByteArray(function (e) {
	        if ((e = function (e) {
	          return e.trim ? e.trim() : e.replace(/^\s+|\s+$/g, "");
	        }(e).replace(U, "")).length < 2) return "";

	        for (; e.length % 4 != 0;) {
	          e += "=";
	        }

	        return e;
	      }(e));
	    }

	    function q(e, t, r, n) {
	      for (var i = 0; i < n && !(i + r >= t.length || i >= e.length); ++i) {
	        t[i + r] = e[i];
	      }

	      return i;
	    }
	  }).call(this, r(2));
	}, function (e, t) {
	  var r;

	  r = function () {
	    return this;
	  }();

	  try {
	    r = r || new Function("return this")();
	  } catch (e) {
	    "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && (r = window);
	  }

	  e.exports = r;
	}, function (e, t) {
	  var r,
	      n,
	      i = e.exports = {};

	  function o() {
	    throw new Error("setTimeout has not been defined");
	  }

	  function s() {
	    throw new Error("clearTimeout has not been defined");
	  }

	  function a(e) {
	    if (r === setTimeout) return setTimeout(e, 0);
	    if ((r === o || !r) && setTimeout) return r = setTimeout, setTimeout(e, 0);

	    try {
	      return r(e, 0);
	    } catch (t) {
	      try {
	        return r.call(null, e, 0);
	      } catch (t) {
	        return r.call(this, e, 0);
	      }
	    }
	  }

	  !function () {
	    try {
	      r = "function" == typeof setTimeout ? setTimeout : o;
	    } catch (e) {
	      r = o;
	    }

	    try {
	      n = "function" == typeof clearTimeout ? clearTimeout : s;
	    } catch (e) {
	      n = s;
	    }
	  }();
	  var h,
	      f = [],
	      u = !1,
	      c = -1;

	  function l() {
	    u && h && (u = !1, h.length ? f = h.concat(f) : c = -1, f.length && d());
	  }

	  function d() {
	    if (!u) {
	      var e = a(l);
	      u = !0;

	      for (var t = f.length; t;) {
	        for (h = f, f = []; ++c < t;) {
	          h && h[c].run();
	        }

	        c = -1, t = f.length;
	      }

	      h = null, u = !1, function (e) {
	        if (n === clearTimeout) return clearTimeout(e);
	        if ((n === s || !n) && clearTimeout) return n = clearTimeout, clearTimeout(e);

	        try {
	          n(e);
	        } catch (t) {
	          try {
	            return n.call(null, e);
	          } catch (t) {
	            return n.call(this, e);
	          }
	        }
	      }(e);
	    }
	  }

	  function p(e, t) {
	    this.fun = e, this.array = t;
	  }

	  function g() {}

	  i.nextTick = function (e) {
	    var t = new Array(arguments.length - 1);
	    if (arguments.length > 1) for (var r = 1; r < arguments.length; r++) {
	      t[r - 1] = arguments[r];
	    }
	    f.push(new p(e, t)), 1 !== f.length || u || a(d);
	  }, p.prototype.run = function () {
	    this.fun.apply(null, this.array);
	  }, i.title = "browser", i.browser = !0, i.env = {}, i.argv = [], i.version = "", i.versions = {}, i.on = g, i.addListener = g, i.once = g, i.off = g, i.removeListener = g, i.removeAllListeners = g, i.emit = g, i.prependListener = g, i.prependOnceListener = g, i.listeners = function (e) {
	    return [];
	  }, i.binding = function (e) {
	    throw new Error("process.binding is not supported");
	  }, i.cwd = function () {
	    return "/";
	  }, i.chdir = function (e) {
	    throw new Error("process.chdir is not supported");
	  }, i.umask = function () {
	    return 0;
	  };
	}, function (e, t) {
	  "function" == typeof Object.create ? e.exports = function (e, t) {
	    e.super_ = t, e.prototype = Object.create(t.prototype, {
	      constructor: {
	        value: e,
	        enumerable: !1,
	        writable: !0,
	        configurable: !0
	      }
	    });
	  } : e.exports = function (e, t) {
	    e.super_ = t;

	    var r = function r() {};

	    r.prototype = t.prototype, e.prototype = new r(), e.prototype.constructor = e;
	  };
	}, function (e, t, r) {

	  var n = r(9),
	      i = Object.keys || function (e) {
	    var t = [];

	    for (var r in e) {
	      t.push(r);
	    }

	    return t;
	  };

	  e.exports = c;
	  var o = r(7);
	  o.inherits = r(4);
	  var s = r(21),
	      a = r(16);
	  o.inherits(c, s);

	  for (var h = i(a.prototype), f = 0; f < h.length; f++) {
	    var u = h[f];
	    c.prototype[u] || (c.prototype[u] = a.prototype[u]);
	  }

	  function c(e) {
	    if (!(this instanceof c)) return new c(e);
	    s.call(this, e), a.call(this, e), e && !1 === e.readable && (this.readable = !1), e && !1 === e.writable && (this.writable = !1), this.allowHalfOpen = !0, e && !1 === e.allowHalfOpen && (this.allowHalfOpen = !1), this.once("end", l);
	  }

	  function l() {
	    this.allowHalfOpen || this._writableState.ended || n.nextTick(d, this);
	  }

	  function d(e) {
	    e.end();
	  }

	  Object.defineProperty(c.prototype, "writableHighWaterMark", {
	    enumerable: !1,
	    get: function get() {
	      return this._writableState.highWaterMark;
	    }
	  }), Object.defineProperty(c.prototype, "destroyed", {
	    get: function get() {
	      return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
	    },
	    set: function set(e) {
	      void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e, this._writableState.destroyed = e);
	    }
	  }), c.prototype._destroy = function (e, t) {
	    this.push(null), this.end(), n.nextTick(t, e);
	  };
	}, function (e, t, r) {
	  var _r4 = r(0),
	      n = _r4.CramBufferOverrunError,
	      i = {
	    int: !0,
	    byte: !0,
	    long: !0,
	    byteArray: !0,
	    byteArrayBlock: !0
	  };

	  e.exports = /*#__PURE__*/function () {
	    function _class() {
	      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var t = arguments.length > 1 ? arguments[1] : undefined;

	      _classCallCheck(this, _class);

	      if (this.parameters = e, this.dataType = t, !t) throw new TypeError("must provide a data type to codec constructor");
	      if (!i[t]) throw new TypeError("invalid data type ".concat(t));
	    }

	    _createClass(_class, [{
	      key: "_getBits",
	      value: function _getBits(e, t, r) {
	        var i = 0;
	        if (t.bytePosition + (7 - t.bitPosition + r) / 8 > e.length) throw new n("read error during decoding. the file seems to be truncated.");

	        for (var _n2 = r; _n2; _n2 -= 1) {
	          i <<= 1, i |= e[t.bytePosition] >> t.bitPosition & 1, t.bitPosition -= 1, t.bitPosition < 0 && (t.bytePosition += 1), t.bitPosition &= 7;
	        }

	        return i;
	      }
	    }]);

	    return _class;
	  }();
	}, function (e, t, r) {
	  (function (e) {
	    function r(e) {
	      return Object.prototype.toString.call(e);
	    }

	    t.isArray = function (e) {
	      return Array.isArray ? Array.isArray(e) : "[object Array]" === r(e);
	    }, t.isBoolean = function (e) {
	      return "boolean" == typeof e;
	    }, t.isNull = function (e) {
	      return null === e;
	    }, t.isNullOrUndefined = function (e) {
	      return null == e;
	    }, t.isNumber = function (e) {
	      return "number" == typeof e;
	    }, t.isString = function (e) {
	      return "string" == typeof e;
	    }, t.isSymbol = function (e) {
	      return "symbol" == _typeof(e);
	    }, t.isUndefined = function (e) {
	      return void 0 === e;
	    }, t.isRegExp = function (e) {
	      return "[object RegExp]" === r(e);
	    }, t.isObject = function (e) {
	      return "object" == _typeof(e) && null !== e;
	    }, t.isDate = function (e) {
	      return "[object Date]" === r(e);
	    }, t.isError = function (e) {
	      return "[object Error]" === r(e) || e instanceof Error;
	    }, t.isFunction = function (e) {
	      return "function" == typeof e;
	    }, t.isPrimitive = function (e) {
	      return null === e || "boolean" == typeof e || "number" == typeof e || "string" == typeof e || "symbol" == _typeof(e) || void 0 === e;
	    }, t.isBuffer = e.isBuffer;
	  }).call(this, r(1).Buffer);
	}, function (e, t, r) {
	  var n = r(72),
	      _r5 = r(0),
	      i = _r5.CramBufferOverrunError;

	  e.exports = {
	    itf8Size: function itf8Size(e) {
	      return -128 & e ? -16384 & e ? -2097152 & e ? -268435456 & e ? 5 : 4 : 3 : 2 : 1;
	    },
	    parseItf8: function parseItf8(e, t) {
	      var r = t;
	      var n = e[r];
	      var o;
	      if (n < 128 ? (o = n, r += 1) : n < 192 ? (o = 16383 & (n << 8 | e[r + 1]), r += 2) : n < 224 ? (o = 2097151 & (n << 16 | e[r + 1] << 8 | e[r + 2]), r += 3) : n < 240 ? (o = 268435455 & (n << 24 | e[r + 1] << 16 | e[r + 2] << 8 | e[r + 3]), r += 4) : (o = (15 & n) << 28 | e[r + 1] << 20 | e[r + 2] << 12 | e[r + 3] << 4 | 15 & e[r + 4], r += 5), r > e.length) throw new i("Attempted to read beyond end of buffer; this file seems truncated.");
	      return [o, r - t];
	    },
	    parseItem: function parseItem(e, t) {
	      var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	      var n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

	      var _t$parse = t.parse(e),
	          i = _t$parse.offset,
	          o = _t$parse.result;

	      return o._endPosition = i + n, o._size = i - r, o;
	    },
	    tinyMemoize: function tinyMemoize(e, t) {
	      var r = e.prototype[t],
	          n = "_memo_".concat(t);

	      e.prototype[t] = function () {
	        return n in this || (this[n] = r.call(this)), this[n];
	      };
	    },
	    sequenceMD5: function sequenceMD5(e) {
	      return n(e.toUpperCase().replace(/[^\x21-\x7e]/g, ""));
	    }
	  };
	}, function (e, t, r) {

	  (function (t) {
	    !t.version || 0 === t.version.indexOf("v0.") || 0 === t.version.indexOf("v1.") && 0 !== t.version.indexOf("v1.8.") ? e.exports = {
	      nextTick: function nextTick(e, r, n, i) {
	        if ("function" != typeof e) throw new TypeError('"callback" argument must be a function');
	        var o,
	            s,
	            a = arguments.length;

	        switch (a) {
	          case 0:
	          case 1:
	            return t.nextTick(e);

	          case 2:
	            return t.nextTick(function () {
	              e.call(null, r);
	            });

	          case 3:
	            return t.nextTick(function () {
	              e.call(null, r, n);
	            });

	          case 4:
	            return t.nextTick(function () {
	              e.call(null, r, n, i);
	            });

	          default:
	            for (o = new Array(a - 1), s = 0; s < o.length;) {
	              o[s++] = arguments[s];
	            }

	            return t.nextTick(function () {
	              e.apply(null, o);
	            });
	        }
	      }
	    } : e.exports = t;
	  }).call(this, r(3));
	}, function (e, t, r) {
	  var n = r(1),
	      i = n.Buffer;

	  function o(e, t) {
	    for (var r in e) {
	      t[r] = e[r];
	    }
	  }

	  function s(e, t, r) {
	    return i(e, t, r);
	  }

	  i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? e.exports = n : (o(n, t), t.Buffer = s), o(i, s), s.from = function (e, t, r) {
	    if ("number" == typeof e) throw new TypeError("Argument must not be a number");
	    return i(e, t, r);
	  }, s.alloc = function (e, t, r) {
	    if ("number" != typeof e) throw new TypeError("Argument must be a number");
	    var n = i(e);
	    return void 0 !== t ? "string" == typeof r ? n.fill(t, r) : n.fill(t) : n.fill(0), n;
	  }, s.allocUnsafe = function (e) {
	    if ("number" != typeof e) throw new TypeError("Argument must be a number");
	    return i(e);
	  }, s.allocUnsafeSlow = function (e) {
	    if ("number" != typeof e) throw new TypeError("Argument must be a number");
	    return n.SlowBuffer(e);
	  };
	}, function (e, t, r) {

	  var n = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;

	  function i(e, t) {
	    return Object.prototype.hasOwnProperty.call(e, t);
	  }

	  t.assign = function (e) {
	    for (var t = Array.prototype.slice.call(arguments, 1); t.length;) {
	      var r = t.shift();

	      if (r) {
	        if ("object" != _typeof(r)) throw new TypeError(r + "must be non-object");

	        for (var n in r) {
	          i(r, n) && (e[n] = r[n]);
	        }
	      }
	    }

	    return e;
	  }, t.shrinkBuf = function (e, t) {
	    return e.length === t ? e : e.subarray ? e.subarray(0, t) : (e.length = t, e);
	  };
	  var o = {
	    arraySet: function arraySet(e, t, r, n, i) {
	      if (t.subarray && e.subarray) e.set(t.subarray(r, r + n), i);else for (var o = 0; o < n; o++) {
	        e[i + o] = t[r + o];
	      }
	    },
	    flattenChunks: function flattenChunks(e) {
	      var t, r, n, i, o, s;

	      for (n = 0, t = 0, r = e.length; t < r; t++) {
	        n += e[t].length;
	      }

	      for (s = new Uint8Array(n), i = 0, t = 0, r = e.length; t < r; t++) {
	        o = e[t], s.set(o, i), i += o.length;
	      }

	      return s;
	    }
	  },
	      s = {
	    arraySet: function arraySet(e, t, r, n, i) {
	      for (var o = 0; o < n; o++) {
	        e[i + o] = t[r + o];
	      }
	    },
	    flattenChunks: function flattenChunks(e) {
	      return [].concat.apply([], e);
	    }
	  };
	  t.setTyped = function (e) {
	    e ? (t.Buf8 = Uint8Array, t.Buf16 = Uint16Array, t.Buf32 = Int32Array, t.assign(t, o)) : (t.Buf8 = Array, t.Buf16 = Array, t.Buf32 = Array, t.assign(t, s));
	  }, t.setTyped(n);
	}, function (e, t, r) {
	  var _r6 = r(0),
	      n = _r6.CramMalformedError,
	      i = r(13);

	  var o = function o() {
	    _classCallCheck(this, o);

	    this.F = void 0, this.C = void 0;
	  };

	  function s(e, t, r, n) {
	    return r * (e >> n) + (e & (1 << n) - 1) - t;
	  }

	  var a = {
	    FC: o,
	    AriDecoder: function AriDecoder() {
	      _classCallCheck(this, AriDecoder);

	      this.fc = new Array(256);

	      for (var _e2 = 0; _e2 < this.fc.length; _e2 += 1) {
	        this.fc[_e2] = new o();
	      }

	      this.R = null;
	    },
	    Symbol: function _Symbol() {
	      _classCallCheck(this, _Symbol);

	      this.start = void 0, this.freq = void 0;
	    },
	    symbolInit: function symbolInit(e, t, r) {
	      if (!(t <= 65536)) throw new n("assertion failed: start <= 1<<16");
	      if (!(r <= 65536 - t)) throw new n("assertion failed: freq <= 1<<16");
	      e.start = t, e.freq = r;
	    },
	    advanceStep: s,
	    advanceSymbolStep: function advanceSymbolStep(e, t, r) {
	      return s(e, t.start, t.freq, r);
	    },
	    get: function get(e, t) {
	      return e & (1 << t) - 1;
	    },
	    advanceSymbol: function advanceSymbol(e, t, r, n) {
	      return function (e, t, r, n, o) {
	        if ((e = n * (e >> o) + (e & (1 << o) - 1) - r) < i.RANS_BYTE_L) do {
	          e = e << 8 | 255 & t.get();
	        } while (e < i.RANS_BYTE_L);
	        return e;
	      }(e, t, r.start, r.freq, n);
	    },
	    renormalize: function renormalize(e, t) {
	      if (e < i.RANS_BYTE_L) do {
	        e = e << 8 | 255 & t.get();
	      } while (e < i.RANS_BYTE_L);
	      return e;
	    }
	  };
	  e.exports = a;
	}, function (e, t) {
	  e.exports = {
	    TF_SHIFT: 12,
	    TOTFREQ: 4096,
	    RANS_BYTE_L: 1 << 23
	  };
	}, function (e, t) {
	  function r() {
	    this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0;
	  }

	  function n(e) {
	    return "function" == typeof e;
	  }

	  function i(e) {
	    return "object" == _typeof(e) && null !== e;
	  }

	  function o(e) {
	    return void 0 === e;
	  }

	  e.exports = r, r.EventEmitter = r, r.prototype._events = void 0, r.prototype._maxListeners = void 0, r.defaultMaxListeners = 10, r.prototype.setMaxListeners = function (e) {
	    if ("number" != typeof e || e < 0 || isNaN(e)) throw TypeError("n must be a positive number");
	    return this._maxListeners = e, this;
	  }, r.prototype.emit = function (e) {
	    var t, r, s, a, h, f;

	    if (this._events || (this._events = {}), "error" === e && (!this._events.error || i(this._events.error) && !this._events.error.length)) {
	      if ((t = arguments[1]) instanceof Error) throw t;
	      var u = new Error('Uncaught, unspecified "error" event. (' + t + ")");
	      throw u.context = t, u;
	    }

	    if (o(r = this._events[e])) return !1;
	    if (n(r)) switch (arguments.length) {
	      case 1:
	        r.call(this);
	        break;

	      case 2:
	        r.call(this, arguments[1]);
	        break;

	      case 3:
	        r.call(this, arguments[1], arguments[2]);
	        break;

	      default:
	        a = Array.prototype.slice.call(arguments, 1), r.apply(this, a);
	    } else if (i(r)) for (a = Array.prototype.slice.call(arguments, 1), s = (f = r.slice()).length, h = 0; h < s; h++) {
	      f[h].apply(this, a);
	    }
	    return !0;
	  }, r.prototype.addListener = function (e, t) {
	    var s;
	    if (!n(t)) throw TypeError("listener must be a function");
	    return this._events || (this._events = {}), this._events.newListener && this.emit("newListener", e, n(t.listener) ? t.listener : t), this._events[e] ? i(this._events[e]) ? this._events[e].push(t) : this._events[e] = [this._events[e], t] : this._events[e] = t, i(this._events[e]) && !this._events[e].warned && (s = o(this._maxListeners) ? r.defaultMaxListeners : this._maxListeners) && s > 0 && this._events[e].length > s && (this._events[e].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[e].length), "function" == typeof console.trace && console.trace()), this;
	  }, r.prototype.on = r.prototype.addListener, r.prototype.once = function (e, t) {
	    if (!n(t)) throw TypeError("listener must be a function");
	    var r = !1;

	    function i() {
	      this.removeListener(e, i), r || (r = !0, t.apply(this, arguments));
	    }

	    return i.listener = t, this.on(e, i), this;
	  }, r.prototype.removeListener = function (e, t) {
	    var r, o, s, a;
	    if (!n(t)) throw TypeError("listener must be a function");
	    if (!this._events || !this._events[e]) return this;
	    if (s = (r = this._events[e]).length, o = -1, r === t || n(r.listener) && r.listener === t) delete this._events[e], this._events.removeListener && this.emit("removeListener", e, t);else if (i(r)) {
	      for (a = s; a-- > 0;) {
	        if (r[a] === t || r[a].listener && r[a].listener === t) {
	          o = a;
	          break;
	        }
	      }

	      if (o < 0) return this;
	      1 === r.length ? (r.length = 0, delete this._events[e]) : r.splice(o, 1), this._events.removeListener && this.emit("removeListener", e, t);
	    }
	    return this;
	  }, r.prototype.removeAllListeners = function (e) {
	    var t, r;
	    if (!this._events) return this;
	    if (!this._events.removeListener) return 0 === arguments.length ? this._events = {} : this._events[e] && delete this._events[e], this;

	    if (0 === arguments.length) {
	      for (t in this._events) {
	        "removeListener" !== t && this.removeAllListeners(t);
	      }

	      return this.removeAllListeners("removeListener"), this._events = {}, this;
	    }

	    if (n(r = this._events[e])) this.removeListener(e, r);else if (r) for (; r.length;) {
	      this.removeListener(e, r[r.length - 1]);
	    }
	    return delete this._events[e], this;
	  }, r.prototype.listeners = function (e) {
	    return this._events && this._events[e] ? n(this._events[e]) ? [this._events[e]] : this._events[e].slice() : [];
	  }, r.prototype.listenerCount = function (e) {
	    if (this._events) {
	      var t = this._events[e];
	      if (n(t)) return 1;
	      if (t) return t.length;
	    }

	    return 0;
	  }, r.listenerCount = function (e, t) {
	    return e.listenerCount(t);
	  };
	}, function (e, t, r) {
	  (t = e.exports = r(21)).Stream = t, t.Readable = t, t.Writable = r(16), t.Duplex = r(5), t.Transform = r(25), t.PassThrough = r(46);
	}, function (e, t, r) {

	  (function (t, n, i) {
	    var o = r(9);

	    function s(e) {
	      var t = this;
	      this.next = null, this.entry = null, this.finish = function () {
	        !function (e, t, r) {
	          var n = e.entry;
	          e.entry = null;

	          for (; n;) {
	            var i = n.callback;
	            t.pendingcb--, i(r), n = n.next;
	          }

	          t.corkedRequestsFree ? t.corkedRequestsFree.next = e : t.corkedRequestsFree = e;
	        }(t, e);
	      };
	    }

	    e.exports = y;
	    var a,
	        h = !t.browser && ["v0.10", "v0.9."].indexOf(t.version.slice(0, 5)) > -1 ? n : o.nextTick;
	    y.WritableState = _;
	    var f = r(7);
	    f.inherits = r(4);

	    var u = {
	      deprecate: r(45)
	    },
	        c = r(22),
	        l = r(10).Buffer,
	        d = i.Uint8Array || function () {};

	    var p,
	        g = r(23);

	    function m() {}

	    function _(e, t) {
	      a = a || r(5), e = e || {};
	      var n = t instanceof a;
	      this.objectMode = !!e.objectMode, n && (this.objectMode = this.objectMode || !!e.writableObjectMode);
	      var i = e.highWaterMark,
	          f = e.writableHighWaterMark,
	          u = this.objectMode ? 16 : 16384;
	      this.highWaterMark = i || 0 === i ? i : n && (f || 0 === f) ? f : u, this.highWaterMark = Math.floor(this.highWaterMark), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
	      var c = !1 === e.decodeStrings;
	      this.decodeStrings = !c, this.defaultEncoding = e.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function (e) {
	        !function (e, t) {
	          var r = e._writableState,
	              n = r.sync,
	              i = r.writecb;
	          if (function (e) {
	            e.writing = !1, e.writecb = null, e.length -= e.writelen, e.writelen = 0;
	          }(r), t) !function (e, t, r, n, i) {
	            --t.pendingcb, r ? (o.nextTick(i, n), o.nextTick(A, e, t), e._writableState.errorEmitted = !0, e.emit("error", n)) : (i(n), e._writableState.errorEmitted = !0, e.emit("error", n), A(e, t));
	          }(e, r, n, t, i);else {
	            var s = E(r);
	            s || r.corked || r.bufferProcessing || !r.bufferedRequest || v(e, r), n ? h(w, e, r, s, i) : w(e, r, s, i);
	          }
	        }(t, e);
	      }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.bufferedRequestCount = 0, this.corkedRequestsFree = new s(this);
	    }

	    function y(e) {
	      if (a = a || r(5), !(p.call(y, this) || this instanceof a)) return new y(e);
	      this._writableState = new _(e, this), this.writable = !0, e && ("function" == typeof e.write && (this._write = e.write), "function" == typeof e.writev && (this._writev = e.writev), "function" == typeof e.destroy && (this._destroy = e.destroy), "function" == typeof e.final && (this._final = e.final)), c.call(this);
	    }

	    function b(e, t, r, n, i, o, s) {
	      t.writelen = n, t.writecb = s, t.writing = !0, t.sync = !0, r ? e._writev(i, t.onwrite) : e._write(i, o, t.onwrite), t.sync = !1;
	    }

	    function w(e, t, r, n) {
	      r || function (e, t) {
	        0 === t.length && t.needDrain && (t.needDrain = !1, e.emit("drain"));
	      }(e, t), t.pendingcb--, n(), A(e, t);
	    }

	    function v(e, t) {
	      t.bufferProcessing = !0;
	      var r = t.bufferedRequest;

	      if (e._writev && r && r.next) {
	        var n = t.bufferedRequestCount,
	            i = new Array(n),
	            o = t.corkedRequestsFree;
	        o.entry = r;

	        for (var a = 0, h = !0; r;) {
	          i[a] = r, r.isBuf || (h = !1), r = r.next, a += 1;
	        }

	        i.allBuffers = h, b(e, t, !0, t.length, i, "", o.finish), t.pendingcb++, t.lastBufferedRequest = null, o.next ? (t.corkedRequestsFree = o.next, o.next = null) : t.corkedRequestsFree = new s(t), t.bufferedRequestCount = 0;
	      } else {
	        for (; r;) {
	          var f = r.chunk,
	              u = r.encoding,
	              c = r.callback;
	          if (b(e, t, !1, t.objectMode ? 1 : f.length, f, u, c), r = r.next, t.bufferedRequestCount--, t.writing) break;
	        }

	        null === r && (t.lastBufferedRequest = null);
	      }

	      t.bufferedRequest = r, t.bufferProcessing = !1;
	    }

	    function E(e) {
	      return e.ending && 0 === e.length && null === e.bufferedRequest && !e.finished && !e.writing;
	    }

	    function S(e, t) {
	      e._final(function (r) {
	        t.pendingcb--, r && e.emit("error", r), t.prefinished = !0, e.emit("prefinish"), A(e, t);
	      });
	    }

	    function A(e, t) {
	      var r = E(t);
	      return r && (!function (e, t) {
	        t.prefinished || t.finalCalled || ("function" == typeof e._final ? (t.pendingcb++, t.finalCalled = !0, o.nextTick(S, e, t)) : (t.prefinished = !0, e.emit("prefinish")));
	      }(e, t), 0 === t.pendingcb && (t.finished = !0, e.emit("finish"))), r;
	    }

	    f.inherits(y, c), _.prototype.getBuffer = function () {
	      for (var e = this.bufferedRequest, t = []; e;) {
	        t.push(e), e = e.next;
	      }

	      return t;
	    }, function () {
	      try {
	        Object.defineProperty(_.prototype, "buffer", {
	          get: u.deprecate(function () {
	            return this.getBuffer();
	          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
	        });
	      } catch (e) {}
	    }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (p = Function.prototype[Symbol.hasInstance], Object.defineProperty(y, Symbol.hasInstance, {
	      value: function value(e) {
	        return !!p.call(this, e) || this === y && e && e._writableState instanceof _;
	      }
	    })) : p = function p(e) {
	      return e instanceof this;
	    }, y.prototype.pipe = function () {
	      this.emit("error", new Error("Cannot pipe, not readable"));
	    }, y.prototype.write = function (e, t, r) {
	      var n,
	          i = this._writableState,
	          s = !1,
	          a = !i.objectMode && (n = e, l.isBuffer(n) || n instanceof d);
	      return a && !l.isBuffer(e) && (e = function (e) {
	        return l.from(e);
	      }(e)), "function" == typeof t && (r = t, t = null), a ? t = "buffer" : t || (t = i.defaultEncoding), "function" != typeof r && (r = m), i.ended ? function (e, t) {
	        var r = new Error("write after end");
	        e.emit("error", r), o.nextTick(t, r);
	      }(this, r) : (a || function (e, t, r, n) {
	        var i = !0,
	            s = !1;
	        return null === r ? s = new TypeError("May not write null values to stream") : "string" == typeof r || void 0 === r || t.objectMode || (s = new TypeError("Invalid non-string/buffer chunk")), s && (e.emit("error", s), o.nextTick(n, s), i = !1), i;
	      }(this, i, e, r)) && (i.pendingcb++, s = function (e, t, r, n, i, o) {
	        if (!r) {
	          var s = function (e, t, r) {
	            e.objectMode || !1 === e.decodeStrings || "string" != typeof t || (t = l.from(t, r));
	            return t;
	          }(t, n, i);

	          n !== s && (r = !0, i = "buffer", n = s);
	        }

	        var a = t.objectMode ? 1 : n.length;
	        t.length += a;
	        var h = t.length < t.highWaterMark;
	        h || (t.needDrain = !0);

	        if (t.writing || t.corked) {
	          var f = t.lastBufferedRequest;
	          t.lastBufferedRequest = {
	            chunk: n,
	            encoding: i,
	            isBuf: r,
	            callback: o,
	            next: null
	          }, f ? f.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest, t.bufferedRequestCount += 1;
	        } else b(e, t, !1, a, n, i, o);

	        return h;
	      }(this, i, a, e, t, r)), s;
	    }, y.prototype.cork = function () {
	      this._writableState.corked++;
	    }, y.prototype.uncork = function () {
	      var e = this._writableState;
	      e.corked && (e.corked--, e.writing || e.corked || e.finished || e.bufferProcessing || !e.bufferedRequest || v(this, e));
	    }, y.prototype.setDefaultEncoding = function (e) {
	      if ("string" == typeof e && (e = e.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + e);
	      return this._writableState.defaultEncoding = e, this;
	    }, Object.defineProperty(y.prototype, "writableHighWaterMark", {
	      enumerable: !1,
	      get: function get() {
	        return this._writableState.highWaterMark;
	      }
	    }), y.prototype._write = function (e, t, r) {
	      r(new Error("_write() is not implemented"));
	    }, y.prototype._writev = null, y.prototype.end = function (e, t, r) {
	      var n = this._writableState;
	      "function" == typeof e ? (r = e, e = null, t = null) : "function" == typeof t && (r = t, t = null), null != e && this.write(e, t), n.corked && (n.corked = 1, this.uncork()), n.ending || n.finished || function (e, t, r) {
	        t.ending = !0, A(e, t), r && (t.finished ? o.nextTick(r) : e.once("finish", r));
	        t.ended = !0, e.writable = !1;
	      }(this, n, r);
	    }, Object.defineProperty(y.prototype, "destroyed", {
	      get: function get() {
	        return void 0 !== this._writableState && this._writableState.destroyed;
	      },
	      set: function set(e) {
	        this._writableState && (this._writableState.destroyed = e);
	      }
	    }), y.prototype.destroy = g.destroy, y.prototype._undestroy = g.undestroy, y.prototype._destroy = function (e, t) {
	      this.end(), t(e);
	    };
	  }).call(this, r(3), r(43).setImmediate, r(2));
	}, function (e, t) {
	  e.exports = {
	    CRAM_FLAG_PRESERVE_QUAL_SCORES: 1,
	    CRAM_FLAG_DETACHED: 2,
	    CRAM_FLAG_MATE_DOWNSTREAM: 4,
	    CRAM_FLAG_NO_SEQ: 8,
	    CRAM_FLAG_MASK: 15,
	    CRAM_M_REVERSE: 1,
	    CRAM_M_UNMAP: 2,
	    BAM_FPAIRED: 1,
	    BAM_FPROPER_PAIR: 2,
	    BAM_FUNMAP: 4,
	    BAM_FMUNMAP: 8,
	    BAM_FREVERSE: 16,
	    BAM_FMREVERSE: 32,
	    BAM_FREAD1: 64,
	    BAM_FREAD2: 128,
	    BAM_FSECONDARY: 256,
	    BAM_FQCFAIL: 512,
	    BAM_FDUP: 1024,
	    BAM_FSUPPLEMENTARY: 2048,
	    BAM_CMATCH: 0,
	    BAM_CINS: 1,
	    BAM_CDEL: 2,
	    BAM_CREF_SKIP: 3,
	    BAM_CSOFT_CLIP: 4,
	    BAM_CHARD_CLIP: 5,
	    BAM_CPAD: 6,
	    BAM_CEQUAL: 7,
	    BAM_CDIFF: 8,
	    BAM_CBACK: 9,
	    BAM_CIGAR_STR: "MIDNSHP:XB",
	    BAM_CIGAR_SHIFT: 4,
	    BAM_CIGAR_MASK: 15,
	    BAM_CIGAR_TYPE: 246183
	  };
	}, function (e, t, r) {
	  var n = r(36);
	  e.exports = n;
	}, function (e, t) {
	  var r = {}.toString;

	  e.exports = Array.isArray || function (e) {
	    return "[object Array]" == r.call(e);
	  };
	}, function (e, t, r) {

	  (function (e) {
	    var n = r(1).Buffer,
	        i = r(39).Transform,
	        o = r(51),
	        s = r(27),
	        a = r(26).ok,
	        h = r(1).kMaxLength,
	        f = "Cannot create final Buffer. It would be larger than 0x" + h.toString(16) + " bytes";
	    o.Z_MIN_WINDOWBITS = 8, o.Z_MAX_WINDOWBITS = 15, o.Z_DEFAULT_WINDOWBITS = 15, o.Z_MIN_CHUNK = 64, o.Z_MAX_CHUNK = 1 / 0, o.Z_DEFAULT_CHUNK = 16384, o.Z_MIN_MEMLEVEL = 1, o.Z_MAX_MEMLEVEL = 9, o.Z_DEFAULT_MEMLEVEL = 8, o.Z_MIN_LEVEL = -1, o.Z_MAX_LEVEL = 9, o.Z_DEFAULT_LEVEL = o.Z_DEFAULT_COMPRESSION;

	    for (var u = Object.keys(o), c = 0; c < u.length; c++) {
	      var l = u[c];
	      l.match(/^Z/) && Object.defineProperty(t, l, {
	        enumerable: !0,
	        value: o[l],
	        writable: !1
	      });
	    }

	    for (var d = {
	      Z_OK: o.Z_OK,
	      Z_STREAM_END: o.Z_STREAM_END,
	      Z_NEED_DICT: o.Z_NEED_DICT,
	      Z_ERRNO: o.Z_ERRNO,
	      Z_STREAM_ERROR: o.Z_STREAM_ERROR,
	      Z_DATA_ERROR: o.Z_DATA_ERROR,
	      Z_MEM_ERROR: o.Z_MEM_ERROR,
	      Z_BUF_ERROR: o.Z_BUF_ERROR,
	      Z_VERSION_ERROR: o.Z_VERSION_ERROR
	    }, p = Object.keys(d), g = 0; g < p.length; g++) {
	      var m = p[g];
	      d[d[m]] = m;
	    }

	    function _(e, t, r) {
	      var i = [],
	          o = 0;

	      function s() {
	        for (var t; null !== (t = e.read());) {
	          i.push(t), o += t.length;
	        }

	        e.once("readable", s);
	      }

	      function a() {
	        var t,
	            s = null;
	        o >= h ? s = new RangeError(f) : t = n.concat(i, o), i = [], e.close(), r(s, t);
	      }

	      e.on("error", function (t) {
	        e.removeListener("end", a), e.removeListener("readable", s), r(t);
	      }), e.on("end", a), e.end(t), s();
	    }

	    function y(e, t) {
	      if ("string" == typeof t && (t = n.from(t)), !n.isBuffer(t)) throw new TypeError("Not a string or buffer");
	      var r = e._finishFlushFlag;
	      return e._processChunk(t, r);
	    }

	    function b(e) {
	      if (!(this instanceof b)) return new b(e);
	      C.call(this, e, o.DEFLATE);
	    }

	    function w(e) {
	      if (!(this instanceof w)) return new w(e);
	      C.call(this, e, o.INFLATE);
	    }

	    function v(e) {
	      if (!(this instanceof v)) return new v(e);
	      C.call(this, e, o.GZIP);
	    }

	    function E(e) {
	      if (!(this instanceof E)) return new E(e);
	      C.call(this, e, o.GUNZIP);
	    }

	    function S(e) {
	      if (!(this instanceof S)) return new S(e);
	      C.call(this, e, o.DEFLATERAW);
	    }

	    function A(e) {
	      if (!(this instanceof A)) return new A(e);
	      C.call(this, e, o.INFLATERAW);
	    }

	    function k(e) {
	      if (!(this instanceof k)) return new k(e);
	      C.call(this, e, o.UNZIP);
	    }

	    function x(e) {
	      return e === o.Z_NO_FLUSH || e === o.Z_PARTIAL_FLUSH || e === o.Z_SYNC_FLUSH || e === o.Z_FULL_FLUSH || e === o.Z_FINISH || e === o.Z_BLOCK;
	    }

	    function C(e, r) {
	      var s = this;
	      if (this._opts = e = e || {}, this._chunkSize = e.chunkSize || t.Z_DEFAULT_CHUNK, i.call(this, e), e.flush && !x(e.flush)) throw new Error("Invalid flush flag: " + e.flush);
	      if (e.finishFlush && !x(e.finishFlush)) throw new Error("Invalid flush flag: " + e.finishFlush);
	      if (this._flushFlag = e.flush || o.Z_NO_FLUSH, this._finishFlushFlag = void 0 !== e.finishFlush ? e.finishFlush : o.Z_FINISH, e.chunkSize && (e.chunkSize < t.Z_MIN_CHUNK || e.chunkSize > t.Z_MAX_CHUNK)) throw new Error("Invalid chunk size: " + e.chunkSize);
	      if (e.windowBits && (e.windowBits < t.Z_MIN_WINDOWBITS || e.windowBits > t.Z_MAX_WINDOWBITS)) throw new Error("Invalid windowBits: " + e.windowBits);
	      if (e.level && (e.level < t.Z_MIN_LEVEL || e.level > t.Z_MAX_LEVEL)) throw new Error("Invalid compression level: " + e.level);
	      if (e.memLevel && (e.memLevel < t.Z_MIN_MEMLEVEL || e.memLevel > t.Z_MAX_MEMLEVEL)) throw new Error("Invalid memLevel: " + e.memLevel);
	      if (e.strategy && e.strategy != t.Z_FILTERED && e.strategy != t.Z_HUFFMAN_ONLY && e.strategy != t.Z_RLE && e.strategy != t.Z_FIXED && e.strategy != t.Z_DEFAULT_STRATEGY) throw new Error("Invalid strategy: " + e.strategy);
	      if (e.dictionary && !n.isBuffer(e.dictionary)) throw new Error("Invalid dictionary: it should be a Buffer instance");
	      this._handle = new o.Zlib(r);
	      var a = this;
	      this._hadError = !1, this._handle.onerror = function (e, r) {
	        R(a), a._hadError = !0;
	        var n = new Error(e);
	        n.errno = r, n.code = t.codes[r], a.emit("error", n);
	      };
	      var h = t.Z_DEFAULT_COMPRESSION;
	      "number" == typeof e.level && (h = e.level);
	      var f = t.Z_DEFAULT_STRATEGY;
	      "number" == typeof e.strategy && (f = e.strategy), this._handle.init(e.windowBits || t.Z_DEFAULT_WINDOWBITS, h, e.memLevel || t.Z_DEFAULT_MEMLEVEL, f, e.dictionary), this._buffer = n.allocUnsafe(this._chunkSize), this._offset = 0, this._level = h, this._strategy = f, this.once("end", this.close), Object.defineProperty(this, "_closed", {
	        get: function get() {
	          return !s._handle;
	        },
	        configurable: !0,
	        enumerable: !0
	      });
	    }

	    function R(t, r) {
	      r && e.nextTick(r), t._handle && (t._handle.close(), t._handle = null);
	    }

	    function T(e) {
	      e.emit("close");
	    }

	    Object.defineProperty(t, "codes", {
	      enumerable: !0,
	      value: Object.freeze(d),
	      writable: !1
	    }), t.Deflate = b, t.Inflate = w, t.Gzip = v, t.Gunzip = E, t.DeflateRaw = S, t.InflateRaw = A, t.Unzip = k, t.createDeflate = function (e) {
	      return new b(e);
	    }, t.createInflate = function (e) {
	      return new w(e);
	    }, t.createDeflateRaw = function (e) {
	      return new S(e);
	    }, t.createInflateRaw = function (e) {
	      return new A(e);
	    }, t.createGzip = function (e) {
	      return new v(e);
	    }, t.createGunzip = function (e) {
	      return new E(e);
	    }, t.createUnzip = function (e) {
	      return new k(e);
	    }, t.deflate = function (e, t, r) {
	      return "function" == typeof t && (r = t, t = {}), _(new b(t), e, r);
	    }, t.deflateSync = function (e, t) {
	      return y(new b(t), e);
	    }, t.gzip = function (e, t, r) {
	      return "function" == typeof t && (r = t, t = {}), _(new v(t), e, r);
	    }, t.gzipSync = function (e, t) {
	      return y(new v(t), e);
	    }, t.deflateRaw = function (e, t, r) {
	      return "function" == typeof t && (r = t, t = {}), _(new S(t), e, r);
	    }, t.deflateRawSync = function (e, t) {
	      return y(new S(t), e);
	    }, t.unzip = function (e, t, r) {
	      return "function" == typeof t && (r = t, t = {}), _(new k(t), e, r);
	    }, t.unzipSync = function (e, t) {
	      return y(new k(t), e);
	    }, t.inflate = function (e, t, r) {
	      return "function" == typeof t && (r = t, t = {}), _(new w(t), e, r);
	    }, t.inflateSync = function (e, t) {
	      return y(new w(t), e);
	    }, t.gunzip = function (e, t, r) {
	      return "function" == typeof t && (r = t, t = {}), _(new E(t), e, r);
	    }, t.gunzipSync = function (e, t) {
	      return y(new E(t), e);
	    }, t.inflateRaw = function (e, t, r) {
	      return "function" == typeof t && (r = t, t = {}), _(new A(t), e, r);
	    }, t.inflateRawSync = function (e, t) {
	      return y(new A(t), e);
	    }, s.inherits(C, i), C.prototype.params = function (r, n, i) {
	      if (r < t.Z_MIN_LEVEL || r > t.Z_MAX_LEVEL) throw new RangeError("Invalid compression level: " + r);
	      if (n != t.Z_FILTERED && n != t.Z_HUFFMAN_ONLY && n != t.Z_RLE && n != t.Z_FIXED && n != t.Z_DEFAULT_STRATEGY) throw new TypeError("Invalid strategy: " + n);

	      if (this._level !== r || this._strategy !== n) {
	        var s = this;
	        this.flush(o.Z_SYNC_FLUSH, function () {
	          a(s._handle, "zlib binding closed"), s._handle.params(r, n), s._hadError || (s._level = r, s._strategy = n, i && i());
	        });
	      } else e.nextTick(i);
	    }, C.prototype.reset = function () {
	      return a(this._handle, "zlib binding closed"), this._handle.reset();
	    }, C.prototype._flush = function (e) {
	      this._transform(n.alloc(0), "", e);
	    }, C.prototype.flush = function (t, r) {
	      var i = this,
	          s = this._writableState;
	      ("function" == typeof t || void 0 === t && !r) && (r = t, t = o.Z_FULL_FLUSH), s.ended ? r && e.nextTick(r) : s.ending ? r && this.once("end", r) : s.needDrain ? r && this.once("drain", function () {
	        return i.flush(t, r);
	      }) : (this._flushFlag = t, this.write(n.alloc(0), "", r));
	    }, C.prototype.close = function (t) {
	      R(this, t), e.nextTick(T, this);
	    }, C.prototype._transform = function (e, t, r) {
	      var i,
	          s = this._writableState,
	          a = (s.ending || s.ended) && (!e || s.length === e.length);
	      return null === e || n.isBuffer(e) ? this._handle ? (a ? i = this._finishFlushFlag : (i = this._flushFlag, e.length >= s.length && (this._flushFlag = this._opts.flush || o.Z_NO_FLUSH)), void this._processChunk(e, i, r)) : r(new Error("zlib binding closed")) : r(new Error("invalid input"));
	    }, C.prototype._processChunk = function (e, t, r) {
	      var i = e && e.length,
	          o = this._chunkSize - this._offset,
	          s = 0,
	          u = this,
	          c = "function" == typeof r;

	      if (!c) {
	        var l,
	            d = [],
	            p = 0;
	        this.on("error", function (e) {
	          l = e;
	        }), a(this._handle, "zlib binding closed");

	        do {
	          var g = this._handle.writeSync(t, e, s, i, this._buffer, this._offset, o);
	        } while (!this._hadError && y(g[0], g[1]));

	        if (this._hadError) throw l;
	        if (p >= h) throw R(this), new RangeError(f);
	        var m = n.concat(d, p);
	        return R(this), m;
	      }

	      a(this._handle, "zlib binding closed");

	      var _ = this._handle.write(t, e, s, i, this._buffer, this._offset, o);

	      function y(h, f) {
	        if (this && (this.buffer = null, this.callback = null), !u._hadError) {
	          var l = o - f;

	          if (a(l >= 0, "have should not go down"), l > 0) {
	            var g = u._buffer.slice(u._offset, u._offset + l);

	            u._offset += l, c ? u.push(g) : (d.push(g), p += g.length);
	          }

	          if ((0 === f || u._offset >= u._chunkSize) && (o = u._chunkSize, u._offset = 0, u._buffer = n.allocUnsafe(u._chunkSize)), 0 === f) {
	            if (s += i - h, i = h, !c) return !0;

	            var m = u._handle.write(t, e, s, i, u._buffer, u._offset, u._chunkSize);

	            return m.callback = y, void (m.buffer = e);
	          }

	          if (!c) return !1;
	          r();
	        }
	      }

	      _.buffer = e, _.callback = y;
	    }, s.inherits(b, C), s.inherits(w, C), s.inherits(v, C), s.inherits(E, C), s.inherits(S, C), s.inherits(A, C), s.inherits(k, C);
	  }).call(this, r(3));
	}, function (e, t, r) {

	  (function (t, n) {
	    var i = r(9);
	    e.exports = b;
	    var o,
	        s = r(19);
	    b.ReadableState = y;
	    r(14).EventEmitter;

	    var a = function a(e, t) {
	      return e.listeners(t).length;
	    },
	        h = r(22),
	        f = r(10).Buffer,
	        u = t.Uint8Array || function () {};

	    var c = r(7);
	    c.inherits = r(4);
	    var l = r(40),
	        d = void 0;
	    d = l && l.debuglog ? l.debuglog("stream") : function () {};
	    var p,
	        g = r(41),
	        m = r(23);
	    c.inherits(b, h);
	    var _ = ["error", "close", "destroy", "pause", "resume"];

	    function y(e, t) {
	      e = e || {};
	      var n = t instanceof (o = o || r(5));
	      this.objectMode = !!e.objectMode, n && (this.objectMode = this.objectMode || !!e.readableObjectMode);
	      var i = e.highWaterMark,
	          s = e.readableHighWaterMark,
	          a = this.objectMode ? 16 : 16384;
	      this.highWaterMark = i || 0 === i ? i : n && (s || 0 === s) ? s : a, this.highWaterMark = Math.floor(this.highWaterMark), this.buffer = new g(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.destroyed = !1, this.defaultEncoding = e.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, e.encoding && (p || (p = r(24).StringDecoder), this.decoder = new p(e.encoding), this.encoding = e.encoding);
	    }

	    function b(e) {
	      if (o = o || r(5), !(this instanceof b)) return new b(e);
	      this._readableState = new y(e, this), this.readable = !0, e && ("function" == typeof e.read && (this._read = e.read), "function" == typeof e.destroy && (this._destroy = e.destroy)), h.call(this);
	    }

	    function w(e, t, r, n, i) {
	      var o,
	          s = e._readableState;
	      null === t ? (s.reading = !1, function (e, t) {
	        if (t.ended) return;

	        if (t.decoder) {
	          var r = t.decoder.end();
	          r && r.length && (t.buffer.push(r), t.length += t.objectMode ? 1 : r.length);
	        }

	        t.ended = !0, A(e);
	      }(e, s)) : (i || (o = function (e, t) {
	        var r;
	        n = t, f.isBuffer(n) || n instanceof u || "string" == typeof t || void 0 === t || e.objectMode || (r = new TypeError("Invalid non-string/buffer chunk"));
	        var n;
	        return r;
	      }(s, t)), o ? e.emit("error", o) : s.objectMode || t && t.length > 0 ? ("string" == typeof t || s.objectMode || Object.getPrototypeOf(t) === f.prototype || (t = function (e) {
	        return f.from(e);
	      }(t)), n ? s.endEmitted ? e.emit("error", new Error("stream.unshift() after end event")) : v(e, s, t, !0) : s.ended ? e.emit("error", new Error("stream.push() after EOF")) : (s.reading = !1, s.decoder && !r ? (t = s.decoder.write(t), s.objectMode || 0 !== t.length ? v(e, s, t, !1) : x(e, s)) : v(e, s, t, !1))) : n || (s.reading = !1));
	      return function (e) {
	        return !e.ended && (e.needReadable || e.length < e.highWaterMark || 0 === e.length);
	      }(s);
	    }

	    function v(e, t, r, n) {
	      t.flowing && 0 === t.length && !t.sync ? (e.emit("data", r), e.read(0)) : (t.length += t.objectMode ? 1 : r.length, n ? t.buffer.unshift(r) : t.buffer.push(r), t.needReadable && A(e)), x(e, t);
	    }

	    Object.defineProperty(b.prototype, "destroyed", {
	      get: function get() {
	        return void 0 !== this._readableState && this._readableState.destroyed;
	      },
	      set: function set(e) {
	        this._readableState && (this._readableState.destroyed = e);
	      }
	    }), b.prototype.destroy = m.destroy, b.prototype._undestroy = m.undestroy, b.prototype._destroy = function (e, t) {
	      this.push(null), t(e);
	    }, b.prototype.push = function (e, t) {
	      var r,
	          n = this._readableState;
	      return n.objectMode ? r = !0 : "string" == typeof e && ((t = t || n.defaultEncoding) !== n.encoding && (e = f.from(e, t), t = ""), r = !0), w(this, e, t, !1, r);
	    }, b.prototype.unshift = function (e) {
	      return w(this, e, null, !0, !1);
	    }, b.prototype.isPaused = function () {
	      return !1 === this._readableState.flowing;
	    }, b.prototype.setEncoding = function (e) {
	      return p || (p = r(24).StringDecoder), this._readableState.decoder = new p(e), this._readableState.encoding = e, this;
	    };
	    var E = 8388608;

	    function S(e, t) {
	      return e <= 0 || 0 === t.length && t.ended ? 0 : t.objectMode ? 1 : e != e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = function (e) {
	        return e >= E ? e = E : (e--, e |= e >>> 1, e |= e >>> 2, e |= e >>> 4, e |= e >>> 8, e |= e >>> 16, e++), e;
	      }(e)), e <= t.length ? e : t.ended ? t.length : (t.needReadable = !0, 0));
	    }

	    function A(e) {
	      var t = e._readableState;
	      t.needReadable = !1, t.emittedReadable || (d("emitReadable", t.flowing), t.emittedReadable = !0, t.sync ? i.nextTick(k, e) : k(e));
	    }

	    function k(e) {
	      d("emit readable"), e.emit("readable"), I(e);
	    }

	    function x(e, t) {
	      t.readingMore || (t.readingMore = !0, i.nextTick(C, e, t));
	    }

	    function C(e, t) {
	      for (var r = t.length; !t.reading && !t.flowing && !t.ended && t.length < t.highWaterMark && (d("maybeReadMore read 0"), e.read(0), r !== t.length);) {
	        r = t.length;
	      }

	      t.readingMore = !1;
	    }

	    function R(e) {
	      d("readable nexttick read 0"), e.read(0);
	    }

	    function T(e, t) {
	      t.reading || (d("resume read 0"), e.read(0)), t.resumeScheduled = !1, t.awaitDrain = 0, e.emit("resume"), I(e), t.flowing && !t.reading && e.read(0);
	    }

	    function I(e) {
	      var t = e._readableState;

	      for (d("flow", t.flowing); t.flowing && null !== e.read();) {
	      }
	    }

	    function B(e, t) {
	      return 0 === t.length ? null : (t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (r = t.decoder ? t.buffer.join("") : 1 === t.buffer.length ? t.buffer.head.data : t.buffer.concat(t.length), t.buffer.clear()) : r = function (e, t, r) {
	        var n;
	        e < t.head.data.length ? (n = t.head.data.slice(0, e), t.head.data = t.head.data.slice(e)) : n = e === t.head.data.length ? t.shift() : r ? function (e, t) {
	          var r = t.head,
	              n = 1,
	              i = r.data;
	          e -= i.length;

	          for (; r = r.next;) {
	            var o = r.data,
	                s = e > o.length ? o.length : e;

	            if (s === o.length ? i += o : i += o.slice(0, e), 0 === (e -= s)) {
	              s === o.length ? (++n, r.next ? t.head = r.next : t.head = t.tail = null) : (t.head = r, r.data = o.slice(s));
	              break;
	            }

	            ++n;
	          }

	          return t.length -= n, i;
	        }(e, t) : function (e, t) {
	          var r = f.allocUnsafe(e),
	              n = t.head,
	              i = 1;
	          n.data.copy(r), e -= n.data.length;

	          for (; n = n.next;) {
	            var o = n.data,
	                s = e > o.length ? o.length : e;

	            if (o.copy(r, r.length - e, 0, s), 0 === (e -= s)) {
	              s === o.length ? (++i, n.next ? t.head = n.next : t.head = t.tail = null) : (t.head = n, n.data = o.slice(s));
	              break;
	            }

	            ++i;
	          }

	          return t.length -= i, r;
	        }(e, t);
	        return n;
	      }(e, t.buffer, t.decoder), r);
	      var r;
	    }

	    function L(e) {
	      var t = e._readableState;
	      if (t.length > 0) throw new Error('"endReadable()" called on non-empty stream');
	      t.endEmitted || (t.ended = !0, i.nextTick(N, t, e));
	    }

	    function N(e, t) {
	      e.endEmitted || 0 !== e.length || (e.endEmitted = !0, t.readable = !1, t.emit("end"));
	    }

	    function F(e, t) {
	      for (var r = 0, n = e.length; r < n; r++) {
	        if (e[r] === t) return r;
	      }

	      return -1;
	    }

	    b.prototype.read = function (e) {
	      d("read", e), e = parseInt(e, 10);
	      var t = this._readableState,
	          r = e;
	      if (0 !== e && (t.emittedReadable = !1), 0 === e && t.needReadable && (t.length >= t.highWaterMark || t.ended)) return d("read: emitReadable", t.length, t.ended), 0 === t.length && t.ended ? L(this) : A(this), null;
	      if (0 === (e = S(e, t)) && t.ended) return 0 === t.length && L(this), null;
	      var n,
	          i = t.needReadable;
	      return d("need readable", i), (0 === t.length || t.length - e < t.highWaterMark) && d("length less than watermark", i = !0), t.ended || t.reading ? d("reading or ended", i = !1) : i && (d("do read"), t.reading = !0, t.sync = !0, 0 === t.length && (t.needReadable = !0), this._read(t.highWaterMark), t.sync = !1, t.reading || (e = S(r, t))), null === (n = e > 0 ? B(e, t) : null) ? (t.needReadable = !0, e = 0) : t.length -= e, 0 === t.length && (t.ended || (t.needReadable = !0), r !== e && t.ended && L(this)), null !== n && this.emit("data", n), n;
	    }, b.prototype._read = function (e) {
	      this.emit("error", new Error("_read() is not implemented"));
	    }, b.prototype.pipe = function (e, t) {
	      var r = this,
	          o = this._readableState;

	      switch (o.pipesCount) {
	        case 0:
	          o.pipes = e;
	          break;

	        case 1:
	          o.pipes = [o.pipes, e];
	          break;

	        default:
	          o.pipes.push(e);
	      }

	      o.pipesCount += 1, d("pipe count=%d opts=%j", o.pipesCount, t);
	      var h = (!t || !1 !== t.end) && e !== n.stdout && e !== n.stderr ? u : b;

	      function f(t, n) {
	        d("onunpipe"), t === r && n && !1 === n.hasUnpiped && (n.hasUnpiped = !0, d("cleanup"), e.removeListener("close", _), e.removeListener("finish", y), e.removeListener("drain", c), e.removeListener("error", m), e.removeListener("unpipe", f), r.removeListener("end", u), r.removeListener("end", b), r.removeListener("data", g), l = !0, !o.awaitDrain || e._writableState && !e._writableState.needDrain || c());
	      }

	      function u() {
	        d("onend"), e.end();
	      }

	      o.endEmitted ? i.nextTick(h) : r.once("end", h), e.on("unpipe", f);

	      var c = function (e) {
	        return function () {
	          var t = e._readableState;
	          d("pipeOnDrain", t.awaitDrain), t.awaitDrain && t.awaitDrain--, 0 === t.awaitDrain && a(e, "data") && (t.flowing = !0, I(e));
	        };
	      }(r);

	      e.on("drain", c);
	      var l = !1;
	      var p = !1;

	      function g(t) {
	        d("ondata"), p = !1, !1 !== e.write(t) || p || ((1 === o.pipesCount && o.pipes === e || o.pipesCount > 1 && -1 !== F(o.pipes, e)) && !l && (d("false write response, pause", r._readableState.awaitDrain), r._readableState.awaitDrain++, p = !0), r.pause());
	      }

	      function m(t) {
	        d("onerror", t), b(), e.removeListener("error", m), 0 === a(e, "error") && e.emit("error", t);
	      }

	      function _() {
	        e.removeListener("finish", y), b();
	      }

	      function y() {
	        d("onfinish"), e.removeListener("close", _), b();
	      }

	      function b() {
	        d("unpipe"), r.unpipe(e);
	      }

	      return r.on("data", g), function (e, t, r) {
	        if ("function" == typeof e.prependListener) return e.prependListener(t, r);
	        e._events && e._events[t] ? s(e._events[t]) ? e._events[t].unshift(r) : e._events[t] = [r, e._events[t]] : e.on(t, r);
	      }(e, "error", m), e.once("close", _), e.once("finish", y), e.emit("pipe", r), o.flowing || (d("pipe resume"), r.resume()), e;
	    }, b.prototype.unpipe = function (e) {
	      var t = this._readableState,
	          r = {
	        hasUnpiped: !1
	      };
	      if (0 === t.pipesCount) return this;
	      if (1 === t.pipesCount) return e && e !== t.pipes ? this : (e || (e = t.pipes), t.pipes = null, t.pipesCount = 0, t.flowing = !1, e && e.emit("unpipe", this, r), this);

	      if (!e) {
	        var n = t.pipes,
	            i = t.pipesCount;
	        t.pipes = null, t.pipesCount = 0, t.flowing = !1;

	        for (var o = 0; o < i; o++) {
	          n[o].emit("unpipe", this, r);
	        }

	        return this;
	      }

	      var s = F(t.pipes, e);
	      return -1 === s ? this : (t.pipes.splice(s, 1), t.pipesCount -= 1, 1 === t.pipesCount && (t.pipes = t.pipes[0]), e.emit("unpipe", this, r), this);
	    }, b.prototype.on = function (e, t) {
	      var r = h.prototype.on.call(this, e, t);
	      if ("data" === e) !1 !== this._readableState.flowing && this.resume();else if ("readable" === e) {
	        var n = this._readableState;
	        n.endEmitted || n.readableListening || (n.readableListening = n.needReadable = !0, n.emittedReadable = !1, n.reading ? n.length && A(this) : i.nextTick(R, this));
	      }
	      return r;
	    }, b.prototype.addListener = b.prototype.on, b.prototype.resume = function () {
	      var e = this._readableState;
	      return e.flowing || (d("resume"), e.flowing = !0, function (e, t) {
	        t.resumeScheduled || (t.resumeScheduled = !0, i.nextTick(T, e, t));
	      }(this, e)), this;
	    }, b.prototype.pause = function () {
	      return d("call pause flowing=%j", this._readableState.flowing), !1 !== this._readableState.flowing && (d("pause"), this._readableState.flowing = !1, this.emit("pause")), this;
	    }, b.prototype.wrap = function (e) {
	      var t = this,
	          r = this._readableState,
	          n = !1;

	      for (var i in e.on("end", function () {
	        if (d("wrapped end"), r.decoder && !r.ended) {
	          var e = r.decoder.end();
	          e && e.length && t.push(e);
	        }

	        t.push(null);
	      }), e.on("data", function (i) {
	        (d("wrapped data"), r.decoder && (i = r.decoder.write(i)), r.objectMode && null == i) || (r.objectMode || i && i.length) && (t.push(i) || (n = !0, e.pause()));
	      }), e) {
	        void 0 === this[i] && "function" == typeof e[i] && (this[i] = function (t) {
	          return function () {
	            return e[t].apply(e, arguments);
	          };
	        }(i));
	      }

	      for (var o = 0; o < _.length; o++) {
	        e.on(_[o], this.emit.bind(this, _[o]));
	      }

	      return this._read = function (t) {
	        d("wrapped _read", t), n && (n = !1, e.resume());
	      }, this;
	    }, Object.defineProperty(b.prototype, "readableHighWaterMark", {
	      enumerable: !1,
	      get: function get() {
	        return this._readableState.highWaterMark;
	      }
	    }), b._fromList = B;
	  }).call(this, r(2), r(3));
	}, function (e, t, r) {
	  e.exports = r(14).EventEmitter;
	}, function (e, t, r) {

	  var n = r(9);

	  function i(e, t) {
	    e.emit("error", t);
	  }

	  e.exports = {
	    destroy: function destroy(e, t) {
	      var r = this,
	          o = this._readableState && this._readableState.destroyed,
	          s = this._writableState && this._writableState.destroyed;
	      return o || s ? (t ? t(e) : !e || this._writableState && this._writableState.errorEmitted || n.nextTick(i, this, e), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(e || null, function (e) {
	        !t && e ? (n.nextTick(i, r, e), r._writableState && (r._writableState.errorEmitted = !0)) : t && t(e);
	      }), this);
	    },
	    undestroy: function undestroy() {
	      this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
	    }
	  };
	}, function (e, t, r) {

	  var n = r(10).Buffer,
	      i = n.isEncoding || function (e) {
	    switch ((e = "" + e) && e.toLowerCase()) {
	      case "hex":
	      case "utf8":
	      case "utf-8":
	      case "ascii":
	      case "binary":
	      case "base64":
	      case "ucs2":
	      case "ucs-2":
	      case "utf16le":
	      case "utf-16le":
	      case "raw":
	        return !0;

	      default:
	        return !1;
	    }
	  };

	  function o(e) {
	    var t;

	    switch (this.encoding = function (e) {
	      var t = function (e) {
	        if (!e) return "utf8";

	        for (var t;;) {
	          switch (e) {
	            case "utf8":
	            case "utf-8":
	              return "utf8";

	            case "ucs2":
	            case "ucs-2":
	            case "utf16le":
	            case "utf-16le":
	              return "utf16le";

	            case "latin1":
	            case "binary":
	              return "latin1";

	            case "base64":
	            case "ascii":
	            case "hex":
	              return e;

	            default:
	              if (t) return;
	              e = ("" + e).toLowerCase(), t = !0;
	          }
	        }
	      }(e);

	      if ("string" != typeof t && (n.isEncoding === i || !i(e))) throw new Error("Unknown encoding: " + e);
	      return t || e;
	    }(e), this.encoding) {
	      case "utf16le":
	        this.text = h, this.end = f, t = 4;
	        break;

	      case "utf8":
	        this.fillLast = a, t = 4;
	        break;

	      case "base64":
	        this.text = u, this.end = c, t = 3;
	        break;

	      default:
	        return this.write = l, void (this.end = d);
	    }

	    this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(t);
	  }

	  function s(e) {
	    return e <= 127 ? 0 : e >> 5 == 6 ? 2 : e >> 4 == 14 ? 3 : e >> 3 == 30 ? 4 : e >> 6 == 2 ? -1 : -2;
	  }

	  function a(e) {
	    var t = this.lastTotal - this.lastNeed,
	        r = function (e, t, r) {
	      if (128 != (192 & t[0])) return e.lastNeed = 0, "ï¿½";

	      if (e.lastNeed > 1 && t.length > 1) {
	        if (128 != (192 & t[1])) return e.lastNeed = 1, "ï¿½";
	        if (e.lastNeed > 2 && t.length > 2 && 128 != (192 & t[2])) return e.lastNeed = 2, "ï¿½";
	      }
	    }(this, e);

	    return void 0 !== r ? r : this.lastNeed <= e.length ? (e.copy(this.lastChar, t, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e.copy(this.lastChar, t, 0, e.length), void (this.lastNeed -= e.length));
	  }

	  function h(e, t) {
	    if ((e.length - t) % 2 == 0) {
	      var r = e.toString("utf16le", t);

	      if (r) {
	        var n = r.charCodeAt(r.length - 1);
	        if (n >= 55296 && n <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1], r.slice(0, -1);
	      }

	      return r;
	    }

	    return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e[e.length - 1], e.toString("utf16le", t, e.length - 1);
	  }

	  function f(e) {
	    var t = e && e.length ? this.write(e) : "";

	    if (this.lastNeed) {
	      var r = this.lastTotal - this.lastNeed;
	      return t + this.lastChar.toString("utf16le", 0, r);
	    }

	    return t;
	  }

	  function u(e, t) {
	    var r = (e.length - t) % 3;
	    return 0 === r ? e.toString("base64", t) : (this.lastNeed = 3 - r, this.lastTotal = 3, 1 === r ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1]), e.toString("base64", t, e.length - r));
	  }

	  function c(e) {
	    var t = e && e.length ? this.write(e) : "";
	    return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t;
	  }

	  function l(e) {
	    return e.toString(this.encoding);
	  }

	  function d(e) {
	    return e && e.length ? this.write(e) : "";
	  }

	  t.StringDecoder = o, o.prototype.write = function (e) {
	    if (0 === e.length) return "";
	    var t, r;

	    if (this.lastNeed) {
	      if (void 0 === (t = this.fillLast(e))) return "";
	      r = this.lastNeed, this.lastNeed = 0;
	    } else r = 0;

	    return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || "";
	  }, o.prototype.end = function (e) {
	    var t = e && e.length ? this.write(e) : "";
	    return this.lastNeed ? t + "ï¿½" : t;
	  }, o.prototype.text = function (e, t) {
	    var r = function (e, t, r) {
	      var n = t.length - 1;
	      if (n < r) return 0;
	      var i = s(t[n]);
	      if (i >= 0) return i > 0 && (e.lastNeed = i - 1), i;
	      if (--n < r || -2 === i) return 0;
	      if ((i = s(t[n])) >= 0) return i > 0 && (e.lastNeed = i - 2), i;
	      if (--n < r || -2 === i) return 0;
	      if ((i = s(t[n])) >= 0) return i > 0 && (2 === i ? i = 0 : e.lastNeed = i - 3), i;
	      return 0;
	    }(this, e, t);

	    if (!this.lastNeed) return e.toString("utf8", t);
	    this.lastTotal = r;
	    var n = e.length - (r - this.lastNeed);
	    return e.copy(this.lastChar, 0, n), e.toString("utf8", t, n);
	  }, o.prototype.fillLast = function (e) {
	    if (this.lastNeed <= e.length) return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
	    e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length), this.lastNeed -= e.length;
	  };
	}, function (e, t, r) {

	  e.exports = s;
	  var n = r(5),
	      i = r(7);

	  function o(e, t) {
	    var r = this._transformState;
	    r.transforming = !1;
	    var n = r.writecb;
	    if (!n) return this.emit("error", new Error("write callback called multiple times"));
	    r.writechunk = null, r.writecb = null, null != t && this.push(t), n(e);
	    var i = this._readableState;
	    i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
	  }

	  function s(e) {
	    if (!(this instanceof s)) return new s(e);
	    n.call(this, e), this._transformState = {
	      afterTransform: o.bind(this),
	      needTransform: !1,
	      transforming: !1,
	      writecb: null,
	      writechunk: null,
	      writeencoding: null
	    }, this._readableState.needReadable = !0, this._readableState.sync = !1, e && ("function" == typeof e.transform && (this._transform = e.transform), "function" == typeof e.flush && (this._flush = e.flush)), this.on("prefinish", a);
	  }

	  function a() {
	    var e = this;
	    "function" == typeof this._flush ? this._flush(function (t, r) {
	      h(e, t, r);
	    }) : h(this, null, null);
	  }

	  function h(e, t, r) {
	    if (t) return e.emit("error", t);
	    if (null != r && e.push(r), e._writableState.length) throw new Error("Calling transform done when ws.length != 0");
	    if (e._transformState.transforming) throw new Error("Calling transform done when still transforming");
	    return e.push(null);
	  }

	  i.inherits = r(4), i.inherits(s, n), s.prototype.push = function (e, t) {
	    return this._transformState.needTransform = !1, n.prototype.push.call(this, e, t);
	  }, s.prototype._transform = function (e, t, r) {
	    throw new Error("_transform() is not implemented");
	  }, s.prototype._write = function (e, t, r) {
	    var n = this._transformState;

	    if (n.writecb = r, n.writechunk = e, n.writeencoding = t, !n.transforming) {
	      var i = this._readableState;
	      (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
	    }
	  }, s.prototype._read = function (e) {
	    var t = this._transformState;
	    null !== t.writechunk && t.writecb && !t.transforming ? (t.transforming = !0, this._transform(t.writechunk, t.writeencoding, t.afterTransform)) : t.needTransform = !0;
	  }, s.prototype._destroy = function (e, t) {
	    var r = this;

	    n.prototype._destroy.call(this, e, function (e) {
	      t(e), r.emit("close");
	    });
	  };
	}, function (e, t, r) {

	  (function (t) {
	    /*!
	     * The buffer module from node.js, for the browser.
	     *
	     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	     * @license  MIT
	     */
	    function n(e, t) {
	      if (e === t) return 0;

	      for (var r = e.length, n = t.length, i = 0, o = Math.min(r, n); i < o; ++i) {
	        if (e[i] !== t[i]) {
	          r = e[i], n = t[i];
	          break;
	        }
	      }

	      return r < n ? -1 : n < r ? 1 : 0;
	    }

	    function i(e) {
	      return t.Buffer && "function" == typeof t.Buffer.isBuffer ? t.Buffer.isBuffer(e) : !(null == e || !e._isBuffer);
	    }

	    var o = r(27),
	        s = Object.prototype.hasOwnProperty,
	        a = Array.prototype.slice,
	        h = "foo" === function () {}.name;

	    function f(e) {
	      return Object.prototype.toString.call(e);
	    }

	    function u(e) {
	      return !i(e) && "function" == typeof t.ArrayBuffer && ("function" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(e) : !!e && (e instanceof DataView || !!(e.buffer && e.buffer instanceof ArrayBuffer)));
	    }

	    var c = e.exports = _,
	        l = /\s*function\s+([^\(\s]*)\s*/;

	    function d(e) {
	      if (o.isFunction(e)) {
	        if (h) return e.name;
	        var t = e.toString().match(l);
	        return t && t[1];
	      }
	    }

	    function p(e, t) {
	      return "string" == typeof e ? e.length < t ? e : e.slice(0, t) : e;
	    }

	    function g(e) {
	      if (h || !o.isFunction(e)) return o.inspect(e);
	      var t = d(e);
	      return "[Function" + (t ? ": " + t : "") + "]";
	    }

	    function m(e, t, r, n, i) {
	      throw new c.AssertionError({
	        message: r,
	        actual: e,
	        expected: t,
	        operator: n,
	        stackStartFunction: i
	      });
	    }

	    function _(e, t) {
	      e || m(e, !0, t, "==", c.ok);
	    }

	    function y(e, t, r, s) {
	      if (e === t) return !0;
	      if (i(e) && i(t)) return 0 === n(e, t);
	      if (o.isDate(e) && o.isDate(t)) return e.getTime() === t.getTime();
	      if (o.isRegExp(e) && o.isRegExp(t)) return e.source === t.source && e.global === t.global && e.multiline === t.multiline && e.lastIndex === t.lastIndex && e.ignoreCase === t.ignoreCase;

	      if (null !== e && "object" == _typeof(e) || null !== t && "object" == _typeof(t)) {
	        if (u(e) && u(t) && f(e) === f(t) && !(e instanceof Float32Array || e instanceof Float64Array)) return 0 === n(new Uint8Array(e.buffer), new Uint8Array(t.buffer));
	        if (i(e) !== i(t)) return !1;
	        var h = (s = s || {
	          actual: [],
	          expected: []
	        }).actual.indexOf(e);
	        return -1 !== h && h === s.expected.indexOf(t) || (s.actual.push(e), s.expected.push(t), function (e, t, r, n) {
	          if (null == e || null == t) return !1;
	          if (o.isPrimitive(e) || o.isPrimitive(t)) return e === t;
	          if (r && Object.getPrototypeOf(e) !== Object.getPrototypeOf(t)) return !1;
	          var i = b(e),
	              s = b(t);
	          if (i && !s || !i && s) return !1;
	          if (i) return e = a.call(e), t = a.call(t), y(e, t, r);
	          var h,
	              f,
	              u = E(e),
	              c = E(t);
	          if (u.length !== c.length) return !1;

	          for (u.sort(), c.sort(), f = u.length - 1; f >= 0; f--) {
	            if (u[f] !== c[f]) return !1;
	          }

	          for (f = u.length - 1; f >= 0; f--) {
	            if (h = u[f], !y(e[h], t[h], r, n)) return !1;
	          }

	          return !0;
	        }(e, t, r, s));
	      }

	      return r ? e === t : e == t;
	    }

	    function b(e) {
	      return "[object Arguments]" == Object.prototype.toString.call(e);
	    }

	    function w(e, t) {
	      if (!e || !t) return !1;
	      if ("[object RegExp]" == Object.prototype.toString.call(t)) return t.test(e);

	      try {
	        if (e instanceof t) return !0;
	      } catch (e) {}

	      return !Error.isPrototypeOf(t) && !0 === t.call({}, e);
	    }

	    function v(e, t, r, n) {
	      var i;
	      if ("function" != typeof t) throw new TypeError('"block" argument must be a function');
	      "string" == typeof r && (n = r, r = null), i = function (e) {
	        var t;

	        try {
	          e();
	        } catch (e) {
	          t = e;
	        }

	        return t;
	      }(t), n = (r && r.name ? " (" + r.name + ")." : ".") + (n ? " " + n : "."), e && !i && m(i, r, "Missing expected exception" + n);
	      var s = "string" == typeof n,
	          a = !e && i && !r;
	      if ((!e && o.isError(i) && s && w(i, r) || a) && m(i, r, "Got unwanted exception" + n), e && i && r && !w(i, r) || !e && i) throw i;
	    }

	    c.AssertionError = function (e) {
	      var t;
	      this.name = "AssertionError", this.actual = e.actual, this.expected = e.expected, this.operator = e.operator, e.message ? (this.message = e.message, this.generatedMessage = !1) : (this.message = p(g((t = this).actual), 128) + " " + t.operator + " " + p(g(t.expected), 128), this.generatedMessage = !0);
	      var r = e.stackStartFunction || m;
	      if (Error.captureStackTrace) Error.captureStackTrace(this, r);else {
	        var n = new Error();

	        if (n.stack) {
	          var i = n.stack,
	              o = d(r),
	              s = i.indexOf("\n" + o);

	          if (s >= 0) {
	            var a = i.indexOf("\n", s + 1);
	            i = i.substring(a + 1);
	          }

	          this.stack = i;
	        }
	      }
	    }, o.inherits(c.AssertionError, Error), c.fail = m, c.ok = _, c.equal = function (e, t, r) {
	      e != t && m(e, t, r, "==", c.equal);
	    }, c.notEqual = function (e, t, r) {
	      e == t && m(e, t, r, "!=", c.notEqual);
	    }, c.deepEqual = function (e, t, r) {
	      y(e, t, !1) || m(e, t, r, "deepEqual", c.deepEqual);
	    }, c.deepStrictEqual = function (e, t, r) {
	      y(e, t, !0) || m(e, t, r, "deepStrictEqual", c.deepStrictEqual);
	    }, c.notDeepEqual = function (e, t, r) {
	      y(e, t, !1) && m(e, t, r, "notDeepEqual", c.notDeepEqual);
	    }, c.notDeepStrictEqual = function e(t, r, n) {
	      y(t, r, !0) && m(t, r, n, "notDeepStrictEqual", e);
	    }, c.strictEqual = function (e, t, r) {
	      e !== t && m(e, t, r, "===", c.strictEqual);
	    }, c.notStrictEqual = function (e, t, r) {
	      e === t && m(e, t, r, "!==", c.notStrictEqual);
	    }, c.throws = function (e, t, r) {
	      v(!0, e, t, r);
	    }, c.doesNotThrow = function (e, t, r) {
	      v(!1, e, t, r);
	    }, c.ifError = function (e) {
	      if (e) throw e;
	    };

	    var E = Object.keys || function (e) {
	      var t = [];

	      for (var r in e) {
	        s.call(e, r) && t.push(r);
	      }

	      return t;
	    };
	  }).call(this, r(2));
	}, function (e, t, r) {
	  (function (e, n) {
	    var i = /%[sdj%]/g;
	    t.format = function (e) {
	      if (!_(e)) {
	        for (var t = [], r = 0; r < arguments.length; r++) {
	          t.push(a(arguments[r]));
	        }

	        return t.join(" ");
	      }

	      r = 1;

	      for (var n = arguments, o = n.length, s = String(e).replace(i, function (e) {
	        if ("%%" === e) return "%";
	        if (r >= o) return e;

	        switch (e) {
	          case "%s":
	            return String(n[r++]);

	          case "%d":
	            return Number(n[r++]);

	          case "%j":
	            try {
	              return JSON.stringify(n[r++]);
	            } catch (e) {
	              return "[Circular]";
	            }

	          default:
	            return e;
	        }
	      }), h = n[r]; r < o; h = n[++r]) {
	        g(h) || !w(h) ? s += " " + h : s += " " + a(h);
	      }

	      return s;
	    }, t.deprecate = function (r, i) {
	      if (y(e.process)) return function () {
	        return t.deprecate(r, i).apply(this, arguments);
	      };
	      if (!0 === n.noDeprecation) return r;
	      var o = !1;
	      return function () {
	        if (!o) {
	          if (n.throwDeprecation) throw new Error(i);
	          n.traceDeprecation ? console.trace(i) : console.error(i), o = !0;
	        }

	        return r.apply(this, arguments);
	      };
	    };
	    var o,
	        s = {};

	    function a(e, r) {
	      var n = {
	        seen: [],
	        stylize: f
	      };
	      return arguments.length >= 3 && (n.depth = arguments[2]), arguments.length >= 4 && (n.colors = arguments[3]), p(r) ? n.showHidden = r : r && t._extend(n, r), y(n.showHidden) && (n.showHidden = !1), y(n.depth) && (n.depth = 2), y(n.colors) && (n.colors = !1), y(n.customInspect) && (n.customInspect = !0), n.colors && (n.stylize = h), u(n, e, n.depth);
	    }

	    function h(e, t) {
	      var r = a.styles[t];
	      return r ? "[" + a.colors[r][0] + "m" + e + "[" + a.colors[r][1] + "m" : e;
	    }

	    function f(e, t) {
	      return e;
	    }

	    function u(e, r, n) {
	      if (e.customInspect && r && S(r.inspect) && r.inspect !== t.inspect && (!r.constructor || r.constructor.prototype !== r)) {
	        var i = r.inspect(n, e);
	        return _(i) || (i = u(e, i, n)), i;
	      }

	      var o = function (e, t) {
	        if (y(t)) return e.stylize("undefined", "undefined");

	        if (_(t)) {
	          var r = "'" + JSON.stringify(t).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
	          return e.stylize(r, "string");
	        }

	        if (m(t)) return e.stylize("" + t, "number");
	        if (p(t)) return e.stylize("" + t, "boolean");
	        if (g(t)) return e.stylize("null", "null");
	      }(e, r);

	      if (o) return o;

	      var s = Object.keys(r),
	          a = function (e) {
	        var t = {};
	        return e.forEach(function (e, r) {
	          t[e] = !0;
	        }), t;
	      }(s);

	      if (e.showHidden && (s = Object.getOwnPropertyNames(r)), E(r) && (s.indexOf("message") >= 0 || s.indexOf("description") >= 0)) return c(r);

	      if (0 === s.length) {
	        if (S(r)) {
	          var h = r.name ? ": " + r.name : "";
	          return e.stylize("[Function" + h + "]", "special");
	        }

	        if (b(r)) return e.stylize(RegExp.prototype.toString.call(r), "regexp");
	        if (v(r)) return e.stylize(Date.prototype.toString.call(r), "date");
	        if (E(r)) return c(r);
	      }

	      var f,
	          w = "",
	          A = !1,
	          k = ["{", "}"];
	      (d(r) && (A = !0, k = ["[", "]"]), S(r)) && (w = " [Function" + (r.name ? ": " + r.name : "") + "]");
	      return b(r) && (w = " " + RegExp.prototype.toString.call(r)), v(r) && (w = " " + Date.prototype.toUTCString.call(r)), E(r) && (w = " " + c(r)), 0 !== s.length || A && 0 != r.length ? n < 0 ? b(r) ? e.stylize(RegExp.prototype.toString.call(r), "regexp") : e.stylize("[Object]", "special") : (e.seen.push(r), f = A ? function (e, t, r, n, i) {
	        for (var o = [], s = 0, a = t.length; s < a; ++s) {
	          C(t, String(s)) ? o.push(l(e, t, r, n, String(s), !0)) : o.push("");
	        }

	        return i.forEach(function (i) {
	          i.match(/^\d+$/) || o.push(l(e, t, r, n, i, !0));
	        }), o;
	      }(e, r, n, a, s) : s.map(function (t) {
	        return l(e, r, n, a, t, A);
	      }), e.seen.pop(), function (e, t, r) {
	        if (e.reduce(function (e, t) {
	          return t.indexOf("\n") >= 0 && 0, e + t.replace(/\u001b\[\d\d?m/g, "").length + 1;
	        }, 0) > 60) return r[0] + ("" === t ? "" : t + "\n ") + " " + e.join(",\n  ") + " " + r[1];
	        return r[0] + t + " " + e.join(", ") + " " + r[1];
	      }(f, w, k)) : k[0] + w + k[1];
	    }

	    function c(e) {
	      return "[" + Error.prototype.toString.call(e) + "]";
	    }

	    function l(e, t, r, n, i, o) {
	      var s, a, h;

	      if ((h = Object.getOwnPropertyDescriptor(t, i) || {
	        value: t[i]
	      }).get ? a = h.set ? e.stylize("[Getter/Setter]", "special") : e.stylize("[Getter]", "special") : h.set && (a = e.stylize("[Setter]", "special")), C(n, i) || (s = "[" + i + "]"), a || (e.seen.indexOf(h.value) < 0 ? (a = g(r) ? u(e, h.value, null) : u(e, h.value, r - 1)).indexOf("\n") > -1 && (a = o ? a.split("\n").map(function (e) {
	        return "  " + e;
	      }).join("\n").substr(2) : "\n" + a.split("\n").map(function (e) {
	        return "   " + e;
	      }).join("\n")) : a = e.stylize("[Circular]", "special")), y(s)) {
	        if (o && i.match(/^\d+$/)) return a;
	        (s = JSON.stringify("" + i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (s = s.substr(1, s.length - 2), s = e.stylize(s, "name")) : (s = s.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), s = e.stylize(s, "string"));
	      }

	      return s + ": " + a;
	    }

	    function d(e) {
	      return Array.isArray(e);
	    }

	    function p(e) {
	      return "boolean" == typeof e;
	    }

	    function g(e) {
	      return null === e;
	    }

	    function m(e) {
	      return "number" == typeof e;
	    }

	    function _(e) {
	      return "string" == typeof e;
	    }

	    function y(e) {
	      return void 0 === e;
	    }

	    function b(e) {
	      return w(e) && "[object RegExp]" === A(e);
	    }

	    function w(e) {
	      return "object" == _typeof(e) && null !== e;
	    }

	    function v(e) {
	      return w(e) && "[object Date]" === A(e);
	    }

	    function E(e) {
	      return w(e) && ("[object Error]" === A(e) || e instanceof Error);
	    }

	    function S(e) {
	      return "function" == typeof e;
	    }

	    function A(e) {
	      return Object.prototype.toString.call(e);
	    }

	    t.debuglog = function (e) {
	      if (y(o) && (o = n.env.NODE_DEBUG || ""), e = e.toUpperCase(), !s[e]) if (new RegExp("\\b" + e + "\\b", "i").test(o)) {
	        var r = n.pid;

	        s[e] = function () {
	          var n = t.format.apply(t, arguments);
	          console.error("%s %d: %s", e, r, n);
	        };
	      } else s[e] = function () {};
	      return s[e];
	    }, t.inspect = a, a.colors = {
	      bold: [1, 22],
	      italic: [3, 23],
	      underline: [4, 24],
	      inverse: [7, 27],
	      white: [37, 39],
	      grey: [90, 39],
	      black: [30, 39],
	      blue: [34, 39],
	      cyan: [36, 39],
	      green: [32, 39],
	      magenta: [35, 39],
	      red: [31, 39],
	      yellow: [33, 39]
	    }, a.styles = {
	      special: "cyan",
	      number: "yellow",
	      boolean: "yellow",
	      undefined: "grey",
	      null: "bold",
	      string: "green",
	      date: "magenta",
	      regexp: "red"
	    }, t.isArray = d, t.isBoolean = p, t.isNull = g, t.isNullOrUndefined = function (e) {
	      return null == e;
	    }, t.isNumber = m, t.isString = _, t.isSymbol = function (e) {
	      return "symbol" == _typeof(e);
	    }, t.isUndefined = y, t.isRegExp = b, t.isObject = w, t.isDate = v, t.isError = E, t.isFunction = S, t.isPrimitive = function (e) {
	      return null === e || "boolean" == typeof e || "number" == typeof e || "string" == typeof e || "symbol" == _typeof(e) || void 0 === e;
	    }, t.isBuffer = r(52);

	    function C(e, t) {
	      return Object.prototype.hasOwnProperty.call(e, t);
	    }

	    t.log = function () {
	    }, t.inherits = r(4), t._extend = function (e, t) {
	      if (!t || !w(t)) return e;

	      for (var r = Object.keys(t), n = r.length; n--;) {
	        e[r[n]] = t[r[n]];
	      }

	      return e;
	    };
	  }).call(this, r(2), r(3));
	}, function (e, t, r) {

	  e.exports = function (e, t, r, n) {
	    for (var i = 65535 & e | 0, o = e >>> 16 & 65535 | 0, s = 0; 0 !== r;) {
	      r -= s = r > 2e3 ? 2e3 : r;

	      do {
	        o = o + (i = i + t[n++] | 0) | 0;
	      } while (--s);

	      i %= 65521, o %= 65521;
	    }

	    return i | o << 16 | 0;
	  };
	}, function (e, t, r) {

	  var n = function () {
	    for (var e, t = [], r = 0; r < 256; r++) {
	      e = r;

	      for (var n = 0; n < 8; n++) {
	        e = 1 & e ? 3988292384 ^ e >>> 1 : e >>> 1;
	      }

	      t[r] = e;
	    }

	    return t;
	  }();

	  e.exports = function (e, t, r, i) {
	    var o = n,
	        s = i + r;
	    e ^= -1;

	    for (var a = i; a < s; a++) {
	      e = e >>> 8 ^ o[255 & (e ^ t[a])];
	    }

	    return -1 ^ e;
	  };
	}, function (e, t, r) {

	  e.exports = /*#__PURE__*/function () {
	    function _class2() {
	      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	      _classCallCheck(this, _class2);

	      if (!(e.maxSize && e.maxSize > 0)) throw new TypeError("`maxSize` must be a number greater than 0");
	      this.maxSize = e.maxSize, this.cache = new Map(), this.oldCache = new Map(), this._size = 0;
	    }

	    _createClass(_class2, [{
	      key: "_set",
	      value: function _set(e, t) {
	        this.cache.set(e, t), this._size++, this._size >= this.maxSize && (this._size = 0, this.oldCache = this.cache, this.cache = new Map());
	      }
	    }, {
	      key: "get",
	      value: function get(e) {
	        if (this.cache.has(e)) return this.cache.get(e);

	        if (this.oldCache.has(e)) {
	          var _t = this.oldCache.get(e);

	          return this._set(e, _t), _t;
	        }
	      }
	    }, {
	      key: "set",
	      value: function set(e, t) {
	        return this.cache.has(e) ? this.cache.set(e, t) : this._set(e, t), this;
	      }
	    }, {
	      key: "has",
	      value: function has(e) {
	        return this.cache.has(e) || this.oldCache.has(e);
	      }
	    }, {
	      key: "peek",
	      value: function peek(e) {
	        return this.cache.has(e) ? this.cache.get(e) : this.oldCache.has(e) ? this.oldCache.get(e) : void 0;
	      }
	    }, {
	      key: "delete",
	      value: function _delete(e) {
	        var t = this.cache.delete(e);
	        return t && this._size--, this.oldCache.delete(e) || t;
	      }
	    }, {
	      key: "clear",
	      value: function clear() {
	        this.cache.clear(), this.oldCache.clear(), this._size = 0;
	      }
	    }, {
	      key: "keys",
	      value: /*#__PURE__*/regeneratorRuntime.mark(function keys() {
	        var _iterator, _step, _step$value, _e3;

	        return regeneratorRuntime.wrap(function keys$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _iterator = _createForOfIteratorHelper(this);
	                _context.prev = 1;

	                _iterator.s();

	              case 3:
	                if ((_step = _iterator.n()).done) {
	                  _context.next = 9;
	                  break;
	                }

	                _step$value = _slicedToArray(_step.value, 1), _e3 = _step$value[0];
	                _context.next = 7;
	                return _e3;

	              case 7:
	                _context.next = 3;
	                break;

	              case 9:
	                _context.next = 14;
	                break;

	              case 11:
	                _context.prev = 11;
	                _context.t0 = _context["catch"](1);

	                _iterator.e(_context.t0);

	              case 14:
	                _context.prev = 14;

	                _iterator.f();

	                return _context.finish(14);

	              case 17:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, keys, this, [[1, 11, 14, 17]]);
	      })
	    }, {
	      key: "values",
	      value: /*#__PURE__*/regeneratorRuntime.mark(function values() {
	        var _iterator2, _step2, _step2$value, _e4;

	        return regeneratorRuntime.wrap(function values$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                _iterator2 = _createForOfIteratorHelper(this);
	                _context2.prev = 1;

	                _iterator2.s();

	              case 3:
	                if ((_step2 = _iterator2.n()).done) {
	                  _context2.next = 9;
	                  break;
	                }

	                _step2$value = _slicedToArray(_step2.value, 2), _e4 = _step2$value[1];
	                _context2.next = 7;
	                return _e4;

	              case 7:
	                _context2.next = 3;
	                break;

	              case 9:
	                _context2.next = 14;
	                break;

	              case 11:
	                _context2.prev = 11;
	                _context2.t0 = _context2["catch"](1);

	                _iterator2.e(_context2.t0);

	              case 14:
	                _context2.prev = 14;

	                _iterator2.f();

	                return _context2.finish(14);

	              case 17:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, values, this, [[1, 11, 14, 17]]);
	      })
	    }, {
	      key: Symbol.iterator,
	      value: /*#__PURE__*/regeneratorRuntime.mark(function value() {
	        var _iterator3, _step3, _e5, _iterator4, _step4, _e6, _e7, _t2;

	        return regeneratorRuntime.wrap(function value$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                _iterator3 = _createForOfIteratorHelper(this.cache);
	                _context3.prev = 1;

	                _iterator3.s();

	              case 3:
	                if ((_step3 = _iterator3.n()).done) {
	                  _context3.next = 9;
	                  break;
	                }

	                _e5 = _step3.value;
	                _context3.next = 7;
	                return _e5;

	              case 7:
	                _context3.next = 3;
	                break;

	              case 9:
	                _context3.next = 14;
	                break;

	              case 11:
	                _context3.prev = 11;
	                _context3.t0 = _context3["catch"](1);

	                _iterator3.e(_context3.t0);

	              case 14:
	                _context3.prev = 14;

	                _iterator3.f();

	                return _context3.finish(14);

	              case 17:
	                _iterator4 = _createForOfIteratorHelper(this.oldCache);
	                _context3.prev = 18;

	                _iterator4.s();

	              case 20:
	                if ((_step4 = _iterator4.n()).done) {
	                  _context3.next = 29;
	                  break;
	                }

	                _e6 = _step4.value;
	                _e7 = _slicedToArray(_e6, 1), _t2 = _e7[0];
	                _context3.t1 = this.cache.has(_t2);

	                if (_context3.t1) {
	                  _context3.next = 27;
	                  break;
	                }

	                _context3.next = 27;
	                return _e6;

	              case 27:
	                _context3.next = 20;
	                break;

	              case 29:
	                _context3.next = 34;
	                break;

	              case 31:
	                _context3.prev = 31;
	                _context3.t2 = _context3["catch"](18);

	                _iterator4.e(_context3.t2);

	              case 34:
	                _context3.prev = 34;

	                _iterator4.f();

	                return _context3.finish(34);

	              case 37:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, value, this, [[1, 11, 14, 17], [18, 31, 34, 37]]);
	      })
	    }, {
	      key: "size",
	      get: function get() {
	        var e = 0;

	        var _iterator5 = _createForOfIteratorHelper(this.oldCache.keys()),
	            _step5;

	        try {
	          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
	            var _t3 = _step5.value;
	            this.cache.has(_t3) || e++;
	          }
	        } catch (err) {
	          _iterator5.e(err);
	        } finally {
	          _iterator5.f();
	        }

	        return this._size + e;
	      }
	    }]);

	    return _class2;
	  }();
	}, function (e, t) {
	  e.exports = n;
	  var r = null;

	  try {
	    r = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
	  } catch (e) {}

	  function n(e, t, r) {
	    this.low = 0 | e, this.high = 0 | t, this.unsigned = !!r;
	  }

	  function i(e) {
	    return !0 === (e && e.__isLong__);
	  }

	  n.prototype.__isLong__, Object.defineProperty(n.prototype, "__isLong__", {
	    value: !0
	  }), n.isLong = i;
	  var o = {},
	      s = {};

	  function a(e, t) {
	    var r, n, i;
	    return t ? (i = 0 <= (e >>>= 0) && e < 256) && (n = s[e]) ? n : (r = f(e, (0 | e) < 0 ? -1 : 0, !0), i && (s[e] = r), r) : (i = -128 <= (e |= 0) && e < 128) && (n = o[e]) ? n : (r = f(e, e < 0 ? -1 : 0, !1), i && (o[e] = r), r);
	  }

	  function h(e, t) {
	    if (isNaN(e)) return t ? y : _;

	    if (t) {
	      if (e < 0) return y;
	      if (e >= p) return S;
	    } else {
	      if (e <= -g) return A;
	      if (e + 1 >= g) return E;
	    }

	    return e < 0 ? h(-e, t).neg() : f(e % d | 0, e / d | 0, t);
	  }

	  function f(e, t, r) {
	    return new n(e, t, r);
	  }

	  n.fromInt = a, n.fromNumber = h, n.fromBits = f;
	  var u = Math.pow;

	  function c(e, t, r) {
	    if (0 === e.length) throw Error("empty string");
	    if ("NaN" === e || "Infinity" === e || "+Infinity" === e || "-Infinity" === e) return _;
	    if ("number" == typeof t ? (r = t, t = !1) : t = !!t, (r = r || 10) < 2 || 36 < r) throw RangeError("radix");
	    var n;
	    if ((n = e.indexOf("-")) > 0) throw Error("interior hyphen");
	    if (0 === n) return c(e.substring(1), t, r).neg();

	    for (var i = h(u(r, 8)), o = _, s = 0; s < e.length; s += 8) {
	      var a = Math.min(8, e.length - s),
	          f = parseInt(e.substring(s, s + a), r);

	      if (a < 8) {
	        var l = h(u(r, a));
	        o = o.mul(l).add(h(f));
	      } else o = (o = o.mul(i)).add(h(f));
	    }

	    return o.unsigned = t, o;
	  }

	  function l(e, t) {
	    return "number" == typeof e ? h(e, t) : "string" == typeof e ? c(e, t) : f(e.low, e.high, "boolean" == typeof t ? t : e.unsigned);
	  }

	  n.fromString = c, n.fromValue = l;

	  var d = 4294967296,
	      p = d * d,
	      g = p / 2,
	      m = a(1 << 24),
	      _ = a(0);

	  n.ZERO = _;
	  var y = a(0, !0);
	  n.UZERO = y;
	  var b = a(1);
	  n.ONE = b;
	  var w = a(1, !0);
	  n.UONE = w;
	  var v = a(-1);
	  n.NEG_ONE = v;
	  var E = f(-1, 2147483647, !1);
	  n.MAX_VALUE = E;
	  var S = f(-1, -1, !0);
	  n.MAX_UNSIGNED_VALUE = S;
	  var A = f(0, -2147483648, !1);
	  n.MIN_VALUE = A;
	  var k = n.prototype;
	  k.toInt = function () {
	    return this.unsigned ? this.low >>> 0 : this.low;
	  }, k.toNumber = function () {
	    return this.unsigned ? (this.high >>> 0) * d + (this.low >>> 0) : this.high * d + (this.low >>> 0);
	  }, k.toString = function (e) {
	    if ((e = e || 10) < 2 || 36 < e) throw RangeError("radix");
	    if (this.isZero()) return "0";

	    if (this.isNegative()) {
	      if (this.eq(A)) {
	        var t = h(e),
	            r = this.div(t),
	            n = r.mul(t).sub(this);
	        return r.toString(e) + n.toInt().toString(e);
	      }

	      return "-" + this.neg().toString(e);
	    }

	    for (var i = h(u(e, 6), this.unsigned), o = this, s = "";;) {
	      var a = o.div(i),
	          f = (o.sub(a.mul(i)).toInt() >>> 0).toString(e);
	      if ((o = a).isZero()) return f + s;

	      for (; f.length < 6;) {
	        f = "0" + f;
	      }

	      s = "" + f + s;
	    }
	  }, k.getHighBits = function () {
	    return this.high;
	  }, k.getHighBitsUnsigned = function () {
	    return this.high >>> 0;
	  }, k.getLowBits = function () {
	    return this.low;
	  }, k.getLowBitsUnsigned = function () {
	    return this.low >>> 0;
	  }, k.getNumBitsAbs = function () {
	    if (this.isNegative()) return this.eq(A) ? 64 : this.neg().getNumBitsAbs();

	    for (var e = 0 != this.high ? this.high : this.low, t = 31; t > 0 && 0 == (e & 1 << t); t--) {
	    }

	    return 0 != this.high ? t + 33 : t + 1;
	  }, k.isZero = function () {
	    return 0 === this.high && 0 === this.low;
	  }, k.eqz = k.isZero, k.isNegative = function () {
	    return !this.unsigned && this.high < 0;
	  }, k.isPositive = function () {
	    return this.unsigned || this.high >= 0;
	  }, k.isOdd = function () {
	    return 1 == (1 & this.low);
	  }, k.isEven = function () {
	    return 0 == (1 & this.low);
	  }, k.equals = function (e) {
	    return i(e) || (e = l(e)), (this.unsigned === e.unsigned || this.high >>> 31 != 1 || e.high >>> 31 != 1) && this.high === e.high && this.low === e.low;
	  }, k.eq = k.equals, k.notEquals = function (e) {
	    return !this.eq(e);
	  }, k.neq = k.notEquals, k.ne = k.notEquals, k.lessThan = function (e) {
	    return this.comp(e) < 0;
	  }, k.lt = k.lessThan, k.lessThanOrEqual = function (e) {
	    return this.comp(e) <= 0;
	  }, k.lte = k.lessThanOrEqual, k.le = k.lessThanOrEqual, k.greaterThan = function (e) {
	    return this.comp(e) > 0;
	  }, k.gt = k.greaterThan, k.greaterThanOrEqual = function (e) {
	    return this.comp(e) >= 0;
	  }, k.gte = k.greaterThanOrEqual, k.ge = k.greaterThanOrEqual, k.compare = function (e) {
	    if (i(e) || (e = l(e)), this.eq(e)) return 0;
	    var t = this.isNegative(),
	        r = e.isNegative();
	    return t && !r ? -1 : !t && r ? 1 : this.unsigned ? e.high >>> 0 > this.high >>> 0 || e.high === this.high && e.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(e).isNegative() ? -1 : 1;
	  }, k.comp = k.compare, k.negate = function () {
	    return !this.unsigned && this.eq(A) ? A : this.not().add(b);
	  }, k.neg = k.negate, k.add = function (e) {
	    i(e) || (e = l(e));
	    var t = this.high >>> 16,
	        r = 65535 & this.high,
	        n = this.low >>> 16,
	        o = 65535 & this.low,
	        s = e.high >>> 16,
	        a = 65535 & e.high,
	        h = e.low >>> 16,
	        u = 0,
	        c = 0,
	        d = 0,
	        p = 0;
	    return d += (p += o + (65535 & e.low)) >>> 16, c += (d += n + h) >>> 16, u += (c += r + a) >>> 16, u += t + s, f((d &= 65535) << 16 | (p &= 65535), (u &= 65535) << 16 | (c &= 65535), this.unsigned);
	  }, k.subtract = function (e) {
	    return i(e) || (e = l(e)), this.add(e.neg());
	  }, k.sub = k.subtract, k.multiply = function (e) {
	    if (this.isZero()) return _;
	    if (i(e) || (e = l(e)), r) return f(r.mul(this.low, this.high, e.low, e.high), r.get_high(), this.unsigned);
	    if (e.isZero()) return _;
	    if (this.eq(A)) return e.isOdd() ? A : _;
	    if (e.eq(A)) return this.isOdd() ? A : _;
	    if (this.isNegative()) return e.isNegative() ? this.neg().mul(e.neg()) : this.neg().mul(e).neg();
	    if (e.isNegative()) return this.mul(e.neg()).neg();
	    if (this.lt(m) && e.lt(m)) return h(this.toNumber() * e.toNumber(), this.unsigned);
	    var t = this.high >>> 16,
	        n = 65535 & this.high,
	        o = this.low >>> 16,
	        s = 65535 & this.low,
	        a = e.high >>> 16,
	        u = 65535 & e.high,
	        c = e.low >>> 16,
	        d = 65535 & e.low,
	        p = 0,
	        g = 0,
	        y = 0,
	        b = 0;
	    return y += (b += s * d) >>> 16, g += (y += o * d) >>> 16, y &= 65535, g += (y += s * c) >>> 16, p += (g += n * d) >>> 16, g &= 65535, p += (g += o * c) >>> 16, g &= 65535, p += (g += s * u) >>> 16, p += t * d + n * c + o * u + s * a, f((y &= 65535) << 16 | (b &= 65535), (p &= 65535) << 16 | (g &= 65535), this.unsigned);
	  }, k.mul = k.multiply, k.divide = function (e) {
	    if (i(e) || (e = l(e)), e.isZero()) throw Error("division by zero");
	    var t, n, o;
	    if (r) return this.unsigned || -2147483648 !== this.high || -1 !== e.low || -1 !== e.high ? f((this.unsigned ? r.div_u : r.div_s)(this.low, this.high, e.low, e.high), r.get_high(), this.unsigned) : this;
	    if (this.isZero()) return this.unsigned ? y : _;

	    if (this.unsigned) {
	      if (e.unsigned || (e = e.toUnsigned()), e.gt(this)) return y;
	      if (e.gt(this.shru(1))) return w;
	      o = y;
	    } else {
	      if (this.eq(A)) return e.eq(b) || e.eq(v) ? A : e.eq(A) ? b : (t = this.shr(1).div(e).shl(1)).eq(_) ? e.isNegative() ? b : v : (n = this.sub(e.mul(t)), o = t.add(n.div(e)));
	      if (e.eq(A)) return this.unsigned ? y : _;
	      if (this.isNegative()) return e.isNegative() ? this.neg().div(e.neg()) : this.neg().div(e).neg();
	      if (e.isNegative()) return this.div(e.neg()).neg();
	      o = _;
	    }

	    for (n = this; n.gte(e);) {
	      t = Math.max(1, Math.floor(n.toNumber() / e.toNumber()));

	      for (var s = Math.ceil(Math.log(t) / Math.LN2), a = s <= 48 ? 1 : u(2, s - 48), c = h(t), d = c.mul(e); d.isNegative() || d.gt(n);) {
	        d = (c = h(t -= a, this.unsigned)).mul(e);
	      }

	      c.isZero() && (c = b), o = o.add(c), n = n.sub(d);
	    }

	    return o;
	  }, k.div = k.divide, k.modulo = function (e) {
	    return i(e) || (e = l(e)), r ? f((this.unsigned ? r.rem_u : r.rem_s)(this.low, this.high, e.low, e.high), r.get_high(), this.unsigned) : this.sub(this.div(e).mul(e));
	  }, k.mod = k.modulo, k.rem = k.modulo, k.not = function () {
	    return f(~this.low, ~this.high, this.unsigned);
	  }, k.and = function (e) {
	    return i(e) || (e = l(e)), f(this.low & e.low, this.high & e.high, this.unsigned);
	  }, k.or = function (e) {
	    return i(e) || (e = l(e)), f(this.low | e.low, this.high | e.high, this.unsigned);
	  }, k.xor = function (e) {
	    return i(e) || (e = l(e)), f(this.low ^ e.low, this.high ^ e.high, this.unsigned);
	  }, k.shiftLeft = function (e) {
	    return i(e) && (e = e.toInt()), 0 == (e &= 63) ? this : e < 32 ? f(this.low << e, this.high << e | this.low >>> 32 - e, this.unsigned) : f(0, this.low << e - 32, this.unsigned);
	  }, k.shl = k.shiftLeft, k.shiftRight = function (e) {
	    return i(e) && (e = e.toInt()), 0 == (e &= 63) ? this : e < 32 ? f(this.low >>> e | this.high << 32 - e, this.high >> e, this.unsigned) : f(this.high >> e - 32, this.high >= 0 ? 0 : -1, this.unsigned);
	  }, k.shr = k.shiftRight, k.shiftRightUnsigned = function (e) {
	    if (i(e) && (e = e.toInt()), 0 === (e &= 63)) return this;
	    var t = this.high;
	    return e < 32 ? f(this.low >>> e | t << 32 - e, t >>> e, this.unsigned) : f(32 === e ? t : t >>> e - 32, 0, this.unsigned);
	  }, k.shru = k.shiftRightUnsigned, k.shr_u = k.shiftRightUnsigned, k.toSigned = function () {
	    return this.unsigned ? f(this.low, this.high, !1) : this;
	  }, k.toUnsigned = function () {
	    return this.unsigned ? this : f(this.low, this.high, !0);
	  }, k.toBytes = function (e) {
	    return e ? this.toBytesLE() : this.toBytesBE();
	  }, k.toBytesLE = function () {
	    var e = this.high,
	        t = this.low;
	    return [255 & t, t >>> 8 & 255, t >>> 16 & 255, t >>> 24, 255 & e, e >>> 8 & 255, e >>> 16 & 255, e >>> 24];
	  }, k.toBytesBE = function () {
	    var e = this.high,
	        t = this.low;
	    return [e >>> 24, e >>> 16 & 255, e >>> 8 & 255, 255 & e, t >>> 24, t >>> 16 & 255, t >>> 8 & 255, 255 & t];
	  }, n.fromBytes = function (e, t, r) {
	    return r ? n.fromBytesLE(e, t) : n.fromBytesBE(e, t);
	  }, n.fromBytesLE = function (e, t) {
	    return new n(e[0] | e[1] << 8 | e[2] << 16 | e[3] << 24, e[4] | e[5] << 8 | e[6] << 16 | e[7] << 24, t);
	  }, n.fromBytesBE = function (e, t) {
	    return new n(e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7], e[0] << 24 | e[1] << 16 | e[2] << 8 | e[3], t);
	  };
	}, function (e, t) {
	  var r = {
	    utf8: {
	      stringToBytes: function stringToBytes(e) {
	        return r.bin.stringToBytes(unescape(encodeURIComponent(e)));
	      },
	      bytesToString: function bytesToString(e) {
	        return decodeURIComponent(escape(r.bin.bytesToString(e)));
	      }
	    },
	    bin: {
	      stringToBytes: function stringToBytes(e) {
	        for (var t = [], r = 0; r < e.length; r++) {
	          t.push(255 & e.charCodeAt(r));
	        }

	        return t;
	      },
	      bytesToString: function bytesToString(e) {
	        for (var t = [], r = 0; r < e.length; r++) {
	          t.push(String.fromCharCode(e[r]));
	        }

	        return t.join("");
	      }
	    }
	  };
	  e.exports = r;
	}, function (e, t, r) {
	  var n = r(87),
	      i = r(94),
	      o = r(97);

	  function s(e) {
	    var _n$parse = n.parse(e),
	        t = _n$parse.protocol,
	        r = _n$parse.pathname;

	    return "file:" === t ? new o(unescape(r)) : new i(e);
	  }

	  e.exports = {
	    LocalFile: o,
	    RemoteFile: i,
	    fromUrl: s,
	    open: function open(e, t, r) {
	      if (r) return r;
	      if (e) return s(e);
	      if (t) return new o(t);
	      throw new Error("no url, path, or filehandle provided, cannot open");
	    }
	  };
	}, function (e, t, r) {

	  Object.defineProperty(t, "__esModule", {
	    value: !0
	  });
	  var n = "__ES6-PROMISIFY--CUSTOM-ARGUMENTS__";

	  function i(e) {
	    if ("function" != typeof e) throw new TypeError("Argument to promisify must be a function");
	    var t = e[n],
	        r = i.Promise || Promise;
	    if ("function" != typeof r) throw new Error("No Promise implementation found; do you need a polyfill?");
	    return function () {
	      for (var n = this, i = arguments.length, o = Array(i), s = 0; s < i; s++) {
	        o[s] = arguments[s];
	      }

	      return new r(function (r, i) {
	        o.push(function (e) {
	          if (e) return i(e);

	          for (var n = arguments.length, o = Array(n > 1 ? n - 1 : 0), s = 1; s < n; s++) {
	            o[s - 1] = arguments[s];
	          }

	          if (1 === o.length || !t) return r(o[0]);
	          var a = {};
	          o.forEach(function (e, r) {
	            var n = t[r];
	            n && (a[n] = e);
	          }), r(a);
	        }), e.call.apply(e, [n].concat(o));
	      });
	    };
	  }

	  i.argumentNames = n, i.Promise = void 0, t.promisify = i;
	}, function (e, t, r) {
	  var n = r(18),
	      i = r(99),
	      o = r(100);
	  e.exports = {
	    CramFile: n,
	    IndexedCramFile: i,
	    CraiIndex: o
	  };
	}, function (e, t, r) {
	  (function (t) {
	    var n = r(20),
	        i = r(61),
	        o = r(30),
	        _r7 = r(0),
	        s = _r7.CramUnimplementedError,
	        a = _r7.CramMalformedError,
	        h = r(62),
	        _r8 = r(66),
	        f = _r8.cramFileDefinition,
	        u = _r8.getSectionParsers,
	        c = r(71),
	        _r9 = r(33),
	        l = _r9.open,
	        _r10 = r(8),
	        d = _r10.parseItem,
	        p = _r10.tinyMemoize,
	        _r11 = r(98),
	        g = _r11.parseHeaderText;

	    var m = /*#__PURE__*/function () {
	      function m(e) {
	        _classCallCheck(this, m);

	        this.file = l(e.url, e.path, e.filehandle), this.validateChecksums = !0, this.fetchReferenceSequenceCallback = e.seqFetch, this.options = {
	          checkSequenceMD5: !1 !== e.checkSequenceMD5,
	          cacheSize: void 0 !== e.cacheSize ? e.cacheSize : 2e4
	        }, this.featureCache = new o({
	          maxSize: this.options.cacheSize
	        });
	      }

	      _createClass(m, [{
	        key: "toString",
	        value: function toString() {
	          return this.file.filename ? this.file.filename : this.file.url ? this.file.url : "(cram file)";
	        }
	      }, {
	        key: "read",
	        value: function read(e, t, r, n) {
	          return this.file.read(e, t, r, n);
	        }
	      }, {
	        key: "stat",
	        value: function stat() {
	          return this.file.stat();
	        }
	      }, {
	        key: "getDefinition",
	        value: function () {
	          var _getDefinition = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	            var e, r;
	            return regeneratorRuntime.wrap(function _callee$(_context4) {
	              while (1) {
	                switch (_context4.prev = _context4.next) {
	                  case 0:
	                    e = t.allocUnsafe(f.maxLength);
	                    _context4.next = 3;
	                    return this.file.read(e, 0, f.maxLength, 0);

	                  case 3:
	                    r = f.parser.parse(e).result;

	                    if (!(2 !== r.majorVersion && 3 !== r.majorVersion)) {
	                      _context4.next = 6;
	                      break;
	                    }

	                    throw new s("CRAM version ".concat(r.majorVersion, " not supported"));

	                  case 6:
	                    return _context4.abrupt("return", r);

	                  case 7:
	                  case "end":
	                    return _context4.stop();
	                }
	              }
	            }, _callee, this);
	          }));

	          function getDefinition() {
	            return _getDefinition.apply(this, arguments);
	          }

	          return getDefinition;
	        }()
	      }, {
	        key: "getSamHeader",
	        value: function () {
	          var _getSamHeader = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	            var e, _yield$e$getFirstBloc, t, r, n;

	            return regeneratorRuntime.wrap(function _callee2$(_context5) {
	              while (1) {
	                switch (_context5.prev = _context5.next) {
	                  case 0:
	                    _context5.next = 2;
	                    return this.getContainerById(0);

	                  case 2:
	                    e = _context5.sent;

	                    if (e) {
	                      _context5.next = 5;
	                      break;
	                    }

	                    throw new a("file contains no containers");

	                  case 5:
	                    _context5.next = 7;
	                    return e.getFirstBlock();

	                  case 7:
	                    _yield$e$getFirstBloc = _context5.sent;
	                    t = _yield$e$getFirstBloc.content;
	                    r = t.readInt32LE(0);
	                    n = t.toString("utf8", 4, 4 + r);
	                    return _context5.abrupt("return", g(n));

	                  case 12:
	                  case "end":
	                    return _context5.stop();
	                }
	              }
	            }, _callee2, this);
	          }));

	          function getSamHeader() {
	            return _getSamHeader.apply(this, arguments);
	          }

	          return getSamHeader;
	        }()
	      }, {
	        key: "getSectionParsers",
	        value: function () {
	          var _getSectionParsers = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
	            var _yield$this$getDefini, e;

	            return regeneratorRuntime.wrap(function _callee3$(_context6) {
	              while (1) {
	                switch (_context6.prev = _context6.next) {
	                  case 0:
	                    _context6.next = 2;
	                    return this.getDefinition();

	                  case 2:
	                    _yield$this$getDefini = _context6.sent;
	                    e = _yield$this$getDefini.majorVersion;
	                    return _context6.abrupt("return", u(e));

	                  case 5:
	                  case "end":
	                    return _context6.stop();
	                }
	              }
	            }, _callee3, this);
	          }));

	          function getSectionParsers() {
	            return _getSectionParsers.apply(this, arguments);
	          }

	          return getSectionParsers;
	        }()
	      }, {
	        key: "getContainerById",
	        value: function () {
	          var _getContainerById = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(e) {
	            var t, r, _yield$this$file$stat, n, i, o, _t4, _s, _e8;

	            return regeneratorRuntime.wrap(function _callee4$(_context7) {
	              while (1) {
	                switch (_context7.prev = _context7.next) {
	                  case 0:
	                    _context7.next = 2;
	                    return this.getSectionParsers();

	                  case 2:
	                    t = _context7.sent;
	                    r = t.cramFileDefinition.maxLength;
	                    _context7.next = 6;
	                    return this.file.stat();

	                  case 6:
	                    _yield$this$file$stat = _context7.sent;
	                    n = _yield$this$file$stat.size;
	                    i = t.cramContainerHeader1;
	                    _t4 = 0;

	                  case 10:
	                    if (!(_t4 <= e)) {
	                      _context7.next = 35;
	                      break;
	                    }

	                    if (!(r + i.maxLength + 8 >= n)) {
	                      _context7.next = 13;
	                      break;
	                    }

	                    return _context7.abrupt("return");

	                  case 13:
	                    o = this.getContainerAtPosition(r);
	                    _context7.next = 16;
	                    return o.getHeader();

	                  case 16:
	                    _s = _context7.sent;

	                    if (_s) {
	                      _context7.next = 19;
	                      break;
	                    }

	                    throw new a("container ".concat(e, " not found in file"));

	                  case 19:
	                    if (!(0 === _t4)) {
	                      _context7.next = 31;
	                      break;
	                    }

	                    r = _s._endPosition;
	                    _e8 = 0;

	                  case 22:
	                    if (!(_e8 < _s.numBlocks)) {
	                      _context7.next = 29;
	                      break;
	                    }

	                    _context7.next = 25;
	                    return this.readBlock(r);

	                  case 25:
	                    r = _context7.sent._endPosition;

	                  case 26:
	                    _e8 += 1;
	                    _context7.next = 22;
	                    break;

	                  case 29:
	                    _context7.next = 32;
	                    break;

	                  case 31:
	                    r += _s._size + _s.length;

	                  case 32:
	                    _t4 += 1;
	                    _context7.next = 10;
	                    break;

	                  case 35:
	                    return _context7.abrupt("return", o);

	                  case 36:
	                  case "end":
	                    return _context7.stop();
	                }
	              }
	            }, _callee4, this);
	          }));

	          function getContainerById(_x) {
	            return _getContainerById.apply(this, arguments);
	          }

	          return getContainerById;
	        }()
	      }, {
	        key: "checkCrc32",
	        value: function () {
	          var _checkCrc = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(e, r, n, o) {
	            var s, h;
	            return regeneratorRuntime.wrap(function _callee5$(_context8) {
	              while (1) {
	                switch (_context8.prev = _context8.next) {
	                  case 0:
	                    s = t.allocUnsafe(r);
	                    _context8.next = 3;
	                    return this.file.read(s, 0, r, e);

	                  case 3:
	                    h = i.unsigned(s);

	                    if (!(h !== n)) {
	                      _context8.next = 6;
	                      break;
	                    }

	                    throw new a("crc mismatch in ".concat(o, ": recorded CRC32 = ").concat(n, ", but calculated CRC32 = ").concat(h));

	                  case 6:
	                  case "end":
	                    return _context8.stop();
	                }
	              }
	            }, _callee5, this);
	          }));

	          function checkCrc32(_x2, _x3, _x4, _x5) {
	            return _checkCrc.apply(this, arguments);
	          }

	          return checkCrc32;
	        }()
	      }, {
	        key: "containerCount",
	        value: function () {
	          var _containerCount = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
	            var e, _yield$this$file$stat2, t, r, n, i, _e9, _t5;

	            return regeneratorRuntime.wrap(function _callee6$(_context9) {
	              while (1) {
	                switch (_context9.prev = _context9.next) {
	                  case 0:
	                    _context9.next = 2;
	                    return this.getSectionParsers();

	                  case 2:
	                    e = _context9.sent;
	                    _context9.next = 5;
	                    return this.file.stat();

	                  case 5:
	                    _yield$this$file$stat2 = _context9.sent;
	                    t = _yield$this$file$stat2.size;
	                    r = e.cramContainerHeader1;
	                    n = 0, i = e.cramFileDefinition.maxLength;

	                  case 9:
	                    if (!(i + r.maxLength + 8 < t)) {
	                      _context9.next = 31;
	                      break;
	                    }

	                    _context9.next = 12;
	                    return this.getContainerAtPosition(i).getHeader();

	                  case 12:
	                    _e9 = _context9.sent;

	                    if (_e9) {
	                      _context9.next = 15;
	                      break;
	                    }

	                    return _context9.abrupt("break", 31);

	                  case 15:
	                    if (!(0 === n)) {
	                      _context9.next = 27;
	                      break;
	                    }

	                    i = _e9._endPosition;
	                    _t5 = 0;

	                  case 18:
	                    if (!(_t5 < _e9.numBlocks)) {
	                      _context9.next = 25;
	                      break;
	                    }

	                    _context9.next = 21;
	                    return this.readBlock(i);

	                  case 21:
	                    i = _context9.sent._endPosition;

	                  case 22:
	                    _t5 += 1;
	                    _context9.next = 18;
	                    break;

	                  case 25:
	                    _context9.next = 28;
	                    break;

	                  case 27:
	                    i += _e9._size + _e9.length;

	                  case 28:
	                    n += 1;

	                  case 29:
	                    _context9.next = 9;
	                    break;

	                  case 31:
	                    return _context9.abrupt("return", n);

	                  case 32:
	                  case "end":
	                    return _context9.stop();
	                }
	              }
	            }, _callee6, this);
	          }));

	          function containerCount() {
	            return _containerCount.apply(this, arguments);
	          }

	          return containerCount;
	        }()
	      }, {
	        key: "getContainerAtPosition",
	        value: function getContainerAtPosition(e) {
	          return new c(this, e);
	        }
	      }, {
	        key: "readBlockHeader",
	        value: function () {
	          var _readBlockHeader = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(e) {
	            var r, n, _yield$this$file$stat3, i, o;

	            return regeneratorRuntime.wrap(function _callee7$(_context10) {
	              while (1) {
	                switch (_context10.prev = _context10.next) {
	                  case 0:
	                    _context10.next = 2;
	                    return this.getSectionParsers();

	                  case 2:
	                    r = _context10.sent;
	                    n = r.cramBlockHeader;
	                    _context10.next = 6;
	                    return this.file.stat();

	                  case 6:
	                    _yield$this$file$stat3 = _context10.sent;
	                    i = _yield$this$file$stat3.size;

	                    if (!(e + n.maxLength >= i)) {
	                      _context10.next = 10;
	                      break;
	                    }

	                    return _context10.abrupt("return");

	                  case 10:
	                    o = t.allocUnsafe(n.maxLength);
	                    _context10.next = 13;
	                    return this.file.read(o, 0, n.maxLength, e);

	                  case 13:
	                    return _context10.abrupt("return", d(o, n.parser, 0, e));

	                  case 14:
	                  case "end":
	                    return _context10.stop();
	                }
	              }
	            }, _callee7, this);
	          }));

	          function readBlockHeader(_x6) {
	            return _readBlockHeader.apply(this, arguments);
	          }

	          return readBlockHeader;
	        }()
	      }, {
	        key: "_parseSection",
	        value: function () {
	          var _parseSection2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(e, r) {
	            var n,
	                i,
	                o,
	                _yield$this$file$stat4,
	                _e10,
	                s,
	                _args11 = arguments;

	            return regeneratorRuntime.wrap(function _callee8$(_context11) {
	              while (1) {
	                switch (_context11.prev = _context11.next) {
	                  case 0:
	                    n = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : e.maxLength;
	                    i = _args11.length > 3 ? _args11[3] : undefined;

	                    if (!i) {
	                      _context11.next = 6;
	                      break;
	                    }

	                    o = i;
	                    _context11.next = 15;
	                    break;

	                  case 6:
	                    _context11.next = 8;
	                    return this.file.stat();

	                  case 8:
	                    _yield$this$file$stat4 = _context11.sent;
	                    _e10 = _yield$this$file$stat4.size;

	                    if (!(r + n >= _e10)) {
	                      _context11.next = 12;
	                      break;
	                    }

	                    return _context11.abrupt("return");

	                  case 12:
	                    o = t.allocUnsafe(n);
	                    _context11.next = 15;
	                    return this.file.read(o, 0, n, r);

	                  case 15:
	                    s = d(o, e.parser, 0, r);

	                    if (!(s._size !== n)) {
	                      _context11.next = 18;
	                      break;
	                    }

	                    throw new a("section read error: requested size ".concat(n, " does not equal parsed size ").concat(s._size));

	                  case 18:
	                    return _context11.abrupt("return", s);

	                  case 19:
	                  case "end":
	                    return _context11.stop();
	                }
	              }
	            }, _callee8, this);
	          }));

	          function _parseSection(_x7, _x8) {
	            return _parseSection2.apply(this, arguments);
	          }

	          return _parseSection;
	        }()
	      }, {
	        key: "_uncompress",
	        value: function _uncompress(e, t, r) {
	          if ("gzip" === e) {
	            n.gunzipSync(t).copy(r);
	          } else {
	            if ("rans" !== e) throw new s("".concat(e, " decompression not yet implemented"));
	            h.uncompress(t, r);
	          }
	        }
	      }, {
	        key: "readBlock",
	        value: function () {
	          var _readBlock = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(e) {
	            var _yield$this$getDefini2, r, n, i, o, s, _e11, _t6;

	            return regeneratorRuntime.wrap(function _callee9$(_context12) {
	              while (1) {
	                switch (_context12.prev = _context12.next) {
	                  case 0:
	                    _context12.next = 2;
	                    return this.getDefinition();

	                  case 2:
	                    _yield$this$getDefini2 = _context12.sent;
	                    r = _yield$this$getDefini2.majorVersion;
	                    _context12.next = 6;
	                    return this.getSectionParsers();

	                  case 6:
	                    n = _context12.sent;
	                    _context12.next = 9;
	                    return this.readBlockHeader(e);

	                  case 9:
	                    i = _context12.sent;
	                    o = i._endPosition;
	                    i.contentPosition = i._endPosition;
	                    s = t.allocUnsafe(i.uncompressedSize);

	                    if (!("raw" !== i.compressionMethod)) {
	                      _context12.next = 20;
	                      break;
	                    }

	                    _e11 = t.allocUnsafe(i.compressedSize);
	                    _context12.next = 17;
	                    return this.read(_e11, 0, i.compressedSize, o);

	                  case 17:
	                    this._uncompress(i.compressionMethod, _e11, s);

	                    _context12.next = 22;
	                    break;

	                  case 20:
	                    _context12.next = 22;
	                    return this.read(s, 0, i.uncompressedSize, o);

	                  case 22:
	                    if (!(i.content = s, r >= 3)) {
	                      _context12.next = 35;
	                      break;
	                    }

	                    _context12.next = 25;
	                    return this._parseSection(n.cramBlockCrc32, o + i.compressedSize);

	                  case 25:
	                    _t6 = _context12.sent;
	                    i.crc32 = _t6.crc32;
	                    _context12.t0 = this.validateChecksums;

	                    if (!_context12.t0) {
	                      _context12.next = 31;
	                      break;
	                    }

	                    _context12.next = 31;
	                    return this.checkCrc32(e, i._size + i.compressedSize, i.crc32, "block data");

	                  case 31:
	                    i._endPosition = _t6._endPosition;
	                    i._size = i.compressedSize + n.cramBlockCrc32.maxLength;
	                    _context12.next = 36;
	                    break;

	                  case 35:
	                    i._endPosition = o + i.compressedSize, i._size = i.compressedSize;

	                  case 36:
	                    return _context12.abrupt("return", i);

	                  case 37:
	                  case "end":
	                    return _context12.stop();
	                }
	              }
	            }, _callee9, this);
	          }));

	          function readBlock(_x9) {
	            return _readBlock.apply(this, arguments);
	          }

	          return readBlock;
	        }()
	      }]);

	      return m;
	    }();

	    "getDefinition getSectionParsers getSamHeader".split(" ").forEach(function (e) {
	      return p(m, e);
	    }), e.exports = m;
	  }).call(this, r(1).Buffer);
	}, function (e, t, r) {

	  t.byteLength = function (e) {
	    var t = f(e),
	        r = t[0],
	        n = t[1];
	    return 3 * (r + n) / 4 - n;
	  }, t.toByteArray = function (e) {
	    for (var t, r = f(e), n = r[0], s = r[1], a = new o(function (e, t, r) {
	      return 3 * (t + r) / 4 - r;
	    }(0, n, s)), h = 0, u = s > 0 ? n - 4 : n, c = 0; c < u; c += 4) {
	      t = i[e.charCodeAt(c)] << 18 | i[e.charCodeAt(c + 1)] << 12 | i[e.charCodeAt(c + 2)] << 6 | i[e.charCodeAt(c + 3)], a[h++] = t >> 16 & 255, a[h++] = t >> 8 & 255, a[h++] = 255 & t;
	    }

	    2 === s && (t = i[e.charCodeAt(c)] << 2 | i[e.charCodeAt(c + 1)] >> 4, a[h++] = 255 & t);
	    1 === s && (t = i[e.charCodeAt(c)] << 10 | i[e.charCodeAt(c + 1)] << 4 | i[e.charCodeAt(c + 2)] >> 2, a[h++] = t >> 8 & 255, a[h++] = 255 & t);
	    return a;
	  }, t.fromByteArray = function (e) {
	    for (var t, r = e.length, i = r % 3, o = [], s = 0, a = r - i; s < a; s += 16383) {
	      o.push(u(e, s, s + 16383 > a ? a : s + 16383));
	    }

	    1 === i ? (t = e[r - 1], o.push(n[t >> 2] + n[t << 4 & 63] + "==")) : 2 === i && (t = (e[r - 2] << 8) + e[r - 1], o.push(n[t >> 10] + n[t >> 4 & 63] + n[t << 2 & 63] + "="));
	    return o.join("");
	  };

	  for (var n = [], i = [], o = "undefined" != typeof Uint8Array ? Uint8Array : Array, s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = 0, h = s.length; a < h; ++a) {
	    n[a] = s[a], i[s.charCodeAt(a)] = a;
	  }

	  function f(e) {
	    var t = e.length;
	    if (t % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
	    var r = e.indexOf("=");
	    return -1 === r && (r = t), [r, r === t ? 0 : 4 - r % 4];
	  }

	  function u(e, t, r) {
	    for (var i, o, s = [], a = t; a < r; a += 3) {
	      i = (e[a] << 16 & 16711680) + (e[a + 1] << 8 & 65280) + (255 & e[a + 2]), s.push(n[(o = i) >> 18 & 63] + n[o >> 12 & 63] + n[o >> 6 & 63] + n[63 & o]);
	    }

	    return s.join("");
	  }

	  i["-".charCodeAt(0)] = 62, i["_".charCodeAt(0)] = 63;
	}, function (e, t) {
	  t.read = function (e, t, r, n, i) {
	    var o,
	        s,
	        a = 8 * i - n - 1,
	        h = (1 << a) - 1,
	        f = h >> 1,
	        u = -7,
	        c = r ? i - 1 : 0,
	        l = r ? -1 : 1,
	        d = e[t + c];

	    for (c += l, o = d & (1 << -u) - 1, d >>= -u, u += a; u > 0; o = 256 * o + e[t + c], c += l, u -= 8) {
	    }

	    for (s = o & (1 << -u) - 1, o >>= -u, u += n; u > 0; s = 256 * s + e[t + c], c += l, u -= 8) {
	    }

	    if (0 === o) o = 1 - f;else {
	      if (o === h) return s ? NaN : 1 / 0 * (d ? -1 : 1);
	      s += Math.pow(2, n), o -= f;
	    }
	    return (d ? -1 : 1) * s * Math.pow(2, o - n);
	  }, t.write = function (e, t, r, n, i, o) {
	    var s,
	        a,
	        h,
	        f = 8 * o - i - 1,
	        u = (1 << f) - 1,
	        c = u >> 1,
	        l = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
	        d = n ? 0 : o - 1,
	        p = n ? 1 : -1,
	        g = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;

	    for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (a = isNaN(t) ? 1 : 0, s = u) : (s = Math.floor(Math.log(t) / Math.LN2), t * (h = Math.pow(2, -s)) < 1 && (s--, h *= 2), (t += s + c >= 1 ? l / h : l * Math.pow(2, 1 - c)) * h >= 2 && (s++, h /= 2), s + c >= u ? (a = 0, s = u) : s + c >= 1 ? (a = (t * h - 1) * Math.pow(2, i), s += c) : (a = t * Math.pow(2, c - 1) * Math.pow(2, i), s = 0)); i >= 8; e[r + d] = 255 & a, d += p, a /= 256, i -= 8) {
	    }

	    for (s = s << i | a, f += i; f > 0; e[r + d] = 255 & s, d += p, s /= 256, f -= 8) {
	    }

	    e[r + d - p] |= 128 * g;
	  };
	}, function (e, t, r) {
	  e.exports = i;
	  var n = r(14).EventEmitter;

	  function i() {
	    n.call(this);
	  }

	  r(4)(i, n), i.Readable = r(15), i.Writable = r(47), i.Duplex = r(48), i.Transform = r(49), i.PassThrough = r(50), i.Stream = i, i.prototype.pipe = function (e, t) {
	    var r = this;

	    function i(t) {
	      e.writable && !1 === e.write(t) && r.pause && r.pause();
	    }

	    function o() {
	      r.readable && r.resume && r.resume();
	    }

	    r.on("data", i), e.on("drain", o), e._isStdio || t && !1 === t.end || (r.on("end", a), r.on("close", h));
	    var s = !1;

	    function a() {
	      s || (s = !0, e.end());
	    }

	    function h() {
	      s || (s = !0, "function" == typeof e.destroy && e.destroy());
	    }

	    function f(e) {
	      if (u(), 0 === n.listenerCount(this, "error")) throw e;
	    }

	    function u() {
	      r.removeListener("data", i), e.removeListener("drain", o), r.removeListener("end", a), r.removeListener("close", h), r.removeListener("error", f), e.removeListener("error", f), r.removeListener("end", u), r.removeListener("close", u), e.removeListener("close", u);
	    }

	    return r.on("error", f), e.on("error", f), r.on("end", u), r.on("close", u), e.on("close", u), e.emit("pipe", r), e;
	  };
	}, function (e, t) {}, function (e, t, r) {

	  var n = r(10).Buffer,
	      i = r(42);
	  e.exports = function () {
	    function e() {
	      !function (e, t) {
	        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	      }(this, e), this.head = null, this.tail = null, this.length = 0;
	    }

	    return e.prototype.push = function (e) {
	      var t = {
	        data: e,
	        next: null
	      };
	      this.length > 0 ? this.tail.next = t : this.head = t, this.tail = t, ++this.length;
	    }, e.prototype.unshift = function (e) {
	      var t = {
	        data: e,
	        next: this.head
	      };
	      0 === this.length && (this.tail = t), this.head = t, ++this.length;
	    }, e.prototype.shift = function () {
	      if (0 !== this.length) {
	        var e = this.head.data;
	        return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e;
	      }
	    }, e.prototype.clear = function () {
	      this.head = this.tail = null, this.length = 0;
	    }, e.prototype.join = function (e) {
	      if (0 === this.length) return "";

	      for (var t = this.head, r = "" + t.data; t = t.next;) {
	        r += e + t.data;
	      }

	      return r;
	    }, e.prototype.concat = function (e) {
	      if (0 === this.length) return n.alloc(0);
	      if (1 === this.length) return this.head.data;

	      for (var t, r, i, o = n.allocUnsafe(e >>> 0), s = this.head, a = 0; s;) {
	        t = s.data, r = o, i = a, t.copy(r, i), a += s.data.length, s = s.next;
	      }

	      return o;
	    }, e;
	  }(), i && i.inspect && i.inspect.custom && (e.exports.prototype[i.inspect.custom] = function () {
	    var e = i.inspect({
	      length: this.length
	    });
	    return this.constructor.name + " " + e;
	  });
	}, function (e, t) {}, function (e, t, r) {
	  (function (e) {
	    var n = void 0 !== e && e || "undefined" != typeof self && self || window,
	        i = Function.prototype.apply;

	    function o(e, t) {
	      this._id = e, this._clearFn = t;
	    }

	    t.setTimeout = function () {
	      return new o(i.call(setTimeout, n, arguments), clearTimeout);
	    }, t.setInterval = function () {
	      return new o(i.call(setInterval, n, arguments), clearInterval);
	    }, t.clearTimeout = t.clearInterval = function (e) {
	      e && e.close();
	    }, o.prototype.unref = o.prototype.ref = function () {}, o.prototype.close = function () {
	      this._clearFn.call(n, this._id);
	    }, t.enroll = function (e, t) {
	      clearTimeout(e._idleTimeoutId), e._idleTimeout = t;
	    }, t.unenroll = function (e) {
	      clearTimeout(e._idleTimeoutId), e._idleTimeout = -1;
	    }, t._unrefActive = t.active = function (e) {
	      clearTimeout(e._idleTimeoutId);
	      var t = e._idleTimeout;
	      t >= 0 && (e._idleTimeoutId = setTimeout(function () {
	        e._onTimeout && e._onTimeout();
	      }, t));
	    }, r(44), t.setImmediate = "undefined" != typeof self && self.setImmediate || void 0 !== e && e.setImmediate || this && this.setImmediate, t.clearImmediate = "undefined" != typeof self && self.clearImmediate || void 0 !== e && e.clearImmediate || this && this.clearImmediate;
	  }).call(this, r(2));
	}, function (e, t, r) {
	  (function (e, t) {
	    !function (e, r) {

	      if (!e.setImmediate) {
	        var n,
	            i,
	            o,
	            s,
	            a,
	            h = 1,
	            f = {},
	            u = !1,
	            c = e.document,
	            l = Object.getPrototypeOf && Object.getPrototypeOf(e);
	        l = l && l.setTimeout ? l : e, "[object process]" === {}.toString.call(e.process) ? n = function n(e) {
	          t.nextTick(function () {
	            p(e);
	          });
	        } : !function () {
	          if (e.postMessage && !e.importScripts) {
	            var t = !0,
	                r = e.onmessage;
	            return e.onmessage = function () {
	              t = !1;
	            }, e.postMessage("", "*"), e.onmessage = r, t;
	          }
	        }() ? e.MessageChannel ? ((o = new MessageChannel()).port1.onmessage = function (e) {
	          p(e.data);
	        }, n = function n(e) {
	          o.port2.postMessage(e);
	        }) : c && "onreadystatechange" in c.createElement("script") ? (i = c.documentElement, n = function n(e) {
	          var t = c.createElement("script");
	          t.onreadystatechange = function () {
	            p(e), t.onreadystatechange = null, i.removeChild(t), t = null;
	          }, i.appendChild(t);
	        }) : n = function n(e) {
	          setTimeout(p, 0, e);
	        } : (s = "setImmediate$" + Math.random() + "$", a = function a(t) {
	          t.source === e && "string" == typeof t.data && 0 === t.data.indexOf(s) && p(+t.data.slice(s.length));
	        }, e.addEventListener ? e.addEventListener("message", a, !1) : e.attachEvent("onmessage", a), n = function n(t) {
	          e.postMessage(s + t, "*");
	        }), l.setImmediate = function (e) {
	          "function" != typeof e && (e = new Function("" + e));

	          for (var t = new Array(arguments.length - 1), r = 0; r < t.length; r++) {
	            t[r] = arguments[r + 1];
	          }

	          var i = {
	            callback: e,
	            args: t
	          };
	          return f[h] = i, n(h), h++;
	        }, l.clearImmediate = d;
	      }

	      function d(e) {
	        delete f[e];
	      }

	      function p(e) {
	        if (u) setTimeout(p, 0, e);else {
	          var t = f[e];

	          if (t) {
	            u = !0;

	            try {
	              !function (e) {
	                var t = e.callback,
	                    n = e.args;

	                switch (n.length) {
	                  case 0:
	                    t();
	                    break;

	                  case 1:
	                    t(n[0]);
	                    break;

	                  case 2:
	                    t(n[0], n[1]);
	                    break;

	                  case 3:
	                    t(n[0], n[1], n[2]);
	                    break;

	                  default:
	                    t.apply(r, n);
	                }
	              }(t);
	            } finally {
	              d(e), u = !1;
	            }
	          }
	        }
	      }
	    }("undefined" == typeof self ? void 0 === e ? this : e : self);
	  }).call(this, r(2), r(3));
	}, function (e, t, r) {
	  (function (t) {
	    function r(e) {
	      try {
	        if (!t.localStorage) return !1;
	      } catch (e) {
	        return !1;
	      }

	      var r = t.localStorage[e];
	      return null != r && "true" === String(r).toLowerCase();
	    }

	    e.exports = function (e, t) {
	      if (r("noDeprecation")) return e;
	      var n = !1;
	      return function () {
	        if (!n) {
	          if (r("throwDeprecation")) throw new Error(t);
	          r("traceDeprecation") ? console.trace(t) : console.warn(t), n = !0;
	        }

	        return e.apply(this, arguments);
	      };
	    };
	  }).call(this, r(2));
	}, function (e, t, r) {

	  e.exports = o;
	  var n = r(25),
	      i = r(7);

	  function o(e) {
	    if (!(this instanceof o)) return new o(e);
	    n.call(this, e);
	  }

	  i.inherits = r(4), i.inherits(o, n), o.prototype._transform = function (e, t, r) {
	    r(null, e);
	  };
	}, function (e, t, r) {
	  e.exports = r(16);
	}, function (e, t, r) {
	  e.exports = r(5);
	}, function (e, t, r) {
	  e.exports = r(15).Transform;
	}, function (e, t, r) {
	  e.exports = r(15).PassThrough;
	}, function (e, t, r) {

	  (function (e, n) {
	    var i = r(26),
	        o = r(53),
	        s = r(54),
	        a = r(57),
	        h = r(60);

	    for (var f in h) {
	      t[f] = h[f];
	    }

	    t.NONE = 0, t.DEFLATE = 1, t.INFLATE = 2, t.GZIP = 3, t.GUNZIP = 4, t.DEFLATERAW = 5, t.INFLATERAW = 6, t.UNZIP = 7;

	    function u(e) {
	      if ("number" != typeof e || e < t.DEFLATE || e > t.UNZIP) throw new TypeError("Bad argument");
	      this.dictionary = null, this.err = 0, this.flush = 0, this.init_done = !1, this.level = 0, this.memLevel = 0, this.mode = e, this.strategy = 0, this.windowBits = 0, this.write_in_progress = !1, this.pending_close = !1, this.gzip_id_bytes_read = 0;
	    }

	    u.prototype.close = function () {
	      this.write_in_progress ? this.pending_close = !0 : (this.pending_close = !1, i(this.init_done, "close before init"), i(this.mode <= t.UNZIP), this.mode === t.DEFLATE || this.mode === t.GZIP || this.mode === t.DEFLATERAW ? s.deflateEnd(this.strm) : this.mode !== t.INFLATE && this.mode !== t.GUNZIP && this.mode !== t.INFLATERAW && this.mode !== t.UNZIP || a.inflateEnd(this.strm), this.mode = t.NONE, this.dictionary = null);
	    }, u.prototype.write = function (e, t, r, n, i, o, s) {
	      return this._write(!0, e, t, r, n, i, o, s);
	    }, u.prototype.writeSync = function (e, t, r, n, i, o, s) {
	      return this._write(!1, e, t, r, n, i, o, s);
	    }, u.prototype._write = function (r, o, s, a, h, f, u, c) {
	      if (i.equal(arguments.length, 8), i(this.init_done, "write before init"), i(this.mode !== t.NONE, "already finalized"), i.equal(!1, this.write_in_progress, "write already in progress"), i.equal(!1, this.pending_close, "close is pending"), this.write_in_progress = !0, i.equal(!1, void 0 === o, "must provide flush value"), this.write_in_progress = !0, o !== t.Z_NO_FLUSH && o !== t.Z_PARTIAL_FLUSH && o !== t.Z_SYNC_FLUSH && o !== t.Z_FULL_FLUSH && o !== t.Z_FINISH && o !== t.Z_BLOCK) throw new Error("Invalid flush value");
	      if (null == s && (s = e.alloc(0), h = 0, a = 0), this.strm.avail_in = h, this.strm.input = s, this.strm.next_in = a, this.strm.avail_out = c, this.strm.output = f, this.strm.next_out = u, this.flush = o, !r) return this._process(), this._checkError() ? this._afterSync() : void 0;
	      var l = this;
	      return n.nextTick(function () {
	        l._process(), l._after();
	      }), this;
	    }, u.prototype._afterSync = function () {
	      var e = this.strm.avail_out,
	          t = this.strm.avail_in;
	      return this.write_in_progress = !1, [t, e];
	    }, u.prototype._process = function () {
	      var e = null;

	      switch (this.mode) {
	        case t.DEFLATE:
	        case t.GZIP:
	        case t.DEFLATERAW:
	          this.err = s.deflate(this.strm, this.flush);
	          break;

	        case t.UNZIP:
	          switch (this.strm.avail_in > 0 && (e = this.strm.next_in), this.gzip_id_bytes_read) {
	            case 0:
	              if (null === e) break;

	              if (31 !== this.strm.input[e]) {
	                this.mode = t.INFLATE;
	                break;
	              }

	              if (this.gzip_id_bytes_read = 1, e++, 1 === this.strm.avail_in) break;

	            case 1:
	              if (null === e) break;
	              139 === this.strm.input[e] ? (this.gzip_id_bytes_read = 2, this.mode = t.GUNZIP) : this.mode = t.INFLATE;
	              break;

	            default:
	              throw new Error("invalid number of gzip magic number bytes read");
	          }

	        case t.INFLATE:
	        case t.GUNZIP:
	        case t.INFLATERAW:
	          for (this.err = a.inflate(this.strm, this.flush), this.err === t.Z_NEED_DICT && this.dictionary && (this.err = a.inflateSetDictionary(this.strm, this.dictionary), this.err === t.Z_OK ? this.err = a.inflate(this.strm, this.flush) : this.err === t.Z_DATA_ERROR && (this.err = t.Z_NEED_DICT)); this.strm.avail_in > 0 && this.mode === t.GUNZIP && this.err === t.Z_STREAM_END && 0 !== this.strm.next_in[0];) {
	            this.reset(), this.err = a.inflate(this.strm, this.flush);
	          }

	          break;

	        default:
	          throw new Error("Unknown mode " + this.mode);
	      }
	    }, u.prototype._checkError = function () {
	      switch (this.err) {
	        case t.Z_OK:
	        case t.Z_BUF_ERROR:
	          if (0 !== this.strm.avail_out && this.flush === t.Z_FINISH) return this._error("unexpected end of file"), !1;
	          break;

	        case t.Z_STREAM_END:
	          break;

	        case t.Z_NEED_DICT:
	          return null == this.dictionary ? this._error("Missing dictionary") : this._error("Bad dictionary"), !1;

	        default:
	          return this._error("Zlib error"), !1;
	      }

	      return !0;
	    }, u.prototype._after = function () {
	      if (this._checkError()) {
	        var e = this.strm.avail_out,
	            t = this.strm.avail_in;
	        this.write_in_progress = !1, this.callback(t, e), this.pending_close && this.close();
	      }
	    }, u.prototype._error = function (e) {
	      this.strm.msg && (e = this.strm.msg), this.onerror(e, this.err), this.write_in_progress = !1, this.pending_close && this.close();
	    }, u.prototype.init = function (e, r, n, o, s) {
	      i(4 === arguments.length || 5 === arguments.length, "init(windowBits, level, memLevel, strategy, [dictionary])"), i(e >= 8 && e <= 15, "invalid windowBits"), i(r >= -1 && r <= 9, "invalid compression level"), i(n >= 1 && n <= 9, "invalid memlevel"), i(o === t.Z_FILTERED || o === t.Z_HUFFMAN_ONLY || o === t.Z_RLE || o === t.Z_FIXED || o === t.Z_DEFAULT_STRATEGY, "invalid strategy"), this._init(r, e, n, o, s), this._setDictionary();
	    }, u.prototype.params = function () {
	      throw new Error("deflateParams Not supported");
	    }, u.prototype.reset = function () {
	      this._reset(), this._setDictionary();
	    }, u.prototype._init = function (e, r, n, i, h) {
	      switch (this.level = e, this.windowBits = r, this.memLevel = n, this.strategy = i, this.flush = t.Z_NO_FLUSH, this.err = t.Z_OK, this.mode !== t.GZIP && this.mode !== t.GUNZIP || (this.windowBits += 16), this.mode === t.UNZIP && (this.windowBits += 32), this.mode !== t.DEFLATERAW && this.mode !== t.INFLATERAW || (this.windowBits = -1 * this.windowBits), this.strm = new o(), this.mode) {
	        case t.DEFLATE:
	        case t.GZIP:
	        case t.DEFLATERAW:
	          this.err = s.deflateInit2(this.strm, this.level, t.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
	          break;

	        case t.INFLATE:
	        case t.GUNZIP:
	        case t.INFLATERAW:
	        case t.UNZIP:
	          this.err = a.inflateInit2(this.strm, this.windowBits);
	          break;

	        default:
	          throw new Error("Unknown mode " + this.mode);
	      }

	      this.err !== t.Z_OK && this._error("Init error"), this.dictionary = h, this.write_in_progress = !1, this.init_done = !0;
	    }, u.prototype._setDictionary = function () {
	      if (null != this.dictionary) {
	        switch (this.err = t.Z_OK, this.mode) {
	          case t.DEFLATE:
	          case t.DEFLATERAW:
	            this.err = s.deflateSetDictionary(this.strm, this.dictionary);
	        }

	        this.err !== t.Z_OK && this._error("Failed to set dictionary");
	      }
	    }, u.prototype._reset = function () {
	      switch (this.err = t.Z_OK, this.mode) {
	        case t.DEFLATE:
	        case t.DEFLATERAW:
	        case t.GZIP:
	          this.err = s.deflateReset(this.strm);
	          break;

	        case t.INFLATE:
	        case t.INFLATERAW:
	        case t.GUNZIP:
	          this.err = a.inflateReset(this.strm);
	      }

	      this.err !== t.Z_OK && this._error("Failed to reset stream");
	    }, t.Zlib = u;
	  }).call(this, r(1).Buffer, r(3));
	}, function (e, t) {
	  e.exports = function (e) {
	    return e && "object" == _typeof(e) && "function" == typeof e.copy && "function" == typeof e.fill && "function" == typeof e.readUInt8;
	  };
	}, function (e, t, r) {

	  e.exports = function () {
	    this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
	  };
	}, function (e, t, r) {

	  var n,
	      i = r(11),
	      o = r(55),
	      s = r(28),
	      a = r(29),
	      h = r(56),
	      f = 0,
	      u = 1,
	      c = 3,
	      l = 4,
	      d = 5,
	      p = 0,
	      g = 1,
	      m = -2,
	      _ = -3,
	      y = -5,
	      b = -1,
	      w = 1,
	      v = 2,
	      E = 3,
	      S = 4,
	      A = 0,
	      k = 2,
	      x = 8,
	      C = 9,
	      R = 15,
	      T = 8,
	      I = 286,
	      B = 30,
	      L = 19,
	      N = 2 * I + 1,
	      F = 15,
	      M = 3,
	      O = 258,
	      P = O + M + 1,
	      U = 32,
	      z = 42,
	      D = 69,
	      j = 73,
	      q = 91,
	      Z = 103,
	      H = 113,
	      $ = 666,
	      V = 1,
	      Y = 2,
	      G = 3,
	      W = 4,
	      K = 3;

	  function X(e, t) {
	    return e.msg = h[t], t;
	  }

	  function Q(e) {
	    return (e << 1) - (e > 4 ? 9 : 0);
	  }

	  function J(e) {
	    for (var t = e.length; --t >= 0;) {
	      e[t] = 0;
	    }
	  }

	  function ee(e) {
	    var t = e.state,
	        r = t.pending;
	    r > e.avail_out && (r = e.avail_out), 0 !== r && (i.arraySet(e.output, t.pending_buf, t.pending_out, r, e.next_out), e.next_out += r, t.pending_out += r, e.total_out += r, e.avail_out -= r, t.pending -= r, 0 === t.pending && (t.pending_out = 0));
	  }

	  function te(e, t) {
	    o._tr_flush_block(e, e.block_start >= 0 ? e.block_start : -1, e.strstart - e.block_start, t), e.block_start = e.strstart, ee(e.strm);
	  }

	  function re(e, t) {
	    e.pending_buf[e.pending++] = t;
	  }

	  function ne(e, t) {
	    e.pending_buf[e.pending++] = t >>> 8 & 255, e.pending_buf[e.pending++] = 255 & t;
	  }

	  function ie(e, t) {
	    var r,
	        n,
	        i = e.max_chain_length,
	        o = e.strstart,
	        s = e.prev_length,
	        a = e.nice_match,
	        h = e.strstart > e.w_size - P ? e.strstart - (e.w_size - P) : 0,
	        f = e.window,
	        u = e.w_mask,
	        c = e.prev,
	        l = e.strstart + O,
	        d = f[o + s - 1],
	        p = f[o + s];
	    e.prev_length >= e.good_match && (i >>= 2), a > e.lookahead && (a = e.lookahead);

	    do {
	      if (f[(r = t) + s] === p && f[r + s - 1] === d && f[r] === f[o] && f[++r] === f[o + 1]) {
	        o += 2, r++;

	        do {} while (f[++o] === f[++r] && f[++o] === f[++r] && f[++o] === f[++r] && f[++o] === f[++r] && f[++o] === f[++r] && f[++o] === f[++r] && f[++o] === f[++r] && f[++o] === f[++r] && o < l);

	        if (n = O - (l - o), o = l - O, n > s) {
	          if (e.match_start = t, s = n, n >= a) break;
	          d = f[o + s - 1], p = f[o + s];
	        }
	      }
	    } while ((t = c[t & u]) > h && 0 != --i);

	    return s <= e.lookahead ? s : e.lookahead;
	  }

	  function oe(e) {
	    var t,
	        r,
	        n,
	        o,
	        h,
	        f,
	        u,
	        c,
	        l,
	        d,
	        p = e.w_size;

	    do {
	      if (o = e.window_size - e.lookahead - e.strstart, e.strstart >= p + (p - P)) {
	        i.arraySet(e.window, e.window, p, p, 0), e.match_start -= p, e.strstart -= p, e.block_start -= p, t = r = e.hash_size;

	        do {
	          n = e.head[--t], e.head[t] = n >= p ? n - p : 0;
	        } while (--r);

	        t = r = p;

	        do {
	          n = e.prev[--t], e.prev[t] = n >= p ? n - p : 0;
	        } while (--r);

	        o += p;
	      }

	      if (0 === e.strm.avail_in) break;
	      if (f = e.strm, u = e.window, c = e.strstart + e.lookahead, l = o, d = void 0, (d = f.avail_in) > l && (d = l), r = 0 === d ? 0 : (f.avail_in -= d, i.arraySet(u, f.input, f.next_in, d, c), 1 === f.state.wrap ? f.adler = s(f.adler, u, d, c) : 2 === f.state.wrap && (f.adler = a(f.adler, u, d, c)), f.next_in += d, f.total_in += d, d), e.lookahead += r, e.lookahead + e.insert >= M) for (h = e.strstart - e.insert, e.ins_h = e.window[h], e.ins_h = (e.ins_h << e.hash_shift ^ e.window[h + 1]) & e.hash_mask; e.insert && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[h + M - 1]) & e.hash_mask, e.prev[h & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = h, h++, e.insert--, !(e.lookahead + e.insert < M));) {
	      }
	    } while (e.lookahead < P && 0 !== e.strm.avail_in);
	  }

	  function se(e, t) {
	    for (var r, n;;) {
	      if (e.lookahead < P) {
	        if (oe(e), e.lookahead < P && t === f) return V;
	        if (0 === e.lookahead) break;
	      }

	      if (r = 0, e.lookahead >= M && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + M - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart), 0 !== r && e.strstart - r <= e.w_size - P && (e.match_length = ie(e, r)), e.match_length >= M) {
	        if (n = o._tr_tally(e, e.strstart - e.match_start, e.match_length - M), e.lookahead -= e.match_length, e.match_length <= e.max_lazy_match && e.lookahead >= M) {
	          e.match_length--;

	          do {
	            e.strstart++, e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + M - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart;
	          } while (0 != --e.match_length);

	          e.strstart++;
	        } else e.strstart += e.match_length, e.match_length = 0, e.ins_h = e.window[e.strstart], e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + 1]) & e.hash_mask;
	      } else n = o._tr_tally(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++;
	      if (n && (te(e, !1), 0 === e.strm.avail_out)) return V;
	    }

	    return e.insert = e.strstart < M - 1 ? e.strstart : M - 1, t === l ? (te(e, !0), 0 === e.strm.avail_out ? G : W) : e.last_lit && (te(e, !1), 0 === e.strm.avail_out) ? V : Y;
	  }

	  function ae(e, t) {
	    for (var r, n, i;;) {
	      if (e.lookahead < P) {
	        if (oe(e), e.lookahead < P && t === f) return V;
	        if (0 === e.lookahead) break;
	      }

	      if (r = 0, e.lookahead >= M && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + M - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart), e.prev_length = e.match_length, e.prev_match = e.match_start, e.match_length = M - 1, 0 !== r && e.prev_length < e.max_lazy_match && e.strstart - r <= e.w_size - P && (e.match_length = ie(e, r), e.match_length <= 5 && (e.strategy === w || e.match_length === M && e.strstart - e.match_start > 4096) && (e.match_length = M - 1)), e.prev_length >= M && e.match_length <= e.prev_length) {
	        i = e.strstart + e.lookahead - M, n = o._tr_tally(e, e.strstart - 1 - e.prev_match, e.prev_length - M), e.lookahead -= e.prev_length - 1, e.prev_length -= 2;

	        do {
	          ++e.strstart <= i && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + M - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart);
	        } while (0 != --e.prev_length);

	        if (e.match_available = 0, e.match_length = M - 1, e.strstart++, n && (te(e, !1), 0 === e.strm.avail_out)) return V;
	      } else if (e.match_available) {
	        if ((n = o._tr_tally(e, 0, e.window[e.strstart - 1])) && te(e, !1), e.strstart++, e.lookahead--, 0 === e.strm.avail_out) return V;
	      } else e.match_available = 1, e.strstart++, e.lookahead--;
	    }

	    return e.match_available && (n = o._tr_tally(e, 0, e.window[e.strstart - 1]), e.match_available = 0), e.insert = e.strstart < M - 1 ? e.strstart : M - 1, t === l ? (te(e, !0), 0 === e.strm.avail_out ? G : W) : e.last_lit && (te(e, !1), 0 === e.strm.avail_out) ? V : Y;
	  }

	  function he(e, t, r, n, i) {
	    this.good_length = e, this.max_lazy = t, this.nice_length = r, this.max_chain = n, this.func = i;
	  }

	  function fe() {
	    this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = x, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new i.Buf16(2 * N), this.dyn_dtree = new i.Buf16(2 * (2 * B + 1)), this.bl_tree = new i.Buf16(2 * (2 * L + 1)), J(this.dyn_ltree), J(this.dyn_dtree), J(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new i.Buf16(F + 1), this.heap = new i.Buf16(2 * I + 1), J(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new i.Buf16(2 * I + 1), J(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
	  }

	  function ue(e) {
	    var t;
	    return e && e.state ? (e.total_in = e.total_out = 0, e.data_type = k, (t = e.state).pending = 0, t.pending_out = 0, t.wrap < 0 && (t.wrap = -t.wrap), t.status = t.wrap ? z : H, e.adler = 2 === t.wrap ? 0 : 1, t.last_flush = f, o._tr_init(t), p) : X(e, m);
	  }

	  function ce(e) {
	    var t,
	        r = ue(e);
	    return r === p && ((t = e.state).window_size = 2 * t.w_size, J(t.head), t.max_lazy_match = n[t.level].max_lazy, t.good_match = n[t.level].good_length, t.nice_match = n[t.level].nice_length, t.max_chain_length = n[t.level].max_chain, t.strstart = 0, t.block_start = 0, t.lookahead = 0, t.insert = 0, t.match_length = t.prev_length = M - 1, t.match_available = 0, t.ins_h = 0), r;
	  }

	  function le(e, t, r, n, o, s) {
	    if (!e) return m;
	    var a = 1;
	    if (t === b && (t = 6), n < 0 ? (a = 0, n = -n) : n > 15 && (a = 2, n -= 16), o < 1 || o > C || r !== x || n < 8 || n > 15 || t < 0 || t > 9 || s < 0 || s > S) return X(e, m);
	    8 === n && (n = 9);
	    var h = new fe();
	    return e.state = h, h.strm = e, h.wrap = a, h.gzhead = null, h.w_bits = n, h.w_size = 1 << h.w_bits, h.w_mask = h.w_size - 1, h.hash_bits = o + 7, h.hash_size = 1 << h.hash_bits, h.hash_mask = h.hash_size - 1, h.hash_shift = ~~((h.hash_bits + M - 1) / M), h.window = new i.Buf8(2 * h.w_size), h.head = new i.Buf16(h.hash_size), h.prev = new i.Buf16(h.w_size), h.lit_bufsize = 1 << o + 6, h.pending_buf_size = 4 * h.lit_bufsize, h.pending_buf = new i.Buf8(h.pending_buf_size), h.d_buf = 1 * h.lit_bufsize, h.l_buf = 3 * h.lit_bufsize, h.level = t, h.strategy = s, h.method = r, ce(e);
	  }

	  n = [new he(0, 0, 0, 0, function (e, t) {
	    var r = 65535;

	    for (r > e.pending_buf_size - 5 && (r = e.pending_buf_size - 5);;) {
	      if (e.lookahead <= 1) {
	        if (oe(e), 0 === e.lookahead && t === f) return V;
	        if (0 === e.lookahead) break;
	      }

	      e.strstart += e.lookahead, e.lookahead = 0;
	      var n = e.block_start + r;
	      if ((0 === e.strstart || e.strstart >= n) && (e.lookahead = e.strstart - n, e.strstart = n, te(e, !1), 0 === e.strm.avail_out)) return V;
	      if (e.strstart - e.block_start >= e.w_size - P && (te(e, !1), 0 === e.strm.avail_out)) return V;
	    }

	    return e.insert = 0, t === l ? (te(e, !0), 0 === e.strm.avail_out ? G : W) : (e.strstart > e.block_start && (te(e, !1), e.strm.avail_out), V);
	  }), new he(4, 4, 8, 4, se), new he(4, 5, 16, 8, se), new he(4, 6, 32, 32, se), new he(4, 4, 16, 16, ae), new he(8, 16, 32, 32, ae), new he(8, 16, 128, 128, ae), new he(8, 32, 128, 256, ae), new he(32, 128, 258, 1024, ae), new he(32, 258, 258, 4096, ae)], t.deflateInit = function (e, t) {
	    return le(e, t, x, R, T, A);
	  }, t.deflateInit2 = le, t.deflateReset = ce, t.deflateResetKeep = ue, t.deflateSetHeader = function (e, t) {
	    return e && e.state ? 2 !== e.state.wrap ? m : (e.state.gzhead = t, p) : m;
	  }, t.deflate = function (e, t) {
	    var r, i, s, h;
	    if (!e || !e.state || t > d || t < 0) return e ? X(e, m) : m;
	    if (i = e.state, !e.output || !e.input && 0 !== e.avail_in || i.status === $ && t !== l) return X(e, 0 === e.avail_out ? y : m);
	    if (i.strm = e, r = i.last_flush, i.last_flush = t, i.status === z) if (2 === i.wrap) e.adler = 0, re(i, 31), re(i, 139), re(i, 8), i.gzhead ? (re(i, (i.gzhead.text ? 1 : 0) + (i.gzhead.hcrc ? 2 : 0) + (i.gzhead.extra ? 4 : 0) + (i.gzhead.name ? 8 : 0) + (i.gzhead.comment ? 16 : 0)), re(i, 255 & i.gzhead.time), re(i, i.gzhead.time >> 8 & 255), re(i, i.gzhead.time >> 16 & 255), re(i, i.gzhead.time >> 24 & 255), re(i, 9 === i.level ? 2 : i.strategy >= v || i.level < 2 ? 4 : 0), re(i, 255 & i.gzhead.os), i.gzhead.extra && i.gzhead.extra.length && (re(i, 255 & i.gzhead.extra.length), re(i, i.gzhead.extra.length >> 8 & 255)), i.gzhead.hcrc && (e.adler = a(e.adler, i.pending_buf, i.pending, 0)), i.gzindex = 0, i.status = D) : (re(i, 0), re(i, 0), re(i, 0), re(i, 0), re(i, 0), re(i, 9 === i.level ? 2 : i.strategy >= v || i.level < 2 ? 4 : 0), re(i, K), i.status = H);else {
	      var _ = x + (i.w_bits - 8 << 4) << 8;

	      _ |= (i.strategy >= v || i.level < 2 ? 0 : i.level < 6 ? 1 : 6 === i.level ? 2 : 3) << 6, 0 !== i.strstart && (_ |= U), _ += 31 - _ % 31, i.status = H, ne(i, _), 0 !== i.strstart && (ne(i, e.adler >>> 16), ne(i, 65535 & e.adler)), e.adler = 1;
	    }
	    if (i.status === D) if (i.gzhead.extra) {
	      for (s = i.pending; i.gzindex < (65535 & i.gzhead.extra.length) && (i.pending !== i.pending_buf_size || (i.gzhead.hcrc && i.pending > s && (e.adler = a(e.adler, i.pending_buf, i.pending - s, s)), ee(e), s = i.pending, i.pending !== i.pending_buf_size));) {
	        re(i, 255 & i.gzhead.extra[i.gzindex]), i.gzindex++;
	      }

	      i.gzhead.hcrc && i.pending > s && (e.adler = a(e.adler, i.pending_buf, i.pending - s, s)), i.gzindex === i.gzhead.extra.length && (i.gzindex = 0, i.status = j);
	    } else i.status = j;
	    if (i.status === j) if (i.gzhead.name) {
	      s = i.pending;

	      do {
	        if (i.pending === i.pending_buf_size && (i.gzhead.hcrc && i.pending > s && (e.adler = a(e.adler, i.pending_buf, i.pending - s, s)), ee(e), s = i.pending, i.pending === i.pending_buf_size)) {
	          h = 1;
	          break;
	        }

	        h = i.gzindex < i.gzhead.name.length ? 255 & i.gzhead.name.charCodeAt(i.gzindex++) : 0, re(i, h);
	      } while (0 !== h);

	      i.gzhead.hcrc && i.pending > s && (e.adler = a(e.adler, i.pending_buf, i.pending - s, s)), 0 === h && (i.gzindex = 0, i.status = q);
	    } else i.status = q;
	    if (i.status === q) if (i.gzhead.comment) {
	      s = i.pending;

	      do {
	        if (i.pending === i.pending_buf_size && (i.gzhead.hcrc && i.pending > s && (e.adler = a(e.adler, i.pending_buf, i.pending - s, s)), ee(e), s = i.pending, i.pending === i.pending_buf_size)) {
	          h = 1;
	          break;
	        }

	        h = i.gzindex < i.gzhead.comment.length ? 255 & i.gzhead.comment.charCodeAt(i.gzindex++) : 0, re(i, h);
	      } while (0 !== h);

	      i.gzhead.hcrc && i.pending > s && (e.adler = a(e.adler, i.pending_buf, i.pending - s, s)), 0 === h && (i.status = Z);
	    } else i.status = Z;

	    if (i.status === Z && (i.gzhead.hcrc ? (i.pending + 2 > i.pending_buf_size && ee(e), i.pending + 2 <= i.pending_buf_size && (re(i, 255 & e.adler), re(i, e.adler >> 8 & 255), e.adler = 0, i.status = H)) : i.status = H), 0 !== i.pending) {
	      if (ee(e), 0 === e.avail_out) return i.last_flush = -1, p;
	    } else if (0 === e.avail_in && Q(t) <= Q(r) && t !== l) return X(e, y);

	    if (i.status === $ && 0 !== e.avail_in) return X(e, y);

	    if (0 !== e.avail_in || 0 !== i.lookahead || t !== f && i.status !== $) {
	      var b = i.strategy === v ? function (e, t) {
	        for (var r;;) {
	          if (0 === e.lookahead && (oe(e), 0 === e.lookahead)) {
	            if (t === f) return V;
	            break;
	          }

	          if (e.match_length = 0, r = o._tr_tally(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++, r && (te(e, !1), 0 === e.strm.avail_out)) return V;
	        }

	        return e.insert = 0, t === l ? (te(e, !0), 0 === e.strm.avail_out ? G : W) : e.last_lit && (te(e, !1), 0 === e.strm.avail_out) ? V : Y;
	      }(i, t) : i.strategy === E ? function (e, t) {
	        for (var r, n, i, s, a = e.window;;) {
	          if (e.lookahead <= O) {
	            if (oe(e), e.lookahead <= O && t === f) return V;
	            if (0 === e.lookahead) break;
	          }

	          if (e.match_length = 0, e.lookahead >= M && e.strstart > 0 && (n = a[i = e.strstart - 1]) === a[++i] && n === a[++i] && n === a[++i]) {
	            s = e.strstart + O;

	            do {} while (n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && i < s);

	            e.match_length = O - (s - i), e.match_length > e.lookahead && (e.match_length = e.lookahead);
	          }

	          if (e.match_length >= M ? (r = o._tr_tally(e, 1, e.match_length - M), e.lookahead -= e.match_length, e.strstart += e.match_length, e.match_length = 0) : (r = o._tr_tally(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++), r && (te(e, !1), 0 === e.strm.avail_out)) return V;
	        }

	        return e.insert = 0, t === l ? (te(e, !0), 0 === e.strm.avail_out ? G : W) : e.last_lit && (te(e, !1), 0 === e.strm.avail_out) ? V : Y;
	      }(i, t) : n[i.level].func(i, t);
	      if (b !== G && b !== W || (i.status = $), b === V || b === G) return 0 === e.avail_out && (i.last_flush = -1), p;
	      if (b === Y && (t === u ? o._tr_align(i) : t !== d && (o._tr_stored_block(i, 0, 0, !1), t === c && (J(i.head), 0 === i.lookahead && (i.strstart = 0, i.block_start = 0, i.insert = 0))), ee(e), 0 === e.avail_out)) return i.last_flush = -1, p;
	    }

	    return t !== l ? p : i.wrap <= 0 ? g : (2 === i.wrap ? (re(i, 255 & e.adler), re(i, e.adler >> 8 & 255), re(i, e.adler >> 16 & 255), re(i, e.adler >> 24 & 255), re(i, 255 & e.total_in), re(i, e.total_in >> 8 & 255), re(i, e.total_in >> 16 & 255), re(i, e.total_in >> 24 & 255)) : (ne(i, e.adler >>> 16), ne(i, 65535 & e.adler)), ee(e), i.wrap > 0 && (i.wrap = -i.wrap), 0 !== i.pending ? p : g);
	  }, t.deflateEnd = function (e) {
	    var t;
	    return e && e.state ? (t = e.state.status) !== z && t !== D && t !== j && t !== q && t !== Z && t !== H && t !== $ ? X(e, m) : (e.state = null, t === H ? X(e, _) : p) : m;
	  }, t.deflateSetDictionary = function (e, t) {
	    var r,
	        n,
	        o,
	        a,
	        h,
	        f,
	        u,
	        c,
	        l = t.length;
	    if (!e || !e.state) return m;
	    if (2 === (a = (r = e.state).wrap) || 1 === a && r.status !== z || r.lookahead) return m;

	    for (1 === a && (e.adler = s(e.adler, t, l, 0)), r.wrap = 0, l >= r.w_size && (0 === a && (J(r.head), r.strstart = 0, r.block_start = 0, r.insert = 0), c = new i.Buf8(r.w_size), i.arraySet(c, t, l - r.w_size, r.w_size, 0), t = c, l = r.w_size), h = e.avail_in, f = e.next_in, u = e.input, e.avail_in = l, e.next_in = 0, e.input = t, oe(r); r.lookahead >= M;) {
	      n = r.strstart, o = r.lookahead - (M - 1);

	      do {
	        r.ins_h = (r.ins_h << r.hash_shift ^ r.window[n + M - 1]) & r.hash_mask, r.prev[n & r.w_mask] = r.head[r.ins_h], r.head[r.ins_h] = n, n++;
	      } while (--o);

	      r.strstart = n, r.lookahead = M - 1, oe(r);
	    }

	    return r.strstart += r.lookahead, r.block_start = r.strstart, r.insert = r.lookahead, r.lookahead = 0, r.match_length = r.prev_length = M - 1, r.match_available = 0, e.next_in = f, e.input = u, e.avail_in = h, r.wrap = a, p;
	  }, t.deflateInfo = "pako deflate (from Nodeca project)";
	}, function (e, t, r) {

	  var n = r(11),
	      i = 4,
	      o = 0,
	      s = 1,
	      a = 2;

	  function h(e) {
	    for (var t = e.length; --t >= 0;) {
	      e[t] = 0;
	    }
	  }

	  var f = 0,
	      u = 1,
	      c = 2,
	      l = 29,
	      d = 256,
	      p = d + 1 + l,
	      g = 30,
	      m = 19,
	      _ = 2 * p + 1,
	      y = 15,
	      b = 16,
	      w = 7,
	      v = 256,
	      E = 16,
	      S = 17,
	      A = 18,
	      k = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0],
	      x = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13],
	      C = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7],
	      R = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],
	      T = new Array(2 * (p + 2));

	  h(T);
	  var I = new Array(2 * g);
	  h(I);
	  var B = new Array(512);
	  h(B);
	  var L = new Array(256);
	  h(L);
	  var N = new Array(l);
	  h(N);
	  var F,
	      M,
	      O,
	      P = new Array(g);

	  function U(e, t, r, n, i) {
	    this.static_tree = e, this.extra_bits = t, this.extra_base = r, this.elems = n, this.max_length = i, this.has_stree = e && e.length;
	  }

	  function z(e, t) {
	    this.dyn_tree = e, this.max_code = 0, this.stat_desc = t;
	  }

	  function D(e) {
	    return e < 256 ? B[e] : B[256 + (e >>> 7)];
	  }

	  function j(e, t) {
	    e.pending_buf[e.pending++] = 255 & t, e.pending_buf[e.pending++] = t >>> 8 & 255;
	  }

	  function q(e, t, r) {
	    e.bi_valid > b - r ? (e.bi_buf |= t << e.bi_valid & 65535, j(e, e.bi_buf), e.bi_buf = t >> b - e.bi_valid, e.bi_valid += r - b) : (e.bi_buf |= t << e.bi_valid & 65535, e.bi_valid += r);
	  }

	  function Z(e, t, r) {
	    q(e, r[2 * t], r[2 * t + 1]);
	  }

	  function H(e, t) {
	    var r = 0;

	    do {
	      r |= 1 & e, e >>>= 1, r <<= 1;
	    } while (--t > 0);

	    return r >>> 1;
	  }

	  function $(e, t, r) {
	    var n,
	        i,
	        o = new Array(y + 1),
	        s = 0;

	    for (n = 1; n <= y; n++) {
	      o[n] = s = s + r[n - 1] << 1;
	    }

	    for (i = 0; i <= t; i++) {
	      var a = e[2 * i + 1];
	      0 !== a && (e[2 * i] = H(o[a]++, a));
	    }
	  }

	  function V(e) {
	    var t;

	    for (t = 0; t < p; t++) {
	      e.dyn_ltree[2 * t] = 0;
	    }

	    for (t = 0; t < g; t++) {
	      e.dyn_dtree[2 * t] = 0;
	    }

	    for (t = 0; t < m; t++) {
	      e.bl_tree[2 * t] = 0;
	    }

	    e.dyn_ltree[2 * v] = 1, e.opt_len = e.static_len = 0, e.last_lit = e.matches = 0;
	  }

	  function Y(e) {
	    e.bi_valid > 8 ? j(e, e.bi_buf) : e.bi_valid > 0 && (e.pending_buf[e.pending++] = e.bi_buf), e.bi_buf = 0, e.bi_valid = 0;
	  }

	  function G(e, t, r, n) {
	    var i = 2 * t,
	        o = 2 * r;
	    return e[i] < e[o] || e[i] === e[o] && n[t] <= n[r];
	  }

	  function W(e, t, r) {
	    for (var n = e.heap[r], i = r << 1; i <= e.heap_len && (i < e.heap_len && G(t, e.heap[i + 1], e.heap[i], e.depth) && i++, !G(t, n, e.heap[i], e.depth));) {
	      e.heap[r] = e.heap[i], r = i, i <<= 1;
	    }

	    e.heap[r] = n;
	  }

	  function K(e, t, r) {
	    var n,
	        i,
	        o,
	        s,
	        a = 0;
	    if (0 !== e.last_lit) do {
	      n = e.pending_buf[e.d_buf + 2 * a] << 8 | e.pending_buf[e.d_buf + 2 * a + 1], i = e.pending_buf[e.l_buf + a], a++, 0 === n ? Z(e, i, t) : (Z(e, (o = L[i]) + d + 1, t), 0 !== (s = k[o]) && q(e, i -= N[o], s), Z(e, o = D(--n), r), 0 !== (s = x[o]) && q(e, n -= P[o], s));
	    } while (a < e.last_lit);
	    Z(e, v, t);
	  }

	  function X(e, t) {
	    var r,
	        n,
	        i,
	        o = t.dyn_tree,
	        s = t.stat_desc.static_tree,
	        a = t.stat_desc.has_stree,
	        h = t.stat_desc.elems,
	        f = -1;

	    for (e.heap_len = 0, e.heap_max = _, r = 0; r < h; r++) {
	      0 !== o[2 * r] ? (e.heap[++e.heap_len] = f = r, e.depth[r] = 0) : o[2 * r + 1] = 0;
	    }

	    for (; e.heap_len < 2;) {
	      o[2 * (i = e.heap[++e.heap_len] = f < 2 ? ++f : 0)] = 1, e.depth[i] = 0, e.opt_len--, a && (e.static_len -= s[2 * i + 1]);
	    }

	    for (t.max_code = f, r = e.heap_len >> 1; r >= 1; r--) {
	      W(e, o, r);
	    }

	    i = h;

	    do {
	      r = e.heap[1], e.heap[1] = e.heap[e.heap_len--], W(e, o, 1), n = e.heap[1], e.heap[--e.heap_max] = r, e.heap[--e.heap_max] = n, o[2 * i] = o[2 * r] + o[2 * n], e.depth[i] = (e.depth[r] >= e.depth[n] ? e.depth[r] : e.depth[n]) + 1, o[2 * r + 1] = o[2 * n + 1] = i, e.heap[1] = i++, W(e, o, 1);
	    } while (e.heap_len >= 2);

	    e.heap[--e.heap_max] = e.heap[1], function (e, t) {
	      var r,
	          n,
	          i,
	          o,
	          s,
	          a,
	          h = t.dyn_tree,
	          f = t.max_code,
	          u = t.stat_desc.static_tree,
	          c = t.stat_desc.has_stree,
	          l = t.stat_desc.extra_bits,
	          d = t.stat_desc.extra_base,
	          p = t.stat_desc.max_length,
	          g = 0;

	      for (o = 0; o <= y; o++) {
	        e.bl_count[o] = 0;
	      }

	      for (h[2 * e.heap[e.heap_max] + 1] = 0, r = e.heap_max + 1; r < _; r++) {
	        (o = h[2 * h[2 * (n = e.heap[r]) + 1] + 1] + 1) > p && (o = p, g++), h[2 * n + 1] = o, n > f || (e.bl_count[o]++, s = 0, n >= d && (s = l[n - d]), a = h[2 * n], e.opt_len += a * (o + s), c && (e.static_len += a * (u[2 * n + 1] + s)));
	      }

	      if (0 !== g) {
	        do {
	          for (o = p - 1; 0 === e.bl_count[o];) {
	            o--;
	          }

	          e.bl_count[o]--, e.bl_count[o + 1] += 2, e.bl_count[p]--, g -= 2;
	        } while (g > 0);

	        for (o = p; 0 !== o; o--) {
	          for (n = e.bl_count[o]; 0 !== n;) {
	            (i = e.heap[--r]) > f || (h[2 * i + 1] !== o && (e.opt_len += (o - h[2 * i + 1]) * h[2 * i], h[2 * i + 1] = o), n--);
	          }
	        }
	      }
	    }(e, t), $(o, f, e.bl_count);
	  }

	  function Q(e, t, r) {
	    var n,
	        i,
	        o = -1,
	        s = t[1],
	        a = 0,
	        h = 7,
	        f = 4;

	    for (0 === s && (h = 138, f = 3), t[2 * (r + 1) + 1] = 65535, n = 0; n <= r; n++) {
	      i = s, s = t[2 * (n + 1) + 1], ++a < h && i === s || (a < f ? e.bl_tree[2 * i] += a : 0 !== i ? (i !== o && e.bl_tree[2 * i]++, e.bl_tree[2 * E]++) : a <= 10 ? e.bl_tree[2 * S]++ : e.bl_tree[2 * A]++, a = 0, o = i, 0 === s ? (h = 138, f = 3) : i === s ? (h = 6, f = 3) : (h = 7, f = 4));
	    }
	  }

	  function J(e, t, r) {
	    var n,
	        i,
	        o = -1,
	        s = t[1],
	        a = 0,
	        h = 7,
	        f = 4;

	    for (0 === s && (h = 138, f = 3), n = 0; n <= r; n++) {
	      if (i = s, s = t[2 * (n + 1) + 1], !(++a < h && i === s)) {
	        if (a < f) do {
	          Z(e, i, e.bl_tree);
	        } while (0 != --a);else 0 !== i ? (i !== o && (Z(e, i, e.bl_tree), a--), Z(e, E, e.bl_tree), q(e, a - 3, 2)) : a <= 10 ? (Z(e, S, e.bl_tree), q(e, a - 3, 3)) : (Z(e, A, e.bl_tree), q(e, a - 11, 7));
	        a = 0, o = i, 0 === s ? (h = 138, f = 3) : i === s ? (h = 6, f = 3) : (h = 7, f = 4);
	      }
	    }
	  }

	  h(P);
	  var ee = !1;

	  function te(e, t, r, i) {
	    q(e, (f << 1) + (i ? 1 : 0), 3), function (e, t, r, i) {
	      Y(e), i && (j(e, r), j(e, ~r)), n.arraySet(e.pending_buf, e.window, t, r, e.pending), e.pending += r;
	    }(e, t, r, !0);
	  }

	  t._tr_init = function (e) {
	    ee || (function () {
	      var e,
	          t,
	          r,
	          n,
	          i,
	          o = new Array(y + 1);

	      for (r = 0, n = 0; n < l - 1; n++) {
	        for (N[n] = r, e = 0; e < 1 << k[n]; e++) {
	          L[r++] = n;
	        }
	      }

	      for (L[r - 1] = n, i = 0, n = 0; n < 16; n++) {
	        for (P[n] = i, e = 0; e < 1 << x[n]; e++) {
	          B[i++] = n;
	        }
	      }

	      for (i >>= 7; n < g; n++) {
	        for (P[n] = i << 7, e = 0; e < 1 << x[n] - 7; e++) {
	          B[256 + i++] = n;
	        }
	      }

	      for (t = 0; t <= y; t++) {
	        o[t] = 0;
	      }

	      for (e = 0; e <= 143;) {
	        T[2 * e + 1] = 8, e++, o[8]++;
	      }

	      for (; e <= 255;) {
	        T[2 * e + 1] = 9, e++, o[9]++;
	      }

	      for (; e <= 279;) {
	        T[2 * e + 1] = 7, e++, o[7]++;
	      }

	      for (; e <= 287;) {
	        T[2 * e + 1] = 8, e++, o[8]++;
	      }

	      for ($(T, p + 1, o), e = 0; e < g; e++) {
	        I[2 * e + 1] = 5, I[2 * e] = H(e, 5);
	      }

	      F = new U(T, k, d + 1, p, y), M = new U(I, x, 0, g, y), O = new U(new Array(0), C, 0, m, w);
	    }(), ee = !0), e.l_desc = new z(e.dyn_ltree, F), e.d_desc = new z(e.dyn_dtree, M), e.bl_desc = new z(e.bl_tree, O), e.bi_buf = 0, e.bi_valid = 0, V(e);
	  }, t._tr_stored_block = te, t._tr_flush_block = function (e, t, r, n) {
	    var h,
	        f,
	        l = 0;
	    e.level > 0 ? (e.strm.data_type === a && (e.strm.data_type = function (e) {
	      var t,
	          r = 4093624447;

	      for (t = 0; t <= 31; t++, r >>>= 1) {
	        if (1 & r && 0 !== e.dyn_ltree[2 * t]) return o;
	      }

	      if (0 !== e.dyn_ltree[18] || 0 !== e.dyn_ltree[20] || 0 !== e.dyn_ltree[26]) return s;

	      for (t = 32; t < d; t++) {
	        if (0 !== e.dyn_ltree[2 * t]) return s;
	      }

	      return o;
	    }(e)), X(e, e.l_desc), X(e, e.d_desc), l = function (e) {
	      var t;

	      for (Q(e, e.dyn_ltree, e.l_desc.max_code), Q(e, e.dyn_dtree, e.d_desc.max_code), X(e, e.bl_desc), t = m - 1; t >= 3 && 0 === e.bl_tree[2 * R[t] + 1]; t--) {
	      }

	      return e.opt_len += 3 * (t + 1) + 5 + 5 + 4, t;
	    }(e), h = e.opt_len + 3 + 7 >>> 3, (f = e.static_len + 3 + 7 >>> 3) <= h && (h = f)) : h = f = r + 5, r + 4 <= h && -1 !== t ? te(e, t, r, n) : e.strategy === i || f === h ? (q(e, (u << 1) + (n ? 1 : 0), 3), K(e, T, I)) : (q(e, (c << 1) + (n ? 1 : 0), 3), function (e, t, r, n) {
	      var i;

	      for (q(e, t - 257, 5), q(e, r - 1, 5), q(e, n - 4, 4), i = 0; i < n; i++) {
	        q(e, e.bl_tree[2 * R[i] + 1], 3);
	      }

	      J(e, e.dyn_ltree, t - 1), J(e, e.dyn_dtree, r - 1);
	    }(e, e.l_desc.max_code + 1, e.d_desc.max_code + 1, l + 1), K(e, e.dyn_ltree, e.dyn_dtree)), V(e), n && Y(e);
	  }, t._tr_tally = function (e, t, r) {
	    return e.pending_buf[e.d_buf + 2 * e.last_lit] = t >>> 8 & 255, e.pending_buf[e.d_buf + 2 * e.last_lit + 1] = 255 & t, e.pending_buf[e.l_buf + e.last_lit] = 255 & r, e.last_lit++, 0 === t ? e.dyn_ltree[2 * r]++ : (e.matches++, t--, e.dyn_ltree[2 * (L[r] + d + 1)]++, e.dyn_dtree[2 * D(t)]++), e.last_lit === e.lit_bufsize - 1;
	  }, t._tr_align = function (e) {
	    q(e, u << 1, 3), Z(e, v, T), function (e) {
	      16 === e.bi_valid ? (j(e, e.bi_buf), e.bi_buf = 0, e.bi_valid = 0) : e.bi_valid >= 8 && (e.pending_buf[e.pending++] = 255 & e.bi_buf, e.bi_buf >>= 8, e.bi_valid -= 8);
	    }(e);
	  };
	}, function (e, t, r) {

	  e.exports = {
	    2: "need dictionary",
	    1: "stream end",
	    0: "",
	    "-1": "file error",
	    "-2": "stream error",
	    "-3": "data error",
	    "-4": "insufficient memory",
	    "-5": "buffer error",
	    "-6": "incompatible version"
	  };
	}, function (e, t, r) {

	  var n = r(11),
	      i = r(28),
	      o = r(29),
	      s = r(58),
	      a = r(59),
	      h = 0,
	      f = 1,
	      u = 2,
	      c = 4,
	      l = 5,
	      d = 6,
	      p = 0,
	      g = 1,
	      m = 2,
	      _ = -2,
	      y = -3,
	      b = -4,
	      w = -5,
	      v = 8,
	      E = 1,
	      S = 2,
	      A = 3,
	      k = 4,
	      x = 5,
	      C = 6,
	      R = 7,
	      T = 8,
	      I = 9,
	      B = 10,
	      L = 11,
	      N = 12,
	      F = 13,
	      M = 14,
	      O = 15,
	      P = 16,
	      U = 17,
	      z = 18,
	      D = 19,
	      j = 20,
	      q = 21,
	      Z = 22,
	      H = 23,
	      $ = 24,
	      V = 25,
	      Y = 26,
	      G = 27,
	      W = 28,
	      K = 29,
	      X = 30,
	      Q = 31,
	      J = 32,
	      ee = 852,
	      te = 592,
	      re = 15;

	  function ne(e) {
	    return (e >>> 24 & 255) + (e >>> 8 & 65280) + ((65280 & e) << 8) + ((255 & e) << 24);
	  }

	  function ie() {
	    this.mode = 0, this.last = !1, this.wrap = 0, this.havedict = !1, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new n.Buf16(320), this.work = new n.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
	  }

	  function oe(e) {
	    var t;
	    return e && e.state ? (t = e.state, e.total_in = e.total_out = t.total = 0, e.msg = "", t.wrap && (e.adler = 1 & t.wrap), t.mode = E, t.last = 0, t.havedict = 0, t.dmax = 32768, t.head = null, t.hold = 0, t.bits = 0, t.lencode = t.lendyn = new n.Buf32(ee), t.distcode = t.distdyn = new n.Buf32(te), t.sane = 1, t.back = -1, p) : _;
	  }

	  function se(e) {
	    var t;
	    return e && e.state ? ((t = e.state).wsize = 0, t.whave = 0, t.wnext = 0, oe(e)) : _;
	  }

	  function ae(e, t) {
	    var r, n;
	    return e && e.state ? (n = e.state, t < 0 ? (r = 0, t = -t) : (r = 1 + (t >> 4), t < 48 && (t &= 15)), t && (t < 8 || t > 15) ? _ : (null !== n.window && n.wbits !== t && (n.window = null), n.wrap = r, n.wbits = t, se(e))) : _;
	  }

	  function he(e, t) {
	    var r, n;
	    return e ? (n = new ie(), e.state = n, n.window = null, (r = ae(e, t)) !== p && (e.state = null), r) : _;
	  }

	  var fe,
	      ue,
	      ce = !0;

	  function le(e) {
	    if (ce) {
	      var t;

	      for (fe = new n.Buf32(512), ue = new n.Buf32(32), t = 0; t < 144;) {
	        e.lens[t++] = 8;
	      }

	      for (; t < 256;) {
	        e.lens[t++] = 9;
	      }

	      for (; t < 280;) {
	        e.lens[t++] = 7;
	      }

	      for (; t < 288;) {
	        e.lens[t++] = 8;
	      }

	      for (a(f, e.lens, 0, 288, fe, 0, e.work, {
	        bits: 9
	      }), t = 0; t < 32;) {
	        e.lens[t++] = 5;
	      }

	      a(u, e.lens, 0, 32, ue, 0, e.work, {
	        bits: 5
	      }), ce = !1;
	    }

	    e.lencode = fe, e.lenbits = 9, e.distcode = ue, e.distbits = 5;
	  }

	  function de(e, t, r, i) {
	    var o,
	        s = e.state;
	    return null === s.window && (s.wsize = 1 << s.wbits, s.wnext = 0, s.whave = 0, s.window = new n.Buf8(s.wsize)), i >= s.wsize ? (n.arraySet(s.window, t, r - s.wsize, s.wsize, 0), s.wnext = 0, s.whave = s.wsize) : ((o = s.wsize - s.wnext) > i && (o = i), n.arraySet(s.window, t, r - i, o, s.wnext), (i -= o) ? (n.arraySet(s.window, t, r - i, i, 0), s.wnext = i, s.whave = s.wsize) : (s.wnext += o, s.wnext === s.wsize && (s.wnext = 0), s.whave < s.wsize && (s.whave += o))), 0;
	  }

	  t.inflateReset = se, t.inflateReset2 = ae, t.inflateResetKeep = oe, t.inflateInit = function (e) {
	    return he(e, re);
	  }, t.inflateInit2 = he, t.inflate = function (e, t) {
	    var r,
	        ee,
	        te,
	        re,
	        ie,
	        oe,
	        se,
	        ae,
	        he,
	        fe,
	        ue,
	        ce,
	        pe,
	        ge,
	        me,
	        _e,
	        ye,
	        be,
	        we,
	        ve,
	        Ee,
	        Se,
	        Ae,
	        ke,
	        xe = 0,
	        Ce = new n.Buf8(4),
	        Re = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

	    if (!e || !e.state || !e.output || !e.input && 0 !== e.avail_in) return _;
	    (r = e.state).mode === N && (r.mode = F), ie = e.next_out, te = e.output, se = e.avail_out, re = e.next_in, ee = e.input, oe = e.avail_in, ae = r.hold, he = r.bits, fe = oe, ue = se, Se = p;

	    e: for (;;) {
	      switch (r.mode) {
	        case E:
	          if (0 === r.wrap) {
	            r.mode = F;
	            break;
	          }

	          for (; he < 16;) {
	            if (0 === oe) break e;
	            oe--, ae += ee[re++] << he, he += 8;
	          }

	          if (2 & r.wrap && 35615 === ae) {
	            r.check = 0, Ce[0] = 255 & ae, Ce[1] = ae >>> 8 & 255, r.check = o(r.check, Ce, 2, 0), ae = 0, he = 0, r.mode = S;
	            break;
	          }

	          if (r.flags = 0, r.head && (r.head.done = !1), !(1 & r.wrap) || (((255 & ae) << 8) + (ae >> 8)) % 31) {
	            e.msg = "incorrect header check", r.mode = X;
	            break;
	          }

	          if ((15 & ae) !== v) {
	            e.msg = "unknown compression method", r.mode = X;
	            break;
	          }

	          if (he -= 4, Ee = 8 + (15 & (ae >>>= 4)), 0 === r.wbits) r.wbits = Ee;else if (Ee > r.wbits) {
	            e.msg = "invalid window size", r.mode = X;
	            break;
	          }
	          r.dmax = 1 << Ee, e.adler = r.check = 1, r.mode = 512 & ae ? B : N, ae = 0, he = 0;
	          break;

	        case S:
	          for (; he < 16;) {
	            if (0 === oe) break e;
	            oe--, ae += ee[re++] << he, he += 8;
	          }

	          if (r.flags = ae, (255 & r.flags) !== v) {
	            e.msg = "unknown compression method", r.mode = X;
	            break;
	          }

	          if (57344 & r.flags) {
	            e.msg = "unknown header flags set", r.mode = X;
	            break;
	          }

	          r.head && (r.head.text = ae >> 8 & 1), 512 & r.flags && (Ce[0] = 255 & ae, Ce[1] = ae >>> 8 & 255, r.check = o(r.check, Ce, 2, 0)), ae = 0, he = 0, r.mode = A;

	        case A:
	          for (; he < 32;) {
	            if (0 === oe) break e;
	            oe--, ae += ee[re++] << he, he += 8;
	          }

	          r.head && (r.head.time = ae), 512 & r.flags && (Ce[0] = 255 & ae, Ce[1] = ae >>> 8 & 255, Ce[2] = ae >>> 16 & 255, Ce[3] = ae >>> 24 & 255, r.check = o(r.check, Ce, 4, 0)), ae = 0, he = 0, r.mode = k;

	        case k:
	          for (; he < 16;) {
	            if (0 === oe) break e;
	            oe--, ae += ee[re++] << he, he += 8;
	          }

	          r.head && (r.head.xflags = 255 & ae, r.head.os = ae >> 8), 512 & r.flags && (Ce[0] = 255 & ae, Ce[1] = ae >>> 8 & 255, r.check = o(r.check, Ce, 2, 0)), ae = 0, he = 0, r.mode = x;

	        case x:
	          if (1024 & r.flags) {
	            for (; he < 16;) {
	              if (0 === oe) break e;
	              oe--, ae += ee[re++] << he, he += 8;
	            }

	            r.length = ae, r.head && (r.head.extra_len = ae), 512 & r.flags && (Ce[0] = 255 & ae, Ce[1] = ae >>> 8 & 255, r.check = o(r.check, Ce, 2, 0)), ae = 0, he = 0;
	          } else r.head && (r.head.extra = null);

	          r.mode = C;

	        case C:
	          if (1024 & r.flags && ((ce = r.length) > oe && (ce = oe), ce && (r.head && (Ee = r.head.extra_len - r.length, r.head.extra || (r.head.extra = new Array(r.head.extra_len)), n.arraySet(r.head.extra, ee, re, ce, Ee)), 512 & r.flags && (r.check = o(r.check, ee, ce, re)), oe -= ce, re += ce, r.length -= ce), r.length)) break e;
	          r.length = 0, r.mode = R;

	        case R:
	          if (2048 & r.flags) {
	            if (0 === oe) break e;
	            ce = 0;

	            do {
	              Ee = ee[re + ce++], r.head && Ee && r.length < 65536 && (r.head.name += String.fromCharCode(Ee));
	            } while (Ee && ce < oe);

	            if (512 & r.flags && (r.check = o(r.check, ee, ce, re)), oe -= ce, re += ce, Ee) break e;
	          } else r.head && (r.head.name = null);

	          r.length = 0, r.mode = T;

	        case T:
	          if (4096 & r.flags) {
	            if (0 === oe) break e;
	            ce = 0;

	            do {
	              Ee = ee[re + ce++], r.head && Ee && r.length < 65536 && (r.head.comment += String.fromCharCode(Ee));
	            } while (Ee && ce < oe);

	            if (512 & r.flags && (r.check = o(r.check, ee, ce, re)), oe -= ce, re += ce, Ee) break e;
	          } else r.head && (r.head.comment = null);

	          r.mode = I;

	        case I:
	          if (512 & r.flags) {
	            for (; he < 16;) {
	              if (0 === oe) break e;
	              oe--, ae += ee[re++] << he, he += 8;
	            }

	            if (ae !== (65535 & r.check)) {
	              e.msg = "header crc mismatch", r.mode = X;
	              break;
	            }

	            ae = 0, he = 0;
	          }

	          r.head && (r.head.hcrc = r.flags >> 9 & 1, r.head.done = !0), e.adler = r.check = 0, r.mode = N;
	          break;

	        case B:
	          for (; he < 32;) {
	            if (0 === oe) break e;
	            oe--, ae += ee[re++] << he, he += 8;
	          }

	          e.adler = r.check = ne(ae), ae = 0, he = 0, r.mode = L;

	        case L:
	          if (0 === r.havedict) return e.next_out = ie, e.avail_out = se, e.next_in = re, e.avail_in = oe, r.hold = ae, r.bits = he, m;
	          e.adler = r.check = 1, r.mode = N;

	        case N:
	          if (t === l || t === d) break e;

	        case F:
	          if (r.last) {
	            ae >>>= 7 & he, he -= 7 & he, r.mode = G;
	            break;
	          }

	          for (; he < 3;) {
	            if (0 === oe) break e;
	            oe--, ae += ee[re++] << he, he += 8;
	          }

	          switch (r.last = 1 & ae, he -= 1, 3 & (ae >>>= 1)) {
	            case 0:
	              r.mode = M;
	              break;

	            case 1:
	              if (le(r), r.mode = j, t === d) {
	                ae >>>= 2, he -= 2;
	                break e;
	              }

	              break;

	            case 2:
	              r.mode = U;
	              break;

	            case 3:
	              e.msg = "invalid block type", r.mode = X;
	          }

	          ae >>>= 2, he -= 2;
	          break;

	        case M:
	          for (ae >>>= 7 & he, he -= 7 & he; he < 32;) {
	            if (0 === oe) break e;
	            oe--, ae += ee[re++] << he, he += 8;
	          }

	          if ((65535 & ae) != (ae >>> 16 ^ 65535)) {
	            e.msg = "invalid stored block lengths", r.mode = X;
	            break;
	          }

	          if (r.length = 65535 & ae, ae = 0, he = 0, r.mode = O, t === d) break e;

	        case O:
	          r.mode = P;

	        case P:
	          if (ce = r.length) {
	            if (ce > oe && (ce = oe), ce > se && (ce = se), 0 === ce) break e;
	            n.arraySet(te, ee, re, ce, ie), oe -= ce, re += ce, se -= ce, ie += ce, r.length -= ce;
	            break;
	          }

	          r.mode = N;
	          break;

	        case U:
	          for (; he < 14;) {
	            if (0 === oe) break e;
	            oe--, ae += ee[re++] << he, he += 8;
	          }

	          if (r.nlen = 257 + (31 & ae), ae >>>= 5, he -= 5, r.ndist = 1 + (31 & ae), ae >>>= 5, he -= 5, r.ncode = 4 + (15 & ae), ae >>>= 4, he -= 4, r.nlen > 286 || r.ndist > 30) {
	            e.msg = "too many length or distance symbols", r.mode = X;
	            break;
	          }

	          r.have = 0, r.mode = z;

	        case z:
	          for (; r.have < r.ncode;) {
	            for (; he < 3;) {
	              if (0 === oe) break e;
	              oe--, ae += ee[re++] << he, he += 8;
	            }

	            r.lens[Re[r.have++]] = 7 & ae, ae >>>= 3, he -= 3;
	          }

	          for (; r.have < 19;) {
	            r.lens[Re[r.have++]] = 0;
	          }

	          if (r.lencode = r.lendyn, r.lenbits = 7, Ae = {
	            bits: r.lenbits
	          }, Se = a(h, r.lens, 0, 19, r.lencode, 0, r.work, Ae), r.lenbits = Ae.bits, Se) {
	            e.msg = "invalid code lengths set", r.mode = X;
	            break;
	          }

	          r.have = 0, r.mode = D;

	        case D:
	          for (; r.have < r.nlen + r.ndist;) {
	            for (; _e = (xe = r.lencode[ae & (1 << r.lenbits) - 1]) >>> 16 & 255, ye = 65535 & xe, !((me = xe >>> 24) <= he);) {
	              if (0 === oe) break e;
	              oe--, ae += ee[re++] << he, he += 8;
	            }

	            if (ye < 16) ae >>>= me, he -= me, r.lens[r.have++] = ye;else {
	              if (16 === ye) {
	                for (ke = me + 2; he < ke;) {
	                  if (0 === oe) break e;
	                  oe--, ae += ee[re++] << he, he += 8;
	                }

	                if (ae >>>= me, he -= me, 0 === r.have) {
	                  e.msg = "invalid bit length repeat", r.mode = X;
	                  break;
	                }

	                Ee = r.lens[r.have - 1], ce = 3 + (3 & ae), ae >>>= 2, he -= 2;
	              } else if (17 === ye) {
	                for (ke = me + 3; he < ke;) {
	                  if (0 === oe) break e;
	                  oe--, ae += ee[re++] << he, he += 8;
	                }

	                he -= me, Ee = 0, ce = 3 + (7 & (ae >>>= me)), ae >>>= 3, he -= 3;
	              } else {
	                for (ke = me + 7; he < ke;) {
	                  if (0 === oe) break e;
	                  oe--, ae += ee[re++] << he, he += 8;
	                }

	                he -= me, Ee = 0, ce = 11 + (127 & (ae >>>= me)), ae >>>= 7, he -= 7;
	              }

	              if (r.have + ce > r.nlen + r.ndist) {
	                e.msg = "invalid bit length repeat", r.mode = X;
	                break;
	              }

	              for (; ce--;) {
	                r.lens[r.have++] = Ee;
	              }
	            }
	          }

	          if (r.mode === X) break;

	          if (0 === r.lens[256]) {
	            e.msg = "invalid code -- missing end-of-block", r.mode = X;
	            break;
	          }

	          if (r.lenbits = 9, Ae = {
	            bits: r.lenbits
	          }, Se = a(f, r.lens, 0, r.nlen, r.lencode, 0, r.work, Ae), r.lenbits = Ae.bits, Se) {
	            e.msg = "invalid literal/lengths set", r.mode = X;
	            break;
	          }

	          if (r.distbits = 6, r.distcode = r.distdyn, Ae = {
	            bits: r.distbits
	          }, Se = a(u, r.lens, r.nlen, r.ndist, r.distcode, 0, r.work, Ae), r.distbits = Ae.bits, Se) {
	            e.msg = "invalid distances set", r.mode = X;
	            break;
	          }

	          if (r.mode = j, t === d) break e;

	        case j:
	          r.mode = q;

	        case q:
	          if (oe >= 6 && se >= 258) {
	            e.next_out = ie, e.avail_out = se, e.next_in = re, e.avail_in = oe, r.hold = ae, r.bits = he, s(e, ue), ie = e.next_out, te = e.output, se = e.avail_out, re = e.next_in, ee = e.input, oe = e.avail_in, ae = r.hold, he = r.bits, r.mode === N && (r.back = -1);
	            break;
	          }

	          for (r.back = 0; _e = (xe = r.lencode[ae & (1 << r.lenbits) - 1]) >>> 16 & 255, ye = 65535 & xe, !((me = xe >>> 24) <= he);) {
	            if (0 === oe) break e;
	            oe--, ae += ee[re++] << he, he += 8;
	          }

	          if (_e && 0 == (240 & _e)) {
	            for (be = me, we = _e, ve = ye; _e = (xe = r.lencode[ve + ((ae & (1 << be + we) - 1) >> be)]) >>> 16 & 255, ye = 65535 & xe, !(be + (me = xe >>> 24) <= he);) {
	              if (0 === oe) break e;
	              oe--, ae += ee[re++] << he, he += 8;
	            }

	            ae >>>= be, he -= be, r.back += be;
	          }

	          if (ae >>>= me, he -= me, r.back += me, r.length = ye, 0 === _e) {
	            r.mode = Y;
	            break;
	          }

	          if (32 & _e) {
	            r.back = -1, r.mode = N;
	            break;
	          }

	          if (64 & _e) {
	            e.msg = "invalid literal/length code", r.mode = X;
	            break;
	          }

	          r.extra = 15 & _e, r.mode = Z;

	        case Z:
	          if (r.extra) {
	            for (ke = r.extra; he < ke;) {
	              if (0 === oe) break e;
	              oe--, ae += ee[re++] << he, he += 8;
	            }

	            r.length += ae & (1 << r.extra) - 1, ae >>>= r.extra, he -= r.extra, r.back += r.extra;
	          }

	          r.was = r.length, r.mode = H;

	        case H:
	          for (; _e = (xe = r.distcode[ae & (1 << r.distbits) - 1]) >>> 16 & 255, ye = 65535 & xe, !((me = xe >>> 24) <= he);) {
	            if (0 === oe) break e;
	            oe--, ae += ee[re++] << he, he += 8;
	          }

	          if (0 == (240 & _e)) {
	            for (be = me, we = _e, ve = ye; _e = (xe = r.distcode[ve + ((ae & (1 << be + we) - 1) >> be)]) >>> 16 & 255, ye = 65535 & xe, !(be + (me = xe >>> 24) <= he);) {
	              if (0 === oe) break e;
	              oe--, ae += ee[re++] << he, he += 8;
	            }

	            ae >>>= be, he -= be, r.back += be;
	          }

	          if (ae >>>= me, he -= me, r.back += me, 64 & _e) {
	            e.msg = "invalid distance code", r.mode = X;
	            break;
	          }

	          r.offset = ye, r.extra = 15 & _e, r.mode = $;

	        case $:
	          if (r.extra) {
	            for (ke = r.extra; he < ke;) {
	              if (0 === oe) break e;
	              oe--, ae += ee[re++] << he, he += 8;
	            }

	            r.offset += ae & (1 << r.extra) - 1, ae >>>= r.extra, he -= r.extra, r.back += r.extra;
	          }

	          if (r.offset > r.dmax) {
	            e.msg = "invalid distance too far back", r.mode = X;
	            break;
	          }

	          r.mode = V;

	        case V:
	          if (0 === se) break e;

	          if (ce = ue - se, r.offset > ce) {
	            if ((ce = r.offset - ce) > r.whave && r.sane) {
	              e.msg = "invalid distance too far back", r.mode = X;
	              break;
	            }

	            ce > r.wnext ? (ce -= r.wnext, pe = r.wsize - ce) : pe = r.wnext - ce, ce > r.length && (ce = r.length), ge = r.window;
	          } else ge = te, pe = ie - r.offset, ce = r.length;

	          ce > se && (ce = se), se -= ce, r.length -= ce;

	          do {
	            te[ie++] = ge[pe++];
	          } while (--ce);

	          0 === r.length && (r.mode = q);
	          break;

	        case Y:
	          if (0 === se) break e;
	          te[ie++] = r.length, se--, r.mode = q;
	          break;

	        case G:
	          if (r.wrap) {
	            for (; he < 32;) {
	              if (0 === oe) break e;
	              oe--, ae |= ee[re++] << he, he += 8;
	            }

	            if (ue -= se, e.total_out += ue, r.total += ue, ue && (e.adler = r.check = r.flags ? o(r.check, te, ue, ie - ue) : i(r.check, te, ue, ie - ue)), ue = se, (r.flags ? ae : ne(ae)) !== r.check) {
	              e.msg = "incorrect data check", r.mode = X;
	              break;
	            }

	            ae = 0, he = 0;
	          }

	          r.mode = W;

	        case W:
	          if (r.wrap && r.flags) {
	            for (; he < 32;) {
	              if (0 === oe) break e;
	              oe--, ae += ee[re++] << he, he += 8;
	            }

	            if (ae !== (4294967295 & r.total)) {
	              e.msg = "incorrect length check", r.mode = X;
	              break;
	            }

	            ae = 0, he = 0;
	          }

	          r.mode = K;

	        case K:
	          Se = g;
	          break e;

	        case X:
	          Se = y;
	          break e;

	        case Q:
	          return b;

	        case J:
	        default:
	          return _;
	      }
	    }

	    return e.next_out = ie, e.avail_out = se, e.next_in = re, e.avail_in = oe, r.hold = ae, r.bits = he, (r.wsize || ue !== e.avail_out && r.mode < X && (r.mode < G || t !== c)) && de(e, e.output, e.next_out, ue - e.avail_out) ? (r.mode = Q, b) : (fe -= e.avail_in, ue -= e.avail_out, e.total_in += fe, e.total_out += ue, r.total += ue, r.wrap && ue && (e.adler = r.check = r.flags ? o(r.check, te, ue, e.next_out - ue) : i(r.check, te, ue, e.next_out - ue)), e.data_type = r.bits + (r.last ? 64 : 0) + (r.mode === N ? 128 : 0) + (r.mode === j || r.mode === O ? 256 : 0), (0 === fe && 0 === ue || t === c) && Se === p && (Se = w), Se);
	  }, t.inflateEnd = function (e) {
	    if (!e || !e.state) return _;
	    var t = e.state;
	    return t.window && (t.window = null), e.state = null, p;
	  }, t.inflateGetHeader = function (e, t) {
	    var r;
	    return e && e.state ? 0 == (2 & (r = e.state).wrap) ? _ : (r.head = t, t.done = !1, p) : _;
	  }, t.inflateSetDictionary = function (e, t) {
	    var r,
	        n = t.length;
	    return e && e.state ? 0 !== (r = e.state).wrap && r.mode !== L ? _ : r.mode === L && i(1, t, n, 0) !== r.check ? y : de(e, t, n, n) ? (r.mode = Q, b) : (r.havedict = 1, p) : _;
	  }, t.inflateInfo = "pako inflate (from Nodeca project)";
	}, function (e, t, r) {

	  e.exports = function (e, t) {
	    var r, n, i, o, s, a, h, f, u, c, l, d, p, g, m, _, y, b, w, v, E, S, A, k, x;

	    r = e.state, n = e.next_in, k = e.input, i = n + (e.avail_in - 5), o = e.next_out, x = e.output, s = o - (t - e.avail_out), a = o + (e.avail_out - 257), h = r.dmax, f = r.wsize, u = r.whave, c = r.wnext, l = r.window, d = r.hold, p = r.bits, g = r.lencode, m = r.distcode, _ = (1 << r.lenbits) - 1, y = (1 << r.distbits) - 1;

	    e: do {
	      p < 15 && (d += k[n++] << p, p += 8, d += k[n++] << p, p += 8), b = g[d & _];

	      t: for (;;) {
	        if (d >>>= w = b >>> 24, p -= w, 0 === (w = b >>> 16 & 255)) x[o++] = 65535 & b;else {
	          if (!(16 & w)) {
	            if (0 == (64 & w)) {
	              b = g[(65535 & b) + (d & (1 << w) - 1)];
	              continue t;
	            }

	            if (32 & w) {
	              r.mode = 12;
	              break e;
	            }

	            e.msg = "invalid literal/length code", r.mode = 30;
	            break e;
	          }

	          v = 65535 & b, (w &= 15) && (p < w && (d += k[n++] << p, p += 8), v += d & (1 << w) - 1, d >>>= w, p -= w), p < 15 && (d += k[n++] << p, p += 8, d += k[n++] << p, p += 8), b = m[d & y];

	          r: for (;;) {
	            if (d >>>= w = b >>> 24, p -= w, !(16 & (w = b >>> 16 & 255))) {
	              if (0 == (64 & w)) {
	                b = m[(65535 & b) + (d & (1 << w) - 1)];
	                continue r;
	              }

	              e.msg = "invalid distance code", r.mode = 30;
	              break e;
	            }

	            if (E = 65535 & b, p < (w &= 15) && (d += k[n++] << p, (p += 8) < w && (d += k[n++] << p, p += 8)), (E += d & (1 << w) - 1) > h) {
	              e.msg = "invalid distance too far back", r.mode = 30;
	              break e;
	            }

	            if (d >>>= w, p -= w, E > (w = o - s)) {
	              if ((w = E - w) > u && r.sane) {
	                e.msg = "invalid distance too far back", r.mode = 30;
	                break e;
	              }

	              if (S = 0, A = l, 0 === c) {
	                if (S += f - w, w < v) {
	                  v -= w;

	                  do {
	                    x[o++] = l[S++];
	                  } while (--w);

	                  S = o - E, A = x;
	                }
	              } else if (c < w) {
	                if (S += f + c - w, (w -= c) < v) {
	                  v -= w;

	                  do {
	                    x[o++] = l[S++];
	                  } while (--w);

	                  if (S = 0, c < v) {
	                    v -= w = c;

	                    do {
	                      x[o++] = l[S++];
	                    } while (--w);

	                    S = o - E, A = x;
	                  }
	                }
	              } else if (S += c - w, w < v) {
	                v -= w;

	                do {
	                  x[o++] = l[S++];
	                } while (--w);

	                S = o - E, A = x;
	              }

	              for (; v > 2;) {
	                x[o++] = A[S++], x[o++] = A[S++], x[o++] = A[S++], v -= 3;
	              }

	              v && (x[o++] = A[S++], v > 1 && (x[o++] = A[S++]));
	            } else {
	              S = o - E;

	              do {
	                x[o++] = x[S++], x[o++] = x[S++], x[o++] = x[S++], v -= 3;
	              } while (v > 2);

	              v && (x[o++] = x[S++], v > 1 && (x[o++] = x[S++]));
	            }

	            break;
	          }
	        }
	        break;
	      }
	    } while (n < i && o < a);

	    n -= v = p >> 3, d &= (1 << (p -= v << 3)) - 1, e.next_in = n, e.next_out = o, e.avail_in = n < i ? i - n + 5 : 5 - (n - i), e.avail_out = o < a ? a - o + 257 : 257 - (o - a), r.hold = d, r.bits = p;
	  };
	}, function (e, t, r) {

	  var n = r(11),
	      i = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0],
	      o = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78],
	      s = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0],
	      a = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];

	  e.exports = function (e, t, r, h, f, u, c, l) {
	    var d,
	        p,
	        g,
	        m,
	        _,
	        y,
	        b,
	        w,
	        v,
	        E = l.bits,
	        S = 0,
	        A = 0,
	        k = 0,
	        x = 0,
	        C = 0,
	        R = 0,
	        T = 0,
	        I = 0,
	        B = 0,
	        L = 0,
	        N = null,
	        F = 0,
	        M = new n.Buf16(16),
	        O = new n.Buf16(16),
	        P = null,
	        U = 0;

	    for (S = 0; S <= 15; S++) {
	      M[S] = 0;
	    }

	    for (A = 0; A < h; A++) {
	      M[t[r + A]]++;
	    }

	    for (C = E, x = 15; x >= 1 && 0 === M[x]; x--) {
	    }

	    if (C > x && (C = x), 0 === x) return f[u++] = 20971520, f[u++] = 20971520, l.bits = 1, 0;

	    for (k = 1; k < x && 0 === M[k]; k++) {
	    }

	    for (C < k && (C = k), I = 1, S = 1; S <= 15; S++) {
	      if (I <<= 1, (I -= M[S]) < 0) return -1;
	    }

	    if (I > 0 && (0 === e || 1 !== x)) return -1;

	    for (O[1] = 0, S = 1; S < 15; S++) {
	      O[S + 1] = O[S] + M[S];
	    }

	    for (A = 0; A < h; A++) {
	      0 !== t[r + A] && (c[O[t[r + A]]++] = A);
	    }

	    if (0 === e ? (N = P = c, y = 19) : 1 === e ? (N = i, F -= 257, P = o, U -= 257, y = 256) : (N = s, P = a, y = -1), L = 0, A = 0, S = k, _ = u, R = C, T = 0, g = -1, m = (B = 1 << C) - 1, 1 === e && B > 852 || 2 === e && B > 592) return 1;

	    for (;;) {
	      b = S - T, c[A] < y ? (w = 0, v = c[A]) : c[A] > y ? (w = P[U + c[A]], v = N[F + c[A]]) : (w = 96, v = 0), d = 1 << S - T, k = p = 1 << R;

	      do {
	        f[_ + (L >> T) + (p -= d)] = b << 24 | w << 16 | v | 0;
	      } while (0 !== p);

	      for (d = 1 << S - 1; L & d;) {
	        d >>= 1;
	      }

	      if (0 !== d ? (L &= d - 1, L += d) : L = 0, A++, 0 == --M[S]) {
	        if (S === x) break;
	        S = t[r + c[A]];
	      }

	      if (S > C && (L & m) !== g) {
	        for (0 === T && (T = C), _ += k, I = 1 << (R = S - T); R + T < x && !((I -= M[R + T]) <= 0);) {
	          R++, I <<= 1;
	        }

	        if (B += 1 << R, 1 === e && B > 852 || 2 === e && B > 592) return 1;
	        f[g = L & m] = C << 24 | R << 16 | _ - u | 0;
	      }
	    }

	    return 0 !== L && (f[_ + L] = S - T << 24 | 64 << 16 | 0), l.bits = C, 0;
	  };
	}, function (e, t, r) {

	  e.exports = {
	    Z_NO_FLUSH: 0,
	    Z_PARTIAL_FLUSH: 1,
	    Z_SYNC_FLUSH: 2,
	    Z_FULL_FLUSH: 3,
	    Z_FINISH: 4,
	    Z_BLOCK: 5,
	    Z_TREES: 6,
	    Z_OK: 0,
	    Z_STREAM_END: 1,
	    Z_NEED_DICT: 2,
	    Z_ERRNO: -1,
	    Z_STREAM_ERROR: -2,
	    Z_DATA_ERROR: -3,
	    Z_BUF_ERROR: -5,
	    Z_NO_COMPRESSION: 0,
	    Z_BEST_SPEED: 1,
	    Z_BEST_COMPRESSION: 9,
	    Z_DEFAULT_COMPRESSION: -1,
	    Z_FILTERED: 1,
	    Z_HUFFMAN_ONLY: 2,
	    Z_RLE: 3,
	    Z_FIXED: 4,
	    Z_DEFAULT_STRATEGY: 0,
	    Z_BINARY: 0,
	    Z_TEXT: 1,
	    Z_UNKNOWN: 2,
	    Z_DEFLATED: 8
	  };
	}, function (e, t, r) {
	  var n = r(1).Buffer,
	      i = [0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918e3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117];

	  function o(e) {
	    if (n.isBuffer(e)) return e;
	    var t = "function" == typeof n.alloc && "function" == typeof n.from;
	    if ("number" == typeof e) return t ? n.alloc(e) : new n(e);
	    if ("string" == typeof e) return t ? n.from(e) : new n(e);
	    throw new Error("input must be buffer, number, or string, received " + _typeof(e));
	  }

	  function s(e, t) {
	    e = o(e), n.isBuffer(t) && (t = t.readUInt32BE(0));

	    for (var r = -1 ^ ~~t, s = 0; s < e.length; s++) {
	      r = i[255 & (r ^ e[s])] ^ r >>> 8;
	    }

	    return -1 ^ r;
	  }

	  function a() {
	    return e = s.apply(null, arguments), (t = o(4)).writeInt32BE(e, 0), t;
	    var e, t;
	  }

	  "undefined" != typeof Int32Array && (i = new Int32Array(i)), a.signed = function () {
	    return s.apply(null, arguments);
	  }, a.unsigned = function () {
	    return s.apply(null, arguments) >>> 0;
	  }, e.exports = a;
	}, function (e, t, r) {
	  (function (t) {
	    var _r12 = r(0),
	        n = _r12.CramMalformedError,
	        i = r(12),
	        o = r(63),
	        s = r(64),
	        a = r(65),
	        h = 4;

	    var f = /*#__PURE__*/function () {
	      function f(e) {
	        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	        _classCallCheck(this, f);

	        this._buffer = e, this._position = t, this.length = e.length;
	      }

	      _createClass(f, [{
	        key: "get",
	        value: function get() {
	          var e = this._buffer[this._position];
	          return this._position += 1, e;
	        }
	      }, {
	        key: "getByte",
	        value: function getByte() {
	          return this.get();
	        }
	      }, {
	        key: "getByteAt",
	        value: function getByteAt(e) {
	          return this._buffer[e];
	        }
	      }, {
	        key: "position",
	        value: function position() {
	          return this._position;
	        }
	      }, {
	        key: "put",
	        value: function put(e) {
	          return this._buffer[this._position] = e, this._position += 1, e;
	        }
	      }, {
	        key: "putAt",
	        value: function putAt(e, t) {
	          return this._buffer[e] = t, t;
	        }
	      }, {
	        key: "setPosition",
	        value: function setPosition(e) {
	          return this._position = e, e;
	        }
	      }, {
	        key: "getInt",
	        value: function getInt() {
	          var e = this._buffer.readInt32LE(this._position);

	          return this._position += 4, e;
	        }
	      }, {
	        key: "remaining",
	        value: function remaining() {
	          return this._buffer.length - this._position;
	        }
	      }]);

	      return f;
	    }();

	    e.exports = {
	      uncompress: function uncompress(e, r) {
	        var u = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	        if (0 === e.length) return r.fill(0), r;
	        var c = new f(e, u),
	            l = c.get();
	        if (0 !== l && 1 !== l) throw new n("Invalid rANS order ".concat(l));
	        if (c.getInt() !== c.remaining() - h) throw new n("Incorrect input length.");
	        var d = c.getInt(),
	            p = new f(r || t.allocUnsafe(d));
	        if (p.length < d) throw new n("Output buffer too small to fit ".concat(d, " bytes."));

	        switch (l) {
	          case 0:
	            return function (e, t) {
	              var r = new i.AriDecoder(),
	                  n = new Array(256);

	              for (var _e12 = 0; _e12 < n.length; _e12 += 1) {
	                n[_e12] = new i.Symbol();
	              }

	              return o.readStatsO0(e, r, n), s.uncompress(e, r, n, t), t;
	            }(c, p);

	          case 1:
	            return function (e, t) {
	              var r = new Array(256);

	              for (var _e13 = 0; _e13 < r.length; _e13 += 1) {
	                r[_e13] = new i.AriDecoder();
	              }

	              var n = new Array(256);

	              for (var _e14 = 0; _e14 < n.length; _e14 += 1) {
	                n[_e14] = new Array(256);

	                for (var _t7 = 0; _t7 < n[_e14].length; _t7 += 1) {
	                  n[_e14][_t7] = new i.Symbol();
	                }
	              }

	              return o.readStatsO1(e, r, n), a.uncompress(e, t, r, n), t;
	            }(c, p);

	          default:
	            throw new n("Invalid rANS order: ".concat(l));
	        }
	      }
	    };
	  }).call(this, r(1).Buffer);
	}, function (e, t, r) {
	  var _r13 = r(0),
	      n = _r13.CramMalformedError,
	      i = r(13),
	      o = r(12);

	  function s(e) {
	    if (!e) throw new n("assertion failed");
	  }

	  e.exports = {
	    readStatsO0: function readStatsO0(e, t, r) {
	      var n = 0,
	          a = 0,
	          h = 255 & e.get();

	      do {
	        null == t.fc[h] && (t.fc[h] = new o.FC()), t.fc[h].F = 255 & e.get(), t.fc[h].F >= 128 && (t.fc[h].F &= -129, t.fc[h].F = (127 & t.fc[h].F) << 8 | 255 & e.get()), t.fc[h].C = a, o.symbolInit(r[h], t.fc[h].C, t.fc[h].F), t.R || (t.R = new Array(i.TOTFREQ)), t.R.fill(h, a, a + t.fc[h].F), a += t.fc[h].F, 0 === n && h + 1 === (255 & e.getByteAt(e.position())) ? (h = 255 & e.get(), n = 255 & e.get()) : 0 !== n ? (n -= 1, h += 1) : h = 255 & e.get();
	      } while (0 !== h);

	      s(a < i.TOTFREQ);
	    },
	    readStatsO1: function readStatsO1(e, t, r) {
	      var n = 0,
	          a = 255 & e.get();

	      do {
	        var h = 0,
	            f = 0,
	            u = 255 & e.get();
	        null == t[a] && (t[a] = new o.AriDecoder());

	        do {
	          null == t[a].fc[u] && (t[a].fc[u] = new o.FC()), t[a].fc[u].F = 255 & e.get(), t[a].fc[u].F >= 128 && (t[a].fc[u].F &= -129, t[a].fc[u].F = (127 & t[a].fc[u].F) << 8 | 255 & e.get()), t[a].fc[u].C = f, 0 === t[a].fc[u].F && (t[a].fc[u].F = i.TOTFREQ), null == r[a][u] && (r[a][u] = new o.RansDecSymbol()), o.symbolInit(r[a][u], t[a].fc[u].C, t[a].fc[u].F), null == t[a].R && (t[a].R = new Array(i.TOTFREQ)), t[a].R.fill(u, f, f + t[a].fc[u].F), s((f += t[a].fc[u].F) <= i.TOTFREQ), 0 === h && u + 1 === (255 & e.getByteAt(e.position())) ? (u = 255 & e.get(), h = 255 & e.get()) : 0 !== h ? (h -= 1, u += 1) : u = 255 & e.get();
	        } while (0 !== u);

	        0 === n && a + 1 === (255 & e.getByteAt(e.position())) ? (a = 255 & e.get(), n = 255 & e.get()) : 0 !== n ? (n -= 1, a += 1) : a = 255 & e.get();
	      } while (0 !== a);
	    }
	  };
	}, function (e, t, r) {
	  var _r14 = r(0),
	      n = _r14.CramMalformedError,
	      i = r(13),
	      o = r(12);

	  e.exports = {
	    uncompress: function uncompress(e, t, r, s) {
	      var a = e.getInt(),
	          h = e.getInt(),
	          f = e.getInt(),
	          u = e.getInt();
	      var c = s.remaining(),
	          l = -4 & c;

	      for (var _n3 = 0; _n3 < l; _n3 += 4) {
	        var _c = t.R[o.get(a, i.TF_SHIFT)],
	            _l = t.R[o.get(h, i.TF_SHIFT)],
	            _d = t.R[o.get(f, i.TF_SHIFT)],
	            p = t.R[o.get(u, i.TF_SHIFT)];
	        s.putAt(_n3, _c), s.putAt(_n3 + 1, _l), s.putAt(_n3 + 2, _d), s.putAt(_n3 + 3, p), a = o.advanceSymbolStep(a, r[255 & _c], i.TF_SHIFT), h = o.advanceSymbolStep(h, r[255 & _l], i.TF_SHIFT), f = o.advanceSymbolStep(f, r[255 & _d], i.TF_SHIFT), u = o.advanceSymbolStep(u, r[255 & p], i.TF_SHIFT), a = o.renormalize(a, e), h = o.renormalize(h, e), f = o.renormalize(f, e), u = o.renormalize(u, e);
	      }

	      var d;

	      switch (s.setPosition(l), 3 & c) {
	        case 0:
	          break;

	        case 1:
	          d = t.R[o.get(a, i.TF_SHIFT)], o.advanceSymbol(a, e, r[255 & d], i.TF_SHIFT), s.put(d);
	          break;

	        case 2:
	          d = t.R[o.get(a, i.TF_SHIFT)], o.advanceSymbol(a, e, r[255 & d], i.TF_SHIFT), s.put(d), d = t.R[o.get(h, i.TF_SHIFT)], o.advanceSymbol(h, e, r[255 & d], i.TF_SHIFT), s.put(d);
	          break;

	        case 3:
	          d = t.R[o.get(a, i.TF_SHIFT)], o.advanceSymbol(a, e, r[255 & d], i.TF_SHIFT), s.put(d), d = t.R[o.get(h, i.TF_SHIFT)], o.advanceSymbol(h, e, r[255 & d], i.TF_SHIFT), s.put(d), d = t.R[o.get(f, i.TF_SHIFT)], o.advanceSymbol(f, e, r[255 & d], i.TF_SHIFT), s.put(d);
	          break;

	        default:
	          throw new n("invalid output size encountered during rANS decoding");
	      }

	      s.setPosition(0);
	    }
	  };
	}, function (e, t, r) {
	  var n = r(13),
	      i = r(12);
	  e.exports = {
	    uncompress: function uncompress(e, t, r, o) {
	      var s = t.remaining();
	      var a = e.getInt(),
	          h = e.getInt(),
	          f = e.getInt(),
	          u = e.getInt();
	      var c = s >> 2;
	      var l = 0,
	          d = c,
	          p = 2 * c,
	          g = 3 * c,
	          m = 0,
	          _ = 0,
	          y = 0,
	          b = 0;

	      for (; l < c; l += 1, d += 1, p += 1, g += 1) {
	        var _s2 = 255 & r[m].R[i.get(a, n.TF_SHIFT)],
	            _c2 = 255 & r[_].R[i.get(h, n.TF_SHIFT)],
	            w = 255 & r[y].R[i.get(f, n.TF_SHIFT)],
	            v = 255 & r[b].R[i.get(u, n.TF_SHIFT)];

	        t.putAt(l, _s2), t.putAt(d, _c2), t.putAt(p, w), t.putAt(g, v), a = i.advanceSymbolStep(a, o[m][_s2], n.TF_SHIFT), h = i.advanceSymbolStep(h, o[_][_c2], n.TF_SHIFT), f = i.advanceSymbolStep(f, o[y][w], n.TF_SHIFT), u = i.advanceSymbolStep(u, o[b][v], n.TF_SHIFT), a = i.renormalize(a, e), h = i.renormalize(h, e), f = i.renormalize(f, e), u = i.renormalize(u, e), m = _s2, _ = _c2, y = w, b = v;
	      }

	      for (; g < s; g += 1) {
	        var _s3 = 255 & r[b].R[i.get(u, n.TF_SHIFT)];

	        t.putAt(g, _s3), u = i.advanceSymbol(u, e, o[b][_s3], n.TF_SHIFT), b = _s3;
	      }
	    }
	  };
	}, function (e, t, r) {
	  var _r15 = r(67),
	      n = _r15.Parser,
	      i = new n().itf8(),
	      o = {
	    parser: new n().string("magic", {
	      length: 4
	    }).uint8("majorVersion").uint8("minorVersion").string("fileId", {
	      length: 20,
	      stripNull: !0
	    }),
	    maxLength: 26
	  },
	      s = {
	    parser: new n().uint8("compressionMethod", {
	      formatter: function formatter(e) {
	        var t = ["raw", "gzip", "bzip2", "lzma", "rans"][e];
	        if (!t) throw new Error("compression method number ".concat(e, " not implemented"));
	        return t;
	      }
	    }).uint8("contentType", {
	      formatter: function formatter(e) {
	        var t = ["FILE_HEADER", "COMPRESSION_HEADER", "MAPPED_SLICE_HEADER", "UNMAPPED_SLICE_HEADER", "EXTERNAL_DATA", "CORE_DATA"][e];
	        if (!t) throw new Error("invalid block content type id ".concat(e));
	        return t;
	      }
	    }).itf8("contentId").itf8("compressedSize").itf8("uncompressedSize"),
	    maxLength: 17
	  },
	      a = {
	    parser: new n().uint32("crc32"),
	    maxLength: 4
	  },
	      h = new n().itf8("size").buffer("entries", {
	    length: "size",
	    formatter: function formatter(e) {
	      function t(t, r) {
	        var n = e.toString("utf8", t, r),
	            i = [];

	        for (var _e15 = 0; _e15 < n.length; _e15 += 3) {
	          i.push(n.substr(_e15, 3));
	        }

	        return i;
	      }

	      var r,
	          n = [],
	          i = 0;

	      for (r = 0; r < e.length; r += 1) {
	        e[r] || (n.push(t(i, r)), i = r + 1);
	      }

	      return r > i && n.push(t(i, r)), n;
	    }
	  }),
	      f = new n().uint8(null, {
	    formatter: function formatter(e) {
	      return !!e;
	    }
	  }),
	      u = new n().itf8("mapSize").itf8("mapCount").array("entries", {
	    length: "mapCount",
	    type: new n().string("key", {
	      length: 2,
	      stripNull: !1
	    }).choice("value", {
	      tag: "key",
	      choices: {
	        MI: f,
	        UI: f,
	        PI: f,
	        RN: f,
	        AP: f,
	        RR: f,
	        SM: new n().array(null, {
	          type: "uint8",
	          length: 5
	        }),
	        TD: new n().nest(null, {
	          type: h,
	          formatter: function formatter(e) {
	            return e.entries;
	          }
	        })
	      }
	    })
	  });

	  function c(e) {
	    var t = {};
	    return e.entries.forEach(function (_ref) {
	      var e = _ref.key,
	          r = _ref.value;
	      t[e] && console.warn("duplicate key ".concat(e, " in map")), t[e] = r;
	    }), t;
	  }

	  var l = {
	    cramFileDefinition: o,
	    cramBlockHeader: s,
	    cramBlockCrc32: a
	  },
	      d = {
	    cramUnmappedSliceHeader: function cramUnmappedSliceHeader(e) {
	      var t = 0,
	          r = new n().itf8("numRecords");
	      t += 5, e >= 3 ? (r = r.ltf8("recordCounter"), t += 9) : 2 === e && (r = r.itf8("recordCounter"), t += 5), r = r.itf8("numBlocks").itf8("numContentIds").array("contentIds", {
	        type: i,
	        length: "numContentIds"
	      }), t += 10, e >= 2 && (r = r.array("md5", {
	        type: "uint8",
	        length: 16
	      }), t += 16);
	      return {
	        parser: r,
	        maxLength: function maxLength(e) {
	          return t + 5 * e;
	        }
	      };
	    },
	    cramMappedSliceHeader: function cramMappedSliceHeader(e) {
	      var t = new n().itf8("refSeqId").itf8("refSeqStart").itf8("refSeqSpan").itf8("numRecords"),
	          r = 20;
	      e >= 3 ? (t = t.ltf8("recordCounter"), r += 9) : 2 === e && (t = t.itf8("recordCounter"), r += 5), t = t.itf8("numBlocks").itf8("numContentIds").array("contentIds", {
	        type: i,
	        length: "numContentIds"
	      }).itf8("refBaseBlockId"), r += 15, e >= 2 && (t = t.array("md5", {
	        type: "uint8",
	        length: 16
	      }), r += 16);
	      return {
	        parser: t,
	        maxLength: function maxLength(e) {
	          return r + 5 * e;
	        }
	      };
	    },
	    cramEncoding: function cramEncoding(e) {
	      return {
	        parser: new n().namely("cramEncoding").itf8("codecId").itf8("parametersBytes").choice("parameters", {
	          tag: "codecId",
	          choices: {
	            0: new n(),
	            1: new n().itf8("blockContentId"),
	            2: new n().itf8("offset").itf8("M"),
	            3: n.start().itf8("numCodes").array("symbols", {
	              length: "numCodes",
	              type: i
	            }).itf8("numLengths").array("bitLengths", {
	              length: "numLengths",
	              type: i
	            }),
	            4: n.start().nest("lengthsEncoding", {
	              type: "cramEncoding"
	            }).nest("valuesEncoding", {
	              type: "cramEncoding"
	            }),
	            5: new n().uint8("stopByte")[e > 1 ? "itf8" : "int"]("blockContentId"),
	            6: new n().itf8("offset").itf8("length"),
	            7: new n().itf8("offset").itf8("K"),
	            8: new n().itf8("offset").itf8("log2m"),
	            9: new n().itf8("offset")
	          }
	        })
	      };
	    },
	    cramDataSeriesEncodingMap: function cramDataSeriesEncodingMap(e) {
	      return new n().itf8("mapSize").itf8("mapCount").array("entries", {
	        length: "mapCount",
	        type: new n().string("key", {
	          length: 2,
	          stripNull: !1
	        }).nest("value", {
	          type: this.cramEncoding(e).parser
	        })
	      });
	    },
	    cramTagEncodingMap: function cramTagEncodingMap(e) {
	      return new n().itf8("mapSize").itf8("mapCount").array("entries", {
	        length: "mapCount",
	        type: new n().itf8("key", {
	          formatter: function formatter(e) {
	            return String.fromCharCode(e >> 16 & 255) + String.fromCharCode(e >> 8 & 255) + String.fromCharCode(255 & e);
	          }
	        }).nest("value", {
	          type: this.cramEncoding(e).parser
	        })
	      });
	    },
	    cramCompressionHeader: function cramCompressionHeader(e) {
	      var t = new n();
	      return {
	        parser: t = t.nest("preservation", {
	          type: u,
	          formatter: c
	        }).nest("dataSeriesEncoding", {
	          type: this.cramDataSeriesEncodingMap(e),
	          formatter: c
	        }).nest("tagEncoding", {
	          type: this.cramTagEncodingMap(e),
	          formatter: c
	        })
	      };
	    },
	    cramContainerHeader1: function cramContainerHeader1(e) {
	      var t = new n().int32("length").itf8("refSeqId").itf8("refSeqStart").itf8("alignmentSpan").itf8("numRecords"),
	          r = 24;
	      return e >= 3 ? (t = t.ltf8("recordCounter"), r += 9) : 2 === e && (t = t.itf8("recordCounter"), r += 5), e > 1 && (t = t.ltf8("numBases"), r += 9), {
	        parser: t = t.itf8("numBlocks").itf8("numLandmarks"),
	        maxLength: r += 10
	      };
	    },
	    cramContainerHeader2: function cramContainerHeader2(e) {
	      var t = new n().itf8("numLandmarks").array("landmarks", {
	        type: new n().itf8(),
	        length: "numLandmarks"
	      }),
	          r = 0;
	      return e >= 3 && (t = t.uint32("crc32"), r = 4), {
	        parser: t,
	        maxLength: function maxLength(e) {
	          return 5 + 5 * e + r;
	        }
	      };
	    }
	  };
	  e.exports = {
	    cramFileDefinition: o,
	    getSectionParsers: function getSectionParsers(e) {
	      var t = Object.assign({}, l);
	      return Object.keys(d).forEach(function (r) {
	        t[r] = d[r](e);
	      }), t;
	    }
	  };
	}, function (e, t, r) {
	  (function (e) {
	    var n = r(68),
	        i = r(70).Context,
	        o = r(31);
	    "undefined" != typeof window && (window.Buffer = e);
	    var s = {
	      UInt8: 1,
	      UInt16LE: 2,
	      UInt16BE: 2,
	      UInt32LE: 4,
	      UInt32BE: 4,
	      Int8: 1,
	      Int16LE: 2,
	      Int16BE: 2,
	      Int32LE: 4,
	      Int32BE: 4,
	      FloatLE: 4,
	      FloatBE: 4,
	      DoubleLE: 8,
	      DoubleBE: 8
	    },
	        a = {},
	        h = [];
	    !function () {
	      var e;

	      for (e = 1; e <= 32; e++) {
	        h.push(e);
	      }
	    }();
	    var f = {};
	    Object.keys(s).concat(Object.keys({
	      String: null,
	      Buffer: null,
	      Array: null,
	      Skip: null,
	      Choice: null,
	      Nest: null,
	      Bit: null,
	      Itf8: null,
	      Ltf8: null
	    })).forEach(function (e) {
	      f[e.toLowerCase()] = e;
	    });

	    var u = function u() {
	      this.varName = "", this.type = "", this.options = {}, this.next = null, this.head = null, this.compiled = null, this.endian = "le", this.constructorFn = null, this.alias = null;
	    };

	    u.start = function () {
	      return new u();
	    }, Object.keys(s).forEach(function (e) {
	      u.prototype[e.toLowerCase()] = function (t, r) {
	        return this.setNextParser(e.toLowerCase(), t, r);
	      };

	      var t = e.replace(/BE|LE/, "").toLowerCase();
	      t in u.prototype || (u.prototype[t] = function (e, r) {
	        return this[t + this.endian](e, r);
	      });
	    }), h.forEach(function (e) {
	      u.prototype["bit" + e.toString()] = function (t, r) {
	        return r || (r = {}), r.length = e, this.setNextParser("bit", t, r);
	      };
	    }), u.prototype.namely = function (e) {
	      return a[e] = this, this.alias = e, this;
	    }, u.prototype.skip = function (e, t) {
	      if (t && t.assert) throw new Error("assert option on skip is not allowed.");
	      return this.setNextParser("skip", "", {
	        length: e
	      });
	    }, u.prototype.string = function (e, t) {
	      if (!t.zeroTerminated && !t.length && !t.greedy) throw new Error("Neither length, zeroTerminated, nor greedy is defined for string.");
	      if ((t.zeroTerminated || t.length) && t.greedy) throw new Error("greedy is mutually exclusive with length and zeroTerminated for string.");
	      if (t.stripNull && !t.length && !t.greedy) throw new Error("Length or greedy must be defined if stripNull is defined.");
	      return t.encoding = t.encoding || "utf8", this.setNextParser("string", e, t);
	    }, u.prototype.buffer = function (e, t) {
	      if (!t.length && !t.readUntil) throw new Error("Length nor readUntil is defined in buffer parser");
	      return this.setNextParser("buffer", e, t);
	    }, u.prototype.array = function (e, t) {
	      if (!t.readUntil && !t.length && !t.lengthInBytes) throw new Error("Length option of array is not defined.");
	      if (!t.type) throw new Error("Type option of array is not defined.");
	      if ("string" == typeof t.type && !a[t.type] && Object.keys(s).indexOf(f[t.type]) < 0) throw new Error('Specified primitive type "' + t.type + '" is not supported.');
	      return this.setNextParser("array", e, t);
	    }, u.prototype.choice = function (e, t) {
	      if (1 == arguments.length && "object" == _typeof(e) && (t = e, e = null), !t.tag) throw new Error("Tag option of array is not defined.");
	      if (!t.choices) throw new Error("Choices option of array is not defined.");
	      return Object.keys(t.choices).forEach(function (r) {
	        if (!t.choices[r]) throw new Error("Choice Case " + r + " of " + e + " is not valid.");
	        if ("string" == typeof t.choices[r] && !a[t.choices[r]] && Object.keys(s).indexOf(f[t.choices[r]]) < 0) throw new Error('Specified primitive type "' + t.choices[r] + '" is not supported.');
	      }, this), this.setNextParser("choice", e, t);
	    }, u.prototype.nest = function (e, t) {
	      if (1 == arguments.length && "object" == _typeof(e) && (t = e, e = null), !t.type) throw new Error("Type option of nest is not defined.");
	      if (!(t.type instanceof u || a[t.type])) throw new Error("Type option of nest must be a Parser object.");
	      if (!(t.type instanceof u || e)) throw new Error("options.type must be a object if variable name is omitted.");
	      return this.setNextParser("nest", e, t);
	    }, u.prototype.endianess = function (e) {
	      switch (e.toLowerCase()) {
	        case "little":
	          this.endian = "le";
	          break;

	        case "big":
	          this.endian = "be";
	          break;

	        default:
	          throw new Error("Invalid endianess: " + e);
	      }

	      return this;
	    }, u.prototype.create = function (e) {
	      if (!(e instanceof Function)) throw new Error("Constructor must be a Function object.");
	      return this.constructorFn = e, this;
	    }, u.prototype.getCode = function () {
	      var e = new i();
	      return e.pushCode("if (!Buffer.isBuffer(buffer)) {"), e.generateError('"argument buffer is not a Buffer object"'), e.pushCode("}"), this.alias ? this.addAliasedCode(e) : this.addRawCode(e), this.alias ? e.pushCode("return {0}(0)", "___parser_" + this.alias) : e.pushCode("return { offset: offset, result: vars };"), e.code;
	    }, u.prototype.addRawCode = function (e) {
	      e.pushCode("var offset = 0;"), this.constructorFn ? e.pushCode("var vars = new constructorFn();") : e.pushCode("var vars = {};"), this.generate(e), this.resolveReferences(e), e.pushCode("return { offset: offset, result: vars };");
	    }, u.prototype.addAliasedCode = function (e) {
	      return e.pushCode("function {0}(offset) {", "___parser_" + this.alias), this.constructorFn ? e.pushCode("var vars = new constructorFn();") : e.pushCode("var vars = {};"), this.generate(e), e.markResolved(this.alias), this.resolveReferences(e), e.pushCode("return { offset: offset, result: vars };"), e.pushCode("}"), e;
	    }, u.prototype.resolveReferences = function (e) {
	      var t = e.getUnresolvedReferences();
	      e.markRequested(t), t.forEach(function (t) {
	        a[t].addAliasedCode(e);
	      });
	    }, u.prototype.compile = function () {
	      var e = "(function(buffer, constructorFn, Long) { " + this.getCode() + " })";
	      this.compiled = n.runInThisContext(e);
	    }, u.prototype.sizeOf = function () {
	      var e = NaN;
	      if (Object.keys(s).indexOf(this.type) >= 0) e = s[this.type];else if ("String" === this.type && "number" == typeof this.options.length) e = this.options.length;else if ("Buffer" === this.type && "number" == typeof this.options.length) e = this.options.length;else if ("Array" === this.type && "number" == typeof this.options.length) {
	        var t = NaN;
	        "string" == typeof this.options.type ? t = s[f[this.options.type]] : this.options.type instanceof u && (t = this.options.type.sizeOf()), e = this.options.length * t;
	      } else "Skip" === this.type ? e = this.options.length : "Nest" === this.type ? e = this.options.type.sizeOf() : this.type || (e = 0);
	      return this.next && (e += this.next.sizeOf()), e;
	    }, u.prototype.parse = function (e) {
	      return this.compiled || this.compile(), this.compiled(e, this.constructorFn, o);
	    }, u.prototype.setNextParser = function (e, t, r) {
	      var n = new u();
	      return n.type = f[e], n.varName = t, n.options = r || n.options, n.endian = this.endian, this.head ? this.head.next = n : this.next = n, this.head = n, this;
	    }, u.prototype.generate = function (e) {
	      this.type && (this["generate" + this.type](e), this.generateAssert(e));
	      var t = e.generateVariable(this.varName);
	      return this.options.formatter && this.generateFormatter(e, t, this.options.formatter), this.generateNext(e);
	    }, u.prototype.generateAssert = function (e) {
	      if (this.options.assert) {
	        var t = e.generateVariable(this.varName);

	        switch (_typeof(this.options.assert)) {
	          case "function":
	            e.pushCode("if (!({0}).call(vars, {1})) {", this.options.assert, t);
	            break;

	          case "number":
	            e.pushCode("if ({0} !== {1}) {", this.options.assert, t);
	            break;

	          case "string":
	            e.pushCode('if ("{0}" !== {1}) {', this.options.assert, t);
	            break;

	          default:
	            throw new Error("Assert option supports only strings, numbers and assert functions.");
	        }

	        e.generateError('"Assert error: {0} is " + {0}', t), e.pushCode("}");
	      }
	    }, u.prototype.generateNext = function (e) {
	      return this.next && (e = this.next.generate(e)), e;
	    }, Object.keys(s).forEach(function (e) {
	      u.prototype["generate" + e] = function (t) {
	        t.pushCode("{0} = buffer.read{1}(offset);", t.generateVariable(this.varName), e), t.pushCode("offset += {0};", s[e]);
	      };
	    }), u.prototype.generateBit = function (e) {
	      var t = JSON.parse(JSON.stringify(this));

	      if (t.varName = e.generateVariable(t.varName), e.bitFields.push(t), !this.next || this.next && ["Bit", "Nest"].indexOf(this.next.type) < 0) {
	        var r = 0;
	        e.bitFields.forEach(function (e) {
	          r += e.options.length;
	        });
	        var n = e.generateTmpVariable();
	        if (r <= 8) e.pushCode("var {0} = buffer.readUInt8(offset);", n), r = 8;else if (r <= 16) e.pushCode("var {0} = buffer.readUInt16BE(offset);", n), r = 16;else if (r <= 24) {
	          var i = e.generateTmpVariable(),
	              o = e.generateTmpVariable();
	          e.pushCode("var {0} = buffer.readUInt16BE(offset);", i), e.pushCode("var {0} = buffer.readUInt8(offset + 2);", o), e.pushCode("var {2} = ({0} << 8) | {1};", i, o, n), r = 24;
	        } else {
	          if (!(r <= 32)) throw new Error("Currently, bit field sequence longer than 4-bytes is not supported.");
	          e.pushCode("var {0} = buffer.readUInt32BE(offset);", n), r = 32;
	        }
	        e.pushCode("offset += {0};", r / 8);
	        var s = 0,
	            a = "be" === this.endian;
	        e.bitFields.forEach(function (t) {
	          e.pushCode("{0} = {1} >> {2} & {3};", t.varName, n, a ? r - s - t.options.length : s, (1 << t.options.length) - 1), s += t.options.length;
	        }), e.bitFields = [];
	      }
	    }, u.prototype.generateSkip = function (e) {
	      var t = e.generateOption(this.options.length);
	      e.pushCode("offset += {0};", t);
	    }, u.prototype.generateString = function (e) {
	      var t = e.generateVariable(this.varName),
	          r = e.generateTmpVariable();
	      this.options.length && this.options.zeroTerminated ? (e.pushCode("var {0} = offset;", r), e.pushCode("while(buffer.readUInt8(offset++) !== 0 && offset - {0}  < {1});", r, this.options.length), e.pushCode("{0} = buffer.toString('{1}', {2}, offset - {2} < {3} ? offset - 1 : offset);", t, this.options.encoding, r, this.options.length)) : this.options.length ? (e.pushCode("{0} = buffer.toString('{1}', offset, offset + {2});", t, this.options.encoding, e.generateOption(this.options.length)), e.pushCode("offset += {0};", e.generateOption(this.options.length))) : this.options.zeroTerminated ? (e.pushCode("var {0} = offset;", r), e.pushCode("while(buffer.readUInt8(offset++) !== 0);"), e.pushCode("{0} = buffer.toString('{1}', {2}, offset - 1);", t, this.options.encoding, r)) : this.options.greedy && (e.pushCode("var {0} = offset;", r), e.pushCode("while(buffer.length > offset++);"), e.pushCode("{0} = buffer.toString('{1}', {2}, offset);", t, this.options.encoding, r)), this.options.stripNull && e.pushCode("{0} = {0}.replace(/\\x00+$/g, '')", t);
	    }, u.prototype.generateBuffer = function (e) {
	      "eof" === this.options.readUntil ? e.pushCode("{0} = buffer.slice(offset);", e.generateVariable(this.varName)) : (e.pushCode("{0} = buffer.slice(offset, offset + {1});", e.generateVariable(this.varName), e.generateOption(this.options.length)), e.pushCode("offset += {0};", e.generateOption(this.options.length))), this.options.clone && e.pushCode("{0} = Buffer.from({0});", e.generateVariable(this.varName));
	    }, u.prototype.generateArray = function (e) {
	      var t = e.generateOption(this.options.length),
	          r = e.generateOption(this.options.lengthInBytes),
	          n = this.options.type,
	          i = e.generateTmpVariable(),
	          o = e.generateVariable(this.varName),
	          h = e.generateTmpVariable(),
	          c = this.options.key,
	          l = "string" == typeof c;
	      if (l ? e.pushCode("{0} = {};", o) : e.pushCode("{0} = [];", o), "function" == typeof this.options.readUntil ? e.pushCode("do {") : "eof" === this.options.readUntil ? e.pushCode("for (var {0} = 0; offset < buffer.length; {0}++) {", i) : void 0 !== r ? e.pushCode("for (var {0} = offset; offset - {0} < {1}; ) {", i, r) : e.pushCode("for (var {0} = 0; {0} < {1}; {0}++) {", i, t), "string" == typeof n) {
	        if (a[n]) {
	          var d = e.generateTmpVariable();
	          e.pushCode("var {0} = {1}(offset);", d, "___parser_" + n), e.pushCode("var {0} = {1}.result; offset = {1}.offset;", h, d), n !== this.alias && e.addReference(n);
	        } else e.pushCode("var {0} = buffer.read{1}(offset);", h, f[n]), e.pushCode("offset += {0};", s[f[n]]);
	      } else n instanceof u && (e.pushCode("var {0} = {};", h), e.pushScope(h), n.generate(e), e.popScope());
	      l ? e.pushCode("{0}[{2}.{1}] = {2};", o, c, h) : e.pushCode("{0}.push({1});", o, h), e.pushCode("}"), "function" == typeof this.options.readUntil && e.pushCode(" while (!({0}).call(this, {1}, buffer.slice(offset)));", this.options.readUntil, h);
	    }, u.prototype.generateChoiceCase = function (e, t, r) {
	      if ("string" == typeof r) {
	        if (a[r]) {
	          var n = e.generateTmpVariable();
	          e.pushCode("var {0} = {1}(offset);", n, "___parser_" + r), e.pushCode("{0} = {1}.result; offset = {1}.offset;", e.generateVariable(this.varName), n), r !== this.alias && e.addReference(r);
	        } else e.pushCode("{0} = buffer.read{1}(offset);", e.generateVariable(this.varName), f[r]), e.pushCode("offset += {0};", s[f[r]]);
	      } else r instanceof u && (e.pushPath(t), r.generate(e), e.popPath(t));
	    }, u.prototype.generateChoice = function (e) {
	      var t = e.generateOption(this.options.tag);
	      this.varName && e.pushCode("{0} = {};", e.generateVariable(this.varName)), e.pushCode("switch({0}) {", t), Object.keys(this.options.choices).forEach(function (t) {
	        var r = this.options.choices[t];
	        isNaN(parseInt(t, 10)) ? e.pushCode("case '{0}':", t) : e.pushCode("case {0}:", t), this.generateChoiceCase(e, this.varName, r), e.pushCode("break;");
	      }, this), e.pushCode("default:"), this.options.defaultChoice ? this.generateChoiceCase(e, this.varName, this.options.defaultChoice) : e.generateError('"Met undefined tag value " + {0} + " at choice"', t), e.pushCode("}");
	    }, u.prototype.generateNest = function (e) {
	      var t = e.generateVariable(this.varName);
	      if (this.options.type instanceof u) this.varName && e.pushCode("{0} = {};", t), e.pushPath(this.varName), this.options.type.generate(e), e.popPath(this.varName);else if (a[this.options.type]) {
	        var r = e.generateTmpVariable();
	        e.pushCode("var {0} = {1}(offset);", r, "___parser_" + this.options.type), e.pushCode("{0} = {1}.result; offset = {1}.offset;", t, r), this.options.type !== this.alias && e.addReference(this.options.type);
	      }
	    }, u.prototype.generateFormatter = function (e, t, r) {
	      "function" == typeof r && e.pushCode("{0} = ({1}).call(this, {0});", t, r);
	    }, u.prototype.isInteger = function () {
	      return !!this.type.match(/U?Int[8|16|32][BE|LE]?|Bit\d+/);
	    }, u.prototype.itf8 = function (e, t) {
	      return this.setNextParser("itf8", e, t);
	    }, u.prototype.generateItf8 = function (e) {
	      var t = e.generateVariable(this.varName),
	          r = e.generateTmpVariable();
	      e.pushCode("\n    var ".concat(r, " = buffer[offset];\n    if (").concat(r, " < 0x80) {\n      ").concat(t, " = ").concat(r, ";\n      offset += 1;\n    } else if (").concat(r, " < 0xc0) {\n      ").concat(t, " = ((").concat(r, "<<8) | buffer[offset+1]) & 0x3fff;\n      offset += 2;\n    } else if (").concat(r, " < 0xe0) {\n      ").concat(t, " = ((").concat(r, "<<16) | (buffer[offset+1]<< 8) |  buffer[offset+2]) & 0x1fffff;\n      offset += 3;\n    } else if (").concat(r, " < 0xf0) {\n      ").concat(t, " = ((").concat(r, "<<24) | (buffer[offset+1]<<16) | (buffer[offset+2]<<8) | buffer[offset+3]) & 0x0fffffff;\n      offset += 4\n    } else {\n      ").concat(t, " = ((").concat(r, " & 0x0f)<<28) | (buffer[offset+1]<<20) | (buffer[offset+2]<<12) | (buffer[offset+3]<<4) | (buffer[offset+4] & 0x0f);\n      // x=((0xff & 0x0f)<<28) | (0xff<<20) | (0xff<<12) | (0xff<<4) | (0x0f & 0x0f);\n      // TODO *val_p = uv < 0x80000000UL ? uv : -((int32_t) (0xffffffffUL - uv)) - 1;\n      offset += 5\n    }\n  "));
	    }, u.prototype.ltf8 = function (e, t) {
	      return this.setNextParser("ltf8", e, t);
	    }, u.prototype.generateLtf8 = function (e) {
	      var t = e.generateVariable(this.varName),
	          r = e.generateTmpVariable();
	      e.pushCode("\n  var ".concat(r, " = buffer[offset];\n  if (").concat(r, " < 0x80) {\n    ").concat(t, " = ").concat(r, ";\n    offset += 1;\n  } else if (").concat(r, " < 0xc0) {\n    ").concat(t, " = ((buffer[offset]<<8) | buffer[offset+1]) & 0x3fff;\n    offset += 2;\n  } else if (").concat(r, " < 0xe0) {\n    ").concat(t, " = ((buffer[offset]<<16) | (buffer[offset+1]<<8) | buffer[offset+2]) & 0x1fffff;\n    ").concat(t, " = (((").concat(r, " & 63) << 16) | buffer.readUInt16LE(offset + 1));\n    offset += 3;\n  } else if (").concat(r, " < 0xf0) {\n    ").concat(t, " = ((buffer[offset]<<24) | (buffer[offset+1]<<16) | (buffer[offset+2]<<8) | buffer[offset+3]) & 0x0fffffff;\n    offset += 4;\n  } else if (").concat(r, " < 0xf8) {\n    ").concat(t, " = (((buffer[offset] & 15) * Math.pow(2,32))) +\n      (buffer[offset+1]<<24) | (buffer[offset+2]<<16 | buffer[offset+3]<<8 | buffer[offset+4])\n    // TODO *val_p = uv < 0x80000000UL ? uv : -((int32_t) (0xffffffffUL - uv)) - 1;\n    offset += 5;\n  } else if (").concat(r, " < 0xfc) {\n    ").concat(t, " = ((((buffer[offset] & 7) << 8) | buffer[offset+1] )) * Math.pow(2,32) +\n      (buffer[offset+2]<<24) | (buffer[offset+3]<<16 | buffer[offset+4]<<8 | buffer[offset+5])\n    offset += 6;\n  } else if (").concat(r, " < 0xfe) {\n    ").concat(t, " = ((((buffer[offset] & 3) << 16) | buffer[offset+1]<<8 | buffer[offset+2])) * Math.pow(2,32) +\n      (buffer[offset+3]<<24) | (buffer[offset+4]<<16 | buffer[offset+5]<<8 | buffer[offset+6])\n    offset += 7;\n  } else if (").concat(r, " < 0xff) {\n    ").concat(t, " = Long.fromBytesBE(buffer.slice(offset+1,offset+8));\n    if (").concat(t, ".greaterThan(Number.MAX_SAFE_INTEGER) || ").concat(t, ".lessThan(Number.MIN_SAFE_INTEGER))\n      throw new Error('integer overflow')\n    ").concat(t, " = ").concat(t, ".toNumber()\n    offset += 8;\n  } else {\n    ").concat(t, " = Long.fromBytesBE(buffer.slice(offset+1,offset+9));\n    if (").concat(t, ".greaterThan(Number.MAX_SAFE_INTEGER) || ").concat(t, ".lessThan(Number.MIN_SAFE_INTEGER))\n      throw new Error('integer overflow')\n    ").concat(t, " = ").concat(t, ".toNumber()\n    offset += 9;\n  }\n  "));
	    }, t.Parser = u;
	  }).call(this, r(1).Buffer);
	}, function (module, exports, __webpack_require__) {
	  var indexOf = __webpack_require__(69),
	      Object_keys = function Object_keys(e) {
	    if (Object.keys) return Object.keys(e);
	    var t = [];

	    for (var r in e) {
	      t.push(r);
	    }

	    return t;
	  },
	      forEach = function forEach(e, t) {
	    if (e.forEach) return e.forEach(t);

	    for (var r = 0; r < e.length; r++) {
	      t(e[r], r, e);
	    }
	  },
	      defineProp = function () {
	    try {
	      return Object.defineProperty({}, "_", {}), function (e, t, r) {
	        Object.defineProperty(e, t, {
	          writable: !0,
	          enumerable: !1,
	          configurable: !0,
	          value: r
	        });
	      };
	    } catch (e) {
	      return function (e, t, r) {
	        e[t] = r;
	      };
	    }
	  }(),
	      globals = ["Array", "Boolean", "Date", "Error", "EvalError", "Function", "Infinity", "JSON", "Math", "NaN", "Number", "Object", "RangeError", "ReferenceError", "RegExp", "String", "SyntaxError", "TypeError", "URIError", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "escape", "eval2", "isFinite", "isNaN", "parseFloat", "parseInt", "undefined", "unescape"];

	  function Context() {}

	  Context.prototype = {};

	  var Script = exports.Script = function (e) {
	    if (!(this instanceof Script)) return new Script(e);
	    this.code = e;
	  };

	  Script.prototype.runInContext = function (e) {
	    if (!(e instanceof Context)) throw new TypeError("needs a 'context' argument.");
	    var t = document.createElement("iframe");
	    t.style || (t.style = {}), t.style.display = "none", document.body.appendChild(t);
	    var r = t.contentWindow,
	        n = r.eval2,
	        i = r.execScript;
	    !n && i && (i.call(r, "null"), n = r.eval2), forEach(Object_keys(e), function (t) {
	      r[t] = e[t];
	    }), forEach(globals, function (t) {
	      e[t] && (r[t] = e[t]);
	    });
	    var o = Object_keys(r),
	        s = n.call(r, this.code);
	    return forEach(Object_keys(r), function (t) {
	      (t in e || -1 === indexOf(o, t)) && (e[t] = r[t]);
	    }), forEach(globals, function (t) {
	      t in e || defineProp(e, t, r[t]);
	    }), document.body.removeChild(t), s;
	  }, Script.prototype.runInThisContext = function () {
	    return eval2(this.code);
	  }, Script.prototype.runInNewContext = function (e) {
	    var t = Script.createContext(e),
	        r = this.runInContext(t);
	    return forEach(Object_keys(t), function (r) {
	      e[r] = t[r];
	    }), r;
	  }, forEach(Object_keys(Script.prototype), function (e) {
	    exports[e] = Script[e] = function (t) {
	      var r = Script(t);
	      return r[e].apply(r, [].slice.call(arguments, 1));
	    };
	  }), exports.createScript = function (e) {
	    return exports.Script(e);
	  }, exports.createContext = Script.createContext = function (e) {
	    var t = new Context();
	    return "object" == _typeof(e) && forEach(Object_keys(e), function (r) {
	      t[r] = e[r];
	    }), t;
	  };
	}, function (e, t) {
	  var r = [].indexOf;

	  e.exports = function (e, t) {
	    if (r) return e.indexOf(t);

	    for (var n = 0; n < e.length; ++n) {
	      if (e[n] === t) return n;
	    }

	    return -1;
	  };
	}, function (e, t) {
	  var r = function r() {
	    this.code = "", this.scopes = [["vars"]], this.isAsync = !1, this.bitFields = [], this.tmpVariableCount = 0, this.references = {};
	  };

	  r.prototype.generateVariable = function (e) {
	    var t = [];

	    for (Array.prototype.push.apply(t, this.scopes[this.scopes.length - 1]); /^\$parent\./.test(e);) {
	      t.pop(), e = e.replace(/^\$parent\./, "");
	    }

	    return e && t.push(e), t.join(".");
	  }, r.prototype.generateOption = function (e) {
	    switch (_typeof(e)) {
	      case "number":
	        return e.toString();

	      case "string":
	        return this.generateVariable(e);

	      case "function":
	        return "(" + e + ").call(" + this.generateVariable() + ", vars)";
	    }
	  }, r.prototype.generateError = function () {
	    var e = Array.prototype.slice.call(arguments),
	        t = r.interpolate.apply(this, e);
	    this.isAsync ? this.pushCode("return process.nextTick(function() { callback(new Error(" + t + "), vars); });") : this.pushCode("throw new Error(" + t + ");");
	  }, r.prototype.generateTmpVariable = function () {
	    return "$tmp" + this.tmpVariableCount++;
	  }, r.prototype.pushCode = function () {
	    var e = Array.prototype.slice.call(arguments);
	    this.code += r.interpolate.apply(this, e) + "\n";
	  }, r.prototype.pushPath = function (e) {
	    e && this.scopes[this.scopes.length - 1].push(e);
	  }, r.prototype.popPath = function (e) {
	    e && this.scopes[this.scopes.length - 1].pop();
	  }, r.prototype.pushScope = function (e) {
	    this.scopes.push([e]);
	  }, r.prototype.popScope = function () {
	    this.scopes.pop();
	  }, r.prototype.addReference = function (e) {
	    this.references[e] || (this.references[e] = {
	      resolved: !1,
	      requested: !1
	    });
	  }, r.prototype.markResolved = function (e) {
	    this.references[e].resolved = !0;
	  }, r.prototype.markRequested = function (e) {
	    e.forEach(function (e) {
	      this.references[e].requested = !0;
	    }.bind(this));
	  }, r.prototype.getUnresolvedReferences = function () {
	    var e = this.references;
	    return Object.keys(this.references).filter(function (t) {
	      return !e[t].resolved && !e[t].requested;
	    });
	  }, r.interpolate = function (e) {
	    var t = e.match(/{\d+}/g),
	        r = Array.prototype.slice.call(arguments, 1);
	    return t && t.forEach(function (t) {
	      var n = parseInt(t.substr(1, t.length - 2), 10);
	      e = e.replace(t, r[n].toString());
	    }), e;
	  }, t.Context = r;
	}, function (e, t, r) {
	  (function (t) {
	    var _r16 = r(0),
	        n = _r16.CramMalformedError,
	        _r17 = r(8),
	        i = _r17.itf8Size,
	        o = _r17.parseItem,
	        s = _r17.tinyMemoize,
	        a = r(75),
	        h = r(78);

	    var f = /*#__PURE__*/function () {
	      function f(e, t) {
	        _classCallCheck(this, f);

	        this.file = e, this.filePosition = t;
	      }

	      _createClass(f, [{
	        key: "getHeader",
	        value: function getHeader() {
	          return this._readContainerHeader(this.filePosition);
	        }
	      }, {
	        key: "getCompressionHeaderBlock",
	        value: function () {
	          var _getCompressionHeaderBlock = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
	            var e, t, r;
	            return regeneratorRuntime.wrap(function _callee10$(_context13) {
	              while (1) {
	                switch (_context13.prev = _context13.next) {
	                  case 0:
	                    _context13.next = 2;
	                    return this.getHeader();

	                  case 2:
	                    if (_context13.sent.numRecords) {
	                      _context13.next = 4;
	                      break;
	                    }

	                    return _context13.abrupt("return", null);

	                  case 4:
	                    _context13.next = 6;
	                    return this.file.getSectionParsers();

	                  case 6:
	                    e = _context13.sent;
	                    _context13.next = 9;
	                    return this.getFirstBlock();

	                  case 9:
	                    t = _context13.sent;

	                    if (!("COMPRESSION_HEADER" !== t.contentType)) {
	                      _context13.next = 12;
	                      break;
	                    }

	                    throw new n("invalid content type ".concat(t.contentType, " in what is supposed to be the compression header block"));

	                  case 12:
	                    r = o(t.content, e.cramCompressionHeader.parser, 0, t.contentPosition);
	                    return _context13.abrupt("return", (t.content = r, t));

	                  case 14:
	                  case "end":
	                    return _context13.stop();
	                }
	              }
	            }, _callee10, this);
	          }));

	          function getCompressionHeaderBlock() {
	            return _getCompressionHeaderBlock.apply(this, arguments);
	          }

	          return getCompressionHeaderBlock;
	        }()
	      }, {
	        key: "getFirstBlock",
	        value: function () {
	          var _getFirstBlock = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
	            var e;
	            return regeneratorRuntime.wrap(function _callee11$(_context14) {
	              while (1) {
	                switch (_context14.prev = _context14.next) {
	                  case 0:
	                    _context14.next = 2;
	                    return this.getHeader();

	                  case 2:
	                    e = _context14.sent;
	                    return _context14.abrupt("return", this.file.readBlock(e._endPosition));

	                  case 4:
	                  case "end":
	                    return _context14.stop();
	                }
	              }
	            }, _callee11, this);
	          }));

	          function getFirstBlock() {
	            return _getFirstBlock.apply(this, arguments);
	          }

	          return getFirstBlock;
	        }()
	      }, {
	        key: "getCompressionScheme",
	        value: function () {
	          var _getCompressionScheme = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
	            var e;
	            return regeneratorRuntime.wrap(function _callee12$(_context15) {
	              while (1) {
	                switch (_context15.prev = _context15.next) {
	                  case 0:
	                    _context15.next = 2;
	                    return this.getCompressionHeaderBlock();

	                  case 2:
	                    e = _context15.sent;

	                    if (!e) {
	                      _context15.next = 5;
	                      break;
	                    }

	                    return _context15.abrupt("return", new h(e.content));

	                  case 5:
	                  case "end":
	                    return _context15.stop();
	                }
	              }
	            }, _callee12, this);
	          }));

	          function getCompressionScheme() {
	            return _getCompressionScheme.apply(this, arguments);
	          }

	          return getCompressionScheme;
	        }()
	      }, {
	        key: "getSlice",
	        value: function getSlice(e, t) {
	          return new a(this, e, t);
	        }
	      }, {
	        key: "_readContainerHeader",
	        value: function () {
	          var _readContainerHeader2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(e) {
	            var r, n, s, _yield$this$file$stat5, a, h, f, u, c, l;

	            return regeneratorRuntime.wrap(function _callee13$(_context16) {
	              while (1) {
	                switch (_context16.prev = _context16.next) {
	                  case 0:
	                    _context16.next = 2;
	                    return this.file.getSectionParsers();

	                  case 2:
	                    r = _context16.sent;
	                    n = r.cramContainerHeader1;
	                    s = r.cramContainerHeader2;
	                    _context16.next = 7;
	                    return this.file.stat();

	                  case 7:
	                    _yield$this$file$stat5 = _context16.sent;
	                    a = _yield$this$file$stat5.size;

	                    if (!(e >= a)) {
	                      _context16.next = 11;
	                      break;
	                    }

	                    return _context16.abrupt("return");

	                  case 11:
	                    h = t.allocUnsafe(n.maxLength);
	                    _context16.next = 14;
	                    return this.file.read(h, 0, n.maxLength, e);

	                  case 14:
	                    f = o(h, n.parser), u = i(f.numLandmarks);

	                    if (!(e + f.length >= a)) {
	                      _context16.next = 17;
	                      break;
	                    }

	                    return _context16.abrupt("return", void console.warn("".concat(this.file, ": container header at ").concat(e, " indicates that the container has length ").concat(f.length, ", which extends beyond the length of the file. Skipping this container.")));

	                  case 17:
	                    c = t.allocUnsafe(s.maxLength(f.numLandmarks));
	                    _context16.next = 20;
	                    return this.file.read(c, 0, s.maxLength(f.numLandmarks), e + f._size - u);

	                  case 20:
	                    l = o(c, s.parser);
	                    _context16.t0 = this.file.validateChecksums && void 0 !== l.crc32;

	                    if (!_context16.t0) {
	                      _context16.next = 25;
	                      break;
	                    }

	                    _context16.next = 25;
	                    return this.file.checkCrc32(e, f._size + l._size - u - 4, l.crc32, "container header beginning at position ".concat(e));

	                  case 25:
	                    return _context16.abrupt("return", Object.assign(f, l, {
	                      _size: f._size + l._size - u,
	                      _endPosition: f._size + l._size - u + e
	                    }));

	                  case 26:
	                  case "end":
	                    return _context16.stop();
	                }
	              }
	            }, _callee13, this);
	          }));

	          function _readContainerHeader(_x10) {
	            return _readContainerHeader2.apply(this, arguments);
	          }

	          return _readContainerHeader;
	        }()
	      }]);

	      return f;
	    }();

	    "getHeader getCompressionHeaderBlock getCompressionScheme".split(" ").forEach(function (e) {
	      return s(f, e);
	    }), e.exports = f;
	  }).call(this, r(1).Buffer);
	}, function (e, t, r) {
	  var n, i, o, s, _a;

	  n = r(73), i = r(32).utf8, o = r(74), s = r(32).bin, (_a = function a(e, t) {
	    e.constructor == String ? e = t && "binary" === t.encoding ? s.stringToBytes(e) : i.stringToBytes(e) : o(e) ? e = Array.prototype.slice.call(e, 0) : Array.isArray(e) || (e = e.toString());

	    for (var r = n.bytesToWords(e), h = 8 * e.length, f = 1732584193, u = -271733879, c = -1732584194, l = 271733878, d = 0; d < r.length; d++) {
	      r[d] = 16711935 & (r[d] << 8 | r[d] >>> 24) | 4278255360 & (r[d] << 24 | r[d] >>> 8);
	    }

	    r[h >>> 5] |= 128 << h % 32, r[14 + (h + 64 >>> 9 << 4)] = h;
	    var p = _a._ff,
	        g = _a._gg,
	        m = _a._hh,
	        _ = _a._ii;

	    for (d = 0; d < r.length; d += 16) {
	      var y = f,
	          b = u,
	          w = c,
	          v = l;
	      f = p(f, u, c, l, r[d + 0], 7, -680876936), l = p(l, f, u, c, r[d + 1], 12, -389564586), c = p(c, l, f, u, r[d + 2], 17, 606105819), u = p(u, c, l, f, r[d + 3], 22, -1044525330), f = p(f, u, c, l, r[d + 4], 7, -176418897), l = p(l, f, u, c, r[d + 5], 12, 1200080426), c = p(c, l, f, u, r[d + 6], 17, -1473231341), u = p(u, c, l, f, r[d + 7], 22, -45705983), f = p(f, u, c, l, r[d + 8], 7, 1770035416), l = p(l, f, u, c, r[d + 9], 12, -1958414417), c = p(c, l, f, u, r[d + 10], 17, -42063), u = p(u, c, l, f, r[d + 11], 22, -1990404162), f = p(f, u, c, l, r[d + 12], 7, 1804603682), l = p(l, f, u, c, r[d + 13], 12, -40341101), c = p(c, l, f, u, r[d + 14], 17, -1502002290), f = g(f, u = p(u, c, l, f, r[d + 15], 22, 1236535329), c, l, r[d + 1], 5, -165796510), l = g(l, f, u, c, r[d + 6], 9, -1069501632), c = g(c, l, f, u, r[d + 11], 14, 643717713), u = g(u, c, l, f, r[d + 0], 20, -373897302), f = g(f, u, c, l, r[d + 5], 5, -701558691), l = g(l, f, u, c, r[d + 10], 9, 38016083), c = g(c, l, f, u, r[d + 15], 14, -660478335), u = g(u, c, l, f, r[d + 4], 20, -405537848), f = g(f, u, c, l, r[d + 9], 5, 568446438), l = g(l, f, u, c, r[d + 14], 9, -1019803690), c = g(c, l, f, u, r[d + 3], 14, -187363961), u = g(u, c, l, f, r[d + 8], 20, 1163531501), f = g(f, u, c, l, r[d + 13], 5, -1444681467), l = g(l, f, u, c, r[d + 2], 9, -51403784), c = g(c, l, f, u, r[d + 7], 14, 1735328473), f = m(f, u = g(u, c, l, f, r[d + 12], 20, -1926607734), c, l, r[d + 5], 4, -378558), l = m(l, f, u, c, r[d + 8], 11, -2022574463), c = m(c, l, f, u, r[d + 11], 16, 1839030562), u = m(u, c, l, f, r[d + 14], 23, -35309556), f = m(f, u, c, l, r[d + 1], 4, -1530992060), l = m(l, f, u, c, r[d + 4], 11, 1272893353), c = m(c, l, f, u, r[d + 7], 16, -155497632), u = m(u, c, l, f, r[d + 10], 23, -1094730640), f = m(f, u, c, l, r[d + 13], 4, 681279174), l = m(l, f, u, c, r[d + 0], 11, -358537222), c = m(c, l, f, u, r[d + 3], 16, -722521979), u = m(u, c, l, f, r[d + 6], 23, 76029189), f = m(f, u, c, l, r[d + 9], 4, -640364487), l = m(l, f, u, c, r[d + 12], 11, -421815835), c = m(c, l, f, u, r[d + 15], 16, 530742520), f = _(f, u = m(u, c, l, f, r[d + 2], 23, -995338651), c, l, r[d + 0], 6, -198630844), l = _(l, f, u, c, r[d + 7], 10, 1126891415), c = _(c, l, f, u, r[d + 14], 15, -1416354905), u = _(u, c, l, f, r[d + 5], 21, -57434055), f = _(f, u, c, l, r[d + 12], 6, 1700485571), l = _(l, f, u, c, r[d + 3], 10, -1894986606), c = _(c, l, f, u, r[d + 10], 15, -1051523), u = _(u, c, l, f, r[d + 1], 21, -2054922799), f = _(f, u, c, l, r[d + 8], 6, 1873313359), l = _(l, f, u, c, r[d + 15], 10, -30611744), c = _(c, l, f, u, r[d + 6], 15, -1560198380), u = _(u, c, l, f, r[d + 13], 21, 1309151649), f = _(f, u, c, l, r[d + 4], 6, -145523070), l = _(l, f, u, c, r[d + 11], 10, -1120210379), c = _(c, l, f, u, r[d + 2], 15, 718787259), u = _(u, c, l, f, r[d + 9], 21, -343485551), f = f + y >>> 0, u = u + b >>> 0, c = c + w >>> 0, l = l + v >>> 0;
	    }

	    return n.endian([f, u, c, l]);
	  })._ff = function (e, t, r, n, i, o, s) {
	    var a = e + (t & r | ~t & n) + (i >>> 0) + s;
	    return (a << o | a >>> 32 - o) + t;
	  }, _a._gg = function (e, t, r, n, i, o, s) {
	    var a = e + (t & n | r & ~n) + (i >>> 0) + s;
	    return (a << o | a >>> 32 - o) + t;
	  }, _a._hh = function (e, t, r, n, i, o, s) {
	    var a = e + (t ^ r ^ n) + (i >>> 0) + s;
	    return (a << o | a >>> 32 - o) + t;
	  }, _a._ii = function (e, t, r, n, i, o, s) {
	    var a = e + (r ^ (t | ~n)) + (i >>> 0) + s;
	    return (a << o | a >>> 32 - o) + t;
	  }, _a._blocksize = 16, _a._digestsize = 16, e.exports = function (e, t) {
	    if (null == e) throw new Error("Illegal argument " + e);
	    var r = n.wordsToBytes(_a(e, t));
	    return t && t.asBytes ? r : t && t.asString ? s.bytesToString(r) : n.bytesToHex(r);
	  };
	}, function (e, t) {
	  var r, n;
	  r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", n = {
	    rotl: function rotl(e, t) {
	      return e << t | e >>> 32 - t;
	    },
	    rotr: function rotr(e, t) {
	      return e << 32 - t | e >>> t;
	    },
	    endian: function endian(e) {
	      if (e.constructor == Number) return 16711935 & n.rotl(e, 8) | 4278255360 & n.rotl(e, 24);

	      for (var t = 0; t < e.length; t++) {
	        e[t] = n.endian(e[t]);
	      }

	      return e;
	    },
	    randomBytes: function randomBytes(e) {
	      for (var t = []; e > 0; e--) {
	        t.push(Math.floor(256 * Math.random()));
	      }

	      return t;
	    },
	    bytesToWords: function bytesToWords(e) {
	      for (var t = [], r = 0, n = 0; r < e.length; r++, n += 8) {
	        t[n >>> 5] |= e[r] << 24 - n % 32;
	      }

	      return t;
	    },
	    wordsToBytes: function wordsToBytes(e) {
	      for (var t = [], r = 0; r < 32 * e.length; r += 8) {
	        t.push(e[r >>> 5] >>> 24 - r % 32 & 255);
	      }

	      return t;
	    },
	    bytesToHex: function bytesToHex(e) {
	      for (var t = [], r = 0; r < e.length; r++) {
	        t.push((e[r] >>> 4).toString(16)), t.push((15 & e[r]).toString(16));
	      }

	      return t.join("");
	    },
	    hexToBytes: function hexToBytes(e) {
	      for (var t = [], r = 0; r < e.length; r += 2) {
	        t.push(parseInt(e.substr(r, 2), 16));
	      }

	      return t;
	    },
	    bytesToBase64: function bytesToBase64(e) {
	      for (var t = [], n = 0; n < e.length; n += 3) {
	        for (var i = e[n] << 16 | e[n + 1] << 8 | e[n + 2], o = 0; o < 4; o++) {
	          8 * n + 6 * o <= 8 * e.length ? t.push(r.charAt(i >>> 6 * (3 - o) & 63)) : t.push("=");
	        }
	      }

	      return t.join("");
	    },
	    base64ToBytes: function base64ToBytes(e) {
	      e = e.replace(/[^A-Z0-9+\/]/gi, "");

	      for (var t = [], n = 0, i = 0; n < e.length; i = ++n % 4) {
	        0 != i && t.push((r.indexOf(e.charAt(n - 1)) & Math.pow(2, -2 * i + 8) - 1) << 2 * i | r.indexOf(e.charAt(n)) >>> 6 - 2 * i);
	      }

	      return t;
	    }
	  }, e.exports = n;
	}, function (e, t) {
	  function r(e) {
	    return !!e.constructor && "function" == typeof e.constructor.isBuffer && e.constructor.isBuffer(e);
	  }
	  /*!
	   * Determine if an object is a Buffer
	   *
	   * @author   Feross Aboukhadijeh <https://feross.org>
	   * @license  MIT
	   */


	  e.exports = function (e) {
	    return null != e && (r(e) || function (e) {
	      return "function" == typeof e.readFloatLE && "function" == typeof e.slice && r(e.slice(0, 0));
	    }(e) || !!e._isBuffer);
	  };
	}, function (e, t, r) {
	  var _r18 = r(0),
	      n = _r18.CramMalformedError,
	      i = _r18.CramBufferOverrunError,
	      o = _r18.CramArgumentError,
	      _r19 = r(8),
	      s = _r19.parseItem,
	      a = _r19.tinyMemoize,
	      h = _r19.sequenceMD5,
	      f = r(17),
	      u = r(76);

	  function c(e, t, r, i) {
	    if (!i) throw new n("could not resolve intra-slice mate pairs, file seems truncated or malformed");
	    var o = !!(i.mate || void 0 !== i.mateRecordNumber && i.mateRecordNumber !== t);
	    r.readName || (r.readName = String(r.uniqueId), i.readName = r.readName), r.mate = {
	      sequenceId: i.sequenceId,
	      alignmentStart: i.alignmentStart,
	      uniqueId: i.uniqueId
	    }, i.readName && (r.mate.readName = i.readName), i.mate || void 0 !== i.mateRecordNumber || (i.mate = {
	      sequenceId: r.sequenceId,
	      alignmentStart: r.alignmentStart,
	      uniqueId: r.uniqueId
	    }, r.readName && (i.mate.readName = r.readName)), r.flags |= f.BAM_FPAIRED, i.flags & f.BAM_FUNMAP && (r.flags |= f.BAM_FMUNMAP), r.flags & f.BAM_FUNMAP && (i.flags |= f.BAM_FMUNMAP), i.flags & f.BAM_FREVERSE && (r.flags |= f.BAM_FMREVERSE), r.flags & f.BAM_FREVERSE && (i.flags |= f.BAM_FMREVERSE), void 0 === r.templateLength && (o ? function (e, t, r) {
	      var i = function t(r) {
	        var i = [r];

	        if (r.mateRecordNumber >= 0) {
	          var _o = e[r.mateRecordNumber];
	          if (!_o) throw new n("intra-slice mate record not found, this file seems malformed");
	          i.push.apply(i, _toConsumableArray(t(_o)));
	        }

	        return i;
	      }(r),
	          o = i.map(function (e) {
	        return e.alignmentStart;
	      }),
	          s = i.map(function (e) {
	        return e.alignmentStart + e.readLength - 1;
	      }),
	          a = Math.max.apply(Math, _toConsumableArray(s)) - Math.min.apply(Math, _toConsumableArray(o)) + 1;

	      a >= 0 && i.forEach(function (e) {
	        if (void 0 !== e.templateLength) throw new n("mate pair group has some members that have template lengths already, this file seems malformed");
	        e.templateLength = a;
	      });
	    }(e, 0, r) : function (e, t) {
	      var r = Math.min(e.alignmentStart, t.alignmentStart),
	          n = Math.max(e.alignmentStart + e.readLength - 1, t.alignmentStart + t.readLength - 1) - r + 1;
	      e.templateLength = n, t.templateLength = n;
	    }(r, i)), delete r.mateRecordNumber;
	  }

	  var l = /*#__PURE__*/function () {
	    function l(e, t) {
	      _classCallCheck(this, l);

	      this.container = e, this.file = e.file, this.containerPosition = t;
	    }

	    _createClass(l, [{
	      key: "getHeader",
	      value: function () {
	        var _getHeader = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
	          var e, t, r;
	          return regeneratorRuntime.wrap(function _callee14$(_context17) {
	            while (1) {
	              switch (_context17.prev = _context17.next) {
	                case 0:
	                  _context17.next = 2;
	                  return this.file.getSectionParsers();

	                case 2:
	                  e = _context17.sent;
	                  _context17.next = 5;
	                  return this.container.getHeader();

	                case 5:
	                  t = _context17.sent;
	                  _context17.next = 8;
	                  return this.file.readBlock(t._endPosition + this.containerPosition);

	                case 8:
	                  r = _context17.sent;

	                  if (!("MAPPED_SLICE_HEADER" === r.contentType)) {
	                    _context17.next = 13;
	                    break;
	                  }

	                  r.content = s(r.content, e.cramMappedSliceHeader.parser, 0, t._endPosition);
	                  _context17.next = 16;
	                  break;

	                case 13:
	                  if (!("UNMAPPED_SLICE_HEADER" !== r.contentType)) {
	                    _context17.next = 15;
	                    break;
	                  }

	                  throw new n("error reading slice header block, invalid content type ".concat(r._contentType));

	                case 15:
	                  r.content = s(r.content, e.cramUnmappedSliceHeader.parser, 0, t._endPosition);

	                case 16:
	                  return _context17.abrupt("return", r);

	                case 17:
	                case "end":
	                  return _context17.stop();
	              }
	            }
	          }, _callee14, this);
	        }));

	        function getHeader() {
	          return _getHeader.apply(this, arguments);
	        }

	        return getHeader;
	      }()
	    }, {
	      key: "getBlocks",
	      value: function () {
	        var _getBlocks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
	          var e, t, r, _e16;

	          return regeneratorRuntime.wrap(function _callee15$(_context18) {
	            while (1) {
	              switch (_context18.prev = _context18.next) {
	                case 0:
	                  _context18.next = 2;
	                  return this.getHeader();

	                case 2:
	                  e = _context18.sent;
	                  t = e._endPosition;
	                  r = new Array(e.content.numBlocks);
	                  _e16 = 0;

	                case 6:
	                  if (!(_e16 < r.length)) {
	                    _context18.next = 14;
	                    break;
	                  }

	                  _context18.next = 9;
	                  return this.file.readBlock(t);

	                case 9:
	                  r[_e16] = _context18.sent;
	                  t = r[_e16]._endPosition;

	                case 11:
	                  _e16 += 1;
	                  _context18.next = 6;
	                  break;

	                case 14:
	                  return _context18.abrupt("return", r);

	                case 15:
	                case "end":
	                  return _context18.stop();
	              }
	            }
	          }, _callee15, this);
	        }));

	        function getBlocks() {
	          return _getBlocks.apply(this, arguments);
	        }

	        return getBlocks;
	      }()
	    }, {
	      key: "getCoreDataBlock",
	      value: function () {
	        var _getCoreDataBlock = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
	          return regeneratorRuntime.wrap(function _callee16$(_context19) {
	            while (1) {
	              switch (_context19.prev = _context19.next) {
	                case 0:
	                  _context19.next = 2;
	                  return this.getBlocks();

	                case 2:
	                  return _context19.abrupt("return", _context19.sent[0]);

	                case 3:
	                case "end":
	                  return _context19.stop();
	              }
	            }
	          }, _callee16, this);
	        }));

	        function getCoreDataBlock() {
	          return _getCoreDataBlock.apply(this, arguments);
	        }

	        return getCoreDataBlock;
	      }()
	    }, {
	      key: "_getBlocksContentIdIndex",
	      value: function () {
	        var _getBlocksContentIdIndex2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
	          var e, t;
	          return regeneratorRuntime.wrap(function _callee17$(_context20) {
	            while (1) {
	              switch (_context20.prev = _context20.next) {
	                case 0:
	                  _context20.next = 2;
	                  return this.getBlocks();

	                case 2:
	                  e = _context20.sent;
	                  t = {};
	                  return _context20.abrupt("return", (e.forEach(function (e) {
	                    "EXTERNAL_DATA" === e.contentType && (t[e.contentId] = e);
	                  }), t));

	                case 5:
	                case "end":
	                  return _context20.stop();
	              }
	            }
	          }, _callee17, this);
	        }));

	        function _getBlocksContentIdIndex() {
	          return _getBlocksContentIdIndex2.apply(this, arguments);
	        }

	        return _getBlocksContentIdIndex;
	      }()
	    }, {
	      key: "getBlockByContentId",
	      value: function () {
	        var _getBlockByContentId = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(e) {
	          return regeneratorRuntime.wrap(function _callee18$(_context21) {
	            while (1) {
	              switch (_context21.prev = _context21.next) {
	                case 0:
	                  _context21.next = 2;
	                  return this._getBlocksContentIdIndex();

	                case 2:
	                  _context21.t0 = e;
	                  return _context21.abrupt("return", _context21.sent[_context21.t0]);

	                case 4:
	                case "end":
	                  return _context21.stop();
	              }
	            }
	          }, _callee18, this);
	        }));

	        function getBlockByContentId(_x11) {
	          return _getBlockByContentId.apply(this, arguments);
	        }

	        return getBlockByContentId;
	      }()
	    }, {
	      key: "getReferenceRegion",
	      value: function () {
	        var _getReferenceRegion = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
	          var e, t, _t8, _t9;

	          return regeneratorRuntime.wrap(function _callee19$(_context22) {
	            while (1) {
	              switch (_context22.prev = _context22.next) {
	                case 0:
	                  _context22.next = 2;
	                  return this.getHeader();

	                case 2:
	                  e = _context22.sent.content;

	                  if (!(e.refSeqId < 0)) {
	                    _context22.next = 5;
	                    break;
	                  }

	                  return _context22.abrupt("return");

	                case 5:
	                  _context22.next = 7;
	                  return this.container.getCompressionScheme();

	                case 7:
	                  t = _context22.sent;

	                  if (!(e.refBaseBlockId >= 0)) {
	                    _context22.next = 15;
	                    break;
	                  }

	                  _t8 = this.getBlockByContentId(e.refBaseBlockId);

	                  if (_t8) {
	                    _context22.next = 12;
	                    break;
	                  }

	                  throw new n("embedded reference specified, but reference block does not exist");

	                case 12:
	                  if (!(e.span > _t8.uncompressedSize)) {
	                    _context22.next = 14;
	                    break;
	                  }

	                  throw new n("Embedded reference is too small");

	                case 14:
	                  return _context22.abrupt("return", {
	                    seq: _t8.data.toString("utf8"),
	                    start: e.refSeqStart,
	                    end: e.refSeqStart + e.refSeqSpan - 1,
	                    span: e.refSeqSpan
	                  });

	                case 15:
	                  if (!(t.referenceRequired || this.file.fetchReferenceSequenceCallback)) {
	                    _context22.next = 24;
	                    break;
	                  }

	                  if (this.file.fetchReferenceSequenceCallback) {
	                    _context22.next = 18;
	                    break;
	                  }

	                  throw new Error("reference sequence not embedded, and seqFetch callback not provided, cannot fetch reference sequence");

	                case 18:
	                  _context22.next = 20;
	                  return this.file.fetchReferenceSequenceCallback(e.refSeqId, e.refSeqStart, e.refSeqStart + e.refSeqSpan - 1);

	                case 20:
	                  _t9 = _context22.sent;

	                  if (!(_t9.length !== e.refSeqSpan)) {
	                    _context22.next = 23;
	                    break;
	                  }

	                  throw new o("seqFetch callback returned a reference sequence of the wrong length");

	                case 23:
	                  return _context22.abrupt("return", {
	                    seq: _t9,
	                    start: e.refSeqStart,
	                    end: e.refSeqStart + e.refSeqSpan - 1,
	                    span: e.refSeqSpan
	                  });

	                case 24:
	                case "end":
	                  return _context22.stop();
	              }
	            }
	          }, _callee19, this);
	        }));

	        function getReferenceRegion() {
	          return _getReferenceRegion.apply(this, arguments);
	        }

	        return getReferenceRegion;
	      }()
	    }, {
	      key: "getAllRecords",
	      value: function getAllRecords() {
	        return this.getRecords(function () {
	          return !0;
	        });
	      }
	    }, {
	      key: "_fetchRecords",
	      value: function () {
	        var _fetchRecords2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
	          var _this = this;

	          var _yield$this$file$getD, e, t, r, o, _e17, _t10, _i, _o2, _s4, _a2, s, a, f, l, _n4, _e18, _t11;

	          return regeneratorRuntime.wrap(function _callee20$(_context23) {
	            while (1) {
	              switch (_context23.prev = _context23.next) {
	                case 0:
	                  _context23.next = 2;
	                  return this.file.getDefinition();

	                case 2:
	                  _yield$this$file$getD = _context23.sent;
	                  e = _yield$this$file$getD.majorVersion;
	                  _context23.next = 6;
	                  return this.container.getCompressionScheme();

	                case 6:
	                  t = _context23.sent;
	                  _context23.next = 9;
	                  return this.getHeader();

	                case 9:
	                  r = _context23.sent;
	                  _context23.next = 12;
	                  return this._getBlocksContentIdIndex();

	                case 12:
	                  o = _context23.sent;

	                  if (!(e > 1 && this.file.options.checkSequenceMD5 && r.content.refSeqId >= 0 && "0000000000000000" !== r.content.md5.join(""))) {
	                    _context23.next = 21;
	                    break;
	                  }

	                  _context23.next = 16;
	                  return this.getReferenceRegion();

	                case 16:
	                  _e17 = _context23.sent;

	                  if (!_e17) {
	                    _context23.next = 21;
	                    break;
	                  }

	                  _t10 = _e17.seq, _i = _e17.start, _o2 = _e17.end, _s4 = h(_t10), _a2 = r.content.md5.map(function (e) {
	                    return (e < 16 ? "0" : "") + e.toString(16);
	                  }).join("");

	                  if (!(_s4 !== _a2)) {
	                    _context23.next = 21;
	                    break;
	                  }

	                  throw new n("MD5 checksum reference mismatch for ref ".concat(r.content.refSeqId, " pos ").concat(_i, "..").concat(_o2, ". recorded MD5: ").concat(_a2, ", calculated MD5: ").concat(_s4));

	                case 21:
	                  _context23.next = 23;
	                  return this.getCoreDataBlock();

	                case 23:
	                  s = _context23.sent;
	                  a = {
	                    lastAlignmentStart: r.content.refSeqStart || 0,
	                    coreBlock: {
	                      bitPosition: 7,
	                      bytePosition: 0
	                    },
	                    externalBlocks: {
	                      getCursor: function getCursor(e) {
	                        return this[e] || (this[e] = {
	                          bitPosition: 7,
	                          bytePosition: 0
	                        }), this[e];
	                      }
	                    }
	                  };

	                  f = function f(e) {
	                    var r = t.getCodecForDataSeries(e);
	                    if (!r) throw new n("no codec defined for ".concat(e, " data series"));
	                    return r.decode(_this, s, o, a);
	                  };

	                  l = new Array(r.content.numRecords);
	                  _n4 = 0;

	                case 28:
	                  if (!(_n4 < l.length)) {
	                    _context23.next = 42;
	                    break;
	                  }

	                  _context23.prev = 29;
	                  l[_n4] = u(this, f, t, r, s, o, a, e, _n4), l[_n4].uniqueId = r.contentPosition + r.content.recordCounter + _n4 + 1;
	                  _context23.next = 39;
	                  break;

	                case 33:
	                  _context23.prev = 33;
	                  _context23.t0 = _context23["catch"](29);

	                  if (!(_context23.t0 instanceof i)) {
	                    _context23.next = 38;
	                    break;
	                  }

	                  console.warn("read attempted beyond end of buffer, file seems truncated."), l = l.filter(function (e) {
	                    return !!e;
	                  });
	                  return _context23.abrupt("break", 42);

	                case 38:
	                  throw _context23.t0;

	                case 39:
	                  _n4 += 1;
	                  _context23.next = 28;
	                  break;

	                case 42:
	                  for (_e18 = 0; _e18 < l.length; _e18 += 1) {
	                    _t11 = l[_e18].mateRecordNumber;
	                    _t11 >= 0 && c(l, _e18, l[_e18], l[_t11]);
	                  }

	                  return _context23.abrupt("return", l);

	                case 44:
	                case "end":
	                  return _context23.stop();
	              }
	            }
	          }, _callee20, this, [[29, 33]]);
	        }));

	        function _fetchRecords() {
	          return _fetchRecords2.apply(this, arguments);
	        }

	        return _fetchRecords;
	      }()
	    }, {
	      key: "getRecords",
	      value: function () {
	        var _getRecords = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(e) {
	          var _this2 = this;

	          var t, r, n, _e19, _t12, _r20, _i2, _e20, _r21, _o3, _s5, _e21, _o4;

	          return regeneratorRuntime.wrap(function _callee22$(_context25) {
	            while (1) {
	              switch (_context25.prev = _context25.next) {
	                case 0:
	                  t = this.container.filePosition + this.containerPosition;
	                  r = this.file.featureCache.get(t);
	                  r || (r = this._fetchRecords(), this.file.featureCache.set(t, r));
	                  _context25.next = 5;
	                  return r;

	                case 5:
	                  n = _context25.sent.filter(e);

	                  if (!(n.length && this.file.fetchReferenceSequenceCallback)) {
	                    _context25.next = 20;
	                    break;
	                  }

	                  _context25.next = 9;
	                  return this.getHeader();

	                case 9:
	                  _e19 = _context25.sent;

	                  if (!(_e19.content.refSeqId >= 0 || -2 === _e19.content.refSeqId)) {
	                    _context25.next = 20;
	                    break;
	                  }

	                  _t12 = _e19.content.refSeqId >= 0 ? _e19.content.refSeqId : void 0;
	                  _context25.next = 14;
	                  return this.container.getCompressionScheme();

	                case 14:
	                  _r20 = _context25.sent;
	                  _i2 = {};

	                  for (_e20 = 0; _e20 < n.length; _e20 += 1) {
	                    _r21 = void 0 !== _t12 ? _t12 : n[_e20].sequenceId;
	                    _o3 = _i2[_r21];
	                    _o3 || (_o3 = {
	                      id: _r21,
	                      start: n[_e20].alignmentStart,
	                      end: -1 / 0
	                    }, _i2[_r21] = _o3);
	                    _s5 = n[_e20].alignmentStart + (n[_e20].lengthOnRef || n[_e20].readLength) - 1;
	                    _s5 > _o3.end && (_o3.end = _s5), n[_e20].alignmentStart < _o3.start && (_o3.start = n[_e20].alignmentStart);
	                  }

	                  _context25.next = 19;
	                  return Promise.all(Object.values(_i2).map( /*#__PURE__*/function () {
	                    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(e) {
	                      return regeneratorRuntime.wrap(function _callee21$(_context24) {
	                        while (1) {
	                          switch (_context24.prev = _context24.next) {
	                            case 0:
	                              _context24.t0 = -1 !== e.id && e.start <= e.end;

	                              if (!_context24.t0) {
	                                _context24.next = 5;
	                                break;
	                              }

	                              _context24.next = 4;
	                              return _this2.file.fetchReferenceSequenceCallback(e.id, e.start, e.end);

	                            case 4:
	                              e.seq = _context24.sent;

	                            case 5:
	                            case "end":
	                              return _context24.stop();
	                          }
	                        }
	                      }, _callee21);
	                    }));

	                    return function (_x13) {
	                      return _ref2.apply(this, arguments);
	                    };
	                  }()));

	                case 19:
	                  for (_e21 = 0; _e21 < n.length; _e21 += 1) {
	                    _o4 = _i2[void 0 !== _t12 ? _t12 : n[_e21].sequenceId];
	                    _o4 && _o4.seq && n[_e21].addReferenceSequence(_o4, _r20);
	                  }

	                case 20:
	                  return _context25.abrupt("return", n);

	                case 21:
	                case "end":
	                  return _context25.stop();
	              }
	            }
	          }, _callee22, this);
	        }));

	        function getRecords(_x12) {
	          return _getRecords.apply(this, arguments);
	        }

	        return getRecords;
	      }()
	    }]);

	    return l;
	  }();

	  "getHeader getBlocks _getBlocksContentIdIndex".split(" ").forEach(function (e) {
	    return a(l, e);
	  }), e.exports = l;
	}, function (e, t, r) {
	  (function (t) {
	    var _r22 = r(0),
	        n = _r22.CramMalformedError,
	        i = _r22.CramUnimplementedError,
	        o = r(31),
	        s = r(77),
	        a = r(17);

	    function h(e) {
	      var t = e.indexOf(0);
	      return -1 === t ? e.toString("utf8") : e.toString("utf8", 0, t);
	    }

	    function f(e, r) {
	      if (r.readInt32LE || (r = t.from(r)), "Z" === e) return h(r);
	      if ("A" === e) return String.fromCharCode(r[0]);

	      if ("I" === e) {
	        var _e22 = o.fromBytesLE(r);

	        if (_e22.greaterThan(Number.MAX_SAFE_INTEGER) || _e22.lessThan(Number.MIN_SAFE_INTEGER)) throw new i("integer overflow");
	        return _e22.toNumber();
	      }

	      if ("i" === e) return r.readInt32LE(0);
	      if ("s" === e) return r.readInt16LE(0);
	      if ("S" === e) return r.readUInt16LE(0);
	      if ("c" === e) return r.readInt8(0);
	      if ("C" === e) return r.readUInt8(0);
	      if ("f" === e) return r.readFloatLE(0);

	      if ("H" === e) {
	        var _e23 = h(r);

	        return Number.parseInt(_e23.replace(/^0x/, ""), 16);
	      }

	      if ("B" === e) return function (e) {
	        var t = String.fromCharCode(e[0]),
	            r = e.readInt32LE(1),
	            i = {
	          c: ["readInt8", 1],
	          C: ["readUInt8", 1],
	          s: ["readInt16LE", 2],
	          S: ["readUInt16LE", 2],
	          i: ["readInt32LE", 4],
	          I: ["readUInt32LE", 4],
	          f: ["readFloatLE", 4]
	        }[t];
	        if (!i) throw new n("invalid tag value array type '".concat(t, "'"));

	        var _i3 = _slicedToArray(i, 2),
	            o = _i3[0],
	            s = _i3[1],
	            a = new Array(r);

	        var h = 5;

	        for (var _t13 = 0; _t13 < r; _t13 += 1) {
	          a[_t13] = e[o](h), h += s;
	        }

	        return a;
	      }(r);
	      throw new n("Unrecognized tag type ".concat(e));
	    }

	    function u(e) {
	      if (e instanceof t) return h(e);

	      if (e.length && e.indexOf) {
	        if (!e[e.length - 1]) {
	          var _t14 = e.indexOf(0);

	          return String.fromCharCode.apply(String, _toConsumableArray(e.slice(0, _t14)));
	        }

	        return String.fromCharCode.apply(String, _toConsumableArray(e));
	      }

	      return String(e);
	    }

	    e.exports = function (e, t, r, i, o, h, c, l, d) {
	      var p = new s();

	      if (p.flags = t("BF"), p.cramFlags = t("CF"), l > 1 && -2 === i.content.refSeqId ? p.sequenceId = t("RI") : p.sequenceId = i.content.refSeqId, p.readLength = t("RL"), p.alignmentStart = t("AP"), r.APdelta && (p.alignmentStart += c.lastAlignmentStart), c.lastAlignmentStart = p.alignmentStart, p.readGroupId = t("RG"), r.readNamesIncluded && (p.readName = u(t("RN"))), p.isDetached()) {
	        var _e24 = {};
	        _e24.flags = t("MF"), r.readNamesIncluded || (_e24.readName = u(t("RN")), p.readName = _e24.readName), _e24.sequenceId = t("NS"), _e24.alignmentStart = t("NP"), (_e24.flags || _e24.sequenceId > -1) && (p.mate = _e24), p.templateSize = t("TS"), _e24.flags & a.CRAM_M_UNMAP && (p.flags |= a.BAM_FMUNMAP), _e24.flags & a.CRAM_M_REVERSE && (p.flags |= a.BAM_FMREVERSE);
	      } else p.hasMateDownStream() && (p.mateRecordNumber = t("NF") + d + 1);

	      var g = t("TL");
	      if (g < 0) throw new n("invalid TL index");
	      var m = r.getTagNames(g),
	          _ = m.length;

	      for (var _t15 = 0; _t15 < _; _t15 += 1) {
	        var _i4 = m[_t15],
	            _s6 = _i4.substr(0, 2),
	            _a3 = _i4.substr(2, 1),
	            _u = r.getCodecForTag(_i4);

	        if (!_u) throw new n("no codec defined for auxiliary tag ".concat(_i4));

	        var _l2 = _u.decode(e, o, h, c);

	        p.tags[_s6] = f(_a3, _l2);
	      }

	      if (p.isSegmentUnmapped()) {
	        if (p.isUnknownBases()) p.readBases = null, p.qualityScores = null;else {
	          var _e25 = new Array(p.readLength);

	          for (var _r23 = 0; _r23 < _e25.length; _r23 += 1) {
	            _e25[_r23] = t("BA");
	          }

	          if (p.readBases = String.fromCharCode.apply(String, _e25), p.isPreservingQualityScores()) {
	            for (var _r24 = 0; _r24 < _e25.length; _r24 += 1) {
	              _e25[_r24] = t("QS");
	            }

	            p.qualityScores = _e25;
	          }
	        }
	      } else {
	        var _e26 = t("FN");

	        _e26 && (p.readFeatures = function (e, t, r, i, o) {
	          var s = 0,
	              a = e.alignmentStart - 1;
	          var h = new Array(t);

	          function f(_ref3) {
	            var _ref4 = _slicedToArray(_ref3, 2),
	                e = _ref4[0],
	                t = _ref4[1];

	            var n = r(t);
	            return "character" === e ? String.fromCharCode(n) : "string" === e ? n.toString("utf8") : "numArray" === e ? n.toArray() : n;
	          }

	          for (var _e27 = 0; _e27 < t; _e27 += 1) {
	            var _t16 = String.fromCharCode(r("FC")),
	                _i5 = r("FP"),
	                _u2 = {
	              code: _t16
	            },
	                _c3 = {
	              B: ["character", "BA"],
	              S: ["string", o > 1 ? "SC" : "IN"],
	              X: ["number", "BS"],
	              D: ["number", "DL"],
	              I: ["string", "IN"],
	              i: ["character", "BA"],
	              b: ["string", "BB"],
	              q: ["numArray", "QQ"],
	              Q: ["number", "QS"],
	              H: ["number", "HC"],
	              P: ["number", "PD"],
	              N: ["number", "RS"]
	            }[_t16];

	            if (!_c3) throw new n("invalid read feature code \"".concat(_t16, "\""));
	            _u2.data = f(_c3);
	            var _l3 = {
	              B: ["number", "QS"]
	            }[_t16];
	            _l3 && (_u2.data = [_u2.data, f(_l3)]), s += _i5, _u2.pos = s, a += _i5, _u2.refPos = a, "D" === _t16 || "N" === _t16 ? a += _u2.data : "H" === _t16 ? a -= _u2.data : "I" === _t16 || "S" === _t16 ? a -= _u2.data.length : "i" === _t16 && (a -= 1), h[_e27] = _u2;
	          }

	          return h;
	        }(p, _e26, t, 0, l));
	        var _r25 = p.readLength;

	        if (p.readFeatures && p.readFeatures.forEach(function (_ref5) {
	          var e = _ref5.code,
	              t = _ref5.data;
	          "D" === e || "N" === e ? _r25 += t : "I" === e || "S" === e ? _r25 -= t.length : "i" === e && (_r25 -= 1);
	        }), Number.isNaN(_r25) && (console.warn("".concat(p.readName || "".concat(p.sequenceId, ":").concat(p.alignmentStart), " record has invalid read features")), _r25 = p.readLength), p.lengthOnRef = _r25, p.mappingQuality = t("MQ"), p.isPreservingQualityScores()) {
	          var _e28 = new Array(p.readLength);

	          for (var _r26 = 0; _r26 < _e28.length; _r26 += 1) {
	            _e28[_r26] = t("QS");
	          }

	          p.qualityScores = _e28;
	        }
	      }
	      return p;
	    };
	  }).call(this, r(1).Buffer);
	}, function (e, t, r) {
	  var n = r(17);
	  var i = {
	    a: 0,
	    A: 0,
	    c: 1,
	    C: 1,
	    g: 2,
	    G: 2,
	    t: 3,
	    T: 3,
	    n: 4,
	    N: 4
	  };

	  e.exports = /*#__PURE__*/function () {
	    function _class3() {
	      _classCallCheck(this, _class3);

	      this.tags = {};
	    }

	    _createClass(_class3, [{
	      key: "isPaired",
	      value: function isPaired() {
	        return !!(this.flags & n.BAM_FPAIRED);
	      }
	    }, {
	      key: "isProperlyPaired",
	      value: function isProperlyPaired() {
	        return !!(this.flags & n.BAM_FPROPER_PAIR);
	      }
	    }, {
	      key: "isSegmentUnmapped",
	      value: function isSegmentUnmapped() {
	        return !!(this.flags & n.BAM_FUNMAP);
	      }
	    }, {
	      key: "isMateUnmapped",
	      value: function isMateUnmapped() {
	        return !!(this.flags & n.BAM_FMUNMAP);
	      }
	    }, {
	      key: "isReverseComplemented",
	      value: function isReverseComplemented() {
	        return !!(this.flags & n.BAM_FREVERSE);
	      }
	    }, {
	      key: "isMateReverseComplemented",
	      value: function isMateReverseComplemented() {
	        return !!(this.flags & n.BAM_FMREVERSE);
	      }
	    }, {
	      key: "isRead1",
	      value: function isRead1() {
	        return !!(this.flags & n.BAM_FREAD1);
	      }
	    }, {
	      key: "isRead2",
	      value: function isRead2() {
	        return !!(this.flags & n.BAM_FREAD2);
	      }
	    }, {
	      key: "isSecondary",
	      value: function isSecondary() {
	        return !!(this.flags & n.BAM_FSECONDARY);
	      }
	    }, {
	      key: "isFailedQc",
	      value: function isFailedQc() {
	        return !!(this.flags & n.BAM_FQCFAIL);
	      }
	    }, {
	      key: "isDuplicate",
	      value: function isDuplicate() {
	        return !!(this.flags & n.BAM_FDUP);
	      }
	    }, {
	      key: "isSupplementary",
	      value: function isSupplementary() {
	        return !!(this.flags & n.BAM_FSUPPLEMENTARY);
	      }
	    }, {
	      key: "isDetached",
	      value: function isDetached() {
	        return !!(this.cramFlags & n.CRAM_FLAG_DETACHED);
	      }
	    }, {
	      key: "hasMateDownStream",
	      value: function hasMateDownStream() {
	        return !!(this.cramFlags & n.CRAM_FLAG_MATE_DOWNSTREAM);
	      }
	    }, {
	      key: "isPreservingQualityScores",
	      value: function isPreservingQualityScores() {
	        return !!(this.cramFlags & n.CRAM_FLAG_PRESERVE_QUAL_SCORES);
	      }
	    }, {
	      key: "isUnknownBases",
	      value: function isUnknownBases() {
	        return !!(this.cramFlags & n.CRAM_FLAG_NO_SEQ);
	      }
	    }, {
	      key: "getReadBases",
	      value: function getReadBases() {
	        return !this.readBases && this._refRegion && (this.readBases = function (e, t) {
	          if (!e.lengthOnRef && !e.readLength) return;
	          if (e.isUnknownBases()) return;
	          var r = e.alignmentStart - t.start;
	          if (!e.readFeatures) return t.seq.substr(r, e.lengthOnRef).toUpperCase();
	          var n = "",
	              i = r,
	              o = 0;

	          for (; n.length < e.readLength;) {
	            if (o < e.readFeatures.length && e.readFeatures[o].pos === n.length + 1) {
	              var _t17 = e.readFeatures[o];
	              o += 1, "b" === _t17.code ? (n += _t17.data, i += 1) : "B" === _t17.code ? (n += _t17.data[0], i += 1) : "X" === _t17.code ? (n += _t17.sub, i += 1) : "I" === _t17.code ? n += _t17.data : "D" === _t17.code ? i += _t17.data : "i" === _t17.code ? n += _t17.data : "N" === _t17.code ? i += _t17.data : "S" === _t17.code ? n += _t17.data : "P" === _t17.code || _t17.code;
	            } else if (o < e.readFeatures.length) {
	              var _r27 = t.seq.substr(i, e.readFeatures[o].pos - n.length - 1);

	              n += _r27, i += _r27.length;
	            } else {
	              var _r28 = t.seq.substr(i, e.readLength - n.length);

	              n += _r28, i += _r28.length;
	            }
	          }

	          return n.toUpperCase();
	        }(this, this._refRegion)), this.readBases;
	      }
	    }, {
	      key: "getPairOrientation",
	      value: function getPairOrientation() {
	        if (!this.isSegmentUnmapped() && this.isPaired() && !this.isMateUnmapped() && this.sequenceId === this.mate.sequenceId) {
	          var _e29 = this.isReverseComplemented() ? "R" : "F",
	              _t18 = this.isMateReverseComplemented() ? "R" : "F";

	          var _r29 = " ",
	              _n5 = " ";
	          this.isRead1() ? (_r29 = "1", _n5 = "2") : this.isRead2() && (_r29 = "2", _n5 = "1");
	          var _i6 = [];
	          var o = this.templateLength || this.templateSize;
	          return this.alignmentStart > this.mate.alignmentStart && o > 0 && (o = -o), o > 0 ? (_i6[0] = _e29, _i6[1] = _r29, _i6[2] = _t18, _i6[3] = _n5) : (_i6[2] = _e29, _i6[3] = _r29, _i6[0] = _t18, _i6[1] = _n5), _i6.join("");
	        }

	        return null;
	      }
	    }, {
	      key: "addReferenceSequence",
	      value: function addReferenceSequence(e, t) {
	        this.readFeatures && this.readFeatures.forEach(function (r) {
	          "X" === r.code && function (e, t, r, n) {
	            if (!t) return;
	            var o = n.refPos - t.start,
	                s = t.seq.charAt(o);
	            s && (n.ref = s);
	            var a = i[s];
	            void 0 === a && (a = 4);
	            var h = r.substitutionMatrix[a][n.data];
	            h && (n.sub = h);
	          }(0, e, t, r);
	        }), !this.readBases && e.start <= this.alignmentStart && e.end >= this.alignmentStart + (this.lengthOnRef || this.readLength) - 1 && (this._refRegion = e);
	      }
	    }, {
	      key: "toJSON",
	      value: function toJSON() {
	        var _this3 = this;

	        var e = {};
	        return Object.keys(this).forEach(function (t) {
	          "_" !== t.charAt(0) && (e[t] = _this3[t]);
	        }), e.readBases = this.getReadBases(), e;
	      }
	    }]);

	    return _class3;
	  }();
	}, function (e, t, r) {
	  var _r30 = r(0),
	      n = _r30.CramMalformedError,
	      _r31 = r(79),
	      i = _r31.instantiateCodec,
	      o = {
	    BF: "int",
	    CF: "int",
	    RI: "int",
	    RL: "int",
	    AP: "int",
	    RG: "int",
	    MF: "int",
	    NS: "int",
	    NP: "int",
	    TS: "int",
	    NF: "int",
	    TC: "byte",
	    TN: "int",
	    FN: "int",
	    FC: "byte",
	    FP: "int",
	    BS: "byte",
	    IN: "byteArray",
	    SC: "byteArray",
	    DL: "int",
	    BA: "byte",
	    BB: "byteArray",
	    RS: "int",
	    PD: "int",
	    HC: "int",
	    MQ: "int",
	    RN: "byteArray",
	    QS: "byte",
	    QQ: "byteArray",
	    TL: "int",
	    TM: "ignore",
	    TV: "ignore"
	  };

	  e.exports = /*#__PURE__*/function () {
	    function _class4(e) {
	      _classCallCheck(this, _class4);

	      Object.assign(this, e), this.readNamesIncluded = e.preservation.RN, this.APdelta = e.preservation.AP, this.referenceRequired = !!e.preservation.RR, this.tagIdsDictionary = e.preservation.TD, this.substitutionMatrix = function (e) {
	        var t = new Array(5);

	        for (var _e30 = 0; _e30 < 5; _e30 += 1) {
	          t[_e30] = new Array(4);
	        }

	        return t[0][e[0] >> 6 & 3] = "C", t[0][e[0] >> 4 & 3] = "G", t[0][e[0] >> 2 & 3] = "T", t[0][e[0] >> 0 & 3] = "N", t[1][e[1] >> 6 & 3] = "A", t[1][e[1] >> 4 & 3] = "G", t[1][e[1] >> 2 & 3] = "T", t[1][e[1] >> 0 & 3] = "N", t[2][e[2] >> 6 & 3] = "A", t[2][e[2] >> 4 & 3] = "C", t[2][e[2] >> 2 & 3] = "T", t[2][e[2] >> 0 & 3] = "N", t[3][e[3] >> 6 & 3] = "A", t[3][e[3] >> 4 & 3] = "C", t[3][e[3] >> 2 & 3] = "G", t[3][e[3] >> 0 & 3] = "N", t[4][e[4] >> 6 & 3] = "A", t[4][e[4] >> 4 & 3] = "C", t[4][e[4] >> 2 & 3] = "G", t[4][e[4] >> 0 & 3] = "T", t;
	      }(e.preservation.SM), this.dataSeriesCodecCache = {}, this.tagCodecCache = {};
	    }

	    _createClass(_class4, [{
	      key: "getCodecForTag",
	      value: function getCodecForTag(e) {
	        if (!this.tagCodecCache[e]) {
	          var _t19 = this.tagEncoding[e];
	          _t19 && (this.tagCodecCache[e] = i(_t19, "byteArray"));
	        }

	        return this.tagCodecCache[e];
	      }
	    }, {
	      key: "getTagNames",
	      value: function getTagNames(e) {
	        return this.tagIdsDictionary[e];
	      }
	    }, {
	      key: "getCodecForDataSeries",
	      value: function getCodecForDataSeries(e) {
	        if (!this.dataSeriesCodecCache[e]) {
	          var _t20 = this.dataSeriesEncoding[e];

	          if (_t20) {
	            var _r32 = o[e];
	            if (!_r32) throw new n("data series name ".concat(e, " not defined in file compression header"));
	            this.dataSeriesCodecCache[e] = i(_t20, _r32);
	          }
	        }

	        return this.dataSeriesCodecCache[e];
	      }
	    }, {
	      key: "toJSON",
	      value: function toJSON() {
	        var _this4 = this;

	        var e = {};
	        return Object.keys(this).forEach(function (t) {
	          /Cache$/.test(t) || (e[t] = _this4[t]);
	        }), e;
	      }
	    }]);

	    return _class4;
	  }();
	}, function (e, t, r) {
	  var _r33 = r(0),
	      n = _r33.CramUnimplementedError,
	      i = r(80),
	      o = r(81),
	      s = r(82),
	      a = r(83),
	      h = r(84),
	      f = r(85),
	      u = {
	    1: o,
	    3: i,
	    4: a,
	    5: s,
	    6: h,
	    7: r(86),
	    9: f
	  };

	  function c(e) {
	    return u[e];
	  }

	  e.exports = {
	    getCodecClassWithId: c,
	    instantiateCodec: function e(t, r) {
	      var i = c("ignore" === r ? 0 : t.codecId);
	      if (!i) throw new n("no codec implemented for codec ID ".concat(t.codecId));
	      return new i(t.parameters, r, e);
	    }
	  };
	}, function (e, t, r) {
	  var _r34 = r(0),
	      n = _r34.CramMalformedError,
	      i = r(6);

	  e.exports = /*#__PURE__*/function (_i7) {
	    _inherits(_class5, _i7);

	    var _super7 = _createSuper(_class5);

	    function _class5() {
	      var _this5;

	      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var t = arguments.length > 1 ? arguments[1] : undefined;

	      _classCallCheck(this, _class5);

	      if (_this5 = _super7.call(this, e, t), !["byte", "int"].includes(_this5.dataType)) throw new TypeError("".concat(_this5.dataType, " decoding not yet implemented by HUFFMAN_INT codec"));
	      _this5.buildCodeBook(), _this5.buildCodes(), _this5.buildCaches(), 0 === _this5.sortedCodes[0].bitLength && (_this5._decode = _this5._decodeZeroLengthCode);
	      return _possibleConstructorReturn(_this5);
	    }

	    _createClass(_class5, [{
	      key: "buildCodeBook",
	      value: function buildCodeBook() {
	        var _this6 = this;

	        var e = new Array(this.parameters.numCodes);

	        for (var _t21 = 0; _t21 < this.parameters.numCodes; _t21 += 1) {
	          e[_t21] = {
	            symbol: this.parameters.symbols[_t21],
	            bitLength: this.parameters.bitLengths[_t21]
	          };
	        }

	        e = e.sort(function (e, t) {
	          return e.bitLength - t.bitLength || e.symbol - t.symbol;
	        }), this.codeBook = {}, e.forEach(function (e) {
	          _this6.codeBook[e.bitLength] || (_this6.codeBook[e.bitLength] = []), _this6.codeBook[e.bitLength].push(e.symbol);
	        });
	      }
	    }, {
	      key: "buildCodes",
	      value: function buildCodes() {
	        var _this7 = this;

	        this.codes = {};
	        var e = 0,
	            t = -1;
	        Object.entries(this.codeBook).forEach(function (_ref6) {
	          var _ref7 = _slicedToArray(_ref6, 2),
	              r = _ref7[0],
	              i = _ref7[1];

	          r = parseInt(r, 10), i.forEach(function (i) {
	            var o = {
	              bitLength: r,
	              value: i
	            };
	            t += 1;
	            var s = r - e;
	            if (t <<= s, o.bitCode = t, e += s, function (e) {
	              var t = e - (e >> 1) & 1431655765;
	              return 16843009 * ((t = (858993459 & t) + (t >> 2 & 858993459)) + (t >> 4) & 252645135) >> 24;
	            }(t) > r) throw new n("Symbol out of range");
	            _this7.codes[i] = o;
	          });
	        });
	      }
	    }, {
	      key: "buildCaches",
	      value: function buildCaches() {
	        this.sortedCodes = Object.values(this.codes).sort(function (e, t) {
	          return e.bitLength - t.bitLength || e.bitCode - t.bitCode;
	        }), this.sortedByValue = Object.values(this.codes).sort(function (e, t) {
	          return e.value - t.value;
	        }), this.sortedValuesByBitCode = this.sortedCodes.map(function (e) {
	          return e.value;
	        }), this.sortedBitCodes = this.sortedCodes.map(function (e) {
	          return e.bitCode;
	        }), this.sortedBitLengthsByBitCode = this.sortedCodes.map(function (e) {
	          return e.bitLength;
	        });
	        var e = Math.max.apply(Math, _toConsumableArray(this.sortedBitCodes));
	        this.bitCodeToValue = new Array(e + 1).fill(-1);

	        for (var _e31 = 0; _e31 < this.sortedBitCodes.length; _e31 += 1) {
	          this.bitCodeToValue[this.sortedCodes[_e31].bitCode] = _e31;
	        }
	      }
	    }, {
	      key: "decode",
	      value: function decode(e, t, r, n) {
	        return this._decode(e, t, n.coreBlock);
	      }
	    }, {
	      key: "_decodeZeroLengthCode",
	      value: function _decodeZeroLengthCode() {
	        return this.sortedCodes[0].value;
	      }
	    }, {
	      key: "_decode",
	      value: function _decode(e, t, r) {
	        var i = t.content;
	        var o = 0,
	            s = 0;

	        for (var _e32 = 0; _e32 < this.sortedCodes.length; _e32 += 1) {
	          var _t22 = this.sortedCodes[_e32].bitLength;
	          s <<= _t22 - o, s |= this._getBits(i, r, _t22 - o), o = _t22;
	          {
	            var _r35 = this.bitCodeToValue[s];
	            if (_r35 > -1 && this.sortedBitLengthsByBitCode[_r35] === _t22) return this.sortedValuesByBitCode[_r35];

	            for (var _r36 = _e32; this.sortedCodes[_r36 + 1].bitLength === _t22 && _r36 < this.sortedCodes.length; _r36 += 1) {
	              _e32 += 1;
	            }
	          }
	        }

	        throw new n("Huffman symbol not found.");
	      }
	    }]);

	    return _class5;
	  }(i);
	}, function (e, t, r) {
	  var _r37 = r(0),
	      n = _r37.CramUnimplementedError,
	      i = _r37.CramMalformedError,
	      o = _r37.CramBufferOverrunError,
	      s = r(6),
	      _r38 = r(8),
	      a = _r38.parseItf8;

	  e.exports = /*#__PURE__*/function (_s7) {
	    _inherits(_class6, _s7);

	    var _super8 = _createSuper(_class6);

	    function _class6() {
	      var _this8;

	      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var t = arguments.length > 1 ? arguments[1] : undefined;

	      _classCallCheck(this, _class6);

	      if (_this8 = _super8.call(this, e, t), "int" === _this8.dataType) _this8._decodeData = _this8._decodeInt;else {
	        if ("byte" !== _this8.dataType) throw new n("".concat(_this8.dataType, " decoding not yet implemented by EXTERNAL codec"));
	        _this8._decodeData = _this8._decodeByte;
	      }
	      return _possibleConstructorReturn(_this8);
	    }

	    _createClass(_class6, [{
	      key: "decode",
	      value: function decode(e, t, r, n) {
	        var o = this.parameters.blockContentId,
	            s = r[o];
	        if (!s) throw new i("no block found with content ID ".concat(o));
	        var a = n.externalBlocks.getCursor(o);
	        return this._decodeData(s, a);
	      }
	    }, {
	      key: "_decodeInt",
	      value: function _decodeInt(e, t) {
	        var _a4 = a(e.content, t.bytePosition),
	            _a5 = _slicedToArray(_a4, 2),
	            r = _a5[0],
	            n = _a5[1];

	        return t.bytePosition += n, r;
	      }
	    }, {
	      key: "_decodeByte",
	      value: function _decodeByte(e, t) {
	        if (t.bytePosition >= e.content.length) throw new o("attempted to read beyond end of block. this file seems truncated.");
	        var r = e.content[t.bytePosition];
	        return t.bytePosition += 1, r;
	      }
	    }]);

	    return _class6;
	  }(s);
	}, function (e, t, r) {
	  var _r39 = r(0),
	      n = _r39.CramBufferOverrunError,
	      i = _r39.CramMalformedError,
	      o = r(6);

	  e.exports = /*#__PURE__*/function (_o5) {
	    _inherits(_class7, _o5);

	    var _super9 = _createSuper(_class7);

	    function _class7() {
	      var _this9;

	      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var t = arguments.length > 1 ? arguments[1] : undefined;

	      _classCallCheck(this, _class7);

	      if (_this9 = _super9.call(this, e, t), "byteArray" !== t) throw new TypeError("byteArrayStop codec does not support data type ".concat(t));
	      _this9._decode = _this9._decodeByteArray;
	      return _possibleConstructorReturn(_this9);
	    }

	    _createClass(_class7, [{
	      key: "decode",
	      value: function decode(e, t, r, n) {
	        var o = this.parameters.blockContentId,
	            s = r[o];
	        if (!s) throw new i("no block found with content ID ".concat(o));
	        var a = n.externalBlocks.getCursor(o);
	        return this._decode(s, a);
	      }
	    }, {
	      key: "_decodeByteArray",
	      value: function _decodeByteArray(e, t) {
	        var r = e.content,
	            i = this.parameters.stopByte,
	            o = t.bytePosition;
	        var s = t.bytePosition;

	        for (; r[s] !== i && s < r.length;) {
	          if (s === r.length) throw new n("byteArrayStop reading beyond length of data buffer?");
	          s += 1;
	        }

	        return t.bytePosition = s + 1, r.slice(o, s);
	      }
	    }]);

	    return _class7;
	  }(o);
	}, function (e, t, r) {
	  var _r40 = r(8),
	      n = _r40.tinyMemoize,
	      i = r(6);

	  var o = /*#__PURE__*/function (_i8) {
	    _inherits(o, _i8);

	    var _super10 = _createSuper(o);

	    function o() {
	      var _this10;

	      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var t = arguments.length > 1 ? arguments[1] : undefined;
	      var r = arguments.length > 2 ? arguments[2] : undefined;

	      _classCallCheck(this, o);

	      if (_this10 = _super10.call(this, e, t), _this10.instantiateCodec = r, "byteArray" !== t) throw new TypeError("byteArrayLength does not support data type ".concat(t));
	      return _possibleConstructorReturn(_this10);
	    }

	    _createClass(o, [{
	      key: "decode",
	      value: function decode(e, t, r, n) {
	        var i = this._getLengthCodec().decode(e, t, r, n),
	            o = this._getDataCodec(),
	            s = new Array(i);

	        for (var a = 0; a < i; a += 1) {
	          s[a] = o.decode(e, t, r, n);
	        }

	        return s;
	      }
	    }, {
	      key: "_getLengthCodec",
	      value: function _getLengthCodec() {
	        var e = this.parameters.lengthsEncoding;
	        return this.instantiateCodec(e, "int");
	      }
	    }, {
	      key: "_getDataCodec",
	      value: function _getDataCodec() {
	        var e = this.parameters.valuesEncoding;
	        return this.instantiateCodec(e, "byte");
	      }
	    }]);

	    return o;
	  }(i);

	  "_getLengthCodec _getDataCodec".split(" ").forEach(function (e) {
	    return n(o, e);
	  }), e.exports = o;
	}, function (e, t, r) {
	  var _r41 = r(0),
	      n = _r41.CramUnimplementedError,
	      i = r(6);

	  e.exports = /*#__PURE__*/function (_i9) {
	    _inherits(_class8, _i9);

	    var _super11 = _createSuper(_class8);

	    function _class8() {
	      var _this11;

	      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var t = arguments.length > 1 ? arguments[1] : undefined;

	      _classCallCheck(this, _class8);

	      if (_this11 = _super11.call(this, e, t), "int" !== _this11.dataType) throw new n("".concat(_this11.dataType, " decoding not yet implemented by BETA codec"));
	      return _possibleConstructorReturn(_this11);
	    }

	    _createClass(_class8, [{
	      key: "decode",
	      value: function decode(e, t, r, n) {
	        return this._getBits(t.content, n.coreBlock, this.parameters.length) - this.parameters.offset;
	      }
	    }]);

	    return _class8;
	  }(i);
	}, function (e, t, r) {
	  var _r42 = r(0),
	      n = _r42.CramUnimplementedError,
	      i = r(6);

	  e.exports = /*#__PURE__*/function (_i10) {
	    _inherits(_class9, _i10);

	    var _super12 = _createSuper(_class9);

	    function _class9() {
	      var _this12;

	      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var t = arguments.length > 1 ? arguments[1] : undefined;

	      _classCallCheck(this, _class9);

	      if (_this12 = _super12.call(this, e, t), "int" !== _this12.dataType) throw new n("".concat(_this12.dataType, " decoding not yet implemented by GAMMA codec"));
	      return _possibleConstructorReturn(_this12);
	    }

	    _createClass(_class9, [{
	      key: "decode",
	      value: function decode(e, t, r, n) {
	        var i = 1;

	        for (; 0 === this._getBits(t.content, n.coreBlock, 1);) {
	          i += 1;
	        }

	        return (this._getBits(t.content, n.coreBlock, i - 1) | 1 << i - 1) - this.parameters.offset;
	      }
	    }]);

	    return _class9;
	  }(i);
	}, function (e, t, r) {
	  var _r43 = r(0),
	      n = _r43.CramUnimplementedError,
	      i = r(6);

	  e.exports = /*#__PURE__*/function (_i11) {
	    _inherits(_class10, _i11);

	    var _super13 = _createSuper(_class10);

	    function _class10() {
	      var _this13;

	      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var t = arguments.length > 1 ? arguments[1] : undefined;

	      _classCallCheck(this, _class10);

	      if (_this13 = _super13.call(this, e, t), "int" !== _this13.dataType) throw new n("".concat(_this13.dataType, " decoding not yet implemented by SUBEXP codec"));
	      return _possibleConstructorReturn(_this13);
	    }

	    _createClass(_class10, [{
	      key: "decode",
	      value: function decode(e, t, r, n) {
	        var i,
	            o,
	            s = 0;

	        for (; this._getBits(t.content, n.coreBlock, 1);) {
	          s += 1;
	        }

	        return 0 === s ? (i = this.parameters.K, o = this._getBits(t.content, n.coreBlock, i)) : o = 1 << (i = s + this.parameters.K - 1) | this._getBits(t.content, n.coreBlock, i), o - this.parameters.offset;
	      }
	    }]);

	    return _class10;
	  }(i);
	}, function (e, t, r) {

	  var n = r(88),
	      i = r(90);

	  function o() {
	    this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
	  }

	  t.parse = b, t.resolve = function (e, t) {
	    return b(e, !1, !0).resolve(t);
	  }, t.resolveObject = function (e, t) {
	    return e ? b(e, !1, !0).resolveObject(t) : t;
	  }, t.format = function (e) {
	    i.isString(e) && (e = b(e));
	    return e instanceof o ? e.format() : o.prototype.format.call(e);
	  }, t.Url = o;
	  var s = /^([a-z0-9.+-]+:)/i,
	      a = /:[0-9]*$/,
	      h = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
	      f = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "\t"]),
	      u = ["'"].concat(f),
	      c = ["%", "/", "?", ";", "#"].concat(u),
	      l = ["/", "?", "#"],
	      d = /^[+a-z0-9A-Z_-]{0,63}$/,
	      p = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	      g = {
	    javascript: !0,
	    "javascript:": !0
	  },
	      m = {
	    javascript: !0,
	    "javascript:": !0
	  },
	      _ = {
	    http: !0,
	    https: !0,
	    ftp: !0,
	    gopher: !0,
	    file: !0,
	    "http:": !0,
	    "https:": !0,
	    "ftp:": !0,
	    "gopher:": !0,
	    "file:": !0
	  },
	      y = r(91);

	  function b(e, t, r) {
	    if (e && i.isObject(e) && e instanceof o) return e;
	    var n = new o();
	    return n.parse(e, t, r), n;
	  }

	  o.prototype.parse = function (e, t, r) {
	    if (!i.isString(e)) throw new TypeError("Parameter 'url' must be a string, not " + _typeof(e));
	    var o = e.indexOf("?"),
	        a = -1 !== o && o < e.indexOf("#") ? "?" : "#",
	        f = e.split(a);
	    f[0] = f[0].replace(/\\/g, "/");
	    var b = e = f.join(a);

	    if (b = b.trim(), !r && 1 === e.split("#").length) {
	      var w = h.exec(b);
	      if (w) return this.path = b, this.href = b, this.pathname = w[1], w[2] ? (this.search = w[2], this.query = t ? y.parse(this.search.substr(1)) : this.search.substr(1)) : t && (this.search = "", this.query = {}), this;
	    }

	    var v = s.exec(b);

	    if (v) {
	      var E = (v = v[0]).toLowerCase();
	      this.protocol = E, b = b.substr(v.length);
	    }

	    if (r || v || b.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	      var S = "//" === b.substr(0, 2);
	      !S || v && m[v] || (b = b.substr(2), this.slashes = !0);
	    }

	    if (!m[v] && (S || v && !_[v])) {
	      for (var A, k, x = -1, C = 0; C < l.length; C++) {
	        -1 !== (R = b.indexOf(l[C])) && (-1 === x || R < x) && (x = R);
	      }

	      -1 !== (k = -1 === x ? b.lastIndexOf("@") : b.lastIndexOf("@", x)) && (A = b.slice(0, k), b = b.slice(k + 1), this.auth = decodeURIComponent(A)), x = -1;

	      for (C = 0; C < c.length; C++) {
	        var R;
	        -1 !== (R = b.indexOf(c[C])) && (-1 === x || R < x) && (x = R);
	      }

	      -1 === x && (x = b.length), this.host = b.slice(0, x), b = b.slice(x), this.parseHost(), this.hostname = this.hostname || "";
	      var T = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
	      if (!T) for (var I = this.hostname.split(/\./), B = (C = 0, I.length); C < B; C++) {
	        var L = I[C];

	        if (L && !L.match(d)) {
	          for (var N = "", F = 0, M = L.length; F < M; F++) {
	            L.charCodeAt(F) > 127 ? N += "x" : N += L[F];
	          }

	          if (!N.match(d)) {
	            var O = I.slice(0, C),
	                P = I.slice(C + 1),
	                U = L.match(p);
	            U && (O.push(U[1]), P.unshift(U[2])), P.length && (b = "/" + P.join(".") + b), this.hostname = O.join(".");
	            break;
	          }
	        }
	      }
	      this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), T || (this.hostname = n.toASCII(this.hostname));
	      var z = this.port ? ":" + this.port : "",
	          D = this.hostname || "";
	      this.host = D + z, this.href += this.host, T && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== b[0] && (b = "/" + b));
	    }

	    if (!g[E]) for (C = 0, B = u.length; C < B; C++) {
	      var j = u[C];

	      if (-1 !== b.indexOf(j)) {
	        var q = encodeURIComponent(j);
	        q === j && (q = escape(j)), b = b.split(j).join(q);
	      }
	    }
	    var Z = b.indexOf("#");
	    -1 !== Z && (this.hash = b.substr(Z), b = b.slice(0, Z));
	    var H = b.indexOf("?");

	    if (-1 !== H ? (this.search = b.substr(H), this.query = b.substr(H + 1), t && (this.query = y.parse(this.query)), b = b.slice(0, H)) : t && (this.search = "", this.query = {}), b && (this.pathname = b), _[E] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
	      z = this.pathname || "";
	      var $ = this.search || "";
	      this.path = z + $;
	    }

	    return this.href = this.format(), this;
	  }, o.prototype.format = function () {
	    var e = this.auth || "";
	    e && (e = (e = encodeURIComponent(e)).replace(/%3A/i, ":"), e += "@");
	    var t = this.protocol || "",
	        r = this.pathname || "",
	        n = this.hash || "",
	        o = !1,
	        s = "";
	    this.host ? o = e + this.host : this.hostname && (o = e + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), this.port && (o += ":" + this.port)), this.query && i.isObject(this.query) && Object.keys(this.query).length && (s = y.stringify(this.query));
	    var a = this.search || s && "?" + s || "";
	    return t && ":" !== t.substr(-1) && (t += ":"), this.slashes || (!t || _[t]) && !1 !== o ? (o = "//" + (o || ""), r && "/" !== r.charAt(0) && (r = "/" + r)) : o || (o = ""), n && "#" !== n.charAt(0) && (n = "#" + n), a && "?" !== a.charAt(0) && (a = "?" + a), t + o + (r = r.replace(/[?#]/g, function (e) {
	      return encodeURIComponent(e);
	    })) + (a = a.replace("#", "%23")) + n;
	  }, o.prototype.resolve = function (e) {
	    return this.resolveObject(b(e, !1, !0)).format();
	  }, o.prototype.resolveObject = function (e) {
	    if (i.isString(e)) {
	      var t = new o();
	      t.parse(e, !1, !0), e = t;
	    }

	    for (var r = new o(), n = Object.keys(this), s = 0; s < n.length; s++) {
	      var a = n[s];
	      r[a] = this[a];
	    }

	    if (r.hash = e.hash, "" === e.href) return r.href = r.format(), r;

	    if (e.slashes && !e.protocol) {
	      for (var h = Object.keys(e), f = 0; f < h.length; f++) {
	        var u = h[f];
	        "protocol" !== u && (r[u] = e[u]);
	      }

	      return _[r.protocol] && r.hostname && !r.pathname && (r.path = r.pathname = "/"), r.href = r.format(), r;
	    }

	    if (e.protocol && e.protocol !== r.protocol) {
	      if (!_[e.protocol]) {
	        for (var c = Object.keys(e), l = 0; l < c.length; l++) {
	          var d = c[l];
	          r[d] = e[d];
	        }

	        return r.href = r.format(), r;
	      }

	      if (r.protocol = e.protocol, e.host || m[e.protocol]) r.pathname = e.pathname;else {
	        for (var p = (e.pathname || "").split("/"); p.length && !(e.host = p.shift());) {
	        }

	        e.host || (e.host = ""), e.hostname || (e.hostname = ""), "" !== p[0] && p.unshift(""), p.length < 2 && p.unshift(""), r.pathname = p.join("/");
	      }

	      if (r.search = e.search, r.query = e.query, r.host = e.host || "", r.auth = e.auth, r.hostname = e.hostname || e.host, r.port = e.port, r.pathname || r.search) {
	        var g = r.pathname || "",
	            y = r.search || "";
	        r.path = g + y;
	      }

	      return r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
	    }

	    var b = r.pathname && "/" === r.pathname.charAt(0),
	        w = e.host || e.pathname && "/" === e.pathname.charAt(0),
	        v = w || b || r.host && e.pathname,
	        E = v,
	        S = r.pathname && r.pathname.split("/") || [],
	        A = (p = e.pathname && e.pathname.split("/") || [], r.protocol && !_[r.protocol]);
	    if (A && (r.hostname = "", r.port = null, r.host && ("" === S[0] ? S[0] = r.host : S.unshift(r.host)), r.host = "", e.protocol && (e.hostname = null, e.port = null, e.host && ("" === p[0] ? p[0] = e.host : p.unshift(e.host)), e.host = null), v = v && ("" === p[0] || "" === S[0])), w) r.host = e.host || "" === e.host ? e.host : r.host, r.hostname = e.hostname || "" === e.hostname ? e.hostname : r.hostname, r.search = e.search, r.query = e.query, S = p;else if (p.length) S || (S = []), S.pop(), S = S.concat(p), r.search = e.search, r.query = e.query;else if (!i.isNullOrUndefined(e.search)) {
	      if (A) r.hostname = r.host = S.shift(), (T = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = T.shift(), r.host = r.hostname = T.shift());
	      return r.search = e.search, r.query = e.query, i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.href = r.format(), r;
	    }
	    if (!S.length) return r.pathname = null, r.search ? r.path = "/" + r.search : r.path = null, r.href = r.format(), r;

	    for (var k = S.slice(-1)[0], x = (r.host || e.host || S.length > 1) && ("." === k || ".." === k) || "" === k, C = 0, R = S.length; R >= 0; R--) {
	      "." === (k = S[R]) ? S.splice(R, 1) : ".." === k ? (S.splice(R, 1), C++) : C && (S.splice(R, 1), C--);
	    }

	    if (!v && !E) for (; C--; C) {
	      S.unshift("..");
	    }
	    !v || "" === S[0] || S[0] && "/" === S[0].charAt(0) || S.unshift(""), x && "/" !== S.join("/").substr(-1) && S.push("");
	    var T,
	        I = "" === S[0] || S[0] && "/" === S[0].charAt(0);
	    A && (r.hostname = r.host = I ? "" : S.length ? S.shift() : "", (T = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = T.shift(), r.host = r.hostname = T.shift()));
	    return (v = v || r.host && S.length) && !I && S.unshift(""), S.length ? r.pathname = S.join("/") : (r.pathname = null, r.path = null), i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.auth = e.auth || r.auth, r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
	  }, o.prototype.parseHost = function () {
	    var e = this.host,
	        t = a.exec(e);
	    t && (":" !== (t = t[0]) && (this.port = t.substr(1)), e = e.substr(0, e.length - t.length)), e && (this.hostname = e);
	  };
	}, function (e, t, r) {
	  (function (e, n) {
	    var i;
	    /*! https://mths.be/punycode v1.4.1 by @mathias */

	    !function (o) {
	      t && t.nodeType, e && e.nodeType;
	      var s = "object" == _typeof(n) && n;
	      s.global !== s && s.window !== s && s.self;
	      var a,
	          h = 2147483647,
	          f = 36,
	          u = 1,
	          c = 26,
	          l = 38,
	          d = 700,
	          p = 72,
	          g = 128,
	          m = "-",
	          _ = /^xn--/,
	          y = /[^\x20-\x7E]/,
	          b = /[\x2E\u3002\uFF0E\uFF61]/g,
	          w = {
	        overflow: "Overflow: input needs wider integers to process",
	        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
	        "invalid-input": "Invalid input"
	      },
	          v = f - u,
	          E = Math.floor,
	          S = String.fromCharCode;

	      function A(e) {
	        throw new RangeError(w[e]);
	      }

	      function k(e, t) {
	        for (var r = e.length, n = []; r--;) {
	          n[r] = t(e[r]);
	        }

	        return n;
	      }

	      function x(e, t) {
	        var r = e.split("@"),
	            n = "";
	        return r.length > 1 && (n = r[0] + "@", e = r[1]), n + k((e = e.replace(b, ".")).split("."), t).join(".");
	      }

	      function C(e) {
	        for (var t, r, n = [], i = 0, o = e.length; i < o;) {
	          (t = e.charCodeAt(i++)) >= 55296 && t <= 56319 && i < o ? 56320 == (64512 & (r = e.charCodeAt(i++))) ? n.push(((1023 & t) << 10) + (1023 & r) + 65536) : (n.push(t), i--) : n.push(t);
	        }

	        return n;
	      }

	      function R(e) {
	        return k(e, function (e) {
	          var t = "";
	          return e > 65535 && (t += S((e -= 65536) >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), t += S(e);
	        }).join("");
	      }

	      function T(e, t) {
	        return e + 22 + 75 * (e < 26) - ((0 != t) << 5);
	      }

	      function I(e, t, r) {
	        var n = 0;

	        for (e = r ? E(e / d) : e >> 1, e += E(e / t); e > v * c >> 1; n += f) {
	          e = E(e / v);
	        }

	        return E(n + (v + 1) * e / (e + l));
	      }

	      function B(e) {
	        var t,
	            r,
	            n,
	            i,
	            o,
	            s,
	            a,
	            l,
	            d,
	            _,
	            y,
	            b = [],
	            w = e.length,
	            v = 0,
	            S = g,
	            k = p;

	        for ((r = e.lastIndexOf(m)) < 0 && (r = 0), n = 0; n < r; ++n) {
	          e.charCodeAt(n) >= 128 && A("not-basic"), b.push(e.charCodeAt(n));
	        }

	        for (i = r > 0 ? r + 1 : 0; i < w;) {
	          for (o = v, s = 1, a = f; i >= w && A("invalid-input"), ((l = (y = e.charCodeAt(i++)) - 48 < 10 ? y - 22 : y - 65 < 26 ? y - 65 : y - 97 < 26 ? y - 97 : f) >= f || l > E((h - v) / s)) && A("overflow"), v += l * s, !(l < (d = a <= k ? u : a >= k + c ? c : a - k)); a += f) {
	            s > E(h / (_ = f - d)) && A("overflow"), s *= _;
	          }

	          k = I(v - o, t = b.length + 1, 0 == o), E(v / t) > h - S && A("overflow"), S += E(v / t), v %= t, b.splice(v++, 0, S);
	        }

	        return R(b);
	      }

	      function L(e) {
	        var t,
	            r,
	            n,
	            i,
	            o,
	            s,
	            a,
	            l,
	            d,
	            _,
	            y,
	            b,
	            w,
	            v,
	            k,
	            x = [];

	        for (b = (e = C(e)).length, t = g, r = 0, o = p, s = 0; s < b; ++s) {
	          (y = e[s]) < 128 && x.push(S(y));
	        }

	        for (n = i = x.length, i && x.push(m); n < b;) {
	          for (a = h, s = 0; s < b; ++s) {
	            (y = e[s]) >= t && y < a && (a = y);
	          }

	          for (a - t > E((h - r) / (w = n + 1)) && A("overflow"), r += (a - t) * w, t = a, s = 0; s < b; ++s) {
	            if ((y = e[s]) < t && ++r > h && A("overflow"), y == t) {
	              for (l = r, d = f; !(l < (_ = d <= o ? u : d >= o + c ? c : d - o)); d += f) {
	                k = l - _, v = f - _, x.push(S(T(_ + k % v, 0))), l = E(k / v);
	              }

	              x.push(S(T(l, 0))), o = I(r, w, n == i), r = 0, ++n;
	            }
	          }

	          ++r, ++t;
	        }

	        return x.join("");
	      }

	      a = {
	        version: "1.4.1",
	        ucs2: {
	          decode: C,
	          encode: R
	        },
	        decode: B,
	        encode: L,
	        toASCII: function toASCII(e) {
	          return x(e, function (e) {
	            return y.test(e) ? "xn--" + L(e) : e;
	          });
	        },
	        toUnicode: function toUnicode(e) {
	          return x(e, function (e) {
	            return _.test(e) ? B(e.slice(4).toLowerCase()) : e;
	          });
	        }
	      }, void 0 === (i = function () {
	        return a;
	      }.call(t, r, t, e)) || (e.exports = i);
	    }();
	  }).call(this, r(89)(e), r(2));
	}, function (e, t) {
	  e.exports = function (e) {
	    return e.webpackPolyfill || (e.deprecate = function () {}, e.paths = [], e.children || (e.children = []), Object.defineProperty(e, "loaded", {
	      enumerable: !0,
	      get: function get() {
	        return e.l;
	      }
	    }), Object.defineProperty(e, "id", {
	      enumerable: !0,
	      get: function get() {
	        return e.i;
	      }
	    }), e.webpackPolyfill = 1), e;
	  };
	}, function (e, t, r) {

	  e.exports = {
	    isString: function isString(e) {
	      return "string" == typeof e;
	    },
	    isObject: function isObject(e) {
	      return "object" == _typeof(e) && null !== e;
	    },
	    isNull: function isNull(e) {
	      return null === e;
	    },
	    isNullOrUndefined: function isNullOrUndefined(e) {
	      return null == e;
	    }
	  };
	}, function (e, t, r) {

	  t.decode = t.parse = r(92), t.encode = t.stringify = r(93);
	}, function (e, t, r) {

	  function n(e, t) {
	    return Object.prototype.hasOwnProperty.call(e, t);
	  }

	  e.exports = function (e, t, r, o) {
	    t = t || "&", r = r || "=";
	    var s = {};
	    if ("string" != typeof e || 0 === e.length) return s;
	    var a = /\+/g;
	    e = e.split(t);
	    var h = 1e3;
	    o && "number" == typeof o.maxKeys && (h = o.maxKeys);
	    var f = e.length;
	    h > 0 && f > h && (f = h);

	    for (var u = 0; u < f; ++u) {
	      var c,
	          l,
	          d,
	          p,
	          g = e[u].replace(a, "%20"),
	          m = g.indexOf(r);
	      m >= 0 ? (c = g.substr(0, m), l = g.substr(m + 1)) : (c = g, l = ""), d = decodeURIComponent(c), p = decodeURIComponent(l), n(s, d) ? i(s[d]) ? s[d].push(p) : s[d] = [s[d], p] : s[d] = p;
	    }

	    return s;
	  };

	  var i = Array.isArray || function (e) {
	    return "[object Array]" === Object.prototype.toString.call(e);
	  };
	}, function (e, t, r) {

	  var n = function n(e) {
	    switch (_typeof(e)) {
	      case "string":
	        return e;

	      case "boolean":
	        return e ? "true" : "false";

	      case "number":
	        return isFinite(e) ? e : "";

	      default:
	        return "";
	    }
	  };

	  e.exports = function (e, t, r, a) {
	    return t = t || "&", r = r || "=", null === e && (e = void 0), "object" == _typeof(e) ? o(s(e), function (s) {
	      var a = encodeURIComponent(n(s)) + r;
	      return i(e[s]) ? o(e[s], function (e) {
	        return a + encodeURIComponent(n(e));
	      }).join(t) : a + encodeURIComponent(n(e[s]));
	    }).join(t) : a ? encodeURIComponent(n(a)) + r + encodeURIComponent(n(e)) : "";
	  };

	  var i = Array.isArray || function (e) {
	    return "[object Array]" === Object.prototype.toString.call(e);
	  };

	  function o(e, t) {
	    if (e.map) return e.map(t);

	    for (var r = [], n = 0; n < e.length; n++) {
	      r.push(t(e[n], n));
	    }

	    return r;
	  }

	  var s = Object.keys || function (e) {
	    var t = [];

	    for (var r in e) {
	      Object.prototype.hasOwnProperty.call(e, r) && t.push(r);
	    }

	    return t;
	  };
	}, function (e, t, r) {
	  (function (t) {
	    var n = r(95),
	        i = r(96);

	    e.exports = /*#__PURE__*/function () {
	      function _class11(e) {
	        var _this14 = this;

	        _classCallCheck(this, _class11);

	        this.position = 0, this.url = e, this.cache = new i({
	          fetch: function fetch(e, t) {
	            return _this14._fetch(e, t);
	          }
	        });
	      }

	      _createClass(_class11, [{
	        key: "_fetch",
	        value: function () {
	          var _fetch2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(e, r) {
	            var i, o, _e33, _r44;

	            return regeneratorRuntime.wrap(function _callee23$(_context26) {
	              while (1) {
	                switch (_context26.prev = _context26.next) {
	                  case 0:
	                    i = {};
	                    r < 1 / 0 ? i.range = "bytes=".concat(e, "-").concat(e + r) : r === 1 / 0 && 0 !== e && (i.range = "bytes=".concat(e, "-"));
	                    _context26.next = 4;
	                    return n(this.url, {
	                      method: "GET",
	                      headers: i,
	                      redirect: "follow",
	                      mode: "cors"
	                    });

	                  case 4:
	                    o = _context26.sent;

	                    if (!(200 === o.status && 0 === e || 206 === o.status)) {
	                      _context26.next = 13;
	                      break;
	                    }

	                    _context26.t0 = t;
	                    _context26.next = 9;
	                    return o.arrayBuffer();

	                  case 9:
	                    _context26.t1 = _context26.sent;
	                    _e33 = _context26.t0.from.call(_context26.t0, _context26.t1);
	                    _r44 = /\/(\d+)$/.exec(o.headers.get("content-range"));
	                    return _context26.abrupt("return", (_r44 && _r44[1] ? this._stat = {
	                      size: parseInt(_r44[1], 10)
	                    } : this._stat = {
	                      size: void 0
	                    }, _e33));

	                  case 13:
	                    throw new Error("HTTP ".concat(o.status, " fetching ").concat(this.url));

	                  case 14:
	                  case "end":
	                    return _context26.stop();
	                }
	              }
	            }, _callee23, this);
	          }));

	          function _fetch(_x14, _x15) {
	            return _fetch2.apply(this, arguments);
	          }

	          return _fetch;
	        }()
	      }, {
	        key: "read",
	        value: function read(e) {
	          var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	          var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1 / 0;
	          var n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
	          var i = n;
	          return null === n && (i = this.position, this.position += r), this.cache.get(e, t, r, n);
	        }
	      }, {
	        key: "readFile",
	        value: function () {
	          var _readFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {
	            var e;
	            return regeneratorRuntime.wrap(function _callee24$(_context27) {
	              while (1) {
	                switch (_context27.prev = _context27.next) {
	                  case 0:
	                    _context27.next = 2;
	                    return n(this.url, {
	                      method: "GET",
	                      redirect: "follow",
	                      mode: "cors"
	                    });

	                  case 2:
	                    e = _context27.sent;
	                    _context27.t0 = t;
	                    _context27.next = 6;
	                    return e.arrayBuffer();

	                  case 6:
	                    _context27.t1 = _context27.sent;
	                    return _context27.abrupt("return", _context27.t0.from.call(_context27.t0, _context27.t1));

	                  case 8:
	                  case "end":
	                    return _context27.stop();
	                }
	              }
	            }, _callee24, this);
	          }));

	          function readFile() {
	            return _readFile.apply(this, arguments);
	          }

	          return readFile;
	        }()
	      }, {
	        key: "stat",
	        value: function () {
	          var _stat = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
	            var _e34;

	            return regeneratorRuntime.wrap(function _callee25$(_context28) {
	              while (1) {
	                switch (_context28.prev = _context28.next) {
	                  case 0:
	                    if (this._stat) {
	                      _context28.next = 6;
	                      break;
	                    }

	                    _e34 = t.allocUnsafe(10);
	                    _context28.next = 4;
	                    return this.read(_e34, 0, 10, 0);

	                  case 4:
	                    if (this._stat) {
	                      _context28.next = 6;
	                      break;
	                    }

	                    throw new Error("unable to determine size of file at ".concat(this.url));

	                  case 6:
	                    return _context28.abrupt("return", this._stat);

	                  case 7:
	                  case "end":
	                    return _context28.stop();
	                }
	              }
	            }, _callee25, this);
	          }));

	          function stat() {
	            return _stat.apply(this, arguments);
	          }

	          return stat;
	        }()
	      }]);

	      return _class11;
	    }();
	  }).call(this, r(1).Buffer);
	}, function (e, t) {
	  var r = function (e) {
	    function t() {
	      this.fetch = !1;
	    }

	    return t.prototype = e, new t();
	  }("undefined" != typeof self ? self : this);

	  !function (e) {
	    !function (t) {
	      var r = {
	        searchParams: "URLSearchParams" in e,
	        iterable: "Symbol" in e && "iterator" in Symbol,
	        blob: "FileReader" in e && "Blob" in e && function () {
	          try {
	            return new Blob(), !0;
	          } catch (e) {
	            return !1;
	          }
	        }(),
	        formData: "FormData" in e,
	        arrayBuffer: "ArrayBuffer" in e
	      };
	      if (r.arrayBuffer) var n = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"],
	          i = ArrayBuffer.isView || function (e) {
	        return e && n.indexOf(Object.prototype.toString.call(e)) > -1;
	      };

	      function o(e) {
	        if ("string" != typeof e && (e = String(e)), /[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e)) throw new TypeError("Invalid character in header field name");
	        return e.toLowerCase();
	      }

	      function s(e) {
	        return "string" != typeof e && (e = String(e)), e;
	      }

	      function a(e) {
	        var t = {
	          next: function next() {
	            var t = e.shift();
	            return {
	              done: void 0 === t,
	              value: t
	            };
	          }
	        };
	        return r.iterable && (t[Symbol.iterator] = function () {
	          return t;
	        }), t;
	      }

	      function h(e) {
	        this.map = {}, e instanceof h ? e.forEach(function (e, t) {
	          this.append(t, e);
	        }, this) : Array.isArray(e) ? e.forEach(function (e) {
	          this.append(e[0], e[1]);
	        }, this) : e && Object.getOwnPropertyNames(e).forEach(function (t) {
	          this.append(t, e[t]);
	        }, this);
	      }

	      function f(e) {
	        if (e.bodyUsed) return Promise.reject(new TypeError("Already read"));
	        e.bodyUsed = !0;
	      }

	      function u(e) {
	        return new Promise(function (t, r) {
	          e.onload = function () {
	            t(e.result);
	          }, e.onerror = function () {
	            r(e.error);
	          };
	        });
	      }

	      function c(e) {
	        var t = new FileReader(),
	            r = u(t);
	        return t.readAsArrayBuffer(e), r;
	      }

	      function l(e) {
	        if (e.slice) return e.slice(0);
	        var t = new Uint8Array(e.byteLength);
	        return t.set(new Uint8Array(e)), t.buffer;
	      }

	      function d() {
	        return this.bodyUsed = !1, this._initBody = function (e) {
	          var t;
	          this._bodyInit = e, e ? "string" == typeof e ? this._bodyText = e : r.blob && Blob.prototype.isPrototypeOf(e) ? this._bodyBlob = e : r.formData && FormData.prototype.isPrototypeOf(e) ? this._bodyFormData = e : r.searchParams && URLSearchParams.prototype.isPrototypeOf(e) ? this._bodyText = e.toString() : r.arrayBuffer && r.blob && (t = e) && DataView.prototype.isPrototypeOf(t) ? (this._bodyArrayBuffer = l(e.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer])) : r.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(e) || i(e)) ? this._bodyArrayBuffer = l(e) : this._bodyText = e = Object.prototype.toString.call(e) : this._bodyText = "", this.headers.get("content-type") || ("string" == typeof e ? this.headers.set("content-type", "text/plain;charset=UTF-8") : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : r.searchParams && URLSearchParams.prototype.isPrototypeOf(e) && this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"));
	        }, r.blob && (this.blob = function () {
	          var e = f(this);
	          if (e) return e;
	          if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
	          if (this._bodyArrayBuffer) return Promise.resolve(new Blob([this._bodyArrayBuffer]));
	          if (this._bodyFormData) throw new Error("could not read FormData body as blob");
	          return Promise.resolve(new Blob([this._bodyText]));
	        }, this.arrayBuffer = function () {
	          return this._bodyArrayBuffer ? f(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(c);
	        }), this.text = function () {
	          var e,
	              t,
	              r,
	              n = f(this);
	          if (n) return n;
	          if (this._bodyBlob) return e = this._bodyBlob, t = new FileReader(), r = u(t), t.readAsText(e), r;
	          if (this._bodyArrayBuffer) return Promise.resolve(function (e) {
	            for (var t = new Uint8Array(e), r = new Array(t.length), n = 0; n < t.length; n++) {
	              r[n] = String.fromCharCode(t[n]);
	            }

	            return r.join("");
	          }(this._bodyArrayBuffer));
	          if (this._bodyFormData) throw new Error("could not read FormData body as text");
	          return Promise.resolve(this._bodyText);
	        }, r.formData && (this.formData = function () {
	          return this.text().then(m);
	        }), this.json = function () {
	          return this.text().then(JSON.parse);
	        }, this;
	      }

	      h.prototype.append = function (e, t) {
	        e = o(e), t = s(t);
	        var r = this.map[e];
	        this.map[e] = r ? r + ", " + t : t;
	      }, h.prototype.delete = function (e) {
	        delete this.map[o(e)];
	      }, h.prototype.get = function (e) {
	        return e = o(e), this.has(e) ? this.map[e] : null;
	      }, h.prototype.has = function (e) {
	        return this.map.hasOwnProperty(o(e));
	      }, h.prototype.set = function (e, t) {
	        this.map[o(e)] = s(t);
	      }, h.prototype.forEach = function (e, t) {
	        for (var r in this.map) {
	          this.map.hasOwnProperty(r) && e.call(t, this.map[r], r, this);
	        }
	      }, h.prototype.keys = function () {
	        var e = [];
	        return this.forEach(function (t, r) {
	          e.push(r);
	        }), a(e);
	      }, h.prototype.values = function () {
	        var e = [];
	        return this.forEach(function (t) {
	          e.push(t);
	        }), a(e);
	      }, h.prototype.entries = function () {
	        var e = [];
	        return this.forEach(function (t, r) {
	          e.push([r, t]);
	        }), a(e);
	      }, r.iterable && (h.prototype[Symbol.iterator] = h.prototype.entries);
	      var p = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];

	      function g(e, t) {
	        var r,
	            n,
	            i = (t = t || {}).body;

	        if (e instanceof g) {
	          if (e.bodyUsed) throw new TypeError("Already read");
	          this.url = e.url, this.credentials = e.credentials, t.headers || (this.headers = new h(e.headers)), this.method = e.method, this.mode = e.mode, this.signal = e.signal, i || null == e._bodyInit || (i = e._bodyInit, e.bodyUsed = !0);
	        } else this.url = String(e);

	        if (this.credentials = t.credentials || this.credentials || "same-origin", !t.headers && this.headers || (this.headers = new h(t.headers)), this.method = (r = t.method || this.method || "GET", n = r.toUpperCase(), p.indexOf(n) > -1 ? n : r), this.mode = t.mode || this.mode || null, this.signal = t.signal || this.signal, this.referrer = null, ("GET" === this.method || "HEAD" === this.method) && i) throw new TypeError("Body not allowed for GET or HEAD requests");

	        this._initBody(i);
	      }

	      function m(e) {
	        var t = new FormData();
	        return e.trim().split("&").forEach(function (e) {
	          if (e) {
	            var r = e.split("="),
	                n = r.shift().replace(/\+/g, " "),
	                i = r.join("=").replace(/\+/g, " ");
	            t.append(decodeURIComponent(n), decodeURIComponent(i));
	          }
	        }), t;
	      }

	      function _(e, t) {
	        t || (t = {}), this.type = "default", this.status = void 0 === t.status ? 200 : t.status, this.ok = this.status >= 200 && this.status < 300, this.statusText = "statusText" in t ? t.statusText : "OK", this.headers = new h(t.headers), this.url = t.url || "", this._initBody(e);
	      }

	      g.prototype.clone = function () {
	        return new g(this, {
	          body: this._bodyInit
	        });
	      }, d.call(g.prototype), d.call(_.prototype), _.prototype.clone = function () {
	        return new _(this._bodyInit, {
	          status: this.status,
	          statusText: this.statusText,
	          headers: new h(this.headers),
	          url: this.url
	        });
	      }, _.error = function () {
	        var e = new _(null, {
	          status: 0,
	          statusText: ""
	        });
	        return e.type = "error", e;
	      };
	      var y = [301, 302, 303, 307, 308];
	      _.redirect = function (e, t) {
	        if (-1 === y.indexOf(t)) throw new RangeError("Invalid status code");
	        return new _(null, {
	          status: t,
	          headers: {
	            location: e
	          }
	        });
	      }, t.DOMException = e.DOMException;

	      try {
	        new t.DOMException();
	      } catch (e) {
	        t.DOMException = function (e, t) {
	          this.message = e, this.name = t;
	          var r = Error(e);
	          this.stack = r.stack;
	        }, t.DOMException.prototype = Object.create(Error.prototype), t.DOMException.prototype.constructor = t.DOMException;
	      }

	      function b(e, n) {
	        return new Promise(function (i, o) {
	          var s = new g(e, n);
	          if (s.signal && s.signal.aborted) return o(new t.DOMException("Aborted", "AbortError"));
	          var a = new XMLHttpRequest();

	          function f() {
	            a.abort();
	          }

	          a.onload = function () {
	            var e,
	                t,
	                r = {
	              status: a.status,
	              statusText: a.statusText,
	              headers: (e = a.getAllResponseHeaders() || "", t = new h(), e.replace(/\r?\n[\t ]+/g, " ").split(/\r?\n/).forEach(function (e) {
	                var r = e.split(":"),
	                    n = r.shift().trim();

	                if (n) {
	                  var i = r.join(":").trim();
	                  t.append(n, i);
	                }
	              }), t)
	            };
	            r.url = "responseURL" in a ? a.responseURL : r.headers.get("X-Request-URL");
	            var n = "response" in a ? a.response : a.responseText;
	            i(new _(n, r));
	          }, a.onerror = function () {
	            o(new TypeError("Network request failed"));
	          }, a.ontimeout = function () {
	            o(new TypeError("Network request failed"));
	          }, a.onabort = function () {
	            o(new t.DOMException("Aborted", "AbortError"));
	          }, a.open(s.method, s.url, !0), "include" === s.credentials ? a.withCredentials = !0 : "omit" === s.credentials && (a.withCredentials = !1), "responseType" in a && r.blob && (a.responseType = "blob"), s.headers.forEach(function (e, t) {
	            a.setRequestHeader(t, e);
	          }), s.signal && (s.signal.addEventListener("abort", f), a.onreadystatechange = function () {
	            4 === a.readyState && s.signal.removeEventListener("abort", f);
	          }), a.send(void 0 === s._bodyInit ? null : s._bodyInit);
	        });
	      }

	      b.polyfill = !0, e.fetch || (e.fetch = b, e.Headers = h, e.Request = g, e.Response = _), t.Headers = h, t.Request = g, t.Response = _, t.fetch = b;
	    }({});
	  }(r), delete r.fetch.polyfill, e.exports = t = r.fetch, t.fetch = r.fetch, t.Headers = r.Headers, t.Request = r.Request, t.Response = r.Response, t.default = r.fetch;
	}, function (e, t, r) {
	  var n = r(30);

	  e.exports = /*#__PURE__*/function () {
	    function _class12(_ref8) {
	      var e = _ref8.fetch,
	          _ref8$size = _ref8.size,
	          t = _ref8$size === void 0 ? 1e7 : _ref8$size,
	          _ref8$chunkSize = _ref8.chunkSize,
	          r = _ref8$chunkSize === void 0 ? 32768 : _ref8$chunkSize;

	      _classCallCheck(this, _class12);

	      if (!e) throw new Error("fetch function required");
	      this.fetch = e, this.chunkSize = r, this.lruCache = new n({
	        maxSize: Math.floor(t / r)
	      });
	    }

	    _createClass(_class12, [{
	      key: "get",
	      value: function () {
	        var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(e, t, r, n) {
	          var _this15 = this;

	          var i, o, s, _loop, _e35, a, h;

	          return regeneratorRuntime.wrap(function _callee26$(_context29) {
	            while (1) {
	              switch (_context29.prev = _context29.next) {
	                case 0:
	                  if (!(e.length < t + r)) {
	                    _context29.next = 2;
	                    break;
	                  }

	                  throw new Error("output buffer not big enough for request");

	                case 2:
	                  i = Math.floor(n / this.chunkSize), o = Math.floor((n + r) / this.chunkSize), s = new Array(o - i + 1);

	                  _loop = function _loop(_e35) {
	                    s[_e35 - i] = _this15._getChunk(_e35).then(function (t) {
	                      return {
	                        data: t,
	                        chunkNumber: _e35
	                      };
	                    });
	                  };

	                  for (_e35 = i; _e35 <= o; _e35 += 1) {
	                    _loop(_e35);
	                  }

	                  _context29.next = 7;
	                  return Promise.all(s);

	                case 7:
	                  a = _context29.sent;
	                  h = n - a[0].chunkNumber * this.chunkSize;
	                  a.forEach(function (_ref9) {
	                    var s = _ref9.data,
	                        a = _ref9.chunkNumber;
	                    var f = a * _this15.chunkSize;
	                    var u = 0,
	                        c = _this15.chunkSize,
	                        l = t + (a - i) * _this15.chunkSize - h;
	                    a === i && (l = t, u = h), a === o && (c = n + r - f), s.copy(e, l, u, c);
	                  });

	                case 10:
	                case "end":
	                  return _context29.stop();
	              }
	            }
	          }, _callee26, this);
	        }));

	        function get(_x16, _x17, _x18, _x19) {
	          return _get.apply(this, arguments);
	        }

	        return get;
	      }()
	    }, {
	      key: "_getChunk",
	      value: function _getChunk(e) {
	        var t = this.lruCache.get(e);
	        if (t) return t;
	        var r = this.fetch(e * this.chunkSize, this.chunkSize);
	        return this.lruCache.set(e, r), r;
	      }
	    }]);

	    return _class12;
	  }();
	}, function (e, t, r) {
	  var _r45 = r(34),
	      n = _r45.promisify,
	      i = null,
	      o = i,
	      s = i,
	      a = i,
	      h = i;

	  e.exports = /*#__PURE__*/function () {
	    function _class13(e) {
	      _classCallCheck(this, _class13);

	      this.position = 0, this.filename = e, this.fd = o(this.filename, "r");
	    }

	    _createClass(_class13, [{
	      key: "read",
	      value: function () {
	        var _read = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(e) {
	          var t,
	              r,
	              n,
	              i,
	              _args30 = arguments;
	          return regeneratorRuntime.wrap(function _callee27$(_context30) {
	            while (1) {
	              switch (_context30.prev = _context30.next) {
	                case 0:
	                  t = _args30.length > 1 && _args30[1] !== undefined ? _args30[1] : 0;
	                  r = _args30.length > 2 ? _args30[2] : undefined;
	                  n = _args30.length > 3 ? _args30[3] : undefined;
	                  i = n;
	                  null === n && (i = this.position, this.position += r);
	                  _context30.t0 = s;
	                  _context30.next = 8;
	                  return this.fd;

	                case 8:
	                  _context30.t1 = _context30.sent;
	                  _context30.t2 = e;
	                  _context30.t3 = t;
	                  _context30.t4 = r;
	                  _context30.t5 = n;
	                  return _context30.abrupt("return", (0, _context30.t0)(_context30.t1, _context30.t2, _context30.t3, _context30.t4, _context30.t5));

	                case 14:
	                case "end":
	                  return _context30.stop();
	              }
	            }
	          }, _callee27, this);
	        }));

	        function read(_x20) {
	          return _read.apply(this, arguments);
	        }

	        return read;
	      }()
	    }, {
	      key: "readFile",
	      value: function () {
	        var _readFile2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28() {
	          return regeneratorRuntime.wrap(function _callee28$(_context31) {
	            while (1) {
	              switch (_context31.prev = _context31.next) {
	                case 0:
	                  _context31.t0 = h;
	                  _context31.next = 3;
	                  return this.fd;

	                case 3:
	                  _context31.t1 = _context31.sent;
	                  return _context31.abrupt("return", (0, _context31.t0)(_context31.t1));

	                case 5:
	                case "end":
	                  return _context31.stop();
	              }
	            }
	          }, _callee28, this);
	        }));

	        function readFile() {
	          return _readFile2.apply(this, arguments);
	        }

	        return readFile;
	      }()
	    }, {
	      key: "stat",
	      value: function () {
	        var _stat2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29() {
	          return regeneratorRuntime.wrap(function _callee29$(_context32) {
	            while (1) {
	              switch (_context32.prev = _context32.next) {
	                case 0:
	                  _context32.t0 = this._stat;

	                  if (_context32.t0) {
	                    _context32.next = 9;
	                    break;
	                  }

	                  _context32.t1 = a;
	                  _context32.next = 5;
	                  return this.fd;

	                case 5:
	                  _context32.t2 = _context32.sent;
	                  _context32.next = 8;
	                  return (0, _context32.t1)(_context32.t2);

	                case 8:
	                  this._stat = _context32.sent;

	                case 9:
	                  return _context32.abrupt("return", this._stat);

	                case 10:
	                case "end":
	                  return _context32.stop();
	              }
	            }
	          }, _callee29, this);
	        }));

	        function stat() {
	          return _stat2.apply(this, arguments);
	        }

	        return stat;
	      }()
	    }]);

	    return _class13;
	  }();
	}, function (e, t) {
	  e.exports = {
	    parseHeaderText: function parseHeaderText(e) {
	      var t = e.split(/\r?\n/),
	          r = [];
	      return t.forEach(function (e) {
	        var _e$split = e.split(/\t/),
	            _e$split2 = _toArray(_e$split),
	            t = _e$split2[0],
	            n = _e$split2.slice(1),
	            i = n.map(function (e) {
	          var _e$split3 = e.split(":", 2),
	              _e$split4 = _slicedToArray(_e$split3, 2),
	              t = _e$split4[0],
	              r = _e$split4[1];

	          return {
	            tag: t,
	            value: r
	          };
	        });

	        t && r.push({
	          tag: t.substr(1),
	          data: i
	        });
	      }), r;
	    }
	  };
	}, function (e, t, r) {
	  var _r46 = r(0),
	      n = _r46.CramUnimplementedError,
	      i = _r46.CramSizeLimitError,
	      o = r(18);

	  e.exports = /*#__PURE__*/function () {
	    function _class14(e) {
	      _classCallCheck(this, _class14);

	      if (e.cram ? this.cram = e.cram : this.cram = new o({
	        url: e.cramUrl,
	        path: e.cramPath,
	        filehandle: e.cramFilehandle,
	        seqFetch: e.seqFetch,
	        checkSequenceMD5: e.checkSequenceMD5,
	        cacheSize: e.cacheSize
	      }), !(this.cram instanceof o)) throw new Error("invalid arguments: no cramfile");
	      if (this.index = e.index, !this.index.getEntriesForRange) throw new Error("invalid arguments: not an index");
	      this.fetchSizeLimit = e.fetchSizeLimit || 3e6;
	    }

	    _createClass(_class14, [{
	      key: "getRecordsForRange",
	      value: function () {
	        var _getRecordsForRange = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30(e, t, r) {
	          var _this16 = this,
	              _Array$prototype;

	          var o,
	              s,
	              a,
	              h,
	              f,
	              u,
	              c,
	              _e36,
	              _t23,
	              _r48,
	              _n7,
	              _i13,
	              _r47,
	              _n6,
	              _e37,
	              _t24,
	              _t25,
	              _i12,
	              _a6,
	              _e38,
	              _a7,
	              _h,
	              _f,
	              _u3,
	              l,
	              _e39,
	              _args33 = arguments;

	          return regeneratorRuntime.wrap(function _callee30$(_context33) {
	            while (1) {
	              switch (_context33.prev = _context33.next) {
	                case 0:
	                  o = _args33.length > 3 && _args33[3] !== undefined ? _args33[3] : {};

	                  if (!(o.viewAsPairs = o.viewAsPairs || !1, o.pairAcrossChr = o.pairAcrossChr || !1, o.maxInsertSize = o.maxInsertSize || 2e5, "string" == typeof e)) {
	                    _context33.next = 3;
	                    break;
	                  }

	                  throw new n("string sequence names not yet supported");

	                case 3:
	                  s = e;
	                  _context33.next = 6;
	                  return this.index.getEntriesForRange(s, t, r);

	                case 6:
	                  a = _context33.sent;
	                  h = a.map(function (e) {
	                    return e.sliceBytes;
	                  }).reduce(function (e, t) {
	                    return e + t;
	                  }, 0);

	                  if (!(h > this.fetchSizeLimit)) {
	                    _context33.next = 10;
	                    break;
	                  }

	                  throw new i("data size of ".concat(h.toLocaleString(), " bytes exceeded fetch size limit of ").concat(this.fetchSizeLimit.toLocaleString(), " bytes"));

	                case 10:
	                  f = function f(n) {
	                    return n.sequenceId === e && n.alignmentStart <= r && n.alignmentStart + n.lengthOnRef >= t;
	                  };

	                  _context33.next = 13;
	                  return Promise.all(a.map(function (e) {
	                    return _this16.getRecordsInSlice(e, f);
	                  }));

	                case 13:
	                  u = _context33.sent;
	                  c = (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, _toConsumableArray(u));

	                  if (!o.viewAsPairs) {
	                    _context33.next = 36;
	                    break;
	                  }

	                  _e36 = {}, _t23 = {};

	                  for (_r48 = 0; _r48 < c.length; _r48 += 1) {
	                    _n7 = c[_r48].readName, _i13 = c[_r48].uniqueId;
	                    _e36[_n7] || (_e36[_n7] = 0), _e36[_n7] += 1, _t23[_i13] = 1;
	                  }

	                  _r47 = {};
	                  Object.entries(_e36).forEach(function (_ref10) {
	                    var _ref11 = _slicedToArray(_ref10, 2),
	                        e = _ref11[0],
	                        t = _ref11[1];

	                    1 === t && (_r47[e] = !0);
	                  });
	                  _n6 = [];

	                  for (_e37 = 0; _e37 < c.length; _e37 += 1) {
	                    _t24 = c[_e37].readName;

	                    if (_r47[_t24] && c[_e37].mate && (c[_e37].mate.sequenceId === s || o.pairAcrossChr) && Math.abs(c[_e37].alignmentStart - c[_e37].mate.alignmentStart) < o.maxInsertSize) {
	                      _t25 = this.index.getEntriesForRange(c[_e37].mate.sequenceId, c[_e37].mate.alignmentStart, c[_e37].mate.alignmentStart + 1);

	                      _n6.push(_t25);
	                    }
	                  }

	                  _context33.next = 24;
	                  return Promise.all(_n6);

	                case 24:
	                  _i12 = _context33.sent;
	                  _a6 = [];

	                  for (_e38 = 0; _e38 < _i12.length; _e38 += 1) {
	                    (_a7 = _a6).push.apply(_a7, _toConsumableArray(_i12[_e38]));
	                  }

	                  _a6 = _a6.sort(function (e, t) {
	                    return e.toString().localeCompare(t.toString());
	                  }).filter(function (e, t, r) {
	                    return !t || e.toString() !== r[t - 1].toString();
	                  });
	                  _h = [], _f = [], _u3 = _a6.map(function (e) {
	                    return e.sliceBytes;
	                  }).reduce(function (e, t) {
	                    return e + t;
	                  }, 0);

	                  if (!(_u3 > this.fetchSizeLimit)) {
	                    _context33.next = 31;
	                    break;
	                  }

	                  throw new Error("mate data size of ".concat(_u3.toLocaleString(), " bytes exceeded fetch size limit of ").concat(this.fetchSizeLimit.toLocaleString(), " bytes"));

	                case 31:
	                  _a6.forEach(function (e) {
	                    var n = _this16.cram.featureCache.get(e.toString());

	                    n || (n = _this16.getRecordsInSlice(e, function () {
	                      return !0;
	                    }), _this16.cram.featureCache.set(e.toString(), n)), _h.push(n);
	                    var i = n.then(function (e) {
	                      var n = [];

	                      for (var _i14 = 0; _i14 < e.length; _i14 += 1) {
	                        var _o6 = e[_i14];
	                        _r47[_o6.readName] && !_t23[_o6.uniqueId] && n.push(_o6);
	                      }

	                      return n;
	                    });

	                    _f.push(i);
	                  });

	                  _context33.next = 34;
	                  return Promise.all(_f);

	                case 34:
	                  l = _context33.sent;

	                  if (l.length) {
	                    _e39 = l.reduce(function (e, t) {
	                      return e.concat(t);
	                    });
	                    c = c.concat(_e39);
	                  }

	                case 36:
	                  return _context33.abrupt("return", c);

	                case 37:
	                case "end":
	                  return _context33.stop();
	              }
	            }
	          }, _callee30, this);
	        }));

	        function getRecordsForRange(_x21, _x22, _x23) {
	          return _getRecordsForRange.apply(this, arguments);
	        }

	        return getRecordsForRange;
	      }()
	    }, {
	      key: "getRecordsInSlice",
	      value: function getRecordsInSlice(_ref12, n) {
	        var e = _ref12.containerStart,
	            t = _ref12.sliceStart,
	            r = _ref12.sliceBytes;
	        return this.cram.getContainerAtPosition(e).getSlice(t, r).getRecords(n);
	      }
	    }, {
	      key: "hasDataForReferenceSequence",
	      value: function hasDataForReferenceSequence(e) {
	        return this.index.hasDataForReferenceSequence(e);
	      }
	    }]);

	    return _class14;
	  }();
	}, function (e, t, r) {
	  var _r49 = r(34),
	      n = _r49.promisify,
	      i = n(r(20).gunzip),
	      _r50 = r(33),
	      o = _r50.open,
	      _r51 = r(0),
	      s = _r51.CramMalformedError;

	  var a = /*#__PURE__*/function () {
	    function a(e) {
	      _classCallCheck(this, a);

	      Object.assign(this, e);
	    }

	    _createClass(a, [{
	      key: "toString",
	      value: function toString() {
	        return "".concat(this.start, ":").concat(this.span, ":").concat(this.containerStart, ":").concat(this.sliceStart, ":").concat(this.sliceBytes);
	      }
	    }]);

	    return a;
	  }();

	  function h(e, t) {
	    if (t.some(function (e) {
	      return void 0 === e;
	    })) throw new s("invalid .crai index file");

	    var _t26 = _slicedToArray(t, 6),
	        r = _t26[0],
	        n = _t26[1],
	        i = _t26[2],
	        o = _t26[3],
	        h = _t26[4],
	        f = _t26[5];

	    e[r] || (e[r] = []), e[r].push(new a({
	      start: n,
	      span: i,
	      containerStart: o,
	      sliceStart: h,
	      sliceBytes: f
	    }));
	  }

	  e.exports = /*#__PURE__*/function () {
	    function _class15(e) {
	      _classCallCheck(this, _class15);

	      var t = o(e.url, e.path, e.filehandle);
	      this.readFile = t.readFile.bind(t), this.index = this.parseIndex();
	    }

	    _createClass(_class15, [{
	      key: "parseIndex",
	      value: function parseIndex() {
	        var e = {};
	        return this.readFile().then(function (e) {
	          return 31 === e[0] && 139 === e[1] ? i(e) : e;
	        }).then(function (t) {
	          var r = [],
	              n = "";

	          for (var _i15 = 0; _i15 < t.length; _i15 += 1) {
	            var _o7 = t[_i15];
	            if (_o7 >= 48 && _o7 <= 57 || !n && 45 === _o7) n += String.fromCharCode(_o7);else if (9 === _o7) r.push(Number.parseInt(n, 10)), n = "";else if (10 === _o7) r.push(Number.parseInt(n, 10)), n = "", h(e, r), r = [];else if (13 !== _o7 && 32 !== _o7) throw new s("invalid .crai index file");
	          }

	          return n && r.push(Number.parseInt(n, 10)), 6 === r.length && h(e, r), Object.entries(e).forEach(function (_ref13) {
	            var _ref14 = _slicedToArray(_ref13, 2),
	                t = _ref14[0],
	                r = _ref14[1];

	            e[t] = r.sort(function (e, t) {
	              return e.start - t.start || e.span - t.span;
	            });
	          }), e;
	        });
	      }
	    }, {
	      key: "getIndex",
	      value: function getIndex() {
	        return this.index;
	      }
	    }, {
	      key: "hasDataForReferenceSequence",
	      value: function () {
	        var _hasDataForReferenceSequence = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31(e) {
	          return regeneratorRuntime.wrap(function _callee31$(_context34) {
	            while (1) {
	              switch (_context34.prev = _context34.next) {
	                case 0:
	                  _context34.next = 2;
	                  return this.index;

	                case 2:
	                  _context34.t0 = e;
	                  return _context34.abrupt("return", !!_context34.sent[_context34.t0]);

	                case 4:
	                case "end":
	                  return _context34.stop();
	              }
	            }
	          }, _callee31, this);
	        }));

	        function hasDataForReferenceSequence(_x24) {
	          return _hasDataForReferenceSequence.apply(this, arguments);
	        }

	        return hasDataForReferenceSequence;
	      }()
	    }, {
	      key: "getEntriesForRange",
	      value: function () {
	        var _getEntriesForRange = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32(e, t, r) {
	          var n, i, o, s, a, h, _e40, f, u, c;

	          return regeneratorRuntime.wrap(function _callee32$(_context35) {
	            while (1) {
	              switch (_context35.prev = _context35.next) {
	                case 0:
	                  _context35.next = 2;
	                  return this.index;

	                case 2:
	                  _context35.t0 = e;
	                  n = _context35.sent[_context35.t0];

	                  if (n) {
	                    _context35.next = 6;
	                    break;
	                  }

	                  return _context35.abrupt("return", []);

	                case 6:
	                  i = n.length, o = function o(e) {
	                    var n = e.start,
	                        i = e.start + e.span;
	                    return n >= r ? -1 : i <= t ? 1 : 0;
	                  };
	                  a = 0, h = i - 1;

	                case 8:
	                  if (!(a <= h)) {
	                    _context35.next = 19;
	                    break;
	                  }

	                  _e40 = o(n[s = Math.round((h + a) / 2)]);

	                  if (!(_e40 > 0)) {
	                    _context35.next = 14;
	                    break;
	                  }

	                  a = s + 1;
	                  _context35.next = 17;
	                  break;

	                case 14:
	                  if (_e40 < 0) {
	                    _context35.next = 16;
	                    break;
	                  }

	                  return _context35.abrupt("break", 19);

	                case 16:
	                  h = s - 1;

	                case 17:
	                  _context35.next = 8;
	                  break;

	                case 19:
	                  f = s;

	                  for (; f && !o(n[f - 1]);) {
	                    f -= 1;
	                  }

	                  u = s;

	                  for (; u < i - 1 && !o(n[u + 1]);) {
	                    u += 1;
	                  }

	                  c = n[f].start;
	                  return _context35.abrupt("return", n[u].start + n[u].span >= t && r >= c ? n.slice(f, u + 1) : []);

	                case 25:
	                case "end":
	                  return _context35.stop();
	              }
	            }
	          }, _callee32, this);
	        }));

	        function getEntriesForRange(_x25, _x26, _x27) {
	          return _getEntriesForRange.apply(this, arguments);
	        }

	        return getEntriesForRange;
	      }()
	    }]);

	    return _class15;
	  }();
	}]);

	var READ_STRAND_FLAG$2 = 0x10;
	var MATE_STRAND_FLAG$2 = 0x20;
	var CRAM_MATE_STRAND_FLAG = 0x1;
	/**
	 * Class for reading a cram file
	 *
	 * @param config
	 * @constructor
	 */

	var CramReader = /*#__PURE__*/function () {
	  function CramReader(config, genome, browser) {
	    _classCallCheck(this, CramReader);

	    this.config = config;
	    this.browser = browser;
	    this.genome = genome;
	    this.cramFile = new gmodCRAM.CramFile({
	      filehandle: new FileHandler(config.url, config),
	      seqFetch: config.seqFetch || seqFetch.bind(this),
	      checkSequenceMD5: config.checkSequenceMD5 !== undefined ? config.checkSequenceMD5 : true
	    });
	    var indexFileHandle = new FileHandler(config.indexURL, config);
	    this.indexedCramFile = new gmodCRAM.IndexedCramFile({
	      cram: this.cramFile,
	      index: new gmodCRAM.CraiIndex({
	        filehandle: indexFileHandle
	      }),
	      fetchSizeLimit: 30000000
	    });
	    BamUtils.setReaderDefaults(this, config);

	    function seqFetch(seqID, start, end) {
	      var sequence = this.genome.sequence;
	      var genome = this.genome;
	      return this.getHeader().then(function (header) {
	        var chr = genome.getChromosomeName(header.chrNames[seqID]);
	        return sequence.getSequence(chr, start - 1, end);
	      });
	    }
	  }
	  /**
	   * Parse the sequence dictionary from the SAM header and build chr name tables.  This function
	   * is public so it can be unit tested.
	   *
	   * @returns {PromiseLike<chrName, chrToIndex, chrAliasTable}>}
	   */


	  _createClass(CramReader, [{
	    key: "getHeader",
	    value: function () {
	      var _getHeader = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	        var genome, samHeader, chrToIndex, chrNames, chrAliasTable, readGroups, _iterator, _step, line, _iterator2, _step2, d, seq, alias;

	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (this.header) {
	                  _context.next = 50;
	                  break;
	                }

	                genome = this.genome;
	                _context.next = 4;
	                return this.cramFile.getSamHeader();

	              case 4:
	                samHeader = _context.sent;
	                chrToIndex = {};
	                chrNames = [];
	                chrAliasTable = {};
	                readGroups = [];
	                _iterator = _createForOfIteratorHelper(samHeader);
	                _context.prev = 10;

	                _iterator.s();

	              case 12:
	                if ((_step = _iterator.n()).done) {
	                  _context.next = 41;
	                  break;
	                }

	                line = _step.value;

	                if (!('SQ' === line.tag)) {
	                  _context.next = 38;
	                  break;
	                }

	                _iterator2 = _createForOfIteratorHelper(line.data);
	                _context.prev = 16;

	                _iterator2.s();

	              case 18:
	                if ((_step2 = _iterator2.n()).done) {
	                  _context.next = 28;
	                  break;
	                }

	                d = _step2.value;

	                if (!(d.tag === "SN")) {
	                  _context.next = 26;
	                  break;
	                }

	                seq = d.value;
	                chrToIndex[seq] = chrNames.length;
	                chrNames.push(seq);

	                if (genome) {
	                  alias = genome.getChromosomeName(seq);
	                  chrAliasTable[alias] = seq;
	                }

	                return _context.abrupt("break", 28);

	              case 26:
	                _context.next = 18;
	                break;

	              case 28:
	                _context.next = 33;
	                break;

	              case 30:
	                _context.prev = 30;
	                _context.t0 = _context["catch"](16);

	                _iterator2.e(_context.t0);

	              case 33:
	                _context.prev = 33;

	                _iterator2.f();

	                return _context.finish(33);

	              case 36:
	                _context.next = 39;
	                break;

	              case 38:
	                if ('RG' === line.tag) {
	                  readGroups.push(line.data);
	                }

	              case 39:
	                _context.next = 12;
	                break;

	              case 41:
	                _context.next = 46;
	                break;

	              case 43:
	                _context.prev = 43;
	                _context.t1 = _context["catch"](10);

	                _iterator.e(_context.t1);

	              case 46:
	                _context.prev = 46;

	                _iterator.f();

	                return _context.finish(46);

	              case 49:
	                this.header = {
	                  chrNames: chrNames,
	                  chrToIndex: chrToIndex,
	                  chrAliasTable: chrAliasTable,
	                  readGroups: readGroups
	                };

	              case 50:
	                return _context.abrupt("return", this.header);

	              case 51:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this, [[10, 43, 46, 49], [16, 30, 33, 36]]);
	      }));

	      function getHeader() {
	        return _getHeader.apply(this, arguments);
	      }

	      return getHeader;
	    }()
	  }, {
	    key: "readAlignments",
	    value: function () {
	      var _readAlignments = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(chr, bpStart, bpEnd) {
	        var browser, header, queryChr, chrIdx, alignmentContainer, records, _iterator3, _step3, record, refID, pos, alignmentEnd, alignment, message, decodeCramRecord, makeBlocks;

	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                makeBlocks = function _makeBlocks(cramRecord, alignment) {
	                  var blocks = [];
	                  var insertions;
	                  var gaps;
	                  var basesUsed = 0;
	                  var cigarString = '';
	                  alignment.scStart = alignment.start;
	                  alignment.scLengthOnRef = alignment.lengthOnRef;

	                  if (cramRecord.readFeatures) {
	                    var _iterator4 = _createForOfIteratorHelper(cramRecord.readFeatures),
	                        _step4;

	                    try {
	                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	                        var feature = _step4.value;
	                        var code = feature.code;
	                        var data = feature.data;
	                        var readPos = feature.pos - 1;
	                        var refPos = feature.refPos - 1;

	                        switch (code) {
	                          case 'S':
	                          case 'I':
	                          case 'i':
	                          case 'N':
	                          case 'D':
	                            if (readPos > basesUsed) {
	                              var _len = readPos - basesUsed;

	                              blocks.push(new AlignmentBlock({
	                                start: refPos - _len,
	                                seqOffset: basesUsed,
	                                len: _len,
	                                type: 'M'
	                              }));
	                              basesUsed += _len;
	                              cigarString += _len + 'M';
	                            }

	                            if ('S' === code) {
	                              var scPos = refPos;
	                              alignment.scLengthOnRef += data.length;

	                              if (readPos === 0) {
	                                alignment.scStart -= data.length;
	                                scPos -= data.length;
	                              }

	                              var _len2 = data.length;
	                              blocks.push(new AlignmentBlock({
	                                start: scPos,
	                                seqOffset: basesUsed,
	                                len: _len2,
	                                type: 'S'
	                              }));
	                              basesUsed += _len2;
	                              cigarString += _len2 + code;
	                            } else if ('I' === code || 'i' === code) {
	                              if (insertions === undefined) {
	                                insertions = [];
	                              }

	                              var _len3 = 'i' === code ? 1 : data.length;

	                              insertions.push(new AlignmentBlock({
	                                start: refPos - 1,
	                                len: _len3,
	                                seqOffset: basesUsed,
	                                type: 'I'
	                              }));
	                              basesUsed += _len3;
	                              cigarString += _len3 + code;
	                            } else if ('D' === code || 'N' === code) {
	                              if (!gaps) {
	                                gaps = [];
	                              }

	                              gaps.push({
	                                start: refPos,
	                                len: data,
	                                type: code
	                              });
	                              cigarString += data + code;
	                            }

	                            break;

	                          case 'H':
	                          case 'P':
	                            cigarString += data + code;
	                            break;

	                          default: //  Ignore

	                        }
	                      }
	                    } catch (err) {
	                      _iterator4.e(err);
	                    } finally {
	                      _iterator4.f();
	                    }
	                  } // Last block


	                  var len = cramRecord.readLength - basesUsed;

	                  if (len > 0) {
	                    blocks.push(new AlignmentBlock({
	                      start: cramRecord.alignmentStart + cramRecord.lengthOnRef - len - 1,
	                      seqOffset: basesUsed,
	                      len: len,
	                      type: 'M'
	                    }));
	                    cigarString += len + 'M';
	                  }

	                  alignment.blocks = blocks;
	                  alignment.insertions = insertions;
	                  alignment.gaps = gaps;
	                  alignment.cigar = cigarString;
	                };

	                decodeCramRecord = function _decodeCramRecord(record, chrNames) {
	                  var alignment = new BamAlignment();
	                  alignment.chr = chrNames[record.sequenceId];
	                  alignment.start = record.alignmentStart - 1;
	                  alignment.lengthOnRef = record.lengthOnRef;
	                  alignment.flags = record.flags;
	                  alignment.strand = !(record.flags & READ_STRAND_FLAG$2);
	                  alignment.fragmentLength = record.templateLength || record.templateSize;
	                  alignment.mq = record.mappingQuality;
	                  alignment.end = record.alignmentStart + record.lengthOnRef;
	                  alignment.readGroupId = record.readGroupId;

	                  if (record.mate && record.mate.sequenceId !== undefined) {
	                    var strand = record.mate.flags !== undefined ? !(record.mate.flags & CRAM_MATE_STRAND_FLAG) : !(record.flags & MATE_STRAND_FLAG$2);
	                    alignment.mate = {
	                      chr: chrNames[record.mate.sequenceId],
	                      position: record.mate.alignmentStart,
	                      strand: strand
	                    };
	                  }

	                  alignment.seq = record.getReadBases();
	                  alignment.qual = record.qualityScores;
	                  alignment.tagDict = record.tags;
	                  alignment.readName = record.readName; // TODO -- cigar encoded in tag?
	                  // BamUtils.bam_tag2cigar(ba, blockEnd, p, lseq, alignment, cigarArray);

	                  makeBlocks(record, alignment);

	                  if (alignment.mate && alignment.start > alignment.mate.position && alignment.fragmentLength > 0) {
	                    alignment.fragmentLength = -alignment.fragmentLength;
	                  }

	                  BamUtils.setPairOrientation(alignment);
	                  return alignment;
	                };

	                browser = this.browser;
	                _context2.next = 5;
	                return this.getHeader();

	              case 5:
	                header = _context2.sent;
	                queryChr = header.chrAliasTable.hasOwnProperty(chr) ? header.chrAliasTable[chr] : chr;
	                chrIdx = header.chrToIndex[queryChr];
	                alignmentContainer = new AlignmentContainer(chr, bpStart, bpEnd, this.samplingWindowSize, this.samplingDepth, this.pairsSupported, this.alleleFreqThreshold);

	                if (!(chrIdx === undefined)) {
	                  _context2.next = 13;
	                  break;
	                }

	                return _context2.abrupt("return", alignmentContainer);

	              case 13:
	                _context2.prev = 13;
	                _context2.next = 16;
	                return this.indexedCramFile.getRecordsForRange(chrIdx, bpStart, bpEnd);

	              case 16:
	                records = _context2.sent;
	                _iterator3 = _createForOfIteratorHelper(records);
	                _context2.prev = 18;

	                _iterator3.s();

	              case 20:
	                if ((_step3 = _iterator3.n()).done) {
	                  _context2.next = 41;
	                  break;
	                }

	                record = _step3.value;
	                refID = record.sequenceId;
	                pos = record.alignmentStart;
	                alignmentEnd = pos + record.lengthOnRef;

	                if (!(refID < 0)) {
	                  _context2.next = 29;
	                  break;
	                }

	                return _context2.abrupt("continue", 39);

	              case 29:
	                if (!(refID > chrIdx || pos > bpEnd)) {
	                  _context2.next = 33;
	                  break;
	                }

	                return _context2.abrupt("return");

	              case 33:
	                if (!(refID < chrIdx)) {
	                  _context2.next = 35;
	                  break;
	                }

	                return _context2.abrupt("continue", 39);

	              case 35:
	                if (!(alignmentEnd < bpStart)) {
	                  _context2.next = 37;
	                  break;
	                }

	                return _context2.abrupt("continue", 39);

	              case 37:
	                // Record out-of-range "to the left", skip to next one
	                alignment = decodeCramRecord(record, header.chrNames); //  if (filter.pass(alignment)) {

	                alignmentContainer.push(alignment); //  }

	              case 39:
	                _context2.next = 20;
	                break;

	              case 41:
	                _context2.next = 46;
	                break;

	              case 43:
	                _context2.prev = 43;
	                _context2.t0 = _context2["catch"](18);

	                _iterator3.e(_context2.t0);

	              case 46:
	                _context2.prev = 46;

	                _iterator3.f();

	                return _context2.finish(46);

	              case 49:
	                alignmentContainer.finish();
	                return _context2.abrupt("return", alignmentContainer);

	              case 53:
	                _context2.prev = 53;
	                _context2.t1 = _context2["catch"](13);
	                message = _context2.t1.message;

	                if (message && message.indexOf("MD5") >= 0) {
	                  message = "Sequence mismatch. Is this the correct genome for the loaded CRAM?";
	                }

	                Alert.presentAlert(new Error(message));
	                throw _context2.t1;

	              case 59:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this, [[13, 53], [18, 43, 46, 49]]);
	      }));

	      function readAlignments(_x, _x2, _x3) {
	        return _readAlignments.apply(this, arguments);
	      }

	      return readAlignments;
	    }()
	  }]);

	  return CramReader;
	}();

	var FileHandler = /*#__PURE__*/function () {
	  function FileHandler(source, config) {
	    var _this = this;

	    _classCallCheck(this, FileHandler);

	    this.position = 0;
	    this.url = source;
	    this.config = config;
	    this.cache = new BufferCache({
	      fetch: function fetch(start, length) {
	        return _this._fetch(start, length);
	      }
	    });
	  }

	  _createClass(FileHandler, [{
	    key: "_fetch",
	    value: function () {
	      var _fetch2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(position, length) {
	        var loadRange, arrayBuffer;
	        return regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                loadRange = {
	                  start: position,
	                  size: length
	                };
	                this._stat = {
	                  size: undefined
	                };
	                _context3.next = 4;
	                return igvxhr.loadArrayBuffer(this.url, buildOptions(this.config, {
	                  range: loadRange
	                }));

	              case 4:
	                arrayBuffer = _context3.sent;
	                return _context3.abrupt("return", Buffer.from(arrayBuffer));

	              case 6:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function _fetch(_x4, _x5) {
	        return _fetch2.apply(this, arguments);
	      }

	      return _fetch;
	    }()
	  }, {
	    key: "read",
	    value: function () {
	      var _read = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(buffer) {
	        var offset,
	            length,
	            position,
	            readPosition,
	            _args4 = arguments;
	        return regeneratorRuntime.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                offset = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : 0;
	                length = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : Infinity;
	                position = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : 0;
	                readPosition = position;

	                if (readPosition === null) {
	                  readPosition = this.position;
	                  this.position += length;
	                }

	                return _context4.abrupt("return", this.cache.get(buffer, offset, length, position));

	              case 6:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      function read(_x6) {
	        return _read.apply(this, arguments);
	      }

	      return read;
	    }()
	  }, {
	    key: "readFile",
	    value: function () {
	      var _readFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
	        var arrayBuffer;
	        return regeneratorRuntime.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                _context5.next = 2;
	                return igvxhr.loadArrayBuffer(this.url, buildOptions(this.config));

	              case 2:
	                arrayBuffer = _context5.sent;
	                return _context5.abrupt("return", Buffer.from(arrayBuffer));

	              case 4:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this);
	      }));

	      function readFile() {
	        return _readFile.apply(this, arguments);
	      }

	      return readFile;
	    }()
	  }, {
	    key: "stat",
	    value: function () {
	      var _stat = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
	        var buf;
	        return regeneratorRuntime.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                if (this._stat) {
	                  _context6.next = 6;
	                  break;
	                }

	                buf = Buffer.allocUnsafe(10);
	                _context6.next = 4;
	                return this.read(buf, 0, 10, 0);

	              case 4:
	                if (this._stat) {
	                  _context6.next = 6;
	                  break;
	                }

	                throw new Error("unable to determine size of file at ".concat(this.url));

	              case 6:
	                return _context6.abrupt("return", this._stat);

	              case 7:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this);
	      }));

	      function stat() {
	        return _stat.apply(this, arguments);
	      }

	      return stat;
	    }()
	  }]);

	  return FileHandler;
	}();

	var BufferCache = /*#__PURE__*/function () {
	  function BufferCache(_ref) {
	    var fetch = _ref.fetch,
	        _ref$size = _ref.size,
	        size = _ref$size === void 0 ? 10000000 : _ref$size,
	        _ref$chunkSize = _ref.chunkSize,
	        chunkSize = _ref$chunkSize === void 0 ? 32768 : _ref$chunkSize;

	    _classCallCheck(this, BufferCache);

	    this.fetch = fetch;
	    this.chunkSize = chunkSize;
	    this.lruCache = new QuickLRU({
	      maxSize: Math.floor(size / chunkSize)
	    });
	  }

	  _createClass(BufferCache, [{
	    key: "get",
	    value: function () {
	      var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(outputBuffer, offset, length, position) {
	        var _this2 = this;

	        var firstChunk, lastChunk, fetches, _loop, chunk, chunks, chunksOffset;

	        return regeneratorRuntime.wrap(function _callee7$(_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                if (!(outputBuffer.length < offset + length)) {
	                  _context7.next = 2;
	                  break;
	                }

	                throw new Error('output buffer not big enough for request');

	              case 2:
	                // calculate the list of chunks involved in this fetch
	                firstChunk = Math.floor(position / this.chunkSize);
	                lastChunk = Math.floor((position + length) / this.chunkSize); // fetch them all as necessary

	                fetches = new Array(lastChunk - firstChunk + 1);

	                _loop = function _loop(chunk) {
	                  fetches[chunk - firstChunk] = _this2._getChunk(chunk).then(function (data) {
	                    return {
	                      data: data,
	                      chunkNumber: chunk
	                    };
	                  });
	                };

	                for (chunk = firstChunk; chunk <= lastChunk; chunk += 1) {
	                  _loop(chunk);
	                } // stitch together the response buffer using them


	                _context7.next = 9;
	                return Promise.all(fetches);

	              case 9:
	                chunks = _context7.sent;
	                chunksOffset = position - chunks[0].chunkNumber * this.chunkSize;
	                chunks.forEach(function (_ref2) {
	                  var data = _ref2.data,
	                      chunkNumber = _ref2.chunkNumber;
	                  var chunkPositionStart = chunkNumber * _this2.chunkSize;
	                  var copyStart = 0;
	                  var copyEnd = _this2.chunkSize;
	                  var copyOffset = offset + (chunkNumber - firstChunk) * _this2.chunkSize - chunksOffset;

	                  if (chunkNumber === firstChunk) {
	                    copyOffset = offset;
	                    copyStart = chunksOffset;
	                  }

	                  if (chunkNumber === lastChunk) {
	                    copyEnd = position + length - chunkPositionStart;
	                  }

	                  data.copy(outputBuffer, copyOffset, copyStart, copyEnd);
	                });

	              case 12:
	              case "end":
	                return _context7.stop();
	            }
	          }
	        }, _callee7, this);
	      }));

	      function get(_x7, _x8, _x9, _x10) {
	        return _get.apply(this, arguments);
	      }

	      return get;
	    }()
	  }, {
	    key: "_getChunk",
	    value: function _getChunk(chunkNumber) {
	      var cachedPromise = this.lruCache.get(chunkNumber);
	      if (cachedPromise) return cachedPromise;
	      var freshPromise = this.fetch(chunkNumber * this.chunkSize, this.chunkSize);
	      this.lruCache.set(chunkNumber, freshPromise);
	      return freshPromise;
	    }
	  }]);

	  return BufferCache;
	}(); // From https://github.com/sindresorhus/quick-lru

	var QuickLRU = /*#__PURE__*/function () {
	  function QuickLRU() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, QuickLRU);

	    if (!(options.maxSize && options.maxSize > 0)) {
	      throw new TypeError('`maxSize` must be a number greater than 0');
	    }

	    this.maxSize = options.maxSize;
	    this.cache = new Map();
	    this.oldCache = new Map();
	    this._size = 0;
	  }

	  _createClass(QuickLRU, [{
	    key: "_set",
	    value: function _set(key, value) {
	      this.cache.set(key, value);
	      this._size++;

	      if (this._size >= this.maxSize) {
	        this._size = 0;
	        this.oldCache = this.cache;
	        this.cache = new Map();
	      }
	    }
	  }, {
	    key: "get",
	    value: function get(key) {
	      if (this.cache.has(key)) {
	        return this.cache.get(key);
	      }

	      if (this.oldCache.has(key)) {
	        var value = this.oldCache.get(key);

	        this._set(key, value);

	        return value;
	      }
	    }
	  }, {
	    key: "set",
	    value: function set(key, value) {
	      if (this.cache.has(key)) {
	        this.cache.set(key, value);
	      } else {
	        this._set(key, value);
	      }

	      return this;
	    }
	  }, {
	    key: "has",
	    value: function has(key) {
	      return this.cache.has(key) || this.oldCache.has(key);
	    }
	  }, {
	    key: "peek",
	    value: function peek(key) {
	      if (this.cache.has(key)) {
	        return this.cache.get(key);
	      }

	      if (this.oldCache.has(key)) {
	        return this.oldCache.get(key);
	      }
	    }
	  }, {
	    key: "delete",
	    value: function _delete(key) {
	      var deleted = this.cache.delete(key);

	      if (deleted) {
	        this._size--;
	      }

	      return this.oldCache.delete(key) || deleted;
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this.cache.clear();
	      this.oldCache.clear();
	      this._size = 0;
	    }
	  }, {
	    key: "keys",
	    value: /*#__PURE__*/regeneratorRuntime.mark(function keys() {
	      var _iterator5, _step5, _step5$value, key;

	      return regeneratorRuntime.wrap(function keys$(_context8) {
	        while (1) {
	          switch (_context8.prev = _context8.next) {
	            case 0:
	              _iterator5 = _createForOfIteratorHelper(this);
	              _context8.prev = 1;

	              _iterator5.s();

	            case 3:
	              if ((_step5 = _iterator5.n()).done) {
	                _context8.next = 9;
	                break;
	              }

	              _step5$value = _slicedToArray(_step5.value, 1), key = _step5$value[0];
	              _context8.next = 7;
	              return key;

	            case 7:
	              _context8.next = 3;
	              break;

	            case 9:
	              _context8.next = 14;
	              break;

	            case 11:
	              _context8.prev = 11;
	              _context8.t0 = _context8["catch"](1);

	              _iterator5.e(_context8.t0);

	            case 14:
	              _context8.prev = 14;

	              _iterator5.f();

	              return _context8.finish(14);

	            case 17:
	            case "end":
	              return _context8.stop();
	          }
	        }
	      }, keys, this, [[1, 11, 14, 17]]);
	    })
	  }, {
	    key: "values",
	    value: /*#__PURE__*/regeneratorRuntime.mark(function values() {
	      var _iterator6, _step6, _step6$value, value;

	      return regeneratorRuntime.wrap(function values$(_context9) {
	        while (1) {
	          switch (_context9.prev = _context9.next) {
	            case 0:
	              _iterator6 = _createForOfIteratorHelper(this);
	              _context9.prev = 1;

	              _iterator6.s();

	            case 3:
	              if ((_step6 = _iterator6.n()).done) {
	                _context9.next = 9;
	                break;
	              }

	              _step6$value = _slicedToArray(_step6.value, 2), value = _step6$value[1];
	              _context9.next = 7;
	              return value;

	            case 7:
	              _context9.next = 3;
	              break;

	            case 9:
	              _context9.next = 14;
	              break;

	            case 11:
	              _context9.prev = 11;
	              _context9.t0 = _context9["catch"](1);

	              _iterator6.e(_context9.t0);

	            case 14:
	              _context9.prev = 14;

	              _iterator6.f();

	              return _context9.finish(14);

	            case 17:
	            case "end":
	              return _context9.stop();
	          }
	        }
	      }, values, this, [[1, 11, 14, 17]]);
	    })
	  }, {
	    key: Symbol.iterator,
	    value: /*#__PURE__*/regeneratorRuntime.mark(function value() {
	      var _iterator7, _step7, item, _iterator8, _step8, _item, _item2, key;

	      return regeneratorRuntime.wrap(function value$(_context10) {
	        while (1) {
	          switch (_context10.prev = _context10.next) {
	            case 0:
	              _iterator7 = _createForOfIteratorHelper(this.cache);
	              _context10.prev = 1;

	              _iterator7.s();

	            case 3:
	              if ((_step7 = _iterator7.n()).done) {
	                _context10.next = 9;
	                break;
	              }

	              item = _step7.value;
	              _context10.next = 7;
	              return item;

	            case 7:
	              _context10.next = 3;
	              break;

	            case 9:
	              _context10.next = 14;
	              break;

	            case 11:
	              _context10.prev = 11;
	              _context10.t0 = _context10["catch"](1);

	              _iterator7.e(_context10.t0);

	            case 14:
	              _context10.prev = 14;

	              _iterator7.f();

	              return _context10.finish(14);

	            case 17:
	              _iterator8 = _createForOfIteratorHelper(this.oldCache);
	              _context10.prev = 18;

	              _iterator8.s();

	            case 20:
	              if ((_step8 = _iterator8.n()).done) {
	                _context10.next = 28;
	                break;
	              }

	              _item = _step8.value;
	              _item2 = _slicedToArray(_item, 1), key = _item2[0];

	              if (this.cache.has(key)) {
	                _context10.next = 26;
	                break;
	              }

	              _context10.next = 26;
	              return _item;

	            case 26:
	              _context10.next = 20;
	              break;

	            case 28:
	              _context10.next = 33;
	              break;

	            case 30:
	              _context10.prev = 30;
	              _context10.t1 = _context10["catch"](18);

	              _iterator8.e(_context10.t1);

	            case 33:
	              _context10.prev = 33;

	              _iterator8.f();

	              return _context10.finish(33);

	            case 36:
	            case "end":
	              return _context10.stop();
	          }
	        }
	      }, value, this, [[1, 11, 14, 17], [18, 30, 33, 36]]);
	    })
	  }, {
	    key: "size",
	    get: function get() {
	      var oldCacheSize = 0;

	      var _iterator9 = _createForOfIteratorHelper(this.oldCache.keys()),
	          _step9;

	      try {
	        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
	          var key = _step9.value;

	          if (!this.cache.has(key)) {
	            oldCacheSize++;
	          }
	        }
	      } catch (err) {
	        _iterator9.e(err);
	      } finally {
	        _iterator9.f();
	      }

	      return this._size + oldCacheSize;
	    }
	  }]);

	  return QuickLRU;
	}();

	var CigarOperationTable = {
	  "ALIGNMENT_MATCH": "M",
	  "INSERT": "I",
	  "DELETE": "D",
	  "SKIP": "N",
	  "CLIP_SOFT": "S",
	  "CLIP_HARD": "H",
	  "PAD": "P",
	  "SEQUENCE_MATCH": "=",
	  "SEQUENCE_MISMATCH": "X"
	};

	var Ga4ghAlignmentReader = function Ga4ghAlignmentReader(config, genome) {
	  this.config = config;
	  this.genome = genome;
	  this.url = config.url;
	  this.filter = new BamFilter(config.filter);
	  this.readGroupSetIds = config.readGroupSetIds;
	  this.authKey = config.authKey; // Might be undefined or nill

	  this.samplingWindowSize = config.samplingWindowSize === undefined ? 100 : config.samplingWindowSize;
	  this.samplingDepth = config.samplingDepth === undefined ? 1000 : config.samplingDepth;

	  if (config.viewAsPairs) {
	    this.pairsSupported = true;
	  } else {
	    this.pairsSupported = config.pairsSupported === undefined ? true : config.pairsSupported;
	  }
	};

	Ga4ghAlignmentReader.prototype.readAlignments = function (chr, bpStart, bpEnd) {
	  var genome = this.genome;
	  var self = this;
	  return getChrAliasTable().then(function (chrAliasTable) {
	    var queryChr = chrAliasTable.hasOwnProperty(chr) ? chrAliasTable[chr] : chr,
	        readURL = self.url + "/reads/search";
	    return ga4ghSearch({
	      url: readURL,
	      body: {
	        "readGroupSetIds": [self.readGroupSetIds],
	        "referenceName": queryChr,
	        "start": bpStart,
	        "end": bpEnd,
	        "pageSize": "10000"
	      },
	      decode: decodeGa4ghReads,
	      results: new AlignmentContainer(chr, bpStart, bpEnd, self.samplingWindowSize, self.samplingDepth, self.pairsSupported, self.alleleFreqThreshold)
	    });
	  });

	  function getChrAliasTable() {
	    if (self.chrAliasTable) {
	      return Promise.resolve(self.chrAliasTable);
	    } else {
	      return self.readMetadata().then(function (json) {
	        self.chrAliasTable = {};

	        if (genome && json.readGroups && json.readGroups.length > 0) {
	          var referenceSetId = json.readGroups[0].referenceSetId;

	          if (referenceSetId) {
	            // Query for reference names to build an alias table (map of genome ref names -> dataset ref names)
	            var readURL = self.url + "/references/search";
	            return ga4ghSearch({
	              url: readURL,
	              body: {
	                "referenceSetId": referenceSetId
	              },
	              decode: function decode(j) {
	                return j.references;
	              }
	            }).then(function (references) {
	              references.forEach(function (ref) {
	                var refName = ref.name,
	                    alias = genome.getChromosomeName(refName);
	                self.chrAliasTable[alias] = refName;
	              });
	              return self.chrAliasTable;
	            });
	          } else {
	            // Try hardcoded constants -- workaround for non-compliant data at Google
	            populateChrAliasTable(self.chrAliasTable, self.config.datasetId);
	            return self.chrAliasTable;
	          }
	        } else {
	          // No browser object, can't build map.  This can occur when run from unit tests
	          return self.chrAliasTable;
	        }
	      });
	    }
	  }
	  /**
	   * Decode an array of ga4gh read records
	   *
	    */


	  function decodeGa4ghReads(j) {
	    var i,
	        jsonRecords = j.alignments,
	        len = jsonRecords.length,
	        alignment,
	        jsonAlignment,
	        cigarDecoded,
	        alignments = [],
	        mate,
	        blocks;

	    for (i = 0; i < len; i++) {
	      var record = jsonRecords[i];
	      alignment = new BamAlignment();
	      alignment.readName = record.fragmentName;
	      alignment.properPlacement = record.properPlacement;
	      alignment.duplicateFragment = record.duplicateFragment;
	      alignment.numberReads = record.numberReads;
	      alignment.fragmentLength = record.fragmentLength;
	      alignment.readNumber = record.readNumber;
	      alignment.failedVendorQualityChecks = record.failedVendorQualityChecks;
	      alignment.secondaryAlignment = record.secondaryAlignment;
	      alignment.supplementaryAlignment = record.supplementaryAlignment;
	      alignment.seq = record.alignedSequence;
	      alignment.qual = record.alignedQuality;
	      alignment.matePos = record.nextMatePosition;
	      alignment.tagDict = record.info;
	      alignment.flags = encodeFlags();
	      jsonAlignment = record.alignment;

	      if (jsonAlignment) {
	        alignment.mapped = true;
	        alignment.chr = record.alignment.position.referenceName;
	        if (genome) alignment.chr = genome.getChromosomeName(alignment.chr);
	        alignment.start = parseInt(record.alignment.position.position);
	        alignment.strand = !record.alignment.position.reverseStrand;
	        alignment.mq = record.alignment.mappingQuality;
	        alignment.cigar = encodeCigar(record.alignment.cigar);
	        cigarDecoded = translateCigar(record.alignment.cigar);
	        alignment.lengthOnRef = cigarDecoded.lengthOnRef;
	        blocks = makeBlocks(alignment, cigarDecoded.array);
	        alignment.blocks = blocks.blocks;
	        alignment.insertions = blocks.insertions;
	      } else {
	        alignment.mapped = false;
	      }

	      mate = record.nextMatePosition;

	      if (mate) {
	        alignment.mate = {
	          chr: mate.referenceFrame,
	          position: parseInt(mate.position),
	          strand: !mate.reverseStrand
	        };
	      }

	      if (self.filter.pass(alignment)) {
	        alignments.push(alignment);
	      }
	    }

	    return alignments; // Encode a cigar string -- used for popup text

	    function encodeCigar(cigarArray) {
	      var cigarString = "";
	      cigarArray.forEach(function (cigarUnit) {
	        var op = CigarOperationTable[cigarUnit.operation],
	            len = cigarUnit.operationLength;
	        cigarString = cigarString + (len + op);
	      });
	      return cigarString;
	    } // TODO -- implement me


	    function encodeFlags(json) {
	      return 0;
	    }

	    function translateCigar(cigar) {
	      var cigarUnit,
	          opLen,
	          opLtr,
	          lengthOnRef = 0,
	          cigarArray = [],
	          i;

	      for (i = 0; i < cigar.length; i++) {
	        cigarUnit = cigar[i];
	        opLtr = CigarOperationTable[cigarUnit.operation];
	        opLen = parseInt(cigarUnit.operationLength); // Google represents long as a String

	        if (opLtr === 'M' || opLtr === 'EQ' || opLtr === 'X' || opLtr === 'D' || opLtr === 'N' || opLtr === '=') lengthOnRef += opLen;
	        cigarArray.push({
	          len: opLen,
	          ltr: opLtr
	        });
	      }

	      return {
	        lengthOnRef: lengthOnRef,
	        array: cigarArray
	      };
	    }
	    /**
	     * Split the alignment record into blocks as specified in the cigarArray.  Each aligned block contains
	     * its portion of the read sequence and base quality strings.  A read sequence or base quality string
	     * of "*" indicates the value is not recorded.  In all other cases the length of the block sequence (block.seq)
	     * and quality string (block.qual) must == the block length.
	     *
	     * NOTE: Insertions are not yet treated // TODO
	     *
	     * @param record
	     * @param cigarArray
	     * @returns array of blocks
	     */


	    function makeBlocks(record, cigarArray) {
	      var blocks = [],
	          gaps,
	          insertions,
	          seqOffset = 0,
	          pos = record.start,
	          len = cigarArray.length,
	          gapType;

	      for (var i = 0; i < len; i++) {
	        var c = cigarArray[i];

	        switch (c.ltr) {
	          case 'H':
	            break;
	          // ignore hard clips

	          case 'P':
	            break;
	          // ignore pads

	          case 'S':
	            seqOffset += c.len;
	            gapType = 'S';
	            break;
	          // soft clip read bases

	          case 'N':
	          case 'D':
	            if (gaps === undefined) {
	              gaps = [];
	            }

	            gaps.push({
	              start: pos,
	              len: c.len,
	              type: c.ltr
	            });
	            pos += c.len;
	            break;

	          case 'I':
	            if (insertions === undefined) insertions = [];
	            insertions.push(new AlignmentBlock({
	              start: pos,
	              len: c.len,
	              seqOffset: seqOffset
	            }));
	            seqOffset += c.len;
	            break;

	          case 'M':
	          case 'EQ':
	          case '=':
	          case 'X':
	            blocks.push(new AlignmentBlock({
	              start: pos,
	              len: c.len,
	              seqOffset: seqOffset,
	              gapType: gapType
	            }));
	            seqOffset += c.len;
	            pos += c.len;
	            break;
	        }
	      }

	      return {
	        blocks: blocks,
	        insertions: insertions,
	        gaps: gaps
	      };
	    }
	  }
	};

	Ga4ghAlignmentReader.prototype.readMetadata = function () {
	  return ga4ghGet({
	    url: this.url,
	    entity: "readgroupsets",
	    entityId: this.readGroupSetIds
	  });
	};
	/**
	 * Hardcoded hack to work around some non-compliant google datasets
	 *
	 * @param chrAliasTable
	 * @param datasetId
	 */


	function populateChrAliasTable(chrAliasTable, datasetId) {
	  var i;

	  if ("461916304629" === datasetId || "337315832689" === datasetId) {
	    for (i = 1; i < 23; i++) {
	      chrAliasTable["chr" + i] = i;
	    }

	    chrAliasTable["chrX"] = "X";
	    chrAliasTable["chrY"] = "Y";
	    chrAliasTable["chrM"] = "MT";
	  }
	}

	var isString$5 = isString;

	var BamSource = /*#__PURE__*/function () {
	  function BamSource(config, browser) {
	    _classCallCheck(this, BamSource);

	    var genome = browser.genome;
	    this.config = config;
	    this.genome = genome;
	    this.alignmentContainer = undefined;

	    if (isString$5(config.url) && config.url.startsWith("data:")) {
	      if ("cram" === config.format) {
	        throw "CRAM data uris are not supported";
	      }

	      this.config.indexed = false;
	    }

	    if ("ga4gh" === config.sourceType) {
	      this.bamReader = new Ga4ghAlignmentReader(config, genome);
	    } else if ("pysam" === config.sourceType) {
	      this.bamReader = new BamWebserviceReader(config, genome);
	    } else if ("htsget" === config.sourceType) {
	      this.bamReader = new HtsgetReader(config, genome);
	    } else if ("shardedBam" === config.sourceType) {
	      this.bamReader = new ShardedBamReader(config, genome);
	    } else if ("cram" === config.format) {
	      this.bamReader = new CramReader(config, genome, browser);
	    } else {
	      if (this.config.indexed === false) {
	        this.bamReader = new BamReaderNonIndexed(config, genome);
	      } else {
	        this.bamReader = new BamReader(config, genome);
	      }
	    }

	    this.viewAsPairs = config.viewAsPairs;
	    this.showSoftClips = config.showSoftClips;
	  }

	  _createClass(BamSource, [{
	    key: "setViewAsPairs",
	    value: function setViewAsPairs(bool) {

	      if (this.viewAsPairs !== bool) {
	        this.viewAsPairs = bool; // if (this.alignmentContainer) {
	        //     this.alignmentContainer.setViewAsPairs(bool);
	        // }
	      }
	    }
	  }, {
	    key: "setShowSoftClips",
	    value: function setShowSoftClips(bool) {
	      if (this.showSoftClips !== bool) {
	        this.showSoftClips = bool;
	      }
	    }
	  }, {
	    key: "getAlignments",
	    value: function () {
	      var _getAlignments = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, bpStart, bpEnd) {
	        var genome, showSoftClips, alignmentContainer, alignments, hasAlignments, sequence;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                genome = this.genome;
	                showSoftClips = this.showSoftClips;

	                if (!(this.alignmentContainer && this.alignmentContainer.contains(chr, bpStart, bpEnd))) {
	                  _context.next = 6;
	                  break;
	                }

	                return _context.abrupt("return", this.alignmentContainer);

	              case 6:
	                _context.next = 8;
	                return this.bamReader.readAlignments(chr, bpStart, bpEnd);

	              case 8:
	                alignmentContainer = _context.sent;
	                alignments = alignmentContainer.alignments;

	                if (!this.viewAsPairs) {
	                  alignments = unpairAlignments([{
	                    alignments: alignments
	                  }]);
	                }

	                hasAlignments = alignments.length > 0;
	                alignmentContainer.packedAlignmentRows = packAlignmentRows(alignments, alignmentContainer.start, alignmentContainer.end, showSoftClips);
	                alignmentContainer.alignments = undefined; // Don't need to hold onto these anymore

	                this.alignmentContainer = alignmentContainer;

	                if (!hasAlignments) {
	                  _context.next = 26;
	                  break;
	                }

	                _context.next = 18;
	                return genome.sequence.getSequence(chr, alignmentContainer.start, alignmentContainer.end);

	              case 18:
	                sequence = _context.sent;

	                if (!sequence) {
	                  _context.next = 25;
	                  break;
	                }

	                alignmentContainer.coverageMap.refSeq = sequence; // TODO -- fix this

	                alignmentContainer.sequence = sequence; // TODO -- fix this

	                return _context.abrupt("return", alignmentContainer);

	              case 25:
	                console.error("No sequence for: " + chr + ":" + alignmentContainer.start + "-" + alignmentContainer.end);

	              case 26:
	                return _context.abrupt("return", alignmentContainer);

	              case 27:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function getAlignments(_x, _x2, _x3) {
	        return _getAlignments.apply(this, arguments);
	      }

	      return getAlignments;
	    }()
	  }]);

	  return BamSource;
	}();

	var alignmentStartGap = 5;
	var downsampleRowHeight = 5;
	var DEFAULT_COVERAGE_TRACK_HEIGHT = 50;
	var DEFAULT_TRACK_HEIGHT = 300;
	var DEFAULT_ALIGNMENT_COLOR = "rgb(185, 185, 185)";
	var DEFAULT_COVERAGE_COLOR = "rgb(150, 150, 150)";
	var DEFAULT_CONNECTOR_COLOR = "rgb(200, 200, 200)";

	var BAMTrack = /*#__PURE__*/function (_TrackBase) {
	  _inherits(BAMTrack, _TrackBase);

	  var _super = _createSuper(BAMTrack);

	  function BAMTrack(config, browser) {
	    var _this;

	    _classCallCheck(this, BAMTrack);

	    _this = _super.call(this, config, browser);
	    _this.type = "alignment"; // Not sure this is used for anything

	    if (config.alleleFreqThreshold === undefined) {
	      config.alleleFreqThreshold = 0.2;
	    }

	    _this.featureSource = new BamSource(config, browser);
	    _this.showCoverage = config.showCoverage === undefined ? true : config.showCoverage;
	    _this.showAlignments = config.showAlignments === undefined ? true : config.showAlignments;
	    _this.coverageTrack = new CoverageTrack(config, _assertThisInitialized(_this));
	    _this.alignmentTrack = new AlignmentTrack(config, _assertThisInitialized(_this));

	    _this.alignmentTrack.setTop(_this.coverageTrack, _this.showCoverage);

	    _this.visibilityWindow = config.visibilityWindow || 30000;
	    _this.viewAsPairs = config.viewAsPairs;
	    _this.pairsSupported = config.pairsSupported !== false;
	    _this.showSoftClips = config.showSoftClips;
	    _this.showAllBases = config.showAllBases;
	    _this.showMismatches = config.showMismatches !== false;
	    _this.color = config.color || DEFAULT_ALIGNMENT_COLOR;
	    _this.coverageColor = config.coverageColor || DEFAULT_COVERAGE_COLOR;
	    _this.minFragmentLength = config.minFragmentLength; // Optional, might be undefined

	    _this.maxFragmentLength = config.maxFragmentLength; // The sort object can be an array in the case of multi-locus view, however if multiple sort positions
	    // are present for a given reference frame the last one will take precedence

	    if (config.sort) {
	      if (Array.isArray(config.sort)) {
	        // Legacy support
	        _this.assignSort(config.sort[0]);
	      } else {
	        _this.assignSort(config.sort);
	      }
	    } // Invoke height setter last to allocated to coverage and alignment tracks


	    _this.height = config.height !== undefined ? config.height : DEFAULT_TRACK_HEIGHT;
	    return _this;
	  }

	  _createClass(BAMTrack, [{
	    key: "sort",
	    value: function sort(options) {
	      options = this.assignSort(options);

	      var _iterator = _createForOfIteratorHelper(this.trackView.viewports),
	          _step;

	      try {
	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          var vp = _step.value;

	          if (vp.containsPosition(options.chr, options.position)) {
	            var alignmentContainer = vp.getCachedFeatures();

	            if (alignmentContainer) {
	              sortAlignmentRows(options, alignmentContainer);
	              vp.repaint();
	            }
	          }
	        }
	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }
	    }
	    /**
	     * Fix syntax problems for sort options.
	     * @param options
	     */

	  }, {
	    key: "assignSort",
	    value: function assignSort(options) {
	      // convert old syntax
	      if (options.locus) {
	        var range = parseLocusString(options.locus);
	        options.chr = range.chr;
	        options.position = range.start;
	      } else {
	        options.position--;
	      }

	      options.direction = options.direction === "ASC" || options.direction === true; // chr aliasing

	      options.chr = this.browser.genome.getChromosomeName(options.chr);
	      this.sortObject = options;
	      return this.sortObject;
	    }
	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, bpStart, bpEnd, bpPerPixel, viewport) {
	        var alignmentContainer, sort;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return this.featureSource.getAlignments(chr, bpStart, bpEnd);

	              case 2:
	                alignmentContainer = _context.sent;

	                if (alignmentContainer.alignments && alignmentContainer.alignments.length > 99) {
	                  if (undefined === this.minFragmentLength) {
	                    this.minFragmentLength = alignmentContainer.pairedEndStats.lowerFragmentLength;
	                  }

	                  if (undefined === this.maxFragmentLength) {
	                    this.maxFragmentLength = alignmentContainer.pairedEndStats.upperFragmentLength;
	                  }
	                }

	                sort = this.sortObject;

	                if (sort) {
	                  if (sort.chr === chr && sort.position >= bpStart && sort.position <= bpEnd) {
	                    sortAlignmentRows(sort, alignmentContainer);
	                  }
	                }

	                return _context.abrupt("return", alignmentContainer);

	              case 7:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function getFeatures(_x, _x2, _x3, _x4, _x5) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	    /**
	     * Compute the pixel height required to display all content.  This is not the same as the viewport height
	     * (track.height) which might include a scrollbar.
	     *
	     * @param alignmentContainer
	     * @returns {number}
	     */

	  }, {
	    key: "computePixelHeight",
	    value: function computePixelHeight(alignmentContainer) {
	      return (this.showCoverage ? this.coverageTrack.height : 0) + (this.showAlignments ? this.alignmentTrack.computePixelHeight(alignmentContainer) : 0) + 15;
	    }
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      IGVGraphics.fillRect(options.context, 0, options.pixelTop, options.pixelWidth, options.pixelHeight, {
	        'fillStyle': "rgb(255, 255, 255)"
	      });

	      if (true === this.showCoverage && this.coverageTrack.height > 0) {
	        this.trackView.controlCanvas.style.display = 'block';
	        this.coverageTrack.draw(options);
	      } else {
	        this.trackView.controlCanvas.style.display = 'none';
	      }

	      if (true === this.showAlignments) {
	        this.alignmentTrack.setTop(this.coverageTrack, this.showCoverage);
	        this.alignmentTrack.draw(options);
	      }
	    }
	  }, {
	    key: "paintAxis",
	    value: function paintAxis(ctx, pixelWidth, pixelHeight) {
	      if (this.browser.isMultiLocusMode()) {
	        ctx.clearRect(0, 0, pixelWidth, pixelHeight);
	      } else {
	        this.coverageTrack.paintAxis(ctx, pixelWidth, this.coverageTrack.height);
	      }
	    }
	  }, {
	    key: "contextMenuItemList",
	    value: function contextMenuItemList(config) {
	      return this.alignmentTrack.contextMenuItemList(config);
	    }
	  }, {
	    key: "popupData",
	    value: function popupData(config) {
	      if (true === this.showCoverage && config.y >= this.coverageTrack.top && config.y < this.coverageTrack.height) {
	        return this.coverageTrack.popupData(config);
	      } else {
	        return this.alignmentTrack.popupData(config);
	      }
	    }
	  }, {
	    key: "menuItemList",
	    value: function menuItemList() {
	      var _this2 = this;

	      // Start with overage track items
	      var menuItems = ["<hr/>"];
	      menuItems = menuItems.concat(MenuUtils.numericDataMenuItems(this.trackView)); // Color by items

	      var $e = $('<div class="igv-track-menu-category igv-track-menu-border-top">');
	      $e.text('Color by');
	      menuItems.push({
	        name: undefined,
	        object: $e,
	        click: undefined,
	        init: undefined
	      });
	      var colorByMenuItems = [{
	        key: 'strand',
	        label: 'read strand'
	      }];

	      if (this.alignmentTrack.hasPairs) {
	        colorByMenuItems.push({
	          key: 'firstOfPairStrand',
	          label: 'first-of-pair strand'
	        });
	        colorByMenuItems.push({
	          key: 'pairOrientation',
	          label: 'pair orientation'
	        });
	        colorByMenuItems.push({
	          key: 'fragmentLength',
	          label: 'insert size (TLEN)'
	        });
	      }

	      var tagLabel = 'tag' + (this.alignmentTrack.colorByTag ? ' (' + this.alignmentTrack.colorByTag + ')' : '');
	      colorByMenuItems.push({
	        key: 'tag',
	        label: tagLabel
	      });

	      for (var _i = 0, _colorByMenuItems = colorByMenuItems; _i < _colorByMenuItems.length; _i++) {
	        var item = _colorByMenuItems[_i];
	        var selected = this.alignmentTrack.colorBy === item.key;
	        menuItems.push(this.colorByCB(item, selected));
	      } // Show coverage / alignment options


	      var adjustTrackHeight = function adjustTrackHeight() {
	        if (!_this2.autoHeight) {
	          var h = 15 + (_this2.showCoverage ? _this2.coverageTrack.height : 0) + (_this2.showAlignments ? _this2.alignmentTrack.height : 0);

	          _this2.trackView.setTrackHeight(h);
	        }
	      };

	      menuItems.push({
	        object: $('<div class="igv-track-menu-border-top">')
	      });
	      menuItems.push({
	        object: createCheckbox$1("Show Coverage", this.showCoverage),
	        click: function click() {
	          _this2.showCoverage = !_this2.showCoverage;
	          adjustTrackHeight();

	          _this2.trackView.checkContentHeight();

	          _this2.trackView.repaintViews();
	        }
	      });
	      menuItems.push({
	        object: createCheckbox$1("Show Alignments", this.showAlignments),
	        click: function click() {
	          _this2.showAlignments = !_this2.showAlignments;
	          adjustTrackHeight();

	          _this2.trackView.checkContentHeight();

	          _this2.trackView.repaintViews();
	        }
	      }); // Show all bases

	      menuItems.push({
	        object: $('<div class="igv-track-menu-border-top">')
	      });
	      menuItems.push({
	        object: createCheckbox$1("Show all bases", this.showAllBases),
	        click: function click() {
	          _this2.showAllBases = !_this2.showAllBases;
	          _this2.config.showAllBases = _this2.showAllBases;

	          _this2.trackView.repaintViews();
	        }
	      });
	      menuItems.push({
	        object: $('<div class="igv-track-menu-border-top">')
	      }); // View as pairs

	      if (this.pairsSupported && this.alignmentTrack.hasPairs) {
	        menuItems.push({
	          object: createCheckbox$1("View as pairs", this.viewAsPairs),
	          click: function click() {
	            _this2.viewAsPairs = !_this2.viewAsPairs;
	            _this2.config.viewAsPairs = _this2.viewAsPairs;

	            _this2.featureSource.setViewAsPairs(_this2.viewAsPairs);

	            var alignmentContainers = _this2.getCachedAlignmentContainers();

	            var _iterator2 = _createForOfIteratorHelper(alignmentContainers),
	                _step2;

	            try {
	              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	                var ac = _step2.value;
	                ac.setViewAsPairs(_this2.viewAsPairs);
	              }
	            } catch (err) {
	              _iterator2.e(err);
	            } finally {
	              _iterator2.f();
	            }

	            _this2.trackView.repaintViews();
	          }
	        });
	      } // Soft clips


	      menuItems.push({
	        object: createCheckbox$1("Show soft clips", this.showSoftClips),
	        click: function click() {
	          _this2.showSoftClips = !_this2.showSoftClips;
	          _this2.config.showSoftClips = _this2.showSoftClips;

	          _this2.featureSource.setShowSoftClips(_this2.showSoftClips);

	          var alignmentContainers = _this2.getCachedAlignmentContainers();

	          var _iterator3 = _createForOfIteratorHelper(alignmentContainers),
	              _step3;

	          try {
	            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	              var ac = _step3.value;
	              ac.setShowSoftClips(_this2.showSoftClips);
	            }
	          } catch (err) {
	            _iterator3.e(err);
	          } finally {
	            _iterator3.f();
	          }

	          _this2.trackView.repaintViews();
	        }
	      }); // Display mode

	      var $displayModeLabel = $('<div class="igv-track-menu-category igv-track-menu-border-top">');
	      $displayModeLabel.text('Display mode');
	      menuItems.push({
	        name: undefined,
	        object: $displayModeLabel,
	        click: undefined,
	        init: undefined
	      });
	      menuItems.push({
	        object: createCheckbox$1("expand", this.alignmentTrack.displayMode === "EXPANDED"),
	        click: function click() {
	          _this2.alignmentTrack.displayMode = "EXPANDED";
	          _this2.config.displayMode = "EXPANDED";

	          _this2.trackView.checkContentHeight();

	          _this2.trackView.repaintViews();
	        }
	      });
	      menuItems.push({
	        object: createCheckbox$1("squish", this.alignmentTrack.displayMode === "SQUISHED"),
	        click: function click() {
	          _this2.alignmentTrack.displayMode = "SQUISHED";
	          _this2.config.displayMode = "SQUISHED";

	          _this2.trackView.checkContentHeight();

	          _this2.trackView.repaintViews();
	        }
	      });
	      return menuItems;
	    }
	    /**
	     * Create a "color by" checkbox menu item, optionally initially checked
	     * @param menuItem
	     * @param showCheck
	     * @returns {{init: undefined, name: undefined, click: clickHandler, object: (jQuery|HTMLElement|jQuery.fn.init)}}
	     */

	  }, {
	    key: "colorByCB",
	    value: function colorByCB(menuItem, showCheck) {
	      var _this3 = this;

	      var $e = createCheckbox$1(menuItem.label, showCheck);

	      var clickHandler = function clickHandler(ev) {
	        if (menuItem.key === _this3.alignmentTrack.colorBy) {
	          _this3.alignmentTrack.colorBy = 'none';
	          _this3.config.colorBy = 'none';

	          _this3.trackView.repaintViews();
	        } else if ('tag' === menuItem.key) {
	          _this3.browser.inputDialog.present({
	            label: 'Tag Name',
	            value: _this3.alignmentTrack.colorByTag ? _this3.alignmentTrack.colorByTag : '',
	            callback: function callback(tag) {
	              _this3.alignmentTrack.colorBy = 'tag';
	              _this3.config.colorBy = 'tag';

	              if (tag !== _this3.alignmentTrack.colorByTag) {
	                _this3.alignmentTrack.colorByTag = tag;
	                _this3.config.colorByTag = tag;
	                _this3.alignmentTrack.tagColors = new PaletteColorTable("Set1");
	                $('#color-by-tag').text(self.alignmentTrack.colorByTag);
	              }

	              _this3.trackView.repaintViews();
	            }
	          }, ev);
	        } else {
	          _this3.alignmentTrack.colorBy = menuItem.key;
	          _this3.config.colorBy = menuItem.key;

	          _this3.trackView.repaintViews();
	        }
	      };

	      return {
	        name: undefined,
	        object: $e,
	        click: clickHandler,
	        init: undefined
	      };
	    }
	    /**
	     * Called when the track is removed.  Do any needed cleanup here
	     */

	  }, {
	    key: "dispose",
	    value: function dispose() {
	      this.trackView = undefined;
	    }
	    /**
	     * Return the current state of the track.  Used to create sessions and bookmarks.
	     *
	     * @returns {*|{}}
	     */

	  }, {
	    key: "getState",
	    value: function getState() {
	      var config = _get(_getPrototypeOf(BAMTrack.prototype), "getState", this).call(this);

	      if (this.sortObject) {
	        config.sort = {
	          chr: this.sortObject.chr,
	          position: this.sortObject.position + 1,
	          option: this.sortObject.option,
	          direction: this.sortObject.direction ? "ASC" : "DESC"
	        };
	      }

	      return config;
	    }
	  }, {
	    key: "getCachedAlignmentContainers",
	    value: function getCachedAlignmentContainers() {
	      return this.trackView.viewports.map(function (vp) {
	        return vp.getCachedFeatures();
	      });
	    }
	  }, {
	    key: "height",
	    set: function set(h) {
	      this._height = h;

	      if (this.coverageTrack && this.showAlignments) {
	        this.alignmentTrack.height = this.showCoverage ? h - this.coverageTrack.height : h;
	      }
	    },
	    get: function get() {
	      return this._height;
	    }
	  }, {
	    key: "dataRange",
	    get: function get() {
	      return this.coverageTrack.dataRange;
	    },
	    set: function set(dataRange) {
	      this.coverageTrack.dataRange = dataRange;
	    }
	  }, {
	    key: "logScale",
	    get: function get() {
	      return this.coverageTrack.logScale;
	    },
	    set: function set(logScale) {
	      this.coverageTrack.logScale = logScale;
	    }
	  }, {
	    key: "autoscale",
	    get: function get() {
	      return this.coverageTrack.autoscale;
	    },
	    set: function set(autoscale) {
	      this.coverageTrack.autoscale = autoscale;
	    }
	  }]);

	  return BAMTrack;
	}(TrackBase);

	var CoverageTrack = /*#__PURE__*/function () {
	  function CoverageTrack(config, parent) {
	    _classCallCheck(this, CoverageTrack);

	    this.parent = parent;
	    this.featureSource = parent.featureSource;
	    this.height = config.coverageTrackHeight !== undefined ? config.coverageTrackHeight : DEFAULT_COVERAGE_TRACK_HEIGHT;
	    this.paintAxis = paintAxis;
	    this.top = 0;
	    this.autoscale = config.autoscale || config.max === undefined;

	    if (!this.autoscale) {
	      this.dataRange = {
	        min: config.min || 0,
	        max: config.max
	      };
	    }
	  }

	  _createClass(CoverageTrack, [{
	    key: "draw",
	    value: function draw(options) {
	      var pixelTop = options.pixelTop;
	      var pixelBottom = pixelTop + options.pixelHeight;
	      var nucleotideColors = this.parent.browser.nucleotideColors;

	      if (pixelTop > this.height) {
	        return; //scrolled out of view
	      }

	      var ctx = options.context;
	      var alignmentContainer = options.features;
	      var coverageMap = alignmentContainer.coverageMap;
	      var sequence;

	      if (coverageMap.refSeq) {
	        sequence = coverageMap.refSeq.toUpperCase();
	      }

	      var bpPerPixel = options.bpPerPixel;
	      var bpStart = options.bpStart;
	      var pixelWidth = options.pixelWidth;
	      var bpEnd = bpStart + pixelWidth * bpPerPixel + 1; // paint for all coverage buckets
	      // If alignment track color is != default, use it

	      var color = this.parent.coverageColor;

	      if (this.parent.color !== DEFAULT_ALIGNMENT_COLOR) {
	        color = IGVColor.darkenLighten(this.parent.color, -35);
	      }

	      IGVGraphics.setProperties(ctx, {
	        fillStyle: color,
	        strokeStyle: color
	      });
	      var w = Math.max(1, Math.ceil(1.0 / bpPerPixel));

	      for (var i = 0, len = coverageMap.coverage.length; i < len; i++) {
	        var bp = coverageMap.bpStart + i;
	        if (bp < bpStart) continue;
	        if (bp > bpEnd) break;
	        var item = coverageMap.coverage[i];
	        if (!item) continue;
	        var h = Math.round(item.total / this.dataRange.max * this.height);
	        var y = this.height - h;
	        var x = Math.floor((bp - bpStart) / bpPerPixel); // IGVGraphics.setProperties(ctx, {fillStyle: "rgba(0, 200, 0, 0.25)", strokeStyle: "rgba(0, 200, 0, 0.25)" });

	        IGVGraphics.fillRect(ctx, x, y, w, h);
	      } // coverage mismatch coloring -- don't try to do this in above loop, color bar will be overwritten when w<1


	      if (sequence) {
	        for (var _i2 = 0, _len = coverageMap.coverage.length; _i2 < _len; _i2++) {
	          var _bp = coverageMap.bpStart + _i2;

	          if (_bp < bpStart) continue;
	          if (_bp > bpEnd) break;
	          var _item = coverageMap.coverage[_i2];
	          if (!_item) continue;

	          var _h = _item.total / this.dataRange.max * this.height;

	          var _y = this.height - _h;

	          var _x6 = Math.floor((_bp - bpStart) / bpPerPixel);

	          var refBase = sequence[_i2];

	          if (_item.isMismatch(refBase)) {
	            IGVGraphics.setProperties(ctx, {
	              fillStyle: nucleotideColors[refBase]
	            });
	            IGVGraphics.fillRect(ctx, _x6, _y, w, _h);
	            var accumulatedHeight = 0.0;

	            for (var _i3 = 0, _arr = ["A", "C", "T", "G"]; _i3 < _arr.length; _i3++) {
	              var nucleotide = _arr[_i3];
	              var count = _item["pos" + nucleotide] + _item["neg" + nucleotide]; // non-logoritmic

	              var hh = count / this.dataRange.max * this.height;
	              _y = this.height - hh - accumulatedHeight;
	              accumulatedHeight += hh;
	              IGVGraphics.setProperties(ctx, {
	                fillStyle: nucleotideColors[nucleotide]
	              });
	              IGVGraphics.fillRect(ctx, _x6, _y, w, hh);
	            }
	          }
	        }
	      }
	    }
	  }, {
	    key: "popupData",
	    value: function popupData(config) {
	      var features = config.viewport.getCachedFeatures();
	      if (!features || features.length === 0) return;
	      var genomicLocation = Math.floor(config.genomicLocation),
	          referenceFrame = config.viewport.referenceFrame,
	          coverageMap = features.coverageMap,
	          nameValues = [],
	          coverageMapIndex = Math.floor(genomicLocation - coverageMap.bpStart),
	          coverage = coverageMap.coverage[coverageMapIndex];

	      if (coverage) {
	        nameValues.push(referenceFrame.chr + ":" + numberFormatter(1 + genomicLocation));
	        nameValues.push({
	          name: 'Total Count',
	          value: coverage.total
	        }); // A

	        var tmp = coverage.posA + coverage.negA;
	        if (tmp > 0) tmp = tmp.toString() + " (" + Math.round(tmp / coverage.total * 100.0) + "%, " + coverage.posA + "+, " + coverage.negA + "- )";
	        nameValues.push({
	          name: 'A',
	          value: tmp
	        }); // C

	        tmp = coverage.posC + coverage.negC;
	        if (tmp > 0) tmp = tmp.toString() + " (" + Math.round(tmp / coverage.total * 100.0) + "%, " + coverage.posC + "+, " + coverage.negC + "- )";
	        nameValues.push({
	          name: 'C',
	          value: tmp
	        }); // G

	        tmp = coverage.posG + coverage.negG;
	        if (tmp > 0) tmp = tmp.toString() + " (" + Math.round(tmp / coverage.total * 100.0) + "%, " + coverage.posG + "+, " + coverage.negG + "- )";
	        nameValues.push({
	          name: 'G',
	          value: tmp
	        }); // T

	        tmp = coverage.posT + coverage.negT;
	        if (tmp > 0) tmp = tmp.toString() + " (" + Math.round(tmp / coverage.total * 100.0) + "%, " + coverage.posT + "+, " + coverage.negT + "- )";
	        nameValues.push({
	          name: 'T',
	          value: tmp
	        }); // N

	        tmp = coverage.posN + coverage.negN;
	        if (tmp > 0) tmp = tmp.toString() + " (" + Math.round(tmp / coverage.total * 100.0) + "%, " + coverage.posN + "+, " + coverage.negN + "- )";
	        nameValues.push({
	          name: 'N',
	          value: tmp
	        });
	        nameValues.push('<HR/>');
	        nameValues.push({
	          name: 'DEL',
	          value: coverage.del.toString()
	        });
	        nameValues.push({
	          name: 'INS',
	          value: coverage.ins.toString()
	        });
	      }

	      return nameValues;
	    }
	  }]);

	  return CoverageTrack;
	}();

	var AlignmentTrack = /*#__PURE__*/function () {
	  function AlignmentTrack(config, parent) {
	    _classCallCheck(this, AlignmentTrack);

	    this.parent = parent;
	    this.browser = parent.browser;
	    this.featureSource = parent.featureSource;
	    this.top = 0 === config.coverageTrackHeight ? 0 : config.coverageTrackHeight + 5;
	    this.displayMode = config.displayMode || "EXPANDED";
	    this.alignmentRowHeight = config.alignmentRowHeight || 14;
	    this.squishedRowHeight = config.squishedRowHeight || 3;
	    this.negStrandColor = config.negStrandColor || "rgba(150, 150, 230, 0.75)";
	    this.posStrandColor = config.posStrandColor || "rgba(230, 150, 150, 0.75)";
	    this.insertionColor = config.insertionColor || "rgb(138, 94, 161)";
	    this.deletionColor = config.deletionColor || "black";
	    this.skippedColor = config.skippedColor || "rgb(150, 170, 170)";
	    this.pairConnectorColor = config.pairConnectorColor;
	    this.smallFragmentLengthColor = config.smallFragmentLengthColor || "rgb(0, 0, 150)";
	    this.largeFragmentLengthColor = config.largeFragmentLengthColor || "rgb(200, 0, 0)";
	    this.pairOrientation = config.pairOrienation || 'fr';
	    this.pairColors = {};
	    this.pairColors["RL"] = config.rlColor || "rgb(0, 150, 0)";
	    this.pairColors["RR"] = config.rrColor || "rgb(20, 50, 200)";
	    this.pairColors["LL"] = config.llColor || "rgb(0, 150, 150)";
	    this.colorBy = config.colorBy || "pairOrientation";
	    this.colorByTag = config.colorByTag ? config.colorByTag.toUpperCase() : undefined;
	    this.bamColorTag = config.bamColorTag === undefined ? "YC" : config.bamColorTag;
	    this.hideSmallIndels = config.hideSmallIndels;
	    this.indelSizeThreshold = config.indelSizeThreshold || 1;
	    this.hasPairs = false; // Until proven otherwise
	  }

	  _createClass(AlignmentTrack, [{
	    key: "setTop",
	    value: function setTop(coverageTrack, showCoverage) {
	      this.top = 0 === coverageTrack.height || false === showCoverage ? 0 : 5 + coverageTrack.height;
	    }
	    /**
	     * Compute the pixel height required to display all content.
	     *
	     * @param alignmentContainer
	     * @returns {number|*}
	     */

	  }, {
	    key: "computePixelHeight",
	    value: function computePixelHeight(alignmentContainer) {
	      if (alignmentContainer.packedAlignmentRows) {
	        var h = alignmentContainer.hasDownsampledIntervals() ? downsampleRowHeight + alignmentStartGap : 0;
	        var alignmentRowHeight = this.displayMode === "SQUISHED" ? this.squishedRowHeight : this.alignmentRowHeight;
	        return h + alignmentRowHeight * alignmentContainer.packedAlignmentRows.length + 5;
	      } else {
	        return 0;
	      }
	    }
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      var alignmentContainer = options.features;
	      var ctx = options.context;
	      var bpPerPixel = options.bpPerPixel;
	      var bpStart = options.bpStart;
	      var pixelWidth = options.pixelWidth;
	      var bpEnd = bpStart + pixelWidth * bpPerPixel + 1;
	      var packedAlignmentRows = alignmentContainer.packedAlignmentRows;
	      var showSoftClips = this.parent.showSoftClips;
	      var showAllBases = this.parent.showAllBases;
	      var nucleotideColors = this.browser.nucleotideColors;
	      var referenceSequence = alignmentContainer.sequence;

	      if (referenceSequence) {
	        referenceSequence = referenceSequence.toUpperCase();
	      }

	      var alignmentRowYInset = 0;
	      var pixelTop = options.pixelTop;
	      ctx.save();

	      if (this.top) {
	        ctx.translate(0, this.top);
	      }

	      var pixelBottom = pixelTop + options.pixelHeight;

	      if (alignmentContainer.hasDownsampledIntervals()) {
	        alignmentRowYInset = downsampleRowHeight + alignmentStartGap;
	        alignmentContainer.downsampledIntervals.forEach(function (interval) {
	          var xBlockStart = (interval.start - bpStart) / bpPerPixel,
	              xBlockEnd = (interval.end - bpStart) / bpPerPixel;

	          if (xBlockEnd - xBlockStart > 5) {
	            xBlockStart += 1;
	            xBlockEnd -= 1;
	          }

	          IGVGraphics.fillRect(ctx, xBlockStart, 2, xBlockEnd - xBlockStart, downsampleRowHeight - 2, {
	            fillStyle: "black"
	          });
	        });
	      } else {
	        alignmentRowYInset = 0;
	      } // Transient variable -- rewritten on every draw, used for click object selection


	      this.alignmentsYOffset = alignmentRowYInset;
	      var alignmentRowHeight = this.displayMode === "SQUISHED" ? this.squishedRowHeight : this.alignmentRowHeight;

	      if (packedAlignmentRows) {
	        var nRows = packedAlignmentRows.length;

	        for (var rowIndex = 0; rowIndex < nRows; rowIndex++) {
	          var alignmentRow = packedAlignmentRows[rowIndex];
	          var alignmentY = alignmentRowYInset + alignmentRowHeight * rowIndex;
	          var alignmentHeight = alignmentRowHeight <= 4 ? alignmentRowHeight : alignmentRowHeight - 2;

	          if (alignmentY > pixelBottom) {
	            break;
	          } else if (alignmentY + alignmentHeight < pixelTop) {
	            continue;
	          }

	          var _iterator4 = _createForOfIteratorHelper(alignmentRow.alignments),
	              _step4;

	          try {
	            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	              var alignment = _step4.value;
	              this.hasPairs = this.hasPairs || alignment.isPaired();
	              if (alignment.start + alignment.lengthOnRef < bpStart) continue;
	              if (alignment.start > bpEnd) break;

	              if (true === alignment.hidden) {
	                continue;
	              }

	              if (alignment instanceof PairedAlignment) {
	                drawPairConnector.call(this, alignment, alignmentY, alignmentHeight);
	                drawSingleAlignment.call(this, alignment.firstAlignment, alignmentY, alignmentHeight);

	                if (alignment.secondAlignment) {
	                  drawSingleAlignment.call(this, alignment.secondAlignment, alignmentY, alignmentHeight);
	                }
	              } else {
	                drawSingleAlignment.call(this, alignment, alignmentY, alignmentHeight);
	              }
	            }
	          } catch (err) {
	            _iterator4.e(err);
	          } finally {
	            _iterator4.f();
	          }
	        }
	      }

	      ctx.restore(); // alignment is a PairedAlignment

	      function drawPairConnector(alignment, yRect, alignmentHeight) {
	        var connectorColor = this.getConnectorColor(alignment.firstAlignment),
	            xBlockStart = (alignment.connectingStart - bpStart) / bpPerPixel,
	            xBlockEnd = (alignment.connectingEnd - bpStart) / bpPerPixel,
	            yStrokedLine = yRect + alignmentHeight / 2;

	        if (alignment.connectingEnd < bpStart || alignment.connectingStart > bpEnd) {
	          return;
	        }

	        if (alignment.mq <= 0) {
	          connectorColor = IGVColor.addAlpha(connectorColor, 0.15);
	        }

	        IGVGraphics.setProperties(ctx, {
	          fillStyle: connectorColor,
	          strokeStyle: connectorColor
	        });
	        IGVGraphics.strokeLine(ctx, xBlockStart, yStrokedLine, xBlockEnd, yStrokedLine);
	      }

	      function drawSingleAlignment(alignment, yRect, alignmentHeight) {
	        if (alignment.start + alignment.lengthOnRef < bpStart || alignment.start > bpEnd) {
	          return;
	        }

	        var blocks = showSoftClips ? alignment.blocks : alignment.blocks.filter(function (b) {
	          return 'S' !== b.type;
	        });
	        var alignmentColor = this.getAlignmentColor(alignment);
	        var outlineColor = alignmentColor;

	        if (alignment.mq <= 0) {
	          alignmentColor = IGVColor.addAlpha(alignmentColor, 0.15);
	        }

	        IGVGraphics.setProperties(ctx, {
	          fillStyle: alignmentColor,
	          strokeStyle: outlineColor
	        });

	        for (var b = 0; b < blocks.length; b++) {
	          // Can't use forEach here -- we need ability to break
	          var block = blocks[b]; // Somewhat complex test, neccessary to insure gaps are drawn.
	          // If this is not the last block, and the next block starts before the orign (off screen to left) then skip.

	          if (b !== blocks.length - 1 && blocks[b + 1].start < bpStart) continue;
	          drawBlock.call(this, block, b);

	          if (block.start + block.len > bpEnd) {
	            // Do this after drawBlock to insure gaps are drawn
	            break;
	          }
	        }

	        if (alignment.insertions) {
	          var lastXBlockStart = -1;

	          var _iterator5 = _createForOfIteratorHelper(alignment.insertions),
	              _step5;

	          try {
	            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
	              var insertionBlock = _step5.value;

	              if (this.hideSmallIndels && insertionBlock.len <= this.indelSizeThreshold) {
	                continue;
	              }

	              if (insertionBlock.start < bpStart) {
	                continue;
	              }

	              if (insertionBlock.start > bpEnd) {
	                break;
	              }

	              var refOffset = insertionBlock.start - bpStart;
	              var xBlockStart = refOffset / bpPerPixel - 1;

	              if (xBlockStart - lastXBlockStart > 2) {
	                var widthBlock = 3;
	                IGVGraphics.fillRect(ctx, xBlockStart, yRect - 1, widthBlock, alignmentHeight + 2, {
	                  fillStyle: this.insertionColor
	                });
	                lastXBlockStart = xBlockStart;
	              }
	            }
	          } catch (err) {
	            _iterator5.e(err);
	          } finally {
	            _iterator5.f();
	          }
	        }

	        if (alignment.gaps) {
	          var yStrokedLine = yRect + alignmentHeight / 2;

	          var _iterator6 = _createForOfIteratorHelper(alignment.gaps),
	              _step6;

	          try {
	            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
	              var gap = _step6.value;
	              var sPixel = (gap.start - bpStart) / bpPerPixel;
	              var ePixel = (gap.start + gap.len - bpStart) / bpPerPixel;
	              var color = "D" === gap.type ? this.deletionColor : this.skippedColor;
	              IGVGraphics.strokeLine(ctx, sPixel, yStrokedLine, ePixel, yStrokedLine, {
	                strokeStyle: color
	              });
	            }
	          } catch (err) {
	            _iterator6.e(err);
	          } finally {
	            _iterator6.f();
	          }
	        }

	        function drawBlock(block, b) {
	          var offsetBP = block.start - alignmentContainer.start;
	          var blockStartPixel = (block.start - bpStart) / bpPerPixel;
	          var blockEndPixel = (block.start + block.len - bpStart) / bpPerPixel;
	          var blockWidthPixel = Math.max(1, blockEndPixel - blockStartPixel);
	          var arrowHeadWidthPixel = alignmentRowHeight / 2.0;
	          var isSoftClip = 'S' === block.type;
	          var strokeOutline = alignment.mq <= 0 || this.highlightedAlignmentReadNamed === alignment.readName || isSoftClip;
	          var blockOutlineColor = outlineColor;
	          if (this.highlightedAlignmentReadNamed === alignment.readName) blockOutlineColor = 'red';else if (isSoftClip) blockOutlineColor = 'rgb(50,50,50)';
	          var lastBlockPositiveStrand = true === alignment.strand && b === blocks.length - 1;
	          var lastBlockReverseStrand = false === alignment.strand && b === 0;
	          var lastBlock = lastBlockPositiveStrand | lastBlockReverseStrand;

	          if (lastBlock) {
	            var xListPixel;
	            var yListPixel;

	            if (lastBlockPositiveStrand) {
	              xListPixel = [blockStartPixel, blockEndPixel, blockEndPixel + arrowHeadWidthPixel, blockEndPixel, blockStartPixel, blockStartPixel];
	              yListPixel = [yRect, yRect, yRect + alignmentHeight / 2.0, yRect + alignmentHeight, yRect + alignmentHeight, yRect];
	            } // Last block on - strand ?
	            else if (lastBlockReverseStrand) {
	                xListPixel = [blockEndPixel, blockStartPixel, blockStartPixel - arrowHeadWidthPixel, blockStartPixel, blockEndPixel, blockEndPixel];
	                yListPixel = [yRect, yRect, yRect + alignmentHeight / 2.0, yRect + alignmentHeight, yRect + alignmentHeight, yRect];
	              }

	            IGVGraphics.fillPolygon(ctx, xListPixel, yListPixel, {
	              fillStyle: alignmentColor
	            });

	            if (strokeOutline) {
	              IGVGraphics.strokePolygon(ctx, xListPixel, yListPixel, {
	                strokeStyle: blockOutlineColor
	              });
	            }
	          } // Internal block
	          else {
	              IGVGraphics.fillRect(ctx, blockStartPixel, yRect, blockWidthPixel, alignmentHeight, {
	                fillStyle: alignmentColor
	              });

	              if (strokeOutline) {
	                ctx.save();
	                ctx.strokeStyle = blockOutlineColor;
	                ctx.strokeRect(blockStartPixel, yRect, blockWidthPixel, alignmentHeight);
	                ctx.restore();
	              }
	            } // Mismatch coloring


	          if (this.parent.showMismatches && (isSoftClip || showAllBases || referenceSequence && alignment.seq && alignment.seq !== "*")) {
	            var seq = alignment.seq ? alignment.seq.toUpperCase() : undefined;
	            var qual = alignment.qual;
	            var seqOffset = block.seqOffset;

	            for (var i = 0, len = block.len; i < len; i++) {
	              if (offsetBP + i < 0) continue;
	              var readChar = seq ? seq.charAt(seqOffset + i) : '';
	              var refChar = referenceSequence.charAt(offsetBP + i);

	              if (readChar === "=") {
	                readChar = refChar;
	              }

	              if (readChar === "X" || refChar !== readChar || isSoftClip || showAllBases) {
	                var baseColor = void 0;

	                if (!isSoftClip && qual !== undefined && qual.length > seqOffset + i) {
	                  var readQual = qual[seqOffset + i];
	                  baseColor = shadedBaseColor(readQual, nucleotideColors[readChar]);
	                } else {
	                  baseColor = nucleotideColors[readChar];
	                }

	                if (baseColor) {
	                  var xPixel = (block.start + i - bpStart) / bpPerPixel;
	                  var widthPixel = Math.max(1, 1 / bpPerPixel);
	                  renderBlockOrReadChar(ctx, bpPerPixel, {
	                    x: xPixel,
	                    y: yRect,
	                    width: widthPixel,
	                    height: alignmentHeight
	                  }, baseColor, readChar);
	                }
	              }
	            }
	          }
	        }

	        function renderBlockOrReadChar(context, bpp, bbox, color, char) {
	          var threshold, center;
	          threshold = 1.0 / 10.0;

	          if (bpp <= threshold && bbox.height >= 8) {
	            // render letter
	            var fontHeight = Math.min(10, bbox.height);
	            context.font = '' + fontHeight + 'px sans-serif';
	            center = bbox.x + bbox.width / 2.0;
	            IGVGraphics.strokeText(context, char, center - context.measureText(char).width / 2, fontHeight - 1 + bbox.y, {
	              strokeStyle: color
	            });
	          } else {
	            // render colored block
	            IGVGraphics.fillRect(context, bbox.x, bbox.y, bbox.width, bbox.height, {
	              fillStyle: color
	            });
	          }
	        }
	      }
	    }
	  }, {
	    key: "popupData",
	    value: function popupData(config) {
	      var clickedObject = this.getClickedObject(config.viewport, config.y, config.genomicLocation);
	      return clickedObject ? clickedObject.popupData(config.genomicLocation) : undefined;
	    }
	  }, {
	    key: "contextMenuItemList",
	    value: function contextMenuItemList(clickState) {
	      var _this4 = this;

	      var viewport = clickState.viewport;
	      var showSoftClips = this.parent.showSoftClips;
	      var clickedObject = this.getClickedObject(viewport, clickState.y, clickState.genomicLocation);
	      var clickedAlignment = clickedObject && typeof clickedObject.alignmentContaining === 'function' ? clickedObject.alignmentContaining(clickState.genomicLocation, showSoftClips) : clickedObject;
	      var isSingleAlignment = clickedAlignment && typeof clickedObject.isPaired === 'function';
	      var list = [];

	      var sortByOption = function sortByOption(option) {
	        var cs = _this4.parent.sortObject;
	        var direction = cs && cs.position === Math.floor(clickState.genomicLocation) ? !cs.direction : true;
	        var newSortObject = {
	          chr: viewport.referenceFrame.chr,
	          position: Math.floor(clickState.genomicLocation),
	          sortOption: option,
	          direction: direction
	        };
	        _this4.parent.sortObject = newSortObject;
	        sortAlignmentRows(newSortObject, viewport.getCachedFeatures());
	        viewport.repaint();
	      };

	      list.push('<b>Sort by...</b>');
	      list.push({
	        label: '&nbsp; base',
	        click: function click() {
	          return sortByOption("BASE");
	        }
	      });
	      list.push({
	        label: '&nbsp; read strand',
	        click: function click() {
	          return sortByOption("STRAND");
	        }
	      });
	      list.push({
	        label: '&nbsp; insert size',
	        click: function click() {
	          return sortByOption("INSERT_SIZE");
	        }
	      });
	      list.push({
	        label: '&nbsp; gap size',
	        click: function click() {
	          return sortByOption("GAP_SIZE");
	        }
	      });
	      list.push({
	        label: '&nbsp; chromosome of mate',
	        click: function click() {
	          return sortByOption("MATE_CHR");
	        }
	      });
	      list.push({
	        label: '&nbsp; mapping quality',
	        click: function click() {
	          return sortByOption("MQ");
	        }
	      });
	      list.push({
	        label: '&nbsp; tag',
	        click: function click() {
	          var cs = _this4.parent.sortObject;
	          var direction = cs && cs.position === Math.floor(clickState.genomicLocation) ? !cs.direction : true;
	          var config = {
	            label: 'Tag Name',
	            value: _this4.sortByTag ? _this4.sortByTag : '',
	            callback: function callback(tag) {
	              if (tag) {
	                var newSortObject = {
	                  chr: viewport.referenceFrame.chr,
	                  position: Math.floor(clickState.genomicLocation),
	                  sortOption: "TAG",
	                  tag: tag,
	                  direction: direction
	                };
	                _this4.sortByTag = tag;
	                _this4.parent.sortObject = newSortObject;
	                sortAlignmentRows(newSortObject, viewport.getCachedFeatures());
	                viewport.repaint();
	              }
	            }
	          };

	          _this4.browser.inputDialog.present(config, clickState.event);
	        }
	      });
	      list.push('<hr/>');

	      if (clickedAlignment.isPaired() && clickedAlignment.isMateMapped()) {
	        list.push({
	          label: 'View mate in split screen',
	          click: function click() {
	            if (clickedAlignment.mate) {
	              _this4.highlightedAlignmentReadNamed = clickedAlignment.readName;

	              _this4.browser.presentSplitScreenMultiLocusPanel(clickedAlignment, clickState.viewport.referenceFrame);
	            }
	          },
	          init: undefined
	        });
	      }

	      list.push({
	        label: 'View read sequence',
	        click: function click() {
	          var alignment = clickedAlignment;
	          if (!alignment) return;
	          var seqstring = alignment.seq; //.map(b => String.fromCharCode(b)).join("");

	          if (!seqstring || "*" === seqstring) {
	            Alert.presentAlert("Read sequence: *");
	          } else {
	            Alert.presentAlert(seqstring);
	          }
	        }
	      });
	      list.push('<hr/>');
	      return list;
	    }
	  }, {
	    key: "getClickedObject",
	    value: function getClickedObject(viewport, y, genomicLocation) {
	      var showSoftClips = this.parent.showSoftClips;
	      var features = viewport.getCachedFeatures();
	      if (!features || features.length === 0) return;
	      var packedAlignmentRows = features.packedAlignmentRows;
	      var downsampledIntervals = features.downsampledIntervals;
	      var alignmentRowHeight = this.displayMode === "SQUISHED" ? this.squishedRowHeight : this.alignmentRowHeight;
	      var packedAlignmentsIndex = Math.floor((y - this.top - this.alignmentsYOffset) / alignmentRowHeight);

	      if (packedAlignmentsIndex < 0) {
	        for (var i = 0; i < downsampledIntervals.length; i++) {
	          if (downsampledIntervals[i].start <= genomicLocation && downsampledIntervals[i].end >= genomicLocation) {
	            return downsampledIntervals[i];
	          }
	        }
	      } else if (packedAlignmentsIndex < packedAlignmentRows.length) {
	        var alignmentRow = packedAlignmentRows[packedAlignmentsIndex];
	        var clicked = alignmentRow.alignments.filter(function (alignment) {
	          return alignment.containsLocation(genomicLocation, showSoftClips);
	        });
	        if (clicked.length > 0) return clicked[0];
	      }

	      return undefined;
	    }
	  }, {
	    key: "getConnectorColor",

	    /**
	     * Return the color for connectors in paired alignment view.   If explicitly set return that, otherwise return
	     * the alignment color, unless the color option can result in split colors (separte color for each mate).
	     *
	     * @param alignment
	     * @returns {string}
	     */
	    value: function getConnectorColor(alignment) {
	      if (this.pairConnectorColor) {
	        return this.pairConnectorColor;
	      }

	      switch (this.colorBy) {
	        case "strand":
	        case "firstOfPairStrand":
	        case "pairOrientation":
	        case "tag":
	          return this.parent.color || DEFAULT_CONNECTOR_COLOR;

	        default:
	          return this.getAlignmentColor(alignment);
	      }
	    }
	  }, {
	    key: "getAlignmentColor",
	    value: function getAlignmentColor(alignment) {
	      var color = this.parent.color; // The default color if nothing else applies

	      var option = this.colorBy;

	      switch (option) {
	        case "strand":
	          color = alignment.strand ? this.posStrandColor : this.negStrandColor;
	          break;

	        case "firstOfPairStrand":
	          if (alignment instanceof PairedAlignment) {
	            color = alignment.firstOfPairStrand() ? this.posStrandColor : this.negStrandColor;
	          } else if (alignment.isPaired()) {
	            if (alignment.isFirstOfPair()) {
	              color = alignment.strand ? this.posStrandColor : this.negStrandColor;
	            } else if (alignment.isSecondOfPair()) {
	              color = alignment.strand ? this.negStrandColor : this.posStrandColor;
	            } else {
	              console.error("ERROR. Paired alignments are either first or second.");
	            }
	          }

	          break;

	        case "pairOrientation":
	          if (alignment.mate && alignment.isMateMapped() && alignment.mate.chr !== alignment.chr) {
	            color = getChrColor(alignment.mate.chr);
	          } else if (this.pairOrientation && alignment.pairOrientation) {
	            var oTypes = orientationTypes[this.pairOrientation];

	            if (oTypes) {
	              var pairColor = this.pairColors[oTypes[alignment.pairOrientation]];
	              if (pairColor) color = pairColor;
	            }
	          }

	          break;

	        case "fragmentLength":
	          if (alignment.mate && alignment.isMateMapped() && alignment.mate.chr !== alignment.chr) {
	            color = getChrColor(alignment.mate.chr);
	          } else if (this.parent.minFragmentLength && Math.abs(alignment.fragmentLength) < this.parent.minFragmentLength) {
	            color = this.smallFragmentLengthColor;
	          } else if (this.parent.maxFragmentLength && Math.abs(alignment.fragmentLength) > this.parent.maxFragmentLength) {
	            color = this.largeFragmentLengthColor;
	          }

	          break;

	        case "tag":
	          var tagValue = alignment.tags()[this.colorByTag];

	          if (tagValue !== undefined) {
	            if (this.bamColorTag === this.colorByTag) {
	              // UCSC style color option
	              color = "rgb(" + tagValue + ")";
	            } else {
	              if (!this.tagColors) {
	                this.tagColors = new PaletteColorTable("Set1");
	              }

	              color = this.tagColors.getColor(tagValue);
	            }
	          }

	          break;

	        default:
	          color = this.parent.color;
	      }

	      return color;
	    }
	  }]);

	  return AlignmentTrack;
	}();

	function sortAlignmentRows(options, alignmentContainer) {
	  var direction = options.direction;

	  var _iterator7 = _createForOfIteratorHelper(alignmentContainer.packedAlignmentRows),
	      _step7;

	  try {
	    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
	      var row = _step7.value;
	      row.updateScore(options, alignmentContainer);
	    }
	  } catch (err) {
	    _iterator7.e(err);
	  } finally {
	    _iterator7.f();
	  }

	  alignmentContainer.packedAlignmentRows.sort(function (rowA, rowB) {
	    var i = rowA.score > rowB.score ? 1 : rowA.score < rowB.score ? -1 : 0;
	    return true === direction ? i : -i;
	  });
	}

	function shadedBaseColor(qual, baseColor) {
	  var minQ = 5; //prefs.getAsInt(PreferenceManager.SAM_BASE_QUALITY_MIN),

	  var maxQ = 20; //prefs.getAsInt(PreferenceManager.SAM_BASE_QUALITY_MAX);

	  var alpha;

	  if (qual < minQ) {
	    alpha = 0.1;
	  } else {
	    alpha = Math.max(0.1, Math.min(1.0, 0.1 + 0.9 * (qual - minQ) / (maxQ - minQ)));
	  } // Round alpha to nearest 0.1


	  alpha = Math.round(alpha * 10) / 10.0;

	  if (alpha < 1) {
	    baseColor = IGVColor.addAlpha(baseColor, alpha);
	  }

	  return baseColor;
	}

	var orientationTypes = {
	  "fr": {
	    "F1R2": "LR",
	    "F2R1": "LR",
	    "F1F2": "LL",
	    "F2F1": "LL",
	    "R1R2": "RR",
	    "R2R1": "RR",
	    "R1F2": "RL",
	    "R2F1": "RL"
	  },
	  "rf": {
	    "R1F2": "LR",
	    "R2F1": "LR",
	    "R1R2": "LL",
	    "R2R1": "LL",
	    "F1F2": "RR",
	    "F2F1": "RR",
	    "F1R2": "RL",
	    "F2R1": "RL"
	  },
	  "ff": {
	    "F2F1": "LR",
	    "R1R2": "LR",
	    "F2R1": "LL",
	    "R1F2": "LL",
	    "R2F1": "RR",
	    "F1R2": "RR",
	    "R2R1": "RL",
	    "F1F2": "RL"
	  }
	};

	function getChrColor(chr) {
	  if (chrColorMap[chr]) {
	    return chrColorMap[chr];
	  } else if (chrColorMap["chr" + chr]) {
	    var color = chrColorMap["chr" + chr];
	    chrColorMap[chr] = color;
	    return color;
	  } else {
	    var _color = IGVColor.randomRGB();

	    chrColorMap[chr] = _color;
	    return _color;
	  }
	}

	var chrColorMap = {
	  "chrX": "rgb(204, 153, 0)",
	  "chrY": "rgb(153, 204, 0",
	  "chrUn": "rgb(50, 50, 50)",
	  "chr1": "rgb(80, 80, 255)",
	  "chrI": "rgb(139, 155, 187)",
	  "chr2": "rgb(206, 61, 50)",
	  "chrII": "rgb(206, 61, 50)",
	  "chr2a": "rgb(216, 71, 60)",
	  "chr2b": "rgb(226, 81, 70)",
	  "chr3": "rgb(116, 155, 88)",
	  "chrIII": "rgb(116, 155, 88)",
	  "chr4": "rgb(240, 230, 133)",
	  "chrIV": "rgb(240, 230, 133)",
	  "chr5": "rgb(70, 105, 131)",
	  "chr6": "rgb(186, 99, 56)",
	  "chr7": "rgb(93, 177, 221)",
	  "chr8": "rgb(128, 34, 104)",
	  "chr9": "rgb(107, 215, 107)",
	  "chr10": "rgb(213, 149, 167)",
	  "chr11": "rgb(146, 72, 34)",
	  "chr12": "rgb(131, 123, 141)",
	  "chr13": "rgb(199, 81, 39)",
	  "chr14": "rgb(213, 143, 92)",
	  "chr15": "rgb(122, 101, 165)",
	  "chr16": "rgb(228, 175, 105)",
	  "chr17": "rgb(59, 27, 83)",
	  "chr18": "rgb(205, 222, 183)",
	  "chr19": "rgb(97, 42, 121)",
	  "chr20": "rgb(174, 31, 99)",
	  "chr21": "rgb(231, 199, 111)",
	  "chr22": "rgb(90, 101, 94)",
	  "chr23": "rgb(204, 153, 0)",
	  "chr24": "rgb(153, 204, 0)",
	  "chr25": "rgb(51, 204, 0)",
	  "chr26": "rgb(0, 204, 51)",
	  "chr27": "rgb(0, 204, 153)",
	  "chr28": "rgb(0, 153, 204)",
	  "chr29": "rgb(10, 71, 255)",
	  "chr30": "rgb(71, 117, 255)",
	  "chr31": "rgb(255, 194, 10)",
	  "chr32": "rgb(255, 209, 71)",
	  "chr33": "rgb(153, 0, 51)",
	  "chr34": "rgb(153, 26, 0)",
	  "chr35": "rgb(153, 102, 0)",
	  "chr36": "rgb(128, 153, 0)",
	  "chr37": "rgb(51, 153, 0)",
	  "chr38": "rgb(0, 153, 26)",
	  "chr39": "rgb(0, 153, 102)",
	  "chr40": "rgb(0, 128, 153)",
	  "chr41": "rgb(0, 51, 153)",
	  "chr42": "rgb(26, 0, 153)",
	  "chr43": "rgb(102, 0, 153)",
	  "chr44": "rgb(153, 0, 128)",
	  "chr45": "rgb(214, 0, 71)",
	  "chr46": "rgb(255, 20, 99)",
	  "chr47": "rgb(0, 214, 143)",
	  "chr48": "rgb(20, 255, 177)"
	};

	var InteractionTrack = /*#__PURE__*/function (_TrackBase) {
	  _inherits(InteractionTrack, _TrackBase);

	  var _super = _createSuper(InteractionTrack);

	  function InteractionTrack(config, browser) {
	    var _this;

	    _classCallCheck(this, InteractionTrack);

	    _this = _super.call(this, config, browser);
	    _this.theta = config.theta || Math.PI / 4;
	    _this.sinTheta = Math.sin(_this.theta);
	    _this.cosTheta = Math.cos(_this.theta);
	    _this.height = config.height || 250;
	    _this.arcType = config.arcType || "nested"; // nested | proportional

	    _this.arcOrientation = config.arcOrientation === undefined ? true : config.arcOrientation; // true for up, false for down

	    _this.showBlocks = config.showBlocks === undefined ? true : config.showBlocks;
	    _this.blockHeight = config.blockHeight || 3;
	    _this.thickness = config.thickness || 1;
	    _this.color = config.color || "rgb(180,25,137)";
	    _this.alpha = config.alpha || 0.15;

	    if (config.valueColumn) {
	      _this.valueColumn = config.valueColumn;
	      _this.hasValue = true;
	    } else if (config.useScore) {
	      _this.hasValue = true;
	      _this.valueColumn = "score";
	    }

	    _this.logScale = config.logScale !== false; // i.e. defaul to true (undefined => true)

	    if (config.max) {
	      _this.dataRange = {
	        min: config.min || 0,
	        max: config.max
	      };
	      _this.autoscale = false;
	    } else {
	      _this.autoscale = true;
	    } // Create the FeatureSource and override the default whole genome method


	    _this.featureSource = FeatureSource(config, browser.genome);
	    _this.featureSource.getWGFeatures = getWGFeatures;
	    return _this;
	  }

	  _createClass(InteractionTrack, [{
	    key: "postInit",
	    value: function () {
	      var _postInit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (!(typeof this.featureSource.getHeader === "function")) {
	                  _context.next = 4;
	                  break;
	                }

	                _context.next = 3;
	                return this.featureSource.getHeader();

	              case 3:
	                this.header = _context.sent;

	              case 4:
	                // Set properties from track line
	                if (this.header) {
	                  this.setTrackProperties(this.header);
	                }

	                if (!(this.visibilityWindow === undefined && typeof this.featureSource.defaultVisibilityWindow === 'function')) {
	                  _context.next = 10;
	                  break;
	                }

	                _context.next = 8;
	                return this.featureSource.defaultVisibilityWindow();

	              case 8:
	                this.visibilityWindow = _context.sent;
	                this.featureSource.visibilityWindow = this.visibilityWindow; // <- this looks odd

	              case 10:
	                return _context.abrupt("return", this);

	              case 11:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function postInit() {
	        return _postInit.apply(this, arguments);
	      }

	      return postInit;
	    }()
	  }, {
	    key: "supportsWholeGenome",
	    value: function supportsWholeGenome() {
	      return true;
	    }
	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(chr, start, end) {
	        var visibilityWindow, features;
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                visibilityWindow = this.visibilityWindow;
	                _context2.next = 3;
	                return this.featureSource.getFeatures({
	                  chr: chr,
	                  start: start,
	                  end: end,
	                  visibilityWindow: visibilityWindow
	                });

	              case 3:
	                features = _context2.sent;

	                // Check for score or value
	                if (this.hasValue === undefined && features && features.length > 0) {
	                  this.hasValue = features[0].score !== undefined;
	                }

	                return _context2.abrupt("return", features);

	              case 6:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function getFeatures(_x, _x2, _x3) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      if (this.arcType === "proportional") {
	        this.drawProportional(options);
	      } else {
	        this.drawNested(options);
	      }
	    }
	  }, {
	    key: "drawNested",
	    value: function drawNested(options) {
	      var ctx = options.context;
	      var pixelWidth = options.pixelWidth;
	      var pixelHeight = options.pixelHeight;
	      var viewportWidth = options.viewportWidth;
	      var bpPerPixel = options.bpPerPixel;
	      var bpStart = options.bpStart;
	      var xScale = bpPerPixel;
	      IGVGraphics.fillRect(ctx, 0, options.pixelTop, pixelWidth, pixelHeight, {
	        'fillStyle': "rgb(255, 255, 255)"
	      });
	      var featureList = options.features;

	      if (featureList) {
	        // Autoscale theta
	        autoscaleNested.call(this);
	        var y = this.arcOrientation ? options.pixelHeight : 0;
	        var direction = this.arcOrientation;
	        ctx.font = "8px";
	        ctx.textAlign = "center";

	        var _iterator = _createForOfIteratorHelper(featureList),
	            _step;

	        try {
	          for (_iterator.s(); !(_step = _iterator.n()).done;) {
	            var feature = _step.value;
	            var color = feature.color || this.color;

	            if (color && this.config.useScore) {
	              color = getAlphaColor(color, scoreShade(feature.score));
	            }

	            ctx.lineWidth = feature.thickness || this.thickness || 1;

	            if (feature.chr1 === feature.chr2 || feature.chr === 'all') {
	              var _getMidpoints = getMidpoints(feature, this.browser.genome),
	                  m1 = _getMidpoints.m1,
	                  m2 = _getMidpoints.m2;

	              var pixelStart = Math.round((m1 - bpStart) / xScale);
	              var pixelEnd = Math.round((m2 - bpStart) / xScale);
	              if (pixelEnd < 0 || pixelStart > pixelWidth) continue;
	              var w = pixelEnd - pixelStart;

	              if (w < 3) {
	                w = 3;
	                pixelStart--;
	              }

	              var a = w / 2;
	              var r = a / this.sinTheta;
	              var b = this.cosTheta * r;
	              var xc = pixelStart + a;
	              var yc = void 0,
	                  startAngle = void 0,
	                  endAngle = void 0;

	              if (direction) {
	                // UP
	                yc = this.height + b;
	                startAngle = Math.PI + Math.PI / 2 - this.theta;
	                endAngle = Math.PI + Math.PI / 2 + this.theta;
	              } else {
	                // DOWN
	                yc = -b;
	                startAngle = Math.PI / 2 - this.theta;
	                endAngle = Math.PI / 2 + this.theta;
	              }

	              if (this.showBlocks && feature.chr !== 'all') {
	                var s1 = (feature.start1 - bpStart) / xScale;
	                var e1 = (feature.end1 - bpStart) / xScale;
	                var s2 = (feature.start2 - bpStart) / xScale;
	                var e2 = (feature.end2 - bpStart) / xScale;
	                var hb = this.arcOrientation ? -this.blockHeight : this.blockHeight;
	                ctx.fillRect(s1, y, e1 - s1, hb);
	                ctx.fillRect(s2, y, e2 - s2, hb);
	              } // Alpha shade (de-emphasize) arcs that extend beyond viewport, unless alpha shading is used for score.


	              if (color && !this.config.useScore && w > viewportWidth) {
	                color = getAlphaColor(color, this.alpha);
	              }

	              ctx.strokeStyle = color;
	              ctx.fillStyle = color;
	              ctx.beginPath();
	              ctx.arc(xc, yc, r, startAngle, endAngle, false);
	              ctx.stroke();
	              feature.drawState = {
	                xc: xc,
	                yc: yc,
	                r: r
	              };
	            } else {
	              var _pixelStart = Math.round((feature.start - bpStart) / xScale);

	              var _pixelEnd = Math.round((feature.end - bpStart) / xScale);

	              if (_pixelEnd < 0 || _pixelStart > pixelWidth) continue;

	              var _w = _pixelEnd - _pixelStart;

	              if (_w < 3) {
	                _w = 3;
	                _pixelStart--;
	              }

	              var otherChr = feature.chr === feature.chr1 ? feature.chr2 : feature.chr1;
	              ctx.strokeStyle = color;
	              ctx.fillStyle = color;

	              if (direction) {
	                // UP
	                ctx.fillRect(_pixelStart, this.height / 2, _w, this.height / 2);
	                ctx.fillText(otherChr, _pixelStart + _w / 2, this.height / 2 - 5);
	                feature.drawState = {
	                  x: _pixelStart,
	                  y: this.height / 2,
	                  w: _w,
	                  h: this.height / 2
	                };
	              } else {
	                ctx.fillRect(_pixelStart, 0, _w, this.height / 2);
	                ctx.fillText(otherChr, _pixelStart + _w / 2, this.height / 2 + 13);
	                feature.drawState = {
	                  x: _pixelStart,
	                  y: 0,
	                  w: _w,
	                  h: this.height / 2
	                };
	              }
	            }
	          }
	        } catch (err) {
	          _iterator.e(err);
	        } finally {
	          _iterator.f();
	        }
	      }

	      function autoscaleNested() {
	        var max = 0;

	        var _iterator2 = _createForOfIteratorHelper(featureList),
	            _step2;

	        try {
	          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	            var _feature = _step2.value;

	            var _pixelStart2 = (_feature.start - bpStart) / xScale;

	            var _pixelEnd2 = (_feature.end - bpStart) / xScale;

	            if (_pixelEnd2 >= 0 && _pixelStart2 <= pixelWidth) {
	              max = Math.max(max, _pixelEnd2 - _pixelStart2);
	            }
	          }
	        } catch (err) {
	          _iterator2.e(err);
	        } finally {
	          _iterator2.f();
	        }

	        var a = Math.min(viewportWidth, max) / 2;

	        if (max > 0) {
	          var coa = (pixelHeight - 10) / a;
	          this.theta = estimateTheta(coa);
	          this.sinTheta = Math.sin(this.theta);
	          this.cosTheta = Math.cos(this.theta);
	        }
	      }
	    }
	  }, {
	    key: "drawProportional",
	    value: function drawProportional(options) {
	      var ctx = options.context;
	      var pixelWidth = options.pixelWidth;
	      var pixelHeight = options.pixelHeight;
	      var bpPerPixel = options.bpPerPixel;
	      var bpStart = options.bpStart;
	      var xScale = bpPerPixel;
	      IGVGraphics.fillRect(ctx, 0, options.pixelTop, pixelWidth, pixelHeight, {
	        'fillStyle': "rgb(255, 255, 255)"
	      });
	      var featureList = options.features;

	      if (featureList && featureList.length > 0) {
	        var yScale = this.logScale ? options.pixelHeight / Math.log10(this.dataRange.max + 1) : options.pixelHeight / (this.dataRange.max - this.dataRange.min);
	        var y = this.arcOrientation ? options.pixelHeight : 0;

	        var _iterator3 = _createForOfIteratorHelper(featureList),
	            _step3;

	        try {
	          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	            var feature = _step3.value;
	            ctx.save();
	            var value = this.valueColumn ? feature[this.valueColumn] : feature.score;
	            if (value === undefined || Number.isNaN(value)) continue;
	            var radiusY = this.logScale ? Math.log10(value + 1) * yScale : value * yScale;

	            if (feature.chr1 === feature.chr2 || feature.chr === 'all') {
	              var _getMidpoints2 = getMidpoints(feature, this.browser.genome),
	                  m1 = _getMidpoints2.m1,
	                  m2 = _getMidpoints2.m2;

	              var pixelStart = (m1 - bpStart) / xScale;
	              var pixelEnd = (m2 - bpStart) / xScale;
	              var w = pixelEnd - pixelStart;

	              if (w < 3) {
	                w = 3;
	                pixelStart--;
	              }

	              if (pixelEnd < 0 || pixelStart > pixelWidth || value < this.dataRange.min) continue;
	              var radiusX = w / 2;
	              var xc = pixelStart + w / 2;
	              var counterClockwise = this.arcOrientation ? true : false;
	              var color = feature.color || this.color;
	              ctx.strokeStyle = color;
	              ctx.lineWidth = feature.thickness || this.thickness || 1;
	              ctx.beginPath();
	              ctx.ellipse(xc, y, radiusX, radiusY, 0, 0, Math.PI, counterClockwise);
	              ctx.stroke();

	              if (this.showBlocks && feature.chr !== 'all') {
	                ctx.fillStyle = color;
	                var s1 = (feature.start1 - bpStart) / xScale;
	                var e1 = (feature.end1 - bpStart) / xScale;
	                var s2 = (feature.start2 - bpStart) / xScale;
	                var e2 = (feature.end2 - bpStart) / xScale;
	                var hb = this.arcOrientation ? -this.blockHeight : this.blockHeight;
	                ctx.fillRect(s1, y, e1 - s1, hb);
	                ctx.fillRect(s2, y, e2 - s2, hb);
	              }

	              if (this.alpha) {
	                var alphaColor = getAlphaColor(color, this.alpha);
	                ctx.fillStyle = alphaColor;
	                ctx.fill();
	              }

	              ctx.restore();
	              feature.drawState = {
	                xc: xc,
	                yc: y,
	                radiusX: radiusX,
	                radiusY: radiusY
	              };
	            } else {
	              var _pixelStart3 = Math.round((feature.start - bpStart) / xScale);

	              var _pixelEnd3 = Math.round((feature.end - bpStart) / xScale);

	              if (_pixelEnd3 < 0 || _pixelStart3 > pixelWidth || value < this.dataRange.min) continue;
	              var h = Math.min(radiusY, this.height - 13); // Leave room for text

	              var _w2 = _pixelEnd3 - _pixelStart3;

	              if (_w2 < 3) {
	                _w2 = 3;
	                _pixelStart3--;
	              }

	              var otherChr = feature.chr === feature.chr1 ? feature.chr2 : feature.chr1;
	              ctx.font = "8px";
	              ctx.textAlign = "center";

	              if (this.arcOrientation) {
	                // UP
	                var _y = this.height - h;

	                ctx.fillRect(_pixelStart3, _y, _w2, h);
	                ctx.fillText(otherChr, _pixelStart3 + _w2 / 2, _y - 5);
	                feature.drawState = {
	                  x: _pixelStart3,
	                  y: _y,
	                  w: _w2,
	                  h: h
	                };
	              } else {
	                ctx.fillRect(_pixelStart3, 0, _w2, h);
	                ctx.fillText(otherChr, _pixelStart3 + _w2 / 2, h + 13);
	                feature.drawState = {
	                  x: _pixelStart3,
	                  y: 0,
	                  w: _w2,
	                  h: h
	                };
	              }
	            }
	          }
	        } catch (err) {
	          _iterator3.e(err);
	        } finally {
	          _iterator3.f();
	        }
	      }
	    }
	  }, {
	    key: "menuItemList",
	    value: function menuItemList() {
	      var _this2 = this;

	      var items = [{
	        name: "Set track color",
	        click: function click() {
	          _this2.trackView.presentColorPicker();
	        }
	      }, '<HR/>'];

	      if (this.hasValue) {
	        var lut = {
	          "nested": "Nested Arcs",
	          "proportional": "Proportional Arcs"
	        };

	        var _loop = function _loop() {
	          var arcType = _arr[_i];
	          items.push({
	            object: createCheckbox$1(lut[arcType], arcType === _this2.arcType),
	            click: function click() {
	              _this2.arcType = arcType;

	              _this2.trackView.repaintViews();
	            }
	          });
	        };

	        for (var _i = 0, _arr = ["nested", "proportional"]; _i < _arr.length; _i++) {
	          _loop();
	        }
	      }

	      items.push({
	        object: createCheckbox$1("Show Blocks", this.showBlocks),
	        click: function click() {
	          _this2.showBlocks = !_this2.showBlocks;

	          _this2.trackView.repaintViews();
	        }
	      });
	      items.push({
	        name: "Toggle arc direction",
	        click: function click() {
	          _this2.arcOrientation = !_this2.arcOrientation;

	          _this2.trackView.repaintViews();
	        }
	      });

	      if (this.arcType === "proportional") {
	        items.push("<HR>");
	        items = items.concat(MenuUtils.numericDataMenuItems(this.trackView));
	      }

	      return items;
	    }
	  }, {
	    key: "doAutoscale",
	    value: function doAutoscale(features) {
	      // if ("proportional" === this.arcType) {
	      var max = 0;

	      if (features) {
	        var _iterator4 = _createForOfIteratorHelper(features),
	            _step4;

	        try {
	          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	            var f = _step4.value;
	            var v = this.valueColumn ? f[this.valueColumn] : f.score;

	            if (!Number.isNaN(v)) {
	              max = Math.max(max, v);
	            }
	          }
	        } catch (err) {
	          _iterator4.e(err);
	        } finally {
	          _iterator4.f();
	        }
	      }

	      return {
	        min: 0,
	        max: max
	      }; // }
	    }
	  }, {
	    key: "popupData",
	    value: function popupData(clickState, features) {
	      if (!features) features = this.clickedFeatures(clickState);
	      var data = [];

	      var _iterator5 = _createForOfIteratorHelper(features),
	          _step5;

	      try {
	        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
	          var feature = _step5.value;
	          var f = feature._ || feature; // For "whole genome" features, which keeps a pointer to the original

	          data.push({
	            name: "Region 1",
	            value: positionString(f.chr1, f.start1, f.end1, f.strand1)
	          });
	          data.push({
	            name: "Region 2",
	            value: positionString(f.chr2, f.start2, f.end2, f.strand2)
	          });

	          if (f.name) {
	            data.push({
	              name: "Name",
	              value: f.name
	            });
	          }

	          if (f.value !== undefined) {
	            data.push({
	              name: "Value",
	              value: f.value
	            });
	          }

	          if (f.score !== undefined) {
	            data.push({
	              name: "Score",
	              value: f.score
	            });
	          }

	          if (f.extras && this.header && this.header.columnNames) {
	            var columnNames = this.header.columnNames;

	            for (var i = 10; i < columnNames.length; i++) {
	              if (columnNames[i] === 'info') {
	                extractInfoColumn(data, f.extras[i - 10]);
	              } else {
	                data.push({
	                  name: columnNames[i],
	                  value: f.extras[i - 10]
	                });
	              }
	            }
	          } // For now just return the top hit


	          break; //if (data.length > 0) {
	          //     data.push("<HR>");
	          // }
	        }
	      } catch (err) {
	        _iterator5.e(err);
	      } finally {
	        _iterator5.f();
	      }

	      return data;
	    }
	  }, {
	    key: "clickedFeatures",
	    value: function clickedFeatures(clickState) {
	      // We use the cached features rather than method to avoid async load.  If the
	      // feature is not already loaded this won't work,  but the user wouldn't be mousing over it either.
	      var featureList = clickState.viewport.getCachedFeatures();
	      var candidates = [];

	      if (featureList) {
	        var proportional = this.arcType === "proportional";

	        var _iterator6 = _createForOfIteratorHelper(featureList),
	            _step6;

	        try {
	          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
	            var feature = _step6.value;
	            if (!feature.drawState) continue;

	            if (feature.chr1 === feature.chr2 || feature.chr === 'all') {
	              if (proportional) {
	                //(x-xc)^2/radiusX^2 + (y-yc)^2/radiusY^2 <= 1
	                var _feature$drawState = feature.drawState,
	                    xc = _feature$drawState.xc,
	                    yc = _feature$drawState.yc,
	                    radiusX = _feature$drawState.radiusX,
	                    radiusY = _feature$drawState.radiusY;
	                var dx = clickState.canvasX - xc;
	                var dy = clickState.canvasY - yc;
	                var score = dx / radiusX * (dx / radiusX) + dy / radiusY * (dy / radiusY);

	                if (score <= 1) {
	                  candidates.push({
	                    score: 1 / score,
	                    feature: feature
	                  });
	                }
	              } else {
	                var _feature$drawState2 = feature.drawState,
	                    _xc = _feature$drawState2.xc,
	                    _yc = _feature$drawState2.yc,
	                    r = _feature$drawState2.r;

	                var _dx = clickState.canvasX - _xc;

	                var _dy = clickState.canvasY - _yc;

	                var _score = Math.abs(Math.sqrt(_dx * _dx + _dy * _dy) - r);

	                if (_score < 5) {
	                  candidates.push({
	                    score: _score,
	                    feature: feature
	                  });
	                }
	              }
	            } else {
	              var _feature$drawState3 = feature.drawState,
	                  x = _feature$drawState3.x,
	                  y = _feature$drawState3.y,
	                  w = _feature$drawState3.w,
	                  h = _feature$drawState3.h;
	              var tolerance = 5;

	              if (clickState.canvasX >= x - tolerance && clickState.canvasX <= x + w + tolerance && clickState.canvasY >= y && clickState.canvasY <= y + h) {
	                var _score2 = -Math.abs(clickState.canvasX - (x + w / 2));

	                candidates.push({
	                  score: _score2,
	                  feature: feature
	                });
	                break;
	              }
	            }
	          }
	        } catch (err) {
	          _iterator6.e(err);
	        } finally {
	          _iterator6.f();
	        }
	      }

	      if (candidates.length > 1) {
	        candidates.sort(function (a, b) {
	          return a.score - b.score;
	        });
	      }

	      return candidates.map(function (c) {
	        return c.feature;
	      });
	    }
	  }]);

	  return InteractionTrack;
	}(TrackBase);

	function getMidpoints(feature, genome) {
	  var m1 = (feature.start1 + feature.end1) / 2;
	  var m2 = (feature.start2 + feature.end2) / 2;

	  if (feature.chr === 'all') {
	    m1 = genome.getGenomeCoordinate(feature.chr1, m1);
	    m2 = genome.getGenomeCoordinate(feature.chr2, m2);
	  }

	  if (m1 > m2) {
	    var tmp = m1;
	    m1 = m2;
	    m2 = tmp;
	  }

	  return {
	    m1: m1,
	    m2: m2
	  };
	}

	function positionString(chr, start, end, strand) {
	  return strand && strand !== '.' ? "".concat(chr, ":").concat(numberFormatter(start + 1), "-").concat(numberFormatter(end), " (").concat(strand, ")") : "".concat(chr, ":").concat(numberFormatter(start + 1), "-").concat(numberFormatter(end));
	}
	/**
	 * Estimate theta given the ratio of track height to 1/2 the feature width (coa).  This relationship is approximately linear.
	 */


	function estimateTheta(x) {
	  var coa = [0.01570925532366355, 0.15838444032453644, 0.3249196962329063, 0.5095254494944288, 0.7265425280053609, 0.9999999999999999];
	  var theta = [0.031415926535897934, 0.3141592653589793, 0.6283185307179586, 0.9424777960769379, 1.2566370614359172, 1.5707963267948966];
	  var idx;

	  for (idx = 0; idx < coa.length; idx++) {
	    if (coa[idx] > x) {
	      break;
	    }
	  }

	  var left = idx === 0 ? 0 : coa[idx - 1];
	  var right = idx < coa.length ? coa[idx] : 1;
	  var r = (x - left) / (right - left);
	  var thetaLeft = idx === 0 ? 0 : theta[idx - 1];
	  var thetaRight = idx < theta.length ? theta[idx] : Math.PI / 2;
	  return thetaLeft + r * (thetaRight - thetaLeft);
	}

	var colorAlphaCache = new Map();

	function getAlphaColor(color, alpha) {
	  var key = "".concat(color, "_").concat(alpha);
	  var c = colorAlphaCache.get(key);

	  if (!c) {
	    c = IGVColor.addAlpha(color, alpha);
	    colorAlphaCache.set(key, c);
	  }

	  return c;
	}
	/**
	 * Called in the context of FeatureSource
	 * @param allFeatures
	 * @returns {[]}
	 */


	function getWGFeatures(allFeatures) {
	  var genome = this.genome;
	  var wgFeatures = [];

	  var _iterator7 = _createForOfIteratorHelper(genome.wgChromosomeNames),
	      _step7;

	  try {
	    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
	      var c = _step7.value;
	      var chrFeatures = allFeatures[c];

	      if (chrFeatures) {
	        var _iterator8 = _createForOfIteratorHelper(chrFeatures),
	            _step8;

	        try {
	          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
	            var f = _step8.value;

	            if (!f.dup) {
	              var wg = Object.assign({}, f);
	              wg.chr = "all";
	              wg.start = genome.getGenomeCoordinate(f.chr1, f.start1);
	              wg.end = genome.getGenomeCoordinate(f.chr2, f.end2);
	              wgFeatures.push(wg);
	            }
	          }
	        } catch (err) {
	          _iterator8.e(err);
	        } finally {
	          _iterator8.f();
	        }
	      }
	    }
	  } catch (err) {
	    _iterator7.e(err);
	  } finally {
	    _iterator7.f();
	  }

	  return wgFeatures;
	}
	/**
	 * Extract a gff style info column for popup text.  This convention used by 10X for bedpe files
	 *     ALLELIC_FRAC=0.0375670840787;BLACK1=.;BLACK2=.;...
	 * @param data
	 * @param str
	 */


	function extractInfoColumn(data, str) {
	  var kvs = str.split(';');

	  var _iterator9 = _createForOfIteratorHelper(kvs),
	      _step9;

	  try {
	    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
	      var t = _step9.value;
	      var kv = t.split('=');

	      if (kv.length === 2) {
	        data.push({
	          name: kv[0],
	          value: kv[1]
	        });
	      }
	    }
	  } catch (err) {
	    _iterator9.e(err);
	  } finally {
	    _iterator9.f();
	  }
	}

	var isString$6 = isString;
	var DEFAULT_VISIBILITY_WINDOW = 1000000;
	var topMargin = 10;

	var VariantTrack = /*#__PURE__*/function (_TrackBase) {
	  _inherits(VariantTrack, _TrackBase);

	  var _super = _createSuper(VariantTrack);

	  function VariantTrack(config, browser) {
	    var _this;

	    _classCallCheck(this, VariantTrack);

	    _this = _super.call(this, config, browser);
	    _this.visibilityWindow = config.visibilityWindow;
	    _this.displayMode = config.displayMode || "EXPANDED"; // COLLAPSED | EXPANDED | SQUISHED

	    _this.labelDisplayMode = config.labelDisplayMode;
	    _this.variantHeight = config.variantHeight || 10;
	    _this.squishedCallHeight = config.squishedCallHeight || 1;
	    _this.expandedCallHeight = config.expandedCallHeight || 10;
	    _this.expandedVGap = config.expandedVGap !== undefined ? config.expandedVGap : 2;
	    _this.squishedVGap = config.squishedVGap !== undefined ? config.squishedVGap : 1;
	    _this.expandedGroupGap = config.expandedGroupGap || 10;
	    _this.squishedGroupGap = config.squishedGroupGap || 5;
	    _this.featureHeight = config.featureHeight || 14;
	    _this.visibilityWindow = config.visibilityWindow;
	    _this.featureSource = FeatureSource(config, browser.genome);
	    _this.noCallColor = config.noCallColor || "rgb(245, 245, 245)";
	    _this.nonRefColor = config.nonRefColor || "rgb(200, 200, 215)";
	    _this.mixedColor = config.mixedColor || "rgb(200, 220, 200)";
	    _this.homrefColor = config.homrefColor || "rgb(200, 200, 200)";
	    _this.homvarColor = config.homvarColor || "rgb(17,248,254)";
	    _this.hetvarColor = config.hetvarColor || "rgb(34,12,253)";
	    _this.sortDirection = "ASC";
	    _this.nRows = 1; // Computed dynamically

	    return _this;
	  }

	  _createClass(VariantTrack, [{
	    key: "postInit",
	    value: function () {
	      var _postInit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	        var header, fn, length;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return this.getHeader();

	              case 2:
	                header = _context.sent;

	                // cricital, don't remove'
	                if (undefined === this.visibilityWindow && this.config.indexed !== false) {
	                  fn = this.config.url instanceof File ? this.config.url.name : this.config.url;

	                  if (isString$6(fn) && fn.toLowerCase().includes("gnomad")) {
	                    this.visibilityWindow = 1000; // these are known to be very dense
	                  } else if (this.callSets) {
	                    length = this.callSets.length;
	                    this.visibilityWindow = Math.max(1000, DEFAULT_VISIBILITY_WINDOW - length * (DEFAULT_VISIBILITY_WINDOW / 100));
	                  } else {
	                    this.visibilityWindow = DEFAULT_VISIBILITY_WINDOW;
	                  }
	                }

	                return _context.abrupt("return", this);

	              case 5:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function postInit() {
	        return _postInit.apply(this, arguments);
	      }

	      return postInit;
	    }()
	  }, {
	    key: "supportsWholeGenome",
	    value: function supportsWholeGenome() {
	      return this.config.indexed === false && this.config.supportsWholeGenome !== false;
	    }
	  }, {
	    key: "getHeader",
	    value: function () {
	      var _getHeader = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	        var header;
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                if (!this.header) {
	                  _context2.next = 4;
	                  break;
	                }

	                return _context2.abrupt("return", this.header);

	              case 4:
	                if (!(typeof this.featureSource.getHeader === "function")) {
	                  _context2.next = 13;
	                  break;
	                }

	                _context2.next = 7;
	                return this.featureSource.getHeader();

	              case 7:
	                header = _context2.sent;

	                if (header) {
	                  this.callSets = header.callSets || [];
	                }

	                this.header = header;
	                return _context2.abrupt("return", header);

	              case 13:
	                this.callSets = [];
	                return _context2.abrupt("return", undefined);

	              case 15:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function getHeader() {
	        return _getHeader.apply(this, arguments);
	      }

	      return getHeader;
	    }()
	  }, {
	    key: "getCallsetsLength",
	    value: function getCallsetsLength() {
	      return this.callSets.length;
	    }
	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(chr, start, end, bpPerPixel) {
	        return regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                if (!(this.header === undefined)) {
	                  _context3.next = 4;
	                  break;
	                }

	                _context3.next = 3;
	                return this.getHeader();

	              case 3:
	                this.header = _context3.sent;

	              case 4:
	                return _context3.abrupt("return", this.featureSource.getFeatures({
	                  chr: chr,
	                  start: start,
	                  end: end,
	                  bpPerPixel: bpPerPixel,
	                  visibilityWindow: this.visibilityWindow
	                }));

	              case 5:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function getFeatures(_x, _x2, _x3, _x4) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	    /**
	     * The required height in pixels required for the track content.   This is not the visible track height, which
	     * can be smaller (with a scrollbar) or larger.
	     *
	     * @param features
	     * @returns {*}
	     */

	  }, {
	    key: "computePixelHeight",
	    value: function computePixelHeight(features) {
	      if (this.displayMode === "COLLAPSED") {
	        this.nRows = 1;
	        return topMargin + this.variantHeight;
	      } else {
	        var maxRow = 0;

	        if (features) {
	          var _iterator = _createForOfIteratorHelper(features),
	              _step;

	          try {
	            for (_iterator.s(); !(_step = _iterator.n()).done;) {
	              var feature = _step.value;
	              if (feature.row && feature.row > maxRow) maxRow = feature.row;
	            }
	          } catch (err) {
	            _iterator.e(err);
	          } finally {
	            _iterator.f();
	          }
	        }

	        var vGap = this.displayMode === 'EXPANDED' ? this.expandedVGap : this.squishedVGap;
	        this.nRows = maxRow + 1;
	        var h = topMargin + this.nRows * (this.variantHeight + vGap);
	        this.variantBandHeight = h;
	        var callHeight = this.displayMode === "EXPANDED" ? this.expandedCallHeight : this.squishedCallHeight;
	        var nCalls = this.getCallsetsLength() * this.nRows;
	        return h + vGap + (nCalls + 1) * (callHeight + vGap);
	      }
	    }
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      var ctx = options.context;
	      var callSets = this.callSets;
	      var nCalls = this.getCallsetsLength();
	      var pixelWidth = options.pixelWidth;
	      var pixelHeight = options.pixelHeight;
	      var callHeight = "EXPANDED" === this.displayMode ? this.expandedCallHeight : this.squishedCallHeight;
	      var bpPerPixel = options.bpPerPixel;
	      var bpStart = options.bpStart;
	      var bpEnd = bpStart + pixelWidth * bpPerPixel + 1;
	      IGVGraphics.fillRect(ctx, 0, options.pixelTop, pixelWidth, pixelHeight, {
	        'fillStyle': "rgb(255, 255, 255)"
	      });
	      var vGap = this.displayMode === 'EXPANDED' ? this.expandedVGap : this.squishedVGap;

	      if (callSets && nCalls > 0 && "COLLAPSED" !== this.displayMode) {
	        IGVGraphics.strokeLine(ctx, 0, this.variantBandHeight, pixelWidth, this.variantBandHeight, {
	          strokeStyle: 'rgb(224,224,224) '
	        });
	      }

	      var featureList = options.features;

	      if (featureList) {
	        var _iterator2 = _createForOfIteratorHelper(featureList),
	            _step2;

	        try {
	          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	            var variant = _step2.value;
	            if (variant.end < bpStart) continue;
	            if (variant.start > bpEnd) break;
	            var py = topMargin + ("COLLAPSED" === this.displayMode ? 0 : variant.row * (this.variantHeight + vGap));
	            var vh = this.variantHeight; // Compute pixel width.   Minimum width is 3 pixels,  if > 5 pixels create gap between variants

	            var px = Math.round((variant.start - bpStart) / bpPerPixel);
	            var px1 = Math.round((variant.end - bpStart) / bpPerPixel);
	            var pw = Math.max(1, px1 - px);

	            if (pw < 3) {
	              pw = 3;
	              px -= 1;
	            } else if (pw > 5) {
	              px += 1;
	              pw -= 2;
	            }

	            if ("NONVARIANT" === variant.type) {
	              ctx.fillStyle = this.nonRefColor;
	            } else if ("MIXED" === variant.type) {
	              ctx.fillStyle = this.mixedColor;
	            } else {
	              ctx.fillStyle = this.color || this.defaultColor;
	            }

	            ctx.fillRect(px, py, pw, vh);

	            if (nCalls > 0 && variant.calls && "COLLAPSED" !== this.displayMode) {
	              var callsDrawn = 0;

	              var _iterator3 = _createForOfIteratorHelper(callSets),
	                  _step3;

	              try {
	                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	                  var callSet = _step3.value;
	                  var call = variant.calls[callSet.id];

	                  if (call) {
	                    var _py = this.variantBandHeight + vGap + (callsDrawn + variant.row) * (callHeight + vGap);

	                    var allVar = true; // until proven otherwise

	                    var allRef = true;
	                    var noCall = false;

	                    var _iterator4 = _createForOfIteratorHelper(call.genotype),
	                        _step4;

	                    try {
	                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	                        var g = _step4.value;

	                        if ('.' === g) {
	                          noCall = true;
	                          break;
	                        } else {
	                          if (g !== 0) allRef = false;
	                          if (g === 0) allVar = false;
	                        }
	                      }
	                    } catch (err) {
	                      _iterator4.e(err);
	                    } finally {
	                      _iterator4.f();
	                    }

	                    if (noCall) {
	                      ctx.fillStyle = this.noCallColor;
	                    } else if (allRef) {
	                      ctx.fillStyle = this.homrefColor;
	                    } else if (allVar) {
	                      ctx.fillStyle = this.homvarColor;
	                    } else {
	                      ctx.fillStyle = this.hetvarColor;
	                    }

	                    ctx.fillRect(px, _py, pw, callHeight);
	                  }

	                  callsDrawn++;
	                }
	              } catch (err) {
	                _iterator3.e(err);
	              } finally {
	                _iterator3.f();
	              }
	            }
	          }
	        } catch (err) {
	          _iterator2.e(err);
	        } finally {
	          _iterator2.f();
	        }
	      }
	    }
	  }, {
	    key: "popupData",

	    /**
	     * Return "popup data" for feature @ genomic location.  Data is an array of key-value pairs
	     */
	    value: function popupData(clickState, featureList) {
	      if (!featureList) featureList = this.clickedFeatures(clickState);
	      var genomicLocation = clickState.genomicLocation;
	      var genomeID = this.browser.genome.id;
	      var popupData = [];
	      var sampleInformation = this.browser.sampleInformation;

	      var _iterator5 = _createForOfIteratorHelper(featureList),
	          _step5;

	      try {
	        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
	          var variant = _step5.value;

	          if (popupData.length > 0) {
	            popupData.push('<HR>');
	          }

	          if ("COLLAPSED" === this.displayMode) {
	            Array.prototype.push.apply(popupData, variant.popupData(genomicLocation, this.type));
	          } else {
	            var yOffset = clickState.y;
	            var vGap = this.displayMode === 'EXPANDED' ? this.expandedVGap : this.squishedVGap;

	            if (yOffset <= this.variantBandHeight) {
	              // Variant
	              var row = Math.floor((yOffset - topMargin) / (this.variantHeight + vGap));

	              if (variant.row === row) {
	                Array.prototype.push.apply(popupData, variant.popupData(genomicLocation, genomeID), this.type);
	              }
	            } else {
	              // Genotype
	              var callSets = this.callSets;

	              if (callSets && variant.calls) {
	                var callHeight = this.nRows * ("SQUISHED" === this.displayMode ? this.squishedCallHeight : this.expandedCallHeight);

	                var _row = Math.floor((yOffset - this.variantBandHeight) / (callHeight + vGap));

	                if (_row >= 0 && _row < callSets.length) {
	                  var cs = callSets[_row];
	                  var call = variant.calls[cs.id];
	                  Array.prototype.push.apply(popupData, extractGenotypePopupData(call, variant, genomeID, sampleInformation));
	                }
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _iterator5.e(err);
	      } finally {
	        _iterator5.f();
	      }

	      return popupData;
	      /**
	       * Genotype popup text.
	       * @param call
	       * @param variant
	       * @returns {Array}
	       */

	      function extractGenotypePopupData(call, variant, genomeId, sampleInformation) {
	        var gt = '';
	        var altArray = variant.alternateBases.split(",");

	        var _iterator6 = _createForOfIteratorHelper(call.genotype),
	            _step6;

	        try {
	          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
	            var allele = _step6.value;

	            if ('.' === allele) {
	              gt += 'No Call';
	              break;
	            } else if (allele === 0) {
	              gt += variant.referenceBases;
	            } else {
	              var alt = altArray[allele - 1].replace("<", "&lt;");
	              gt += alt;
	            }
	          }
	        } catch (err) {
	          _iterator6.e(err);
	        } finally {
	          _iterator6.f();
	        }

	        var popupData = [];

	        if (call.callSetName !== undefined) {
	          popupData.push({
	            name: 'Name',
	            value: call.callSetName
	          });
	        }

	        popupData.push({
	          name: 'Genotype',
	          value: gt
	        });

	        if (call.phaseset !== undefined) {
	          popupData.push({
	            name: 'Phase set',
	            value: call.phaseset
	          });
	        }

	        if (call.genotypeLikelihood !== undefined) {
	          popupData.push({
	            name: 'genotypeLikelihood',
	            value: call.genotypeLikelihood.toString()
	          });
	        }

	        if (sampleInformation) {
	          var attr = sampleInformation.getAttributes(call.callSetName);

	          if (attr) {
	            Object.keys(attr).forEach(function (attrName) {
	              var displayText = attrName.replace(/([A-Z])/g, " $1");
	              displayText = displayText.charAt(0).toUpperCase() + displayText.slice(1);
	              popupData.push({
	                name: displayText,
	                value: attr[attrName]
	              });
	            });
	          }
	        }

	        var infoKeys = Object.keys(call.info);

	        if (infoKeys.length) {
	          popupData.push("<hr>");
	        }

	        infoKeys.forEach(function (key) {
	          popupData.push({
	            name: key,
	            value: call.info[key]
	          });
	        });
	        var cravatLinks = []; // TODO -- where do these get calculated?

	        if (cravatLinks.length > 0) {
	          popupData.push("<HR/>");
	          popupData = popupData.concat(cravatLinks);
	        }

	        return popupData;
	      }
	    } // VariantTrack.prototype.contextMenuItemList = function (clickState) {
	    //
	    //     const self = this;
	    //     const menuItems = [];
	    //
	    //     const featureList = this.clickedFeatures(clickState);
	    //
	    //     if (this.callSets && featureList && featureList.length > 0) {
	    //
	    //         featureList.forEach(function (variant) {
	    //
	    //             if ('str' === variant.type) {
	    //
	    //                 menuItems.push({
	    //                     label: 'Sort by allele length',
	    //                     click: function () {
	    //                         sortCallSetsByAlleleLength(self.callSets, variant, self.sortDirection);
	    //                         self.sortDirection = (self.sortDirection === "ASC") ? "DESC" : "ASC";
	    //                         self.trackView.repaintViews();
	    //                     }
	    //                 });
	    //
	    //             }
	    //
	    //         });
	    //     }
	    //
	    //
	    //     function sortCallSetsByAlleleLength(callSets, variant, direction) {
	    //         var d = (direction === "DESC") ? 1 : -1;
	    //         Object.keys(callSets).forEach(function (property) {
	    //             callSets[property].sort(function (a, b) {
	    //                 var aNan = isNaN(variant.calls[a.id].genotype[0]);
	    //                 var bNan = isNaN(variant.calls[b.id].genotype[0]);
	    //                 if (aNan && bNan) {
	    //                     return 0;
	    //                 } else if (aNan) {
	    //                     return 1;
	    //                 } else if (bNan) {
	    //                     return -1;
	    //                 } else {
	    //                     var a0 = getAlleleString(variant.calls[a.id], variant, 0);
	    //                     var a1 = getAlleleString(variant.calls[a.id], variant, 1);
	    //                     var b0 = getAlleleString(variant.calls[b.id], variant, 0);
	    //                     var b1 = getAlleleString(variant.calls[b.id], variant, 1);
	    //                     var result = Math.max(b0.length, b1.length) - Math.max(a0.length, a1.length);
	    //                     if (result === 0) {
	    //                         result = Math.min(b0.length, b1.length) - Math.min(a0.length, a1.length);
	    //                     }
	    //                     return d * result;
	    //                 }
	    //             });
	    //         });
	    //     }
	    //
	    //
	    //     return menuItems;
	    //
	    // };

	  }, {
	    key: "menuItemList",
	    value: function menuItemList() {
	      var self = this,
	          menuItems = [];
	      menuItems.push({
	        object: $('<div class="igv-track-menu-border-top">')
	      });
	      ["COLLAPSED", "SQUISHED", "EXPANDED"].forEach(function (displayMode) {
	        var lut = {
	          "COLLAPSED": "Collapse",
	          "SQUISHED": "Squish",
	          "EXPANDED": "Expand"
	        };
	        menuItems.push({
	          object: createCheckbox$1(lut[displayMode], displayMode === self.displayMode),
	          click: function click() {
	            self.displayMode = displayMode;
	            self.trackView.checkContentHeight();
	            self.trackView.repaintViews();
	          }
	        });
	      });
	      return menuItems;
	    }
	  }]);

	  return VariantTrack;
	}(TrackBase);

	var EqtlTrack = /*#__PURE__*/function (_TrackBase) {
	  _inherits(EqtlTrack, _TrackBase);

	  var _super = _createSuper(EqtlTrack);

	  function EqtlTrack(config, browser) {
	    var _this;

	    _classCallCheck(this, EqtlTrack);

	    _this = _super.call(this, config, browser);
	    _this.config = config;
	    _this.url = config.url;
	    _this.name = config.name;
	    _this.pValueField = config.pValueField || "pValue";
	    _this.geneField = config.geneField || "geneSymbol";
	    _this.snpField = config.snpField || "snp";
	    var min = config.minLogP || config.min;
	    var max = config.maxLogP || config.max;
	    _this.dataRange = {
	      min: min || 3.5,
	      max: max || 25
	    };

	    if (!max) {
	      _this.autoscale = true;
	    } else {
	      _this.autoscale = config.autoscale;
	    }

	    _this.autoscalePercentile = config.autoscalePercentile === undefined ? 98 : config.autoscalePercentile;
	    _this.background = config.background; // No default

	    _this.divider = config.divider || "rgb(225,225,225)";
	    _this.dotSize = config.dotSize || 2;
	    _this.height = config.height || 100;
	    _this.autoHeight = false;
	    _this.disableButtons = config.disableButtons; // Limit visibility window to 2 mb,  gtex server gets flaky beyond that

	    _this.visibilityWindow = config.visibilityWindow === undefined ? 2000000 : config.visibilityWindow >= 0 ? Math.min(2000000, config.visibilityWindow) : 2000000;
	    _this.featureSource = FeatureSource(config, browser.genome);
	    GtexUtils.gtexLoaded = true;
	    return _this;
	  }

	  _createClass(EqtlTrack, [{
	    key: "paintAxis",
	    value: function paintAxis(ctx, pixelWidth, pixelHeight) {
	      var yScale = (this.dataRange.max - this.dataRange.min) / pixelHeight;
	      var font = {
	        'font': 'normal 10px Arial',
	        'textAlign': 'right',
	        'strokeStyle': "black"
	      };
	      IGVGraphics.fillRect(ctx, 0, 0, pixelWidth, pixelHeight, {
	        'fillStyle': "rgb(255, 255, 255)"
	      }); // Determine a tick spacing such that there is at least 10 pixels between ticks

	      var n = Math.ceil((this.dataRange.max - this.dataRange.min) * 10 / pixelHeight);

	      for (var p = 4; p <= this.dataRange.max; p += n) {
	        // TODO: Dashes may not actually line up with correct scale. Ask Jim about this
	        var ref = 0.85 * pixelWidth;
	        var x1 = ref - 5;
	        var x2 = ref;
	        var y = pixelHeight - (p - this.dataRange.min) / yScale;
	        IGVGraphics.strokeLine(ctx, x1, y, x2, y, font); // Offset dashes up by 2 pixel

	        if (y > 8) {
	          IGVGraphics.fillText(ctx, p, x1 - 1, y + 2, font);
	        } // Offset numbers down by 2 pixels;

	      }

	      font['textAlign'] = 'center';
	      IGVGraphics.fillText(ctx, "-log10(pvalue)", pixelWidth / 4, pixelHeight / 2, font, {
	        rotate: {
	          angle: -90
	        }
	      });
	    }
	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, start, end) {
	        var pValueField, features;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                pValueField = this.pValueField;
	                _context.next = 3;
	                return this.featureSource.getFeatures({
	                  chr: chr,
	                  start: start,
	                  end: end
	                });

	              case 3:
	                features = _context.sent;
	                features.forEach(function (f) {
	                  f.value = f[pValueField];
	                });
	                return _context.abrupt("return", features);

	              case 6:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function getFeatures(_x, _x2, _x3) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      var _this2 = this;

	      var ctx = options.context;
	      var pixelWidth = options.pixelWidth;
	      var pixelHeight = options.pixelHeight;

	      if (this.background) {
	        IGVGraphics.fillRect(ctx, 0, 0, pixelWidth, pixelHeight, {
	          'fillStyle': this.background
	        });
	      }

	      IGVGraphics.strokeLine(ctx, 0, pixelHeight - 1, pixelWidth, pixelHeight - 1, {
	        'strokeStyle': this.divider
	      });
	      ctx.save();

	      var drawEqtls = function drawEqtls(drawSelected) {
	        var radius = drawSelected ? 2 * _this2.dotSize : _this2.dotSize;
	        var bpStart = options.bpStart;
	        var yScale = (_this2.dataRange.max - _this2.dataRange.min) / pixelHeight;
	        var selection = options.referenceFrame.selection;

	        var _iterator = _createForOfIteratorHelper(options.features),
	            _step;

	        try {
	          for (_iterator.s(); !(_step = _iterator.n()).done;) {
	            var eqtl = _step.value;
	            var px = (eqtl.start - bpStart + 0.5) / options.bpPerPixel;
	            if (px < 0) continue;else if (px > pixelWidth) break;
	            var snp = eqtl.snp.toUpperCase();

	            var geneName = eqtl[_this2.geneField].toUpperCase();

	            var isSelected = selection && (selection.snp === snp || selection.gene === geneName);

	            if (!drawSelected || isSelected) {
	              // Add eqtl's gene to the selection if this is the selected snp.
	              // TODO -- this should not be done here in the rendering code.
	              if (selection && selection.snp === snp) {
	                selection.addGene(geneName);
	              }

	              var mLogP = -Math.log(eqtl[_this2.pValueField]) / Math.LN10;

	              if (mLogP >= _this2.dataRange.min) {
	                var capped = void 0;

	                if (mLogP > _this2.dataRange.max) {
	                  mLogP = _this2.dataRange.max;
	                  capped = true;
	                } else {
	                  capped = false;
	                }

	                var py = Math.max(0 + radius, pixelHeight - Math.round((mLogP - _this2.dataRange.min) / yScale));
	                eqtl.px = px;
	                eqtl.py = py;
	                eqtl.radius = radius;
	                var color = void 0;

	                if (drawSelected && selection) {
	                  color = selection.colorForGene(geneName);
	                  IGVGraphics.setProperties(ctx, {
	                    fillStyle: color,
	                    strokeStyle: "black"
	                  });
	                } else {
	                  color = capped ? "rgb(150, 150, 150)" : "rgb(180, 180, 180)";
	                  IGVGraphics.setProperties(ctx, {
	                    fillStyle: color,
	                    strokeStyle: color
	                  });
	                }

	                IGVGraphics.fillCircle(ctx, px, py, radius);
	                IGVGraphics.strokeCircle(ctx, px, py, radius);
	              }
	            }
	          }
	        } catch (err) {
	          _iterator.e(err);
	        } finally {
	          _iterator.f();
	        }
	      }; // Draw in two passes, with "selected" eqtls drawn last


	      drawEqtls(false);
	      drawEqtls(true);
	      ctx.restore();
	    }
	    /**
	     * Return "popup data" for feature @ genomic location.  Data is an array of key-value pairs
	     */

	  }, {
	    key: "popupData",
	    value: function popupData(clckState) {
	      var features = clckState.viewport.getCachedFeatures();
	      if (!features || features.length === 0) return [];
	      var tolerance = 3;
	      var tissue = this.name;
	      var popupData = [];

	      var _iterator2 = _createForOfIteratorHelper(features),
	          _step2;

	      try {
	        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	          var feature = _step2.value;

	          // Hit test --use square vs circle for efficiency (no sqrt)
	          if (Math.abs(feature.px - clckState.canvasX) < feature.radius + tolerance && Math.abs(feature.py - clckState.canvasY) < feature.radius + tolerance) {
	            if (popupData.length > 0) {
	              popupData.push("<hr>");
	            }

	            popupData.push({
	              name: "snp id",
	              value: feature.snp
	            }, {
	              name: "gene id",
	              value: feature.geneId
	            }, {
	              name: "gene name",
	              value: feature.geneName
	            }, {
	              name: "p value",
	              value: feature.pValue
	            }, {
	              name: "tissue",
	              value: tissue
	            });
	          }
	        }
	      } catch (err) {
	        _iterator2.e(err);
	      } finally {
	        _iterator2.f();
	      }

	      return popupData;
	    }
	  }, {
	    key: "menuItemList",
	    value: function menuItemList() {
	      return MenuUtils.numericDataMenuItems(this.trackView);
	    }
	  }, {
	    key: "doAutoscale",
	    value: function doAutoscale(featureList) {
	      if (featureList.length > 0) {
	        var values = featureList.map(function (eqtl) {
	          return -Math.log(eqtl.value) / Math.LN10;
	        });
	        this.dataRange.max = IGVMath.percentile(values, this.autoscalePercentile);
	      } else {
	        // No features -- default
	        var max = this.config.maxLogP || this.config.max;
	        this.dataRange.max = max || 25;
	      }

	      return this.dataRange;
	    }
	  }]);

	  return EqtlTrack;
	}(TrackBase);

	/**
	 * Colors used for coding omosomes
	 */
	var Colors = {
	  "X": "rgb(204, 153, 0)",
	  "Y": "rgb(153, 204, 0)",
	  "Un": "darkGray)",
	  "1": "rgb(80, 80, 255)",
	  //"1": Color.red);
	  "I": "rgb(139, 155, 187)",
	  "2": "rgb(206, 61, 50)",
	  "II": "rgb(206, 61, 50)",
	  "2a": "rgb(210, 65, 55)",
	  "2b": "rgb(215, 70, 60)",
	  "3": "rgb(116, 155, 88)",
	  "III": "rgb(116, 155, 88)",
	  "4": "rgb(240, 230, 133)",
	  "IV": "rgb(240, 230, 133)",
	  "5": "rgb(70, 105, 131)",
	  "6": "rgb(186, 99, 56)",
	  "7": "rgb(93, 177, 221)",
	  "8": "rgb(128, 34, 104)",
	  "9": "rgb(107, 215, 107)",
	  "10": "rgb(213, 149, 167)",
	  "11": "rgb(146, 72, 34)",
	  "12": "rgb(131, 123, 141)",
	  "13": "rgb(199, 81, 39)",
	  "14": "rgb(213, 143, 92)",
	  "15": "rgb(122, 101, 165)",
	  "16": "rgb(228, 175, 105)",
	  "17": "rgb(59, 27, 83)",
	  "18": "rgb(205, 222, 183)",
	  "19": "rgb(97, 42, 121)",
	  "20": "rgb(174, 31, 99)",
	  "21": "rgb(231, 199, 111)",
	  "22": "rgb(90, 101, 94)",
	  "23": "rgb(204, 153, 0)",
	  "24": "rgb(153, 204, 0)",
	  "25": "rgb(51, 204, 0)",
	  "26": "rgb(0, 204, 51)",
	  "27": "rgb(0, 204, 153)",
	  "28": "rgb(0, 153, 204)",
	  "29": "rgb(10, 71, 255)",
	  "30": "rgb(71, 117, 255)",
	  "31": "rgb(255, 194, 10)",
	  "32": "rgb(255, 209, 71)",
	  "33": "rgb(153, 0, 51)",
	  "34": "rgb(153, 26, 0)",
	  "35": "rgb(153, 102, 0)",
	  "36": "rgb(128, 153, 0)",
	  "37": "rgb(51, 153, 0)",
	  "38": "rgb(0, 153, 26)",
	  "39": "rgb(0, 153, 102)",
	  "40": "rgb(0, 128, 153)",
	  "41": "rgb(0, 51, 153)",
	  "42": "rgb(26, 0, 153)",
	  "43": "rgb(102, 0, 153)",
	  "44": "rgb(153, 0, 128)",
	  "45": "rgb(214, 0, 71)",
	  "46": "rgb(255, 20, 99)",
	  "47": "rgb(0, 214, 143)",
	  "48": "rgb(20, 255, 177)"
	}; //  aliasing

	for (var _i$1 = 0, _Object$keys = Object.keys(Colors); _i$1 < _Object$keys.length; _i$1++) {
	  var key$2 = _Object$keys[_i$1];
	  var altName = "chr" + key$2;
	  Colors[altName] = Colors[key$2];
	}

	var DEFAULT_POPOVER_WINDOW = 100000000; //const type = "gwas";

	var GWASTrack = /*#__PURE__*/function (_TrackBase) {
	  _inherits(GWASTrack, _TrackBase);

	  var _super = _createSuper(GWASTrack);

	  function GWASTrack(config, browser) {
	    var _this;

	    _classCallCheck(this, GWASTrack);

	    _this = _super.call(this, config, browser);
	    _this.useChrColors = config.useChrColors === undefined ? true : config.useChrColors;
	    _this.trait = config.trait;
	    _this.posteriorProbability = config.posteriorProbability;
	    _this.height = config.height || 100; // The preferred height
	    // Set initial range if specfied, unless autoscale == true

	    if (!config.autoscale) {
	      if (config.posteriorProbability) {
	        _this.dataRange = {
	          min: config.min === undefined ? 0 : config.min,
	          max: config.max === undefined ? 1 : config.max
	        };
	      } else {
	        _this.dataRange = {
	          min: config.min === undefined ? 0 : config.min,
	          max: config.max === undefined ? 25 : config.max
	        };
	      }
	    }

	    _this.autoscale = config.autoscale;
	    _this.autoscalePercentile = config.autoscalePercentile === undefined ? 98 : config.autoscalePercentile;
	    _this.background = config.background; // No default

	    _this.divider = config.divider || "rgb(225,225,225)";
	    _this.dotSize = config.dotSize || 3;
	    _this.popoverWindow = config.popoverWindow === undefined ? DEFAULT_POPOVER_WINDOW : config.popoverWindow;
	    _this.description = config.description; // might be null

	    _this.colorScales = config.color ? new ConstantColorScale(config.color) : {
	      "*": new BinnedColorScale(config.colorScale || {
	        thresholds: [5e-8, 5e-4, 0.5],
	        colors: ["rgb(255,50,50)", "rgb(251,100,100)", "rgb(251,170,170)", "rgb(227,238,249)"]
	      })
	    };
	    _this.featureSource = FeatureSource(config, browser.genome);
	    return _this;
	  }

	  _createClass(GWASTrack, [{
	    key: "supportsWholeGenome",
	    value: function supportsWholeGenome() {
	      return true;
	    }
	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, start, end) {
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                return _context.abrupt("return", this.featureSource.getFeatures({
	                  chr: chr,
	                  start: start,
	                  end: end
	                }));

	              case 1:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function getFeatures(_x, _x2, _x3) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      var featureList = options.features;
	      var ctx = options.context;
	      var pixelWidth = options.pixelWidth;
	      var pixelHeight = options.pixelHeight;

	      if (this.background) {
	        IGVGraphics.fillRect(ctx, 0, 0, pixelWidth, pixelHeight, {
	          'fillStyle': this.background
	        });
	      }

	      IGVGraphics.strokeLine(ctx, 0, pixelHeight - 1, pixelWidth, pixelHeight - 1, {
	        'strokeStyle': this.divider
	      });

	      if (featureList) {
	        var bpPerPixel = options.bpPerPixel;
	        var bpStart = options.bpStart;
	        var bpEnd = bpStart + pixelWidth * bpPerPixel + 1;

	        var _iterator = _createForOfIteratorHelper(featureList),
	            _step;

	        try {
	          for (_iterator.s(); !(_step = _iterator.n()).done;) {
	            var variant = _step.value;
	            var pos = variant.start;
	            if (pos < bpStart) continue;
	            if (pos > bpEnd) break;
	            var colorScale = this.getColorScale(variant._f ? variant._f.chr : variant.chr);
	            var color = void 0;
	            var val = void 0;

	            if (this.posteriorProbability) {
	              val = variant.value;
	              color = colorScale.getColor(val);
	            } else {
	              var pvalue = variant.value || variant.score;
	              if (!pvalue) continue;
	              val = -Math.log10(pvalue);
	              color = colorScale.getColor(val);
	            }

	            var yScale = (this.dataRange.max - this.dataRange.min) / pixelHeight;
	            var px = Math.round((pos - bpStart) / bpPerPixel);
	            var py = Math.max(this.dotSize, pixelHeight - Math.round((val - this.dataRange.min) / yScale));

	            if (color) {
	              IGVGraphics.setProperties(ctx, {
	                fillStyle: color,
	                strokeStyle: "black"
	              });
	            }

	            IGVGraphics.fillCircle(ctx, px, py, this.dotSize);
	            variant.px = px;
	            variant.py = py;
	          }
	        } catch (err) {
	          _iterator.e(err);
	        } finally {
	          _iterator.f();
	        }
	      }
	    }
	  }, {
	    key: "getColorScale",
	    value: function getColorScale(chr) {
	      if (this.useChrColors) {
	        var cs = this.colorScales[chr];

	        if (!cs) {
	          var color = Colors[chr] || randomColor();
	          cs = new ConstantColorScale(color);
	          this.colorScales[chr] = cs;
	        }

	        return cs;
	      } else {
	        return this.colorScales("*");
	      }
	    }
	  }, {
	    key: "paintAxis",
	    value: function paintAxis(ctx, pixelWidth, pixelHeight) {
	      IGVGraphics.fillRect(ctx, 0, 0, pixelWidth, pixelHeight, {
	        'fillStyle': "rgb(255, 255, 255)"
	      });
	      var font = {
	        'font': 'normal 10px Arial',
	        'textAlign': 'right',
	        'strokeStyle': "black"
	      };
	      var yScale = (this.dataRange.max - this.dataRange.min) / pixelHeight;

	      if (this.posteriorProbability) {
	        var n = 0.1;

	        for (var p = this.dataRange.min; p < this.dataRange.max; p += n) {
	          var yp = pixelHeight - Math.round((p - this.dataRange.min) / yScale);
	          IGVGraphics.strokeLine(ctx, 45, yp - 2, 50, yp - 2, font); // Offset dashes up by 2 pixel

	          IGVGraphics.fillText(ctx, p.toFixed(1), 44, yp + 2, font); // Offset numbers down by 2 pixels;
	        }
	      } else {
	        var _n = Math.ceil((this.dataRange.max - this.dataRange.min) * 10 / pixelHeight);

	        for (var _p = this.dataRange.min; _p < this.dataRange.max; _p += _n) {
	          var _yp = pixelHeight - Math.round((_p - this.dataRange.min) / yScale);

	          IGVGraphics.strokeLine(ctx, 45, _yp, 50, _yp, font); // Offset dashes up by 2 pixel

	          IGVGraphics.fillText(ctx, Math.floor(_p), 44, _yp + 4, font); // Offset numbers down by 2 pixels;
	        }
	      }

	      font['textAlign'] = 'center';

	      if (this.posteriorProbability) {
	        IGVGraphics.fillText(ctx, "PPA", pixelWidth / 2, pixelHeight / 2, font, {
	          rotate: {
	            angle: -90
	          }
	        });
	      } else {
	        IGVGraphics.fillText(ctx, "-log10(pvalue)", pixelWidth / 2, pixelHeight / 2, font, {
	          rotate: {
	            angle: -90
	          }
	        });
	      }
	    }
	  }, {
	    key: "popupData",
	    value: function popupData(clickState) {
	      var data = [];
	      var track = clickState.viewport.trackView.track;
	      var features = clickState.viewport.getCachedFeatures();

	      if (features) {
	        var count = 0;

	        var _iterator2 = _createForOfIteratorHelper(features),
	            _step2;

	        try {
	          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	            var f = _step2.value;
	            var xDelta = Math.abs(clickState.canvasX - f.px);
	            var yDelta = Math.abs(clickState.canvasY - f.py);
	            var value = f.value || f.score;

	            if (xDelta < this.dotSize && yDelta < this.dotSize) {
	              if (count > 0) {
	                data.push("<HR/>");
	              }

	              if (count == 5) {
	                data.push("...");
	                break;
	              }

	              if (typeof f.popupData === 'function') {
	                data = data.concat(f.popupData());
	              } else {
	                var chr = f.realChr || f.chr;
	                var pos = (f.realStart || f.start) + 1;
	                data.push({
	                  name: 'chromosome',
	                  value: chr
	                });
	                data.push({
	                  name: 'position',
	                  value: pos
	                });
	                data.push({
	                  name: 'name',
	                  value: f.name
	                });

	                if (track.posteriorProbability) {
	                  data.push({
	                    name: 'posterior probability',
	                    value: value
	                  });
	                } else {
	                  data.push({
	                    name: 'pValue',
	                    value: value
	                  });
	                }
	              }

	              count++;
	            }
	          }
	        } catch (err) {
	          _iterator2.e(err);
	        } finally {
	          _iterator2.f();
	        }
	      }

	      return data;
	    }
	  }, {
	    key: "menuItemList",
	    value: function menuItemList() {
	      return MenuUtils.numericDataMenuItems(this.trackView);
	    }
	  }, {
	    key: "doAutoscale",
	    value: function doAutoscale$1(featureList) {
	      if (featureList.length > 0) {
	        // posterior probabilities are treated without modification, but we need to take a negative logarithm of P values
	        var features = this.posteriorProbability ? featureList : featureList.map(function (feature) {
	          var v = feature.value !== undefined ? feature.value : feature.score;
	          return {
	            value: -Math.log(v) / Math.LN10
	          };
	        });

	        var range = doAutoscale(features);

	        this.dataRange.max = range.max;
	        this.dataRange.min = range.min !== range.max ? range.min : 0;
	      } else {
	        // No features -- pick something reasonable for PPAs and p-values
	        if (this.posteriorProbability) {
	          this.dataRange.min = this.config.min || 0;
	          this.dataRange.max = this.config.max || 1;
	        } else {
	          this.dataRange.max = this.config.max || 25;
	          this.dataRange.min = this.config.min || 0;
	        }
	      }

	      return this.dataRange;
	    }
	  }]);

	  return GWASTrack;
	}(TrackBase);

	var X_PIXEL_DIFF_THRESHOLD = 1;

	var GCNVTrack = /*#__PURE__*/function (_TrackBase) {
	  _inherits(GCNVTrack, _TrackBase);

	  var _super = _createSuper(GCNVTrack);

	  function GCNVTrack(config, browser) {
	    var _this;

	    _classCallCheck(this, GCNVTrack);

	    _this = _super.call(this, config, browser);
	    _this.autoscale = config.autoscale || config.max === undefined;
	    _this.dataRange = {
	      min: config.min || 0,
	      max: config.max
	    };
	    _this.windowFunction = config.windowFunction || "mean";
	    _this.paintAxis = paintAxis;
	    _this.graphType = config.graphType || "bar"; //hack to avoid creating feature source multiple times.  If config.type is not set the file must be read
	    //to determine type, which results in creation of a feature source.

	    if (config._featureSource) {
	      _this.featureSource = config._featureSource;
	      delete config._featureSource;
	    } else {
	      _this.featureSource = FeatureSource(_this.config, browser.genome);
	    }

	    return _this;
	  }

	  _createClass(GCNVTrack, [{
	    key: "postInit",
	    value: function () {
	      var _postInit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	        var v, _iterator, _step, h, tokens;

	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (!(typeof this.featureSource.getHeader === "function")) {
	                  _context.next = 7;
	                  break;
	                }

	                _context.next = 3;
	                return this.featureSource.getHeader();

	              case 3:
	                this.header = _context.sent;
	                this.sampleNames = this.header.columnNames.slice(3); // Set generic properties from track line

	                this.setTrackProperties(this.header); // setTrackProperties defined in TrackBase
	                // Special track line properties

	                if (this.header.hasOwnProperty("highlight")) {
	                  this.config.highlightSamples = {};
	                  v = this.header["highlight"];
	                  if (!Array.isArray(v)) v = [v];
	                  _iterator = _createForOfIteratorHelper(v);

	                  try {
	                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	                      h = _step.value;
	                      tokens = h.split(";");

	                      if (tokens.length === 2) {
	                        this.config.highlightSamples[tokens[0]] = tokens[1];
	                      }
	                    }
	                  } catch (err) {
	                    _iterator.e(err);
	                  } finally {
	                    _iterator.f();
	                  }
	                }

	              case 7:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function postInit() {
	        return _postInit.apply(this, arguments);
	      }

	      return postInit;
	    }()
	  }, {
	    key: "menuItemList",
	    value: function menuItemList() {
	      return MenuUtils.numericDataMenuItems(this.trackView);
	    }
	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(chr, start, end) {
	        var chrFeatures, prevIndex, nextIndex, i;
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                _context2.next = 2;
	                return this.featureSource.getFeatures({
	                  chr: chr,
	                  start: 0,
	                  end: Number.MAX_VALUE
	                });

	              case 2:
	                chrFeatures = _context2.sent;
	                prevIndex = undefined;
	                nextIndex = undefined;
	                i = 1;

	              case 6:
	                if (!(i < chrFeatures.length - 1)) {
	                  _context2.next = 14;
	                  break;
	                }

	                if (prevIndex === undefined && chrFeatures[i].end > start) {
	                  prevIndex = i - 1;
	                }

	                if (!(nextIndex === undefined && chrFeatures[i].start > end)) {
	                  _context2.next = 11;
	                  break;
	                }

	                nextIndex = i + 1;
	                return _context2.abrupt("break", 14);

	              case 11:
	                i++;
	                _context2.next = 6;
	                break;

	              case 14:
	                if (prevIndex === undefined) prevIndex = 0;
	                if (nextIndex === undefined) nextIndex = chrFeatures.length;
	                return _context2.abrupt("return", chrFeatures.slice(prevIndex, nextIndex));

	              case 17:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function getFeatures(_x, _x2, _x3) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      var self = this;
	      var features = options.features;
	      var ctx = options.context;
	      var bpPerPixel = options.bpPerPixel;
	      var bpStart = options.bpStart;
	      var pixelWidth = options.pixelWidth;
	      var pixelHeight = options.pixelHeight;
	      //if (typeof self.color === "string" && self.color.startsWith("rgb(")) {
	      //    baselineColor = IGVColor.addAlpha(self.color, 0.1);
	      //}

	      var yScale = function yScale(yValue) {
	        return (self.dataRange.max - yValue) / (self.dataRange.max - self.dataRange.min) * pixelHeight;
	      };

	      var getX = function getX(bpPosition) {
	        var x = Math.floor((bpPosition - bpStart) / bpPerPixel);
	        if (isNaN(x)) console.warn('isNaN(x). feature start ' + numberFormatter(bpPosition) + ' bp start ' + numberFormatter(bpStart));
	        return x;
	      };

	      var drawGuideLines = function drawGuideLines(options) {
	        if (self.config.hasOwnProperty('guideLines')) {
	          var _iterator2 = _createForOfIteratorHelper(self.config.guideLines),
	              _step2;

	          try {
	            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	              var line = _step2.value;

	              if (line.hasOwnProperty('color') && line.hasOwnProperty('y') && line.hasOwnProperty('dotted')) {
	                var y = yScale(line.y);
	                var props = {
	                  'strokeStyle': line['color'],
	                  'strokeWidth': 2
	                };
	                if (line['dotted']) IGVGraphics.dashedLine(options.context, 0, y, options.pixelWidth, y, 5, props);else IGVGraphics.strokeLine(options.context, 0, y, options.pixelWidth, y, props);
	              }
	            }
	          } catch (err) {
	            _iterator2.e(err);
	          } finally {
	            _iterator2.f();
	          }
	        }
	      };

	      if (features && features.length > 0) {
	        if (self.dataRange.min === undefined) self.dataRange.min = 0; // Max can be less than min if config.min is set but max left to autoscale. If that's the case there is
	        // nothing to paint.

	        if (self.dataRange.max > self.dataRange.min) {
	          var highlightSamples = this.config.highlightSamples;
	          var onlyHandleClicksForHighlightedSamples = this.config.onlyHandleClicksForHighlightedSamples;
	          var previousEnd = -1;
	          var previousValues = {};
	          var highlightConnectorLines = [];
	          var highlightFeatureLines = []; // clickDetectorCache allows fast retrieval of whether a mouse click hits a rendered line segment
	          // by storing lists of rendered line segments, keyed by their right x coordinate in canvas pixel space.
	          // this cache is regenerated on every draw.

	          this.clickDetectorCache = {};

	          var _iterator3 = _createForOfIteratorHelper(features),
	              _step3;

	          try {
	            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	              var feature = _step3.value;
	              var x1 = getX(feature.start);
	              var x2 = getX(feature.end);
	              var previousX = previousEnd >= 0 ? getX(previousEnd) : x1;
	              if (isNaN(x1) || isNaN(x2)) continue;
	              if (x1 - previousX < X_PIXEL_DIFF_THRESHOLD && x2 - x1 < X_PIXEL_DIFF_THRESHOLD) continue;
	              this.clickDetectorCache[x1] = [];
	              this.clickDetectorCache[x2] = [];

	              for (var i = 0; i < feature.values.length; i++) {
	                var sampleName = this.sampleNames[i];
	                var value = feature.values[i];
	                var y = yScale(value);

	                if (x1 - previousX >= X_PIXEL_DIFF_THRESHOLD) {
	                  var previousValue = previousValues[sampleName];
	                  var previousY = yScale(previousValue);
	                  var highlightColor = highlightSamples && highlightSamples[sampleName];

	                  if (highlightColor) {
	                    highlightConnectorLines.push([previousX, previousY, x1, y, highlightColor]);
	                  } else {
	                    IGVGraphics.strokeLine(ctx, previousX, previousY, x1, y, {
	                      strokeStyle: '#D9D9D9'
	                    });
	                  }

	                  if (!onlyHandleClicksForHighlightedSamples || sampleName in highlightSamples) {
	                    this.clickDetectorCache[x1].push([previousX, previousY, x1, y, sampleName, highlightColor || 'gray']);
	                  }
	                }

	                if (x2 - x1 >= X_PIXEL_DIFF_THRESHOLD) {
	                  var _highlightColor = highlightSamples && highlightSamples[sampleName];

	                  if (_highlightColor) {
	                    highlightFeatureLines.push([x1, y, x2, y, _highlightColor]);
	                  } else {
	                    IGVGraphics.strokeLine(ctx, x1, y, x2, y, {
	                      strokeStyle: 'gray'
	                    });
	                  }

	                  if (!onlyHandleClicksForHighlightedSamples || sampleName in highlightSamples) {
	                    this.clickDetectorCache[x2].push([x1, y, x2, y, sampleName, _highlightColor || 'gray']);
	                  }
	                }

	                previousValues[sampleName] = value; //IGVGraphics.fillCircle(ctx, px, y, pointSize / 2, {"fillStyle": color, "strokeStyle": color});
	                //IGVGraphics.fillRect(ctx, x, y, width, height, {fillStyle: color});
	              }

	              previousEnd = feature.end;
	            }
	          } catch (err) {
	            _iterator3.e(err);
	          } finally {
	            _iterator3.f();
	          }

	          for (var _i = 0, _highlightConnectorLi = highlightConnectorLines; _i < _highlightConnectorLi.length; _i++) {
	            var f = _highlightConnectorLi[_i];
	            IGVGraphics.strokeLine(ctx, f[0], f[1], f[2], f[3], {
	              strokeStyle: f[4],
	              lineWidth: 1.3
	            });
	          }

	          for (var _i2 = 0, _highlightFeatureLine = highlightFeatureLines; _i2 < _highlightFeatureLine.length; _i2++) {
	            var _f = _highlightFeatureLine[_i2];
	            IGVGraphics.strokeLine(ctx, _f[0], _f[1], _f[2], _f[3], {
	              strokeStyle: _f[4],
	              lineWidth: 2
	            });
	          }
	          /*
	          // If the track includes negative values draw a baseline
	          if (self.dataRange.min < 0) {
	              const basepx = (self.dataRange.max / (self.dataRange.max - self.dataRange.min)) * options.pixelHeight;
	              IGVGraphics.strokeLine(ctx, 0, basepx, options.pixelWidth, basepx, {strokeStyle: baselineColor});
	          }
	          */

	        }
	      }

	      drawGuideLines(options);
	    }
	  }, {
	    key: "doAutoscale",
	    value: function doAutoscale(features) {
	      var min, max;

	      if (features.length > 0) {
	        min = Number.MAX_VALUE;
	        max = -Number.MAX_VALUE;
	        features.forEach(function (feature) {
	          min = Math.min.apply(Math, [min].concat(_toConsumableArray(feature.values)));
	          max = Math.max.apply(Math, [max].concat(_toConsumableArray(feature.values)));
	        });
	        min -= 0.01;
	        max += 0.01;
	      } else {
	        // No features -- default
	        min = 0;
	        max = 100;
	      }

	      return {
	        min: min,
	        max: max
	      };
	    }
	  }, {
	    key: "clickedFeatures",
	    value: function clickedFeatures(clickState) {
	      //console.warn('click', clickState.canvasX, clickState.canvasY, clickState)
	      var BOUNDING_BOX_PADDING = 10;
	      var MIN_DISTANCE_TO_SEGMENT = 5;
	      var clickX = clickState.canvasX;
	      var clickY = clickState.canvasY;
	      var key = null;

	      for (var _i3 = 0, _Object$keys = Object.keys(this.clickDetectorCache); _i3 < _Object$keys.length; _i3++) {
	        key = _Object$keys[_i3];
	        key = parseInt(key);

	        if (key >= clickX) {
	          break;
	        }
	      }

	      if (key) {
	        var closestDistanceSoFar = Number.MAX_VALUE;
	        var closestResult = [];
	        var segments = this.clickDetectorCache[key];

	        var _iterator4 = _createForOfIteratorHelper(segments),
	            _step4;

	        try {
	          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	            var segment = _step4.value;
	            var x1 = segment[0];
	            var x2 = segment[2];
	            if (clickX < x1 || clickX > x2) return [];
	            var y1 = segment[1];
	            var y2 = segment[3];
	            if (clickY < Math.min(y1, y2) - BOUNDING_BOX_PADDING || clickY > Math.max(y1, y2) + BOUNDING_BOX_PADDING) continue;
	            var distance = distanceToLine(clickX, clickY, x1, y1, x2, y2);

	            if (distance < closestDistanceSoFar) {
	              closestResult = [{
	                'name': segment[4],
	                'color': segment[5]
	              }];
	              closestDistanceSoFar = distance; //console.warn('closest:', 'name', segment[4], 'color', segment[5], distance);
	            }
	          }
	        } catch (err) {
	          _iterator4.e(err);
	        } finally {
	          _iterator4.f();
	        }

	        if (closestDistanceSoFar < MIN_DISTANCE_TO_SEGMENT) {
	          return closestResult;
	        }
	      }

	      return [];
	    }
	  }, {
	    key: "popupData",
	    value: function popupData(clickState, featureList) {
	      if (!featureList) featureList = this.clickedFeatures(clickState);
	      var items = [];
	      featureList.forEach(function (f) {
	        for (var _i4 = 0, _Object$keys2 = Object.keys(f); _i4 < _Object$keys2.length; _i4++) {
	          var property = _Object$keys2[_i4];

	          if (isSimpleType(f[property])) {
	            items.push({
	              name: property,
	              value: f[property]
	            });
	          }
	        }
	      });
	      return items;
	    }
	  }, {
	    key: "supportsWholeGenome",
	    value: function supportsWholeGenome() {
	      return false;
	    }
	  }]);

	  return GCNVTrack;
	}(TrackBase);

	function distanceToLine(x, y, ax, ay, bx, by) {
	  /*
	      Finds distance between point (x, y) and line defined by points (ax, ay) (bx, by)
	      based on http://mathworld.wolfram.com/Point-LineDistance2-Dimensional.html
	  */
	  var bx_minus_ax = bx - ax;
	  var by_minus_ay = by - ay;
	  var v = Math.abs(bx_minus_ax * (ay - y) - (ax - x) * by_minus_ay);
	  var r = Math.sqrt(bx_minus_ax * bx_minus_ax + by_minus_ay * by_minus_ay);
	  var distance = r > 0 ? v / r : 0; //console.warn('Check if', x, y, 'is within', ax, ay, bx, by, '. Distance from line: ', distance);

	  return distance;
	}

	var RnaStructTrack = /*#__PURE__*/function (_TrackBase) {
	  _inherits(RnaStructTrack, _TrackBase);

	  var _super = _createSuper(RnaStructTrack);

	  function RnaStructTrack(config, browser) {
	    var _this;

	    _classCallCheck(this, RnaStructTrack);

	    _this = _super.call(this, config, browser); // Set defaults

	    if (!config.height) {
	      _this.height = 300;
	    }

	    _this.arcOrientation = false;
	    _this.theta = Math.PI / 2;

	    if ("bp" === config.format) {
	      _this.featureSource = new RNAFeatureSource(config, browser.genome);
	    } else {
	      _this.featureSource = new RNAFeatureSource(config, browser.genome);
	    }

	    return _this;
	  }

	  _createClass(RnaStructTrack, [{
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, start, end) {
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                return _context.abrupt("return", this.featureSource.getFeatures(chr, start, end));

	              case 1:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function getFeatures(_x, _x2, _x3) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      var self = this;
	      var theta = Math.PI / 2;
	      var ctx = options.context;
	      var pixelWidth = options.pixelWidth;
	      var pixelHeight = options.pixelHeight;
	      var viewportWidth = options.viewportWidth;
	      var bpPerPixel = options.bpPerPixel;
	      var bpStart = options.bpStart;
	      var xScale = bpPerPixel;
	      var orienation = self.arcOrientation;
	      IGVGraphics.fillRect(ctx, 0, options.pixelTop, pixelWidth, pixelHeight, {
	        'fillStyle': "rgb(255, 255, 255)"
	      });
	      var featureList = options.features;

	      if (featureList) {
	        // Sort by score -- draw lowest scored features first
	        sortByScore(featureList, 1);
	        featureList.forEach(function (feature) {
	          if (feature.startLeft) {
	            var sl = Math.round((feature.startLeft - bpStart) / xScale);
	            var sr = Math.round((feature.startRight - bpStart) / xScale);
	            var el = Math.round((feature.endLeft - bpStart) / xScale);
	            var er = Math.round((feature.endRight - bpStart) / xScale);
	            ctx.fillStyle = feature.color;
	            ctx.strokeStyle = feature.color;
	            ctx.beginPath(); // First arc

	            var x1 = (sl + er) / 2;
	            var r1 = (er - sl) / 2;
	            var y1 = self.height;
	            var sa = Math.PI + (Math.PI / 2 - theta);
	            var ea = 2 * Math.PI - (Math.PI / 2 - theta);

	            if (orienation) {
	              y1 = 0;
	              ctx.arc(x1, y1, r1, ea, sa);
	              ctx.lineTo(er, y1);
	            } else {
	              ctx.arc(x1, y1, r1, sa, ea);
	              ctx.lineTo(el, y1);
	            } // Second arc


	            var x2 = (sr + el) / 2;
	            var r2 = (el - sr) / 2;
	            var y2 = y1; // Only for theta == pi/2

	            if (orienation) {
	              ctx.arc(x2, y2, r2, sa, ea, true);
	              ctx.lineTo(el, y2);
	            } else {
	              ctx.arc(x2, y2, r2, ea, sa, true);
	              ctx.lineTo(sl, y2);
	            }

	            ctx.stroke();
	            ctx.fill();
	            feature.drawState = {
	              x1: x1,
	              y1: y1,
	              r1: r1,
	              x2: x2,
	              y2: y2,
	              r2: r2,
	              sa: sa,
	              ea: ea
	            };
	          } else {
	            var s = Math.round((feature.start - bpStart) / xScale);
	            var e = Math.round((feature.end - bpStart) / xScale);
	            ctx.strokeStyle = feature.color;
	            ctx.beginPath(); // First arc

	            var x = (s + e) / 2;
	            var r = (e - s) / 2;
	            var y = self.height;

	            var _sa = Math.PI + (Math.PI / 2 - theta);

	            var _ea = 2 * Math.PI - (Math.PI / 2 - theta);

	            if (orienation) {
	              y = 0;
	              ctx.arc(x, y, r, _ea, _sa);
	            } else {
	              ctx.arc(x, y, r, _sa, _ea);
	            }

	            ctx.stroke();
	            feature.drawState = {
	              x1: x,
	              y1: y,
	              r1: r,
	              sa: _sa,
	              ea: _ea
	            };
	          }
	        });
	      }
	    }
	  }, {
	    key: "clickedFeatures",
	    value: function clickedFeatures(clickState) {
	      var features = _get(_getPrototypeOf(RnaStructTrack.prototype), "clickedFeatures", this).call(this, clickState);

	      var clicked = []; // Sort by score in descending order   (opposite order than drawn)

	      sortByScore(features, -1);

	      var _iterator = _createForOfIteratorHelper(features),
	          _step;

	      try {
	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          var f = _step.value;
	          var ds = f.drawState; // Distance from arc radius, or outer arc for type ".bp"

	          var dx1 = clickState.canvasX - ds.x1;
	          var dy1 = clickState.canvasY - ds.y1;
	          var d1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
	          var outerLim = ds.r1 + 3;
	          var d2 = void 0;
	          var innerLim = void 0;

	          if (ds.x2 === undefined) {
	            d2 = d1;
	            innerLim = ds.r1 - 3;
	          } else {
	            var dx2 = clickState.canvasX - ds.x2;
	            var dy2 = clickState.canvasY - ds.y2;
	            d2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);
	            innerLim = ds.r2 - 3;
	          } // Between outer and inner arcs, with some tolerance


	          if (d1 < outerLim && d2 > innerLim) {
	            clicked.push(f);
	            break;
	          }
	        }
	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }

	      return clicked;
	    }
	  }, {
	    key: "popupData",
	    value: function popupData(clickState, features) {
	      // We use the featureCache property rather than method to avoid async load.  If the
	      // feature is not already loaded this won't work,  but the user wouldn't be mousing over it either.
	      if (!features) features = this.clickedFeatures(clickState);

	      if (features && features.length > 0) {
	        return TrackBase.extractPopupData(features[0], this.getGenomeId());
	      }
	    }
	  }, {
	    key: "menuItemList",
	    value: function menuItemList() {
	      var self = this;
	      return [{
	        name: "Toggle arc direction",
	        click: function click() {
	          self.arcOrientation = !self.arcOrientation;
	          self.trackView.repaintViews();
	        }
	      }];
	    }
	  }]);

	  return RnaStructTrack;
	}(TrackBase);

	function sortByScore(featureList, direction) {
	  featureList.sort(function (a, b) {
	    var s1 = a.score === undefined ? -Number.MAX_VALUE : a.score;
	    var s2 = b.score === undefined ? -Number.MAX_VALUE : b.score;
	    var d = direction === undefined ? 1 : direction;
	    return d * (s1 - s2);
	  });
	}

	var RNAFeatureSource = /*#__PURE__*/function () {
	  function RNAFeatureSource(config, genome) {
	    _classCallCheck(this, RNAFeatureSource);

	    this.config = config;
	    this.genome = genome;
	  }

	  _createClass(RNAFeatureSource, [{
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(chr, start, end) {
	        var genome, options, data, parseBP;
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                parseBP = function _parseBP(data) {
	                  if (!data) return null;
	                  var dataWrapper = getDataWrapper(data);
	                  var header = true;
	                  var line;
	                  var colors = [];
	                  var descriptors = [];
	                  var features = [];

	                  while ((line = dataWrapper.nextLine()) !== undefined) {
	                    var tokens = line.split('\t');

	                    if (header && line.startsWith("color:")) {
	                      var color = "rgb(" + tokens[1] + "," + tokens[2] + "," + tokens[3] + ")";
	                      colors.push(color);

	                      if (tokens.length > 4) {
	                        descriptors.push(tokens[4]);
	                      } // TODO - use label

	                    } else {
	                      header = false;
	                      var _chr = tokens[0];
	                      var startLeftNuc = Number.parseInt(tokens[1]) - 1;
	                      var startRightNuc = Number.parseInt(tokens[2]) - 1;
	                      var endLeftNuc = Number.parseInt(tokens[3]);
	                      var endRightNuc = Number.parseInt(tokens[4]);
	                      var colorIdx = Number.parseInt(tokens[5]);
	                      var _color = colors[colorIdx];
	                      var feature = void 0;

	                      if (startLeftNuc <= endRightNuc) {
	                        feature = {
	                          chr: _chr,
	                          startLeft: Math.min(startLeftNuc, startRightNuc),
	                          startRight: Math.max(startLeftNuc, startRightNuc),
	                          endLeft: Math.min(endLeftNuc, endRightNuc),
	                          endRight: Math.max(endLeftNuc, endRightNuc),
	                          color: _color,
	                          score: colorIdx
	                        };
	                      } else {
	                        feature = {
	                          chr: _chr,
	                          startLeft: Math.min(endLeftNuc, endRightNuc),
	                          startRight: Math.max(endLeftNuc, endRightNuc),
	                          endLeft: Math.min(startLeftNuc, startRightNuc),
	                          endRight: Math.max(startLeftNuc, startRightNuc),
	                          color: _color,
	                          score: colorIdx
	                        };
	                      }

	                      feature.start = feature.startLeft;
	                      feature.end = feature.endRight;

	                      if (descriptors.length > colorIdx) {
	                        feature.description = descriptors[colorIdx];
	                      }

	                      features.push(feature);
	                    }
	                  }

	                  return features;
	                };

	                genome = this.genome;

	                if (this.featureCache) {
	                  _context2.next = 11;
	                  break;
	                }

	                options = buildOptions(this.config);
	                _context2.next = 6;
	                return igvxhr.loadString(this.config.url, options);

	              case 6:
	                data = _context2.sent;
	                this.featureCache = new FeatureCache(parseBP(data), genome);
	                return _context2.abrupt("return", this.featureCache.queryFeatures(chr, start, end));

	              case 11:
	                return _context2.abrupt("return", this.featureCache.queryFeatures(chr, start, end));

	              case 12:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function getFeatures(_x4, _x5, _x6) {
	        return _getFeatures2.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }]);

	  return RNAFeatureSource;
	}();

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2014 Broad Institute
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var IdeogramTrack = /*#__PURE__*/function () {
	  function IdeogramTrack(browser) {
	    _classCallCheck(this, IdeogramTrack);

	    this.browser = browser;
	    this.type = 'ideogram';
	    this.id = this.type;
	    this.height = 16;
	    this.order = Number.MIN_SAFE_INTEGER;
	    this.disableButtons = true;
	    this.ignoreTrackMenu = true;
	  }

	  _createClass(IdeogramTrack, [{
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, start, end) {
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                return _context.abrupt("return", []);

	              case 1:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee);
	      }));

	      function getFeatures(_x, _x2, _x3) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "computePixelHeight",
	    value: function computePixelHeight(ignore) {
	      return this.height;
	    }
	  }, {
	    key: "draw",
	    value: function draw(options) {}
	  }, {
	    key: "computePixelHeight",
	    value: function computePixelHeight() {}
	  }, {
	    key: "dispose",
	    value: function dispose() {
	      this.trackView = undefined;
	    }
	  }]);

	  return IdeogramTrack;
	}();

	var $findIndex$1 = arrayIteration.findIndex;
	var FIND_INDEX = 'findIndex';
	var SKIPS_HOLES$1 = true;
	var USES_TO_LENGTH$b = arrayMethodUsesToLength(FIND_INDEX); // Shouldn't skip holes

	if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () {
	  SKIPS_HOLES$1 = false;
	}); // `Array.prototype.findIndex` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.findindex

	_export({
	  target: 'Array',
	  proto: true,
	  forced: SKIPS_HOLES$1 || !USES_TO_LENGTH$b
	}, {
	  findIndex: function findIndex(callbackfn
	  /* , that = undefined */
	  ) {
	    return $findIndex$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	}); // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

	addToUnscopables(FIND_INDEX);

	var DEFAULT_POPOVER_WINDOW$1 = 100000000; // const type = "irfinder";

	var IRFinderTrack = /*#__PURE__*/function (_TrackBase) {
	  _inherits(IRFinderTrack, _TrackBase);

	  var _super = _createSuper(IRFinderTrack);

	  function IRFinderTrack(config, browser) {
	    var _this;

	    _classCallCheck(this, IRFinderTrack);

	    _this = _super.call(this, config, browser);
	    _this.featureSource = FeatureSource(config, browser.genome);

	    _this.init(config);

	    _this.prev_request = "";
	    _this.render = _this.drawIntronDepth;
	    _this.height = config.height || 100;
	    _this.autoHeight = config.autoHeight;
	    _this.minHeight = config.minHeight || Math.min(25, _this.height);
	    _this.maxHeight = config.maxHeight || Math.max(1000, _this.height);
	    _this.visibilityWindow = config.visibilityWindow;
	    _this.height = config.height || 100; // The preferred height

	    _this.margin = config.margin === undefined ? _this.height < 100 ? Math.round(_this.height / 5) : 20 : config.margin;
	    return _this;
	  }

	  _createClass(IRFinderTrack, [{
	    key: "init",
	    value: function init(config) {
	      if (config.displayMode) {
	        config.displayMode = config.displayMode.toUpperCase();
	      }

	      this.config = config;
	      this.url = config.url;
	      this.type = config.type;
	      this.description = config.description;
	      this.supportHiDPI = config.supportHiDPI === undefined ? true : config.supportHiDPI;

	      if (config.name || config.label) {
	        this.name = config.name || config.label;
	      } else {
	        if (FileUtils.isFilePath(config.url)) this.name = config.url.name;else this.name = config.url;
	      }

	      this.id = this.config.id === undefined ? this.name : this.config.id;
	      this.order = config.order;
	      this.color = config.color;
	      this.altColor = config.altColor;

	      if ("civic-ws" === config.sourceType) {
	        // Ugly proxy for specialized track type
	        this.defaultColor = "rgb(155,20,20)";
	      } else {
	        this.defaultColor = "rgb(0,0,150)";
	      }

	      this.autoscaleGroup = config.autoscaleGroup;
	      this.removable = config.removable === undefined ? true : config.removable; // Defaults to true

	      this.autoscale = config.autoscale || config.max === undefined;

	      if (!this.autoscale) {
	        this.dataRange = {
	          min: config.min || 0,
	          max: config.max === undefined ? 100 : config.max
	        };
	      }

	      this.colorBy = config.colorBy === undefined ? "default" : config.colorBy;
	      this.filters = {
	        intronTypes: config.intronTypes === undefined ? ["clean"] : config.intronTypes,
	        warnings: config.warnings === undefined ? ["-"] : config.warnings
	      };
	      this.popoverWindow = config.popoverWindow === undefined ? DEFAULT_POPOVER_WINDOW$1 : config.popoverWindow;
	      this.description = config.description; // might be null

	      this.color = config.color === undefined ? "#80D6F8" : config.color;
	      this.warningColors = config.warningColors === undefined ? ["#f71735", "#feb95f", "#b49a67", "#182825", "#80D6F8"] : config.warningColors;
	      this.warnings = ["LowCover", "LowSplicing", "MinorIsoform", "NonUniformIntronCover", "-"];
	    }
	    /**
	    * Called when the track is removed.  Do any needed cleanup here
	    */

	  }, {
	    key: "dispose",
	    value: function dispose() {
	      this.trackView = undefined;
	    }
	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, start, end) {
	        var request;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                request = "" + chr + "-" + start + ":" + end;

	                if (!(request != this.prev_request)) {
	                  _context.next = 6;
	                  break;
	                }

	                _context.next = 4;
	                return this.featureSource.getFeatures({
	                  chr: chr,
	                  start: start,
	                  end: end
	                });

	              case 4:
	                this.features = _context.sent;
	                this.prev_request = request;

	              case 6:
	                return _context.abrupt("return", this.filter(this.features));

	              case 7:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function getFeatures(_x, _x2, _x3) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "getFeatureColor",
	    value: function getFeatureColor(feature) {
	      if (this.colorBy == "default") {
	        return this.color;
	      } else if (this.colorBy == "warnings") {
	        return this.warningColors[this.warnings.findIndex(function (w) {
	          return w == feature.warning;
	        })];
	      } else {
	        var value;

	        if (this.colorBy.includes("scaled")) {
	          value = feature.IRratio / this.dataRange.maxRatio;
	        } else {
	          value = feature.IRratio;
	        }

	        if (value < 0.5) {
	          value = Math.ceil(value * 255 * 2);
	          return "rgb(" + value + ",0,0)";
	        } else {
	          value = Math.ceil((value - 0.5) * 255 * 2);
	          return "rgb(" + (255 - value) + ",0," + value + ")";
	        }
	      }
	    }
	  }, {
	    key: "number2Text",
	    value: function number2Text(number) {
	      var txt = Math.floor(number);

	      if (txt > 999) {
	        txt = Math.floor(number / 1000) + "K";
	      }

	      return txt + "";
	    }
	  }, {
	    key: "doAutoscale",
	    value: function doAutoscale$1(featureList) {
	      this.dataRange = {
	        min: 0,
	        max: 1,
	        maxRatio: 1
	      };

	      if (featureList.length > 0) {
	        var range = doAutoscale(featureList);

	        this.dataRange.max = range.max;
	        var features = featureList.map(function (f) {
	          return {
	            value: f.IRratio
	          };
	        });
	        range = doAutoscale(features);
	        this.dataRange.maxRatio = Math.max(range.max, 0.01);
	      }

	      return this.dataRange;
	    }
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      var _this2 = this;

	      var featureList = options.features;

	      if (featureList) {
	        (function () {
	          var ctx = options.context;
	          var bpPerPixel = options.bpPerPixel;
	          var bpStart = options.bpStart;
	          var pixelWidth = options.pixelWidth;
	          var pixelHeight = options.pixelHeight / _this2.maxRow - _this2.margin;

	          if (pixelHeight > _this2.rowHeight - _this2.margin) {
	            pixelHeight = _this2.rowHeight - _this2.margin;
	          }

	          var bpEnd = bpStart + pixelWidth * bpPerPixel + 1;
	          var drawLabel = bpPerPixel < 20 ? true : false;
	          var feature;

	          var _loop = function _loop(idx) {
	            feature = featureList[idx];

	            if (feature.end < bpStart || feature.start > bpEnd) {
	              return "continue";
	            }

	            var row = feature.row;

	            var yScale = function yScale(yValue) {
	              return _this2.margin + row * (pixelHeight + _this2.margin) + (_this2.dataRange.max - yValue) / (_this2.dataRange.max - _this2.dataRange.min) * pixelHeight;
	            };

	            _this2.render(feature, bpStart, bpPerPixel, yScale, drawLabel, ctx);

	            feature.y = {
	              end: yScale(0) - _this2.margin,
	              start: yScale(_this2.dataRange.max) - _this2.margin,
	              row: row
	            };
	          };

	          for (var idx = 0; idx < featureList.length; idx++) {
	            var _ret = _loop(idx);

	            if (_ret === "continue") continue;
	          }
	        })();
	      }
	    }
	  }, {
	    key: "paintAxis",
	    value: function paintAxis(ctx, pixelWidth, pixelHeight) {
	      if (this.lastPaintAxis && this.lastPaintAxis == this.dataRange.max) {
	        return;
	      }

	      this.lastPaintAxis = this.dataRange.max;

	      this._paintAxis(ctx, pixelWidth, pixelHeight);
	    }
	  }, {
	    key: "_paintAxis",
	    value: function _paintAxis(ctx, pixelWidth, pixelHeight) {
	      var _this3 = this;

	      IGVGraphics.fillRect(ctx, 0, 0, pixelWidth, pixelHeight, {
	        'fillStyle': "rgb(255, 255, 255)"
	      });
	      var font = {
	        'font': 'normal 10px Arial',
	        'textAlign': 'right',
	        'strokeStyle': "black"
	      };
	      var n = Math.ceil((this.dataRange.max - this.dataRange.min) * 10 / this.rowHeight);
	      pixelHeight = this.rowHeight - this.margin;

	      var _loop2 = function _loop2(row) {
	        var yScale = function yScale(yValue) {
	          return _this3.margin + row * (pixelHeight + _this3.margin) + (_this3.dataRange.max - yValue) / (_this3.dataRange.max - _this3.dataRange.min) * pixelHeight;
	        };

	        var p = _this3.dataRange.min;

	        while (p < _this3.dataRange.max + n) {
	          var yp = yScale(p);
	          IGVGraphics.strokeLine(ctx, 45, yp, 50, yp, font); // Offset dashes up by 2 pixel

	          IGVGraphics.fillText(ctx, _this3.number2Text(p), 44, yp + 4, font); // Offset numbers down by 2 pixels;

	          p += n;
	        }

	        font['textAlign'] = 'center';
	        IGVGraphics.fillText(ctx, "Coverage", pixelWidth / 3, yScale(_this3.dataRange.max / 2), font, {
	          rotate: {
	            angle: -90
	          }
	        });
	        font['textAlign'] = 'right';
	      };

	      for (var row = 0; row < this.maxRow; row++) {
	        _loop2(row);
	      }
	    }
	  }, {
	    key: "popupData",
	    value: function popupData(clickState) {
	      var data = [];
	      var track = clickState.viewport.trackView.track;
	      var features = clickState.viewport.getCachedFeatures();
	      var y = clickState.y - this.margin;
	      var x = clickState.genomicLocation;

	      if (features) {
	        var feat = features.find(function (f) {
	          return f.y && x > f.start && x < f.end && y > f.y.start && y < f.y.end;
	        });

	        if (feat) {
	          return feat.popupData();
	        }
	      }

	      return data;
	    }
	  }, {
	    key: "filter",
	    value: function filter(features) {
	      var _this4 = this;

	      var rows = [-100],
	          idx;
	      this.maxSplice = 1;

	      var _iterator = _createForOfIteratorHelper(features),
	          _step;

	      try {
	        var _loop3 = function _loop3() {
	          var feat = _step.value;

	          if (_this4.filters.warnings.includes(feat.warning) && _this4.filters.intronTypes.includes(feat.intronType)) {
	            if (feat.splice[2] > _this4.maxSplice) {
	              _this4.maxSplice = feat.splice[2];
	            }

	            idx = rows.findIndex(function (r) {
	              return r < feat.start;
	            });

	            if (idx == -1) {
	              idx = rows.length;
	              rows.push(feat.end);
	            } else {
	              rows[idx] = feat.end;
	            }

	            feat.row = idx;
	          } else {
	            feat.row = -1;
	          }

	          ;
	        };

	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          _loop3();
	        }
	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }

	      this.maxRow = rows.length;
	      this.rowHeight = this.height - this.margin > this.margin ? this.height - this.margin : 80;
	      if (this.rowHeight > 80) this.rowHeight = 80;
	      return features.filter(function (f) {
	        return f.row != -1;
	      });
	    }
	  }, {
	    key: "computePixelHeight",
	    value: function computePixelHeight(features) {
	      var height = this.maxRow * (this.rowHeight + this.margin);
	      this.pixelHeight = height;
	      return height;
	    }
	  }, {
	    key: "drawIntronDepth",
	    value: function drawIntronDepth(feature, bpStart, bpPerPixel, yScale, drawLabel, ctx) {
	      var fontStyle = {
	        textAlign: 'center',
	        fillStyle: "#000000",
	        strokeStyle: "#000000"
	      };
	      var coord = {
	        flankL: {
	          end: Math.ceil((feature.start - bpStart + 15) / bpPerPixel),
	          start: Math.floor((feature.start - bpStart) / bpPerPixel),
	          height: feature.exons[0]
	        },
	        flankR: {
	          start: Math.floor((feature.end - bpStart - 15) / bpPerPixel),
	          end: Math.ceil((feature.end - bpStart) / bpPerPixel),
	          height: feature.exons[1]
	        }
	      };
	      var y0 = yScale(0),
	          x,
	          y,
	          txt,
	          txtm,
	          width,
	          height,
	          color = this.getFeatureColor(feature);

	      for (var _i = 0, _arr = ["flankL", "flankR"]; _i < _arr.length; _i++) {
	        var att = _arr[_i];
	        x = coord[att].start;
	        width = coord[att].end - coord[att].start;
	        height = yScale(coord[att].height) - y0;
	        IGVGraphics.fillRect(ctx, x, y0, width, height, {
	          fillStyle: color,
	          strokeStyle: "black"
	        });

	        if (drawLabel) {
	          IGVGraphics.fillText(ctx, Math.ceil(att == "flankL" ? feature.exons[0] : feature.exons[1]), x + width / 2, y0 + height - 5, fontStyle);
	        }
	      }

	      IGVGraphics.strokeLine(ctx, coord.flankL.start, y0, coord.flankR.end, y0);
	      var h1 = yScale(feature.flankDepth[0]),
	          h2 = yScale(feature.intronDepth),
	          h3 = yScale(feature.flankDepth[1]);
	      x = coord.flankL.end;
	      width = (coord.flankR.start - coord.flankL.end) / 5;
	      IGVGraphics.fillPolygon(ctx, [x, x, x + width, x + width, x + width * 4, x + width * 4, x + width * 5, x + width * 5], [y0, h1, h1, h2, h2, h3, h3, y0], {
	        fillStyle: color,
	        strokeStyle: "black"
	      });

	      if (drawLabel) {
	        IGVGraphics.fillText(ctx, Math.ceil(feature.intronDepth), coord.flankL.end + (coord.flankR.start - coord.flankL.end) / 2, y0 + 10, fontStyle);
	      } // splice exact


	      var topY = yScale(coord.flankL.height),
	          otherPt,
	          splice = feature.splice[2];

	      if (splice > 0) {
	        ctx.beginPath();
	        ctx.save();
	        ctx.moveTo(coord.flankL.end, topY);
	        var topY2 = yScale(coord.flankR.height);
	        ctx.bezierCurveTo(coord.flankL.end, topY - 10, coord.flankR.start, topY2 - 10, coord.flankR.start, topY2);
	        ctx.lineWidth = 1;
	        ctx.strokeStyle = 'blue';
	        ctx.stroke();
	        ctx.closePath();
	        ctx.restore();

	        if (drawLabel) {
	          x = coord.flankL.end + (coord.flankR.start - coord.flankL.end) / 2;
	          y = (topY2 + topY) / 2;
	          txt = Math.ceil(splice);
	          txtm = ctx.measureText(txt).width;
	          IGVGraphics.fillRect(ctx, x - txtm / 2, y - 10, txtm, 15, {
	            fillStyle: "white"
	          });
	          IGVGraphics.fillText(ctx, txt, x, y, fontStyle);
	        }
	      }

	      splice = feature.splice[0] - feature.splice[2];

	      if (splice > 0) {
	        // splice Left
	        ctx.beginPath();
	        topY = yScale(coord.flankL.height);
	        ctx.save();
	        ctx.setLineDash([2, 2]);
	        otherPt = coord.flankL.end + Math.ceil(25 / bpPerPixel);
	        ctx.moveTo(coord.flankL.end, topY);
	        topY = topY - 10;
	        ctx.bezierCurveTo(coord.flankL.end, topY, otherPt, topY, otherPt, topY);
	        ctx.lineWidth = 1;
	        ctx.strokeStyle = 'green';
	        ctx.stroke();
	        ctx.closePath();
	        ctx.restore();

	        if (drawLabel) {
	          x = otherPt;
	          y = topY;
	          txt = Math.ceil(splice);
	          txtm = ctx.measureText(txt).width;
	          IGVGraphics.fillRect(ctx, x, y - 10, txtm, 15, {
	            fillStyle: "white"
	          });
	          IGVGraphics.fillText(ctx, txt, x, y, {
	            textAlign: 'left',
	            fillStyle: "#000000",
	            strokeStyle: "#000000"
	          });
	        }
	      }

	      splice = feature.splice[1] - feature.splice[2];

	      if (splice > 0) {
	        // splice Right
	        ctx.beginPath();
	        topY = yScale(coord.flankR.height);
	        ctx.save();
	        otherPt = coord.flankR.start - Math.ceil(25 / bpPerPixel);
	        ctx.setLineDash([2, 2]);
	        ctx.moveTo(coord.flankR.start, topY);
	        topY = topY - 10;
	        ctx.bezierCurveTo(coord.flankR.start, topY, otherPt, topY, otherPt, topY);
	        ctx.lineWidth = 1;
	        ctx.strokeStyle = 'red';
	        ctx.stroke();
	        ctx.closePath();
	        ctx.restore();

	        if (drawLabel) {
	          x = otherPt;
	          y = topY;
	          txt = Math.ceil(splice);
	          txtm = ctx.measureText(txt).width;
	          IGVGraphics.fillRect(ctx, x - txtm, y - 10, txtm, 15, {
	            fillStyle: "white"
	          });
	          IGVGraphics.fillText(ctx, txt, x, y, {
	            textAlign: 'right',
	            fillStyle: "#000000",
	            strokeStyle: "#000000"
	          });
	        }
	      }
	    }
	  }, {
	    key: "forceUpdate",
	    value: function forceUpdate() {
	      this.trackView.viewports[0].tile.features = this.filter(this.features);
	      this.trackView.viewports[0].cachedFeatures = this.trackView.viewports[0].tile.features;
	      this.trackView.checkContentHeight();
	      this.trackView.updateViews(true);
	    }
	  }, {
	    key: "menuItemList",
	    value: function menuItemList() {
	      var self = this;
	      var menuItems = [];
	      menuItems.push({
	        object: $('<div class="igv-track-menu-border-top">')
	      });
	      ["default", "warnings", "IRratio", "scaled IRratio"].forEach(function (colorScheme) {
	        menuItems.push({
	          object: createCheckbox$1('Color by ' + colorScheme, colorScheme === self.colorBy),
	          click: function click() {
	            self.colorBy = colorScheme;
	            self.trackView.repaintViews();
	          }
	        });
	      });
	      menuItems.push({
	        object: $('<div class="igv-track-menu-border-top">')
	      });
	      menuItems.push({
	        object: $('<strong>Warnings</strong>')
	      });
	      this.warnings.forEach(function (warn) {
	        menuItems.push({
	          object: createCheckbox$1(warn, self.filters.warnings.includes(warn)),
	          click: function click() {
	            var idx = self.filters.warnings.findIndex(function (w) {
	              return w == warn;
	            });

	            if (idx == -1) {
	              self.filters.warnings.push(warn);
	            } else {
	              self.filters.warnings.splice(idx, 1);
	            }

	            self.forceUpdate();
	          }
	        });
	      });
	      menuItems.push({
	        object: $('<div class="igv-track-menu-border-top">')
	      });
	      menuItems.push({
	        object: $('<strong>Intron types</strong>')
	      });
	      ["clean", "known-exon", "known-exon+anti-near", "known-exon+anti-near+anti-over", "known-exon+anti-over", "anti-near", "anti-over"].forEach(function (typ) {
	        menuItems.push({
	          object: createCheckbox$1(typ, self.filters.intronTypes.includes(typ)),
	          click: function click() {
	            var idx = self.filters.intronTypes.findIndex(function (t) {
	              return t == typ;
	            });

	            if (idx == -1) {
	              self.filters.intronTypes.push(typ);
	            } else {
	              self.filters.intronTypes.splice(idx, 1);
	            }

	            self.forceUpdate();
	          }
	        });
	      });
	      return menuItems;
	    }
	  }]);

	  return IRFinderTrack;
	}(TrackBase);

	var IRratioTrack = /*#__PURE__*/function (_IRFinderTrack) {
	  _inherits(IRratioTrack, _IRFinderTrack);

	  var _super = _createSuper(IRratioTrack);

	  function IRratioTrack(config, browser) {
	    var _this;

	    _classCallCheck(this, IRratioTrack);

	    _this = _super.call(this, config, browser);
	    _this.render = _this.drawIntronRatio;
	    return _this;
	  }

	  _createClass(IRratioTrack, [{
	    key: "doAutoscale",
	    value: function doAutoscale$1(featureList) {
	      this.dataRange = {
	        min: 0,
	        max: 1,
	        maxRatio: 1
	      };

	      if (featureList.length > 0) {
	        var features = featureList.map(function (f) {
	          return {
	            value: f.IRratio
	          };
	        });

	        var range = doAutoscale(features);

	        this.dataRange.max = Math.max(range.max, 0.01);
	        this.dataRange.maxRatio = this.dataRange.max;
	      }

	      return this.dataRange;
	    }
	  }, {
	    key: "_paintAxis",
	    value: function _paintAxis(ctx, pixelWidth, pixelHeight) {
	      var _this2 = this;

	      IGVGraphics.fillRect(ctx, 0, 0, pixelWidth, pixelHeight, {
	        'fillStyle': "rgb(255, 255, 255)"
	      });
	      var font = {
	        'font': 'normal 10px Arial',
	        'textAlign': 'right',
	        'strokeStyle': "black"
	      };
	      var n = Math.max((this.dataRange.max - this.dataRange.min) / 5, 0.01);
	      pixelHeight = this.rowHeight - this.margin;

	      var _loop = function _loop(row) {
	        var yScale = function yScale(yValue) {
	          return _this2.margin + row * (pixelHeight + _this2.margin) + (_this2.dataRange.max - yValue) / (_this2.dataRange.max - _this2.dataRange.min) * pixelHeight;
	        };

	        var p = _this2.dataRange.min;

	        while (p <= _this2.dataRange.max + n && p <= 1) {
	          var yp = yScale(p);
	          IGVGraphics.strokeLine(ctx, 45, yp, 50, yp, font); // Offset dashes up by 2 pixel

	          IGVGraphics.fillText(ctx, p, 44, yp + 4, font); // Offset numbers down by 2 pixels;

	          p = Math.round((p + n) * 100) / 100;
	        }

	        font['textAlign'] = 'center';
	        IGVGraphics.fillText(ctx, "IRratio", pixelWidth / 3, yScale(_this2.dataRange.max / 2), font, {
	          rotate: {
	            angle: -90
	          }
	        });
	        font['textAlign'] = 'right';
	      };

	      for (var row = 0; row < this.maxRow; row++) {
	        _loop(row);
	      }
	    }
	  }, {
	    key: "drawIntronRatio",
	    value: function drawIntronRatio(feature, bpStart, bpPerPixel, yScale, drawLabel, ctx) {
	      var fontStyle = {
	        textAlign: 'center',
	        fillStyle: "#000000",
	        strokeStyle: "#000000"
	      };
	      var start = Math.ceil((feature.start - bpStart + 15) / bpPerPixel),
	          end = Math.floor((feature.end - bpStart - 15) / bpPerPixel);
	      var y0 = yScale(0),
	          width,
	          height,
	          color = this.getFeatureColor(feature);
	      width = end - start;
	      height = yScale(feature.IRratio) - y0;
	      IGVGraphics.strokeLine(ctx, start, y0, end, y0);
	      IGVGraphics.fillRect(ctx, start, y0, width, height, {
	        fillStyle: color
	      });

	      if (drawLabel) {
	        IGVGraphics.fillText(ctx, Math.round(feature.IRratio * 1000) / 1000, start + width / 2, y0 + height - 5, fontStyle);
	      }
	    }
	  }]);

	  return IRratioTrack;
	}(IRFinderTrack);

	var iMOKATrack = /*#__PURE__*/function (_TrackBase) {
	  _inherits(iMOKATrack, _TrackBase);

	  var _super = _createSuper(iMOKATrack);

	  function iMOKATrack(config, browser) {
	    var _this;

	    _classCallCheck(this, iMOKATrack);

	    _this = _super.call(this, config, browser);

	    _this.init(config);

	    return _this;
	  }

	  _createClass(iMOKATrack, [{
	    key: "init",
	    value: function init(config) {
	      this.featureType = 'object';
	      this.type = "kmerSequences";
	      this.onClick = config.onClick;
	      this.request_type = config.request_type;
	      this.featureSource = config.source;
	      this.rows = [];
	      this.colors = {
	        minus: "rgb(239,62,54)",
	        plus: "rgb(79,117,155 )",
	        mismatch: "rgb(38,165,38)",
	        insertion: "rgb(38,165,38)",
	        deletion: "rgb(240,128,60)",
	        splice: "rgb(15,180,110)"
	      };

	      if (this.request_type == "kmers") {
	        this.dimensions = {
	          barHeight: 20,
	          minLetter: 0.10
	        };
	      } else {
	        this.dimensions = {
	          barHeight: 5,
	          minLetter: 0.10
	        };
	      }

	      this.max_y = 1;
	      this.features;
	      this.colorBy = "accuracy";
	    }
	    /**
	    * Called when the track is removed.  Do any needed cleanup here
	    */

	  }, {
	    key: "dispose",
	    value: function dispose() {
	      this.trackView = undefined;
	      this.features = undefined;
	    }
	  }, {
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, start, end) {
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                return _context.abrupt("return", this.featureSource.getFeatures(chr, start, end, this.request_type));

	              case 1:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function getFeatures(_x, _x2, _x3) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "getFeatureColor",
	    value: function getFeatureColor(feature) {
	      if (this.colorBy == "default") {
	        return this.color;
	      } else if (this.colorBy == "warnings") {
	        return this.warningColors[this.warnings.findIndex(function (w) {
	          return w == feature.warning;
	        })];
	      } else {
	        var value;

	        if (this.colorBy.includes("scaled")) {
	          value = feature.IRratio / this.dataRange.maxRatio;
	        } else {
	          value = feature.IRratio;
	        }

	        if (value < 0.5) {
	          value = Math.ceil(value * 255 * 2);
	          return "rgb(" + value + ",0,0)";
	        } else {
	          value = Math.ceil((value - 0.5) * 255 * 2);
	          return "rgb(" + (255 - value) + ",0," + alue + ")";
	        }
	      }
	    }
	  }, {
	    key: "popupData",
	    value: function popupData(clickState) {
	      var y = clickState.y,
	          self = this;
	      var x = clickState.genomicLocation;
	      var r = Math.floor(y / self.dimensions.barHeight);

	      for (var i = 0; i < this.features.length; i++) {
	        var feat = this.features[i];

	        if (feat.y == r && feat.start <= x && feat.end >= x) {
	          this.onClick(feat);
	          return null;
	        }
	      }

	      return null;
	    }
	  }, {
	    key: "draw",
	    value: function draw(options) {
	      var self = this,
	          ctx = options.context;

	      if (options.features != self.features) {
	        self.initFeatures(options.features);
	      }

	      self.features.forEach(function (feat) {
	        if (feat.start) {
	          renderAlignment(feat);
	        }
	      });

	      function x(val) {
	        return (val - options.bpStart) / options.bpPerPixel;
	      }

	      function y(val) {
	        return val * self.dimensions.barHeight;
	      }

	      function renderAlignment(aln) {
	        var bl,
	            color,
	            rev = aln.strand == "-" ? true : false,
	            h = self.dimensions.barHeight * 0.9,
	            w,
	            positions = [],
	            cy = y(aln.y + 1),
	            drawLetter = self.dimensions.minLetter > options.bpPerPixel ? true : false;

	        if (self.colorBy == "strand") {
	          color = rev ? self.colors.minus : self.colors.plus;
	        } else if (self.colorBy == "accuracy") {
	          var best_val = aln.best_value == undefined ? 0 : (aln.best_value - 65) * 255 / (100 - 65);
	          color = "rgb(" + best_val + ",0," + (255 - best_val) + ")";
	        } else {
	          color = "black";
	        }

	        for (var b = 0; b < aln.blocks.length; b++) {
	          bl = aln.blocks[b];
	          positions.push({
	            x1: x(bl.t_start),
	            x2: x(bl.t_end)
	          });
	          var cpos = positions[b];
	          IGVGraphics.fillRect(ctx, cpos.x1, cy, cpos.x2 - cpos.x1, h, {
	            fillStyle: color
	          });

	          if (b != 0) {
	            w = cpos.x1 - positions[b - 1].x2;

	            if (w > 1) {
	              IGVGraphics.fillRect(ctx, positions[b - 1].x2, cy + h * 0.45, w, h * 0.1, {
	                fillStyle: color
	              });
	            }
	          }
	        }

	        if (positions.length > 0) {
	          var hstep = 30,
	              curr = 0,
	              lcolor,
	              ay = h * 0.1;

	          for (var step_x = positions[0].x1 + ay; step_x < positions[positions.length - 1].x2; step_x += hstep) {
	            if (step_x > positions[curr].x2 && curr < positions.length - 1) {
	              curr++;
	            }

	            lcolor = step_x > positions[curr].x1 && step_x < positions[curr].x2 ? "white" : color;
	            IGVGraphics.strokeLine(ctx, step_x + (rev ? ay : -ay), cy + h / 2 - ay, step_x, cy + h / 2, {
	              strokeStyle: lcolor
	            });
	            IGVGraphics.strokeLine(ctx, step_x + (rev ? ay : -ay), cy + h / 2 + ay, step_x, cy + h / 2, {
	              strokeStyle: lcolor
	            });
	          }
	        }

	        aln.signatures.forEach(function (sig) {
	          var pos = {
	            x1: x(sig.position.start),
	            x2: x(sig.position.end)
	          };

	          if (sig.signature_type == "mutation") {
	            IGVGraphics.fillRect(ctx, pos.x1, cy, pos.x2 - pos.x1 < 0.5 ? 0.5 : pos.x2 - pos.x1, h, {
	              fillStyle: self.colors.mismatch
	            });
	            if (drawLetter) IGVGraphics.fillText(ctx, sig.info, Math.round(pos.x1 + (pos.x2 - pos.x1) / 10), cy + h * 0.8, {
	              fillStyle: "black",
	              font: Math.max(h, 10) + 'px sans-serif'
	            });
	          } else if (sig.signature_type == "insertion") {
	            ctx.save();
	            ctx.lineWidth = 3;
	            ctx.moveTo(pos.x1, cy);
	            ctx.lineTo((pos.x1 + pos.x2) / 2, cy + h);
	            ctx.lineTo(pos.x2, cy);
	            ctx.closePath();
	            ctx.fillStyle = self.colors.insertion;
	            ctx.fill();
	            ctx.restore();
	            if (drawLetter) IGVGraphics.fillText(ctx, sig.info, Math.round(pos.x1 + (pos.x2 - pos.x1) / 10), cy + h * 0.8, {
	              fillStyle: "black",
	              font: Math.max(h, 10) + 'px sans-serif'
	            });
	          } else if (sig.signature_type == "deletion") {
	            IGVGraphics.fillRect(ctx, pos.x1, cy, pos.x2 - pos.x1 < 0.5 ? 0.5 : pos.x2 - pos.x1, h, {
	              fillStyle: self.colors.deletion
	            });
	            if (drawLetter) IGVGraphics.fillText(ctx, sig.info, Math.round(pos.x1 + (pos.x2 - pos.x1) / 10), cy + h * 0.8, {
	              fillStyle: "black",
	              font: Math.max(h, 10) + 'px sans-serif'
	            });
	          } else if (sig.signature_type == "splice") {
	            var midPoint = (pos.x2 + pos.x1) / 2;
	            IGVGraphics.strokeLine(ctx, pos.x1, cy + h / 2, midPoint, cy, {
	              strokeStyle: self.colors.splice
	            });
	            IGVGraphics.strokeLine(ctx, midPoint, cy, pos.x2, cy + h / 2, {
	              strokeStyle: self.colors.splice
	            });
	          }
	        });
	      }
	    }
	  }, {
	    key: "contains",
	    value: function contains(a, b) {
	      return a.start >= b.start && a.start <= b.end || a.start >= b.start && a.start <= b.end;
	    }
	  }, {
	    key: "initFeatures",
	    value: function initFeatures(features) {
	      this.features = features;
	      if (this.features.length == 0) return 0;
	      this.features.sort(function (a, b) {
	        return a.start == b.start ? b.end - a.end : a.start - b.start;
	      });
	      var bucketStart = this.features[0].start;
	      var nextStart = bucketStart;
	      var bucketList = [];

	      for (var i = 0; i < this.features.length; i++) {
	        var s = this.features[i].start;
	        var buckListIndex = Math.max(0, s - bucketStart);

	        if (bucketList[buckListIndex] === undefined) {
	          bucketList[buckListIndex] = [];
	        }

	        bucketList[buckListIndex].push(i);
	      }

	      var end = Math.max.apply(Math, _toConsumableArray(this.features.map(function (f) {
	        return f.end;
	      })));
	      var allocatedCount = 0;
	      var lastAllocatedCount = 0;
	      var packedRows = [];

	      try {
	        while (allocatedCount < this.features.length) {
	          var row = [];

	          while (nextStart <= end) {
	            var bucket = undefined;
	            var index = void 0;

	            while (!bucket && nextStart <= end) {
	              index = nextStart - bucketStart;

	              if (bucketList[index] === undefined) {
	                ++nextStart; // No alignments at this index
	              } else {
	                bucket = bucketList[index];
	              }
	            } // while (bucket)


	            if (!bucket) {
	              break;
	            }

	            var idx = bucket.pop();

	            if (0 === bucket.length) {
	              bucketList[index] = undefined;
	            }

	            row.push(idx);
	            nextStart = this.features[idx].end;
	            ++allocatedCount;
	          } // while (nextStart)


	          if (row.length > 0) {
	            packedRows.push(row);
	          }

	          nextStart = bucketStart;
	          if (allocatedCount === lastAllocatedCount) break; // Protect from infinite loops

	          lastAllocatedCount = allocatedCount;
	        } // while (allocatedCount)

	      } catch (e) {
	        console.error(e);
	        throw e;
	      }

	      for (var y = 0; y < packedRows.length; y++) {
	        for (var _i = 0; _i < packedRows[y].length; _i++) {
	          this.features[packedRows[y][_i]].y = y;
	        }
	      }

	      this.max_y = packedRows.length;
	    }
	  }, {
	    key: "computePixelHeight",
	    value: function computePixelHeight(features) {
	      if (features.length == 0) return this.dimensions.barHeight;
	      this.initFeatures(features);
	      return (this.max_y + 1) * this.dimensions.barHeight;
	    }
	  }, {
	    key: "forceUpdate",
	    value: function forceUpdate() {
	      this.trackView.viewports[0].tile.features = this.filter(this.features);
	      this.trackView.viewports[0].cachedFeatures = this.trackView.viewports[0].tile.features;
	      this.trackView.checkContentHeight();
	      this.trackView.updateViews(true);
	    }
	  }, {
	    key: "menuItemList",
	    value: function menuItemList() {
	      var self = this,
	          menuItems = [];
	      menuItems.push({
	        object: $('<div class="igv-track-menu-border-top">')
	      });
	      ["strand", "accuracy"].forEach(function (colorScheme) {
	        menuItems.push({
	          object: createCheckbox$1('Color by ' + colorScheme, colorScheme === self.colorBy),
	          click: function click() {
	            self.colorBy = colorScheme;
	            self.trackView.repaintViews();
	          }
	        });
	      });
	      return menuItems;
	    }
	  }]);

	  return iMOKATrack;
	}(TrackBase);

	var tracks = {
	  'ideogram': function ideogram(config, browser) {
	    return new IdeogramTrack(config, browser);
	  },
	  'sequence': function sequence(config, browser) {
	    return new SequenceTrack(config, browser);
	  },
	  'feature': function feature(config, browser) {
	    return new FeatureTrack(config, browser);
	  },
	  'seg': function seg(config, browser) {
	    return new SegTrack(config, browser);
	  },
	  'wig': function wig(config, browser) {
	    return new WigTrack(config, browser);
	  },
	  'merged': function merged(config, browser) {
	    return new MergedTrack(config, browser);
	  },
	  'alignment': function alignment(config, browser) {
	    return new BAMTrack(config, browser);
	  },
	  'irfinder': function irfinder(config, browser) {
	    return new IRFinderTrack(config, browser);
	  },
	  'irratio': function irratio(config, browser) {
	    return new IRratioTrack(config, browser);
	  },
	  'imoka': function imoka(config, browser) {
	    return new iMOKATrack(config, browser);
	  },
	  'interaction': function interaction(config, browser) {
	    return new InteractionTrack(config, browser);
	  },
	  'interact': function interact(config, browser) {
	    return new InteractionTrack(config, browser);
	  },
	  'variant': function variant(config, browser) {
	    return new VariantTrack(config, browser);
	  },
	  'eqtl': function eqtl(config, browser) {
	    return new EqtlTrack(config, browser);
	  },
	  'gwas': function gwas(config, browser) {
	    return new GWASTrack(config, browser);
	  },
	  'arc': function arc(config, browser) {
	    return new RnaStructTrack(config, browser);
	  },
	  'gcnv': function gcnv(config, browser) {
	    return new GCNVTrack(config, browser);
	  }
	};

	var addTrack = function addTrack(name, track) {
	  this.tracks[name] = track;
	};

	var getTrack = function getTrack(name) {
	  return this.tracks[name];
	};

	var TrackFactory = {
	  tracks: tracks,
	  addTrack: addTrack,
	  getTrack: getTrack
	};

	var defaultHighlightColor = "rgba(68, 134, 247, 0.25)";

	var ROI = /*#__PURE__*/function () {
	  function ROI(config, genome) {
	    _classCallCheck(this, ROI);

	    this.config = config;
	    this.name = config.name;
	    this.roiSource = FeatureSource(config, genome);
	    this.color = config.color || defaultHighlightColor;
	  }

	  _createClass(ROI, [{
	    key: "getFeatures",
	    value: function () {
	      var _getFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(chr, start, end) {
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                return _context.abrupt("return", this.roiSource.getFeatures({
	                  chr: chr,
	                  start: start,
	                  end: end
	                }));

	              case 1:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function getFeatures(_x, _x2, _x3) {
	        return _getFeatures.apply(this, arguments);
	      }

	      return getFeatures;
	    }()
	  }, {
	    key: "draw",
	    value: function draw(drawConfiguration) {
	      var endBP, region, coord, regions;
	      regions = drawConfiguration.features;

	      if (!regions) {
	        return;
	      }

	      endBP = drawConfiguration.bpStart + (drawConfiguration.pixelWidth * drawConfiguration.bpPerPixel + 1);

	      for (var i = 0, len = regions.length; i < len; i++) {
	        region = regions[i];

	        if (region.end < drawConfiguration.bpStart) {
	          continue;
	        }

	        if (region.start > endBP) {
	          break;
	        }

	        coord = coordinates(region, drawConfiguration.bpStart, drawConfiguration.bpPerPixel);
	        IGVGraphics.fillRect(drawConfiguration.context, coord.x, drawConfiguration.pixelTop, coord.width, drawConfiguration.pixelHeight, {
	          fillStyle: this.color
	        });
	      }
	    }
	  }]);

	  return ROI;
	}();

	function coordinates(region, startBP, bpp) {
	  var ss, ee, width;
	  ss = Math.round((region.start - startBP) / bpp);
	  ee = Math.round((region.end - startBP) / bpp);
	  width = ee - ss;

	  if (width < 3) {
	    width = 3;
	    ss -= 1;
	  }

	  return {
	    x: ss,
	    width: width
	  };
	}

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2014 Broad Institute
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var GtexSelection = /*#__PURE__*/function () {
	  function GtexSelection(gene, snp) {
	    _classCallCheck(this, GtexSelection);

	    this.geneColors = {};
	    this.gene = null;
	    this.snp = null;
	    this.genesCount = 0;

	    if (gene) {
	      this.gene = gene.toUpperCase();
	      this.geneColors[this.gene] = brewer[this.genesCount++];
	    }

	    if (snp) {
	      this.snp = snp.toUpperCase();
	    }
	  }

	  _createClass(GtexSelection, [{
	    key: "addGene",
	    value: function addGene(geneName) {
	      if (!this.geneColors[geneName.toUpperCase()]) {
	        this.geneColors[geneName.toUpperCase()] = brewer[this.genesCount++];
	      }
	    }
	  }, {
	    key: "colorForGene",
	    value: function colorForGene(geneName) {
	      return this.geneColors[geneName.toUpperCase()];
	    }
	  }]);

	  return GtexSelection;
	}();

	var brewer = new Array(); // Set +!

	brewer.push("rgb(228,26,28)");
	brewer.push("rgb(55,126,184)");
	brewer.push("rgb(77,175,74)");
	brewer.push("rgb(166,86,40)");
	brewer.push("rgb(152,78,163)");
	brewer.push("rgb(255,127,0)");
	brewer.push("rgb(247,129,191)");
	brewer.push("rgb(153,153,153)");
	brewer.push("rgb(255,255,51)"); // #Set 2

	brewer.push("rgb(102, 194, 165");
	brewer.push("rgb(252, 141, 98");
	brewer.push("rgb(141, 160, 203");
	brewer.push("rgb(231, 138, 195");
	brewer.push("rgb(166, 216, 84");
	brewer.push("rgb(255, 217, 47");
	brewer.push("rgb(229, 196, 148");
	brewer.push("rgb(179, 179, 179"); //#Set 3

	brewer.push("rgb( 141, 211, 199");
	brewer.push("rgb(255, 255, 179");
	brewer.push("rgb(190, 186, 218");
	brewer.push("rgb(251, 128, 114");
	brewer.push("rgb(128, 177, 211");
	brewer.push("rgb(253, 180, 98");
	brewer.push("rgb(179, 222, 105");
	brewer.push("rgb(252, 205, 229");
	brewer.push("rgb(217, 217, 217");
	brewer.push("rgb(188, 128, 189");
	brewer.push("rgb(204, 235, 197");
	brewer.push("rgb(255, 237, 111");

	var INCORRECT_ITERATION$1 = !checkCorrectnessOfIteration(function (iterable) {
	  Array.from(iterable);
	}); // `Array.from` method
	// https://tc39.github.io/ecma262/#sec-array.from

	_export({
	  target: 'Array',
	  stat: true,
	  forced: INCORRECT_ITERATION$1
	}, {
	  from: arrayFrom
	});

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2016-2017 The Regents of the University of California
	 * Author: Jim Robinson
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * Minimal support for the legacy IGV desktop session format.
	 */
	var XMLSession = /*#__PURE__*/function () {
	  function XMLSession(xmlString, knownGenomes) {
	    _classCallCheck(this, XMLSession);

	    var parser = new DOMParser();
	    var xmlDoc = parser.parseFromString(xmlString, "text/xml");
	    this.processRootNode(xmlDoc, knownGenomes);
	    var resourceElements = xmlDoc.getElementsByTagName("Resource");
	    var trackElements = xmlDoc.getElementsByTagName("Track");
	    var hasTrackElements = trackElements && trackElements.length > 0;
	    var tracks = [];
	    this.tracks = tracks;
	    var resourceMap = new Map();
	    Array.from(resourceElements).forEach(function (r, idx) {
	      var config = {
	        url: r.getAttribute("path"),
	        indexURL: r.getAttribute("index"),
	        order: idx
	      };
	      resourceMap.set(config.url, config);

	      if (!hasTrackElements) {
	        tracks.push(config);
	      }
	    }); // Check for optional Track section

	    if (hasTrackElements) {
	      Array.from(trackElements).forEach(function (track) {
	        var subtracks = track.getElementsByTagName("Track");

	        if (subtracks && subtracks.length > 0) {
	          var mergedTrack = {
	            type: 'merged',
	            tracks: []
	          };
	          extractTrackAttributes(track, mergedTrack);
	          tracks.push(mergedTrack);
	          Array.from(subtracks).forEach(function (t) {
	            t.processed = true;
	            var id = t.getAttribute("id");
	            var config = resourceMap.get(id);

	            if (config) {
	              mergedTrack.tracks.push(config);
	              extractTrackAttributes(t, config);
	              config.autoscale = false;
	              mergedTrack.height = config.height; // Add alpha for merged track colors.  Alpha is not recorded by IGV desktop in XML session
	              //const color = t.getAttribute("color");
	              //if (color) {
	              //    config.color = "rgba(" + color + ",0.5)";
	              //}
	            }
	          });
	        } else if (!track.processed) {
	          var id = track.getAttribute("id");
	          var res = resourceMap.get(id);

	          if (res) {
	            tracks.push(res);
	            extractTrackAttributes(track, res);
	          }
	        }
	      });
	    }
	  }

	  _createClass(XMLSession, [{
	    key: "processRootNode",
	    value: function processRootNode(xmlDoc, knownGenomes) {
	      var elements = xmlDoc.getElementsByTagName("Session");

	      if (!elements || elements.length === 0) ;

	      var session = elements.item(0);
	      var genome = session.getAttribute("genome");
	      var locus = session.getAttribute("locus");
	      var ucscID = session.getAttribute("ucscID");

	      if (knownGenomes && knownGenomes.hasOwnProperty(genome)) {
	        this.genome = genome;
	      } else {
	        this.reference = {
	          fastaURL: genome
	        };

	        if (ucscID) {
	          this.reference.id = ucscID;
	        }
	      }

	      if (locus) {
	        this.locus = locus;
	      }
	    }
	  }]);

	  return XMLSession;
	}();

	function extractTrackAttributes(track, config) {
	  config.name = track.getAttribute("name");
	  var color = track.getAttribute("color");

	  if (color) {
	    config.color = "rgb(" + color + ")";
	  }

	  var altColor = track.getAttribute("altColor");

	  if (color) {
	    config.altColor = "rgb(" + altColor + ")";
	  }

	  var height = track.getAttribute("height");

	  if (height) {
	    config.height = parseInt(height);
	  }

	  var autoScale = track.getAttribute("autoScale");

	  if (autoScale) {
	    config.autoscale = autoScale === "true";
	  }

	  var autoscaleGroup = track.getAttribute("autoscaleGroup");

	  if (autoscaleGroup) {
	    config.autoscaleGroup = autoscaleGroup;
	  }

	  var windowFunction = track.getAttribute("windowFunction");

	  if (windowFunction) {
	    config.windowFunction = windowFunction;
	  }

	  var visWindow = track.getAttribute("visibilityWindow") || track.getAttribute("featureVisibilityWindow");

	  if (visWindow) {
	    config.visibilityWindow = visWindow;
	  }

	  var indexed = track.getAttribute("indexed");

	  if (indexed) {
	    config.indexed = indexed === "true";
	  }

	  var normalize = track.getAttribute("normalize");

	  if (normalize) {
	    config.normalize = normalize === "true";
	  }

	  var dataRangeCltn = track.getElementsByTagName("DataRange");

	  if (dataRangeCltn.length > 0) {
	    var dataRange = dataRangeCltn.item(0);
	    config.min = Number.parseFloat(dataRange.getAttribute("minimum"));
	    config.max = Number.parseFloat(dataRange.getAttribute("maximum"));
	    config.logScale = dataRange.getAttribute("type") === "LOG";
	  }
	}

	var splitLines$3 = splitLines;

	var SampleInformation = /*#__PURE__*/function () {
	  function SampleInformation() {
	    _classCallCheck(this, SampleInformation);

	    this.attributes = {};
	    this.plinkLoaded = false;
	  }

	  _createClass(SampleInformation, [{
	    key: "loadPlinkFile",
	    value: function () {
	      var _loadPlinkFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url, config) {
	        var options, data, lines, _iterator, _step, line, line_arr;

	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (!config) config = {};
	                options = buildOptions(config); // Add oauth token, if any

	                _context.next = 4;
	                return igvxhr.loadString(url, options);

	              case 4:
	                data = _context.sent;
	                lines = splitLines$3(data);
	                _iterator = _createForOfIteratorHelper(lines);

	                try {
	                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
	                    line = _step.value;
	                    line_arr = line.split(' ');
	                    this.attributes[line_arr[1]] = {
	                      familyId: line_arr[0],
	                      fatherId: line_arr[2],
	                      motherId: line_arr[3],
	                      sex: line_arr[4],
	                      phenotype: line_arr[5]
	                    };
	                  }
	                } catch (err) {
	                  _iterator.e(err);
	                } finally {
	                  _iterator.f();
	                }

	                this.plinkLoaded = true;
	                return _context.abrupt("return", this);

	              case 10:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function loadPlinkFile(_x, _x2) {
	        return _loadPlinkFile.apply(this, arguments);
	      }

	      return loadPlinkFile;
	    }()
	    /**
	     * Return the attributes for the given sample as a map-like object (key-value pairs)
	     * @param sample
	     */

	  }, {
	    key: "getAttributes",
	    value: function getAttributes(sample) {
	      return this.attributes[sample];
	    }
	  }, {
	    key: "getAttributeNames",
	    value: function getAttributeNames() {
	      if (this.hasAttributes()) {
	        return Object.keys(this.attributes[Object.keys(this.attributes)[0]]);
	      } else return [];
	    }
	  }, {
	    key: "hasAttributes",
	    value: function hasAttributes() {
	      return Object.keys(this.attributes).length > 0;
	    }
	  }]);

	  return SampleInformation;
	}();

	function loadPlinkFile(url, config) {
	  var si = new SampleInformation();
	  return si.loadPlinkFile(url, config);
	}

	var ReferenceFrame = /*#__PURE__*/function () {
	  function ReferenceFrame(genome, chr, start, end, bpPerPixel) {
	    _classCallCheck(this, ReferenceFrame);

	    this.genome = genome;
	    this.chr = chr;
	    this.start = start;
	    this.initialEnd = end; // TODO WARNING THIS IS NOT UPDATED !!!

	    this.initialStart = start;
	    this.bpPerPixel = bpPerPixel;
	    this.id = guid();
	  }

	  _createClass(ReferenceFrame, [{
	    key: "calculateEnd",
	    value: function calculateEnd(pixels) {
	      return this.start + this.bpPerPixel * pixels;
	    }
	  }, {
	    key: "calculateBPP",
	    value: function calculateBPP(end, pixels) {
	      return (end - this.start) / pixels;
	    }
	  }, {
	    key: "set",
	    value: function set(json) {
	      this.chr = json.chr;
	      this.start = json.start;
	      this.bpPerPixel = json.bpPerPixel;
	    }
	  }, {
	    key: "toPixels",
	    value: function toPixels(bp) {
	      return bp / this.bpPerPixel;
	    }
	  }, {
	    key: "toBP",
	    value: function toBP(pixels) {
	      return this.bpPerPixel * pixels;
	    }
	    /**
	     * Shift frame by stated pixels.  Return true if view changed, false if not.
	     * @param pixels
	     * @param viewportWidth
	     */

	  }, {
	    key: "shiftPixels",
	    value: function shiftPixels(pixels, viewportWidth) {
	      var start = this.start;
	      this.start += pixels * this.bpPerPixel;
	      this.clamp(viewportWidth);
	      return start !== this.start;
	    }
	  }, {
	    key: "clamp",
	    value: function clamp(viewportWidth) {
	      // clamp left
	      var min = this.genome.getChromosome(this.chr).bpStart || 0;
	      this.start = Math.max(min, this.start); // clamp right

	      if (viewportWidth) {
	        var chromosome = this.genome.getChromosome(this.chr);
	        var maxEnd = chromosome.bpLength;
	        var maxStart = maxEnd - viewportWidth * this.bpPerPixel;

	        if (this.start > maxStart) {
	          this.start = maxStart;
	        }
	      }
	    }
	  }, {
	    key: "getChromosome",
	    value: function getChromosome() {
	      return this.genome.getChromosome(this.chr);
	    }
	  }, {
	    key: "presentLocus",
	    value: function presentLocus(pixels) {
	      if ('all' === this.chr) {
	        return this.chr;
	      } else {
	        var ss = numberFormatter(Math.floor(this.start) + 1);
	        var ee = numberFormatter(Math.round(this.start + this.bpPerPixel * pixels));
	        return "".concat(this.chr, ":").concat(ss, "-").concat(ee);
	      }
	    }
	  }]);

	  return ReferenceFrame;
	}();

	function createReferenceFrameList(browser, loci) {
	  var viewportWidth = browser.calculateViewportWidth(loci.length);
	  return loci.map(function (locusObject) {
	    // If a flanking region is defined, and the search object is a symbol ("gene") type, adjust start and end
	    if (browser.flanking && locusObject.gene) {
	      locusObject.start = Math.max(0, locusObject.start - browser.flanking);
	      locusObject.end += browser.flanking;
	    } // Validate the range.  This potentionally modifies start & end of locusObject.


	    var chromosome = browser.genome.getChromosome(locusObject.chr);
	    validateLocusExtent(chromosome.bpLength, locusObject, browser.minimumBases());
	    var referenceFrame = new ReferenceFrame(browser.genome, locusObject.chr, locusObject.start, locusObject.end, (locusObject.end - locusObject.start) / viewportWidth);
	    referenceFrame.locusSearchString = locusObject.locusSearchString; // GTEX hack

	    if (locusObject.gene || locusObject.snp) {
	      referenceFrame.selection = new GtexSelection(locusObject.gene, locusObject.snp);
	    }

	    return referenceFrame;
	  });
	}

	function adjustReferenceFrame(referenceFrame, viewportWidth, alignmentStart, alignmentLength) {
	  var alignmentEE = alignmentStart + alignmentLength;
	  var alignmentCC = (alignmentStart + alignmentEE) / 2;
	  referenceFrame.start = alignmentCC - referenceFrame.bpPerPixel * (viewportWidth / 2);
	  referenceFrame.initialEnd = referenceFrame.start + referenceFrame.bpPerPixel * viewportWidth;
	  referenceFrame.locusSearchString = referenceFrame.presentLocus(viewportWidth);
	}

	function createReferenceFrameWithAlignment(genome, chromosomeName, bpp, viewportWidth, alignmentStart, alignmentLength) {
	  var alignmentEE = alignmentStart + alignmentLength;
	  var alignmentCC = (alignmentStart + alignmentEE) / 2;
	  var ss = alignmentCC - bpp * (viewportWidth / 2);
	  var ee = ss + bpp * viewportWidth;
	  var referenceFrame = new ReferenceFrame(genome, chromosomeName, ss, ee, bpp);
	  referenceFrame.locusSearchString = referenceFrame.presentLocus(viewportWidth);
	  return referenceFrame;
	}

	var defaultNucleotideColors = {
	  "A": "rgb(  0, 200,   0)",
	  "C": "rgb(  0,0,200)",
	  "T": "rgb(255,0,0)",
	  "G": "rgb(209,113,  5)",
	  "N": "rgb(80,80,80)"
	};

	function search(_x, _x2) {
	  return _search.apply(this, arguments);
	}

	function _search() {
	  _search = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(browser, string) {
	    var loci, searchConfig, list, searchLocus, _iterator, _step, locus, _locusObject, locusObject;

	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            if (!(undefined === string || '' === string.trim())) {
	              _context2.next = 2;
	              break;
	            }

	            return _context2.abrupt("return");

	          case 2:
	            if (string && string.trim().toLowerCase() === "all" || string === "*") {
	              string = "all";
	            }

	            loci = string.split(' ');
	            searchConfig = browser.searchConfig;
	            list = [];

	            searchLocus = /*#__PURE__*/function () {
	              var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(locus) {
	                var locusObject;
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                  while (1) {
	                    switch (_context.prev = _context.next) {
	                      case 0:
	                        locusObject = parseLocusString$1(browser, locus);

	                        if (!locusObject) {
	                          locusObject = browser.genome.featureDB[locus.toUpperCase()];
	                        }

	                        if (locusObject) {
	                          _context.next = 6;
	                          break;
	                        }

	                        _context.next = 5;
	                        return searchWebService(browser, locus, searchConfig);

	                      case 5:
	                        locusObject = _context.sent;

	                      case 6:
	                        return _context.abrupt("return", locusObject);

	                      case 7:
	                      case "end":
	                        return _context.stop();
	                    }
	                  }
	                }, _callee);
	              }));

	              return function searchLocus(_x6) {
	                return _ref.apply(this, arguments);
	              };
	            }();

	            _iterator = _createForOfIteratorHelper(loci);
	            _context2.prev = 8;

	            _iterator.s();

	          case 10:
	            if ((_step = _iterator.n()).done) {
	              _context2.next = 18;
	              break;
	            }

	            locus = _step.value;
	            _context2.next = 14;
	            return searchLocus(locus);

	          case 14:
	            _locusObject = _context2.sent;

	            if (_locusObject) {
	              _locusObject.locusSearchString = locus;
	              list.push(_locusObject);
	            }

	          case 16:
	            _context2.next = 10;
	            break;

	          case 18:
	            _context2.next = 23;
	            break;

	          case 20:
	            _context2.prev = 20;
	            _context2.t0 = _context2["catch"](8);

	            _iterator.e(_context2.t0);

	          case 23:
	            _context2.prev = 23;

	            _iterator.f();

	            return _context2.finish(23);

	          case 26:
	            if (!(list.length === 0)) {
	              _context2.next = 31;
	              break;
	            }

	            _context2.next = 29;
	            return searchLocus(string);

	          case 29:
	            locusObject = _context2.sent;

	            if (locusObject) {
	              locusObject.locusSearchString = string;
	              list.push(locusObject);
	            }

	          case 31:
	            return _context2.abrupt("return", 0 === list.length ? undefined : list);

	          case 32:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2, null, [[8, 20, 23, 26]]);
	  }));
	  return _search.apply(this, arguments);
	}

	function parseLocusString$1(browser, locus) {
	  var a = locus.split(':');
	  var chr = a[0];

	  if ('all' === chr && browser.genome.getChromosome(chr)) {
	    return {
	      chr: chr,
	      start: 0,
	      end: browser.genome.getChromosome(chr).bpLength
	    };
	  } else if (undefined === browser.genome.getChromosome(chr)) {
	    return undefined;
	  } else {
	    var queryChr = browser.genome.getChromosomeName(chr);
	    var extent = {
	      chr: queryChr,
	      start: 0,
	      end: browser.genome.getChromosome(chr).bpLength
	    };

	    if (a.length > 1) {
	      var b = a[1].split('-');

	      if (b.length > 2) {
	        return undefined;
	      } else {
	        var numeric;
	        numeric = b[0].replace(/,/g, '');

	        if (isNaN(numeric)) {
	          return undefined;
	        }

	        extent.start = parseInt(numeric, 10) - 1;
	        extent.end = extent.start + 1;

	        if (1 === b.length) {
	          extent.start -= 20;
	          extent.end += 20;
	        }

	        if (2 === b.length) {
	          numeric = b[1].replace(/,/g, '');

	          if (isNaN(numeric)) {
	            return undefined;
	          } else {
	            extent.end = parseInt(numeric, 10);
	          }
	        }
	      }
	    }

	    return extent;
	  }
	}

	function searchWebService(_x3, _x4, _x5) {
	  return _searchWebService.apply(this, arguments);
	}

	function _searchWebService() {
	  _searchWebService = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(browser, locus, searchConfig) {
	    var path, result, locusObject;
	    return regeneratorRuntime.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            path = searchConfig.url.replace("$FEATURE$", locus.toUpperCase());

	            if (path.indexOf("$GENOME$") > -1) {
	              path = path.replace("$GENOME$", browser.genome.id ? browser.genome.id : "hg19");
	            }

	            _context3.next = 4;
	            return igvxhr.loadString(path);

	          case 4:
	            result = _context3.sent;
	            locusObject = processSearchResult(browser, result, searchConfig);

	            if (locusObject) {
	              locusObject.locusSearchString = locus;
	            }

	            return _context3.abrupt("return", locusObject);

	          case 8:
	          case "end":
	            return _context3.stop();
	        }
	      }
	    }, _callee3);
	  }));
	  return _searchWebService.apply(this, arguments);
	}

	function processSearchResult(browser, result, searchConfig) {
	  var results;

	  if ('plain' === searchConfig.type) {
	    results = parseSearchResults(browser, result);
	  } else {
	    results = JSON.parse(result);
	  }

	  if (searchConfig.resultsField) {
	    results = results[searchConfig.resultsField];
	  }

	  if (!results || 0 === results.length) {
	    return undefined;
	  } else {
	    var chromosomeField = searchConfig.chromosomeField || "chromosome";
	    var startField = searchConfig.startField || "start";
	    var endField = searchConfig.endField || "end";
	    var coords = searchConfig.coords || 1;

	    var _result;

	    if (Array.isArray(results)) {
	      // Ignoring all but first result for now
	      // TODO -- present all and let user select if results.length > 1
	      _result = results[0];
	    } else {
	      // When processing search results from Ensembl REST API
	      // Example: https://rest.ensembl.org/lookup/symbol/macaca_fascicularis/BRCA2?content-type=application/json
	      _result = results;
	    }

	    if (!(_result.hasOwnProperty(chromosomeField) && _result.hasOwnProperty(startField))) {
	      console.error("Search service results must include chromosome and start fields: " + _result);
	    }

	    var chrResult = _result[chromosomeField];
	    var chromosome = browser.genome.getChromosome(chrResult);

	    if (!chromosome) {
	      return undefined;
	    }

	    var chr = chromosome.name;
	    var start = _result[startField] - coords;
	    var end = _result[endField];

	    if (undefined === end) {
	      end = start + 1;
	    }

	    var locusObject = {
	      chr: chr,
	      start: start,
	      end: end
	    }; // Some GTEX hacks

	    var type = _result.type ? _result.type : "gene";

	    if (searchConfig.geneField && type === "gene") {
	      locusObject.gene = _result[searchConfig.geneField];
	    }

	    if (searchConfig.snpField && type === "snp") {
	      locusObject.snp = _result[searchConfig.snpField];
	    }

	    return locusObject;
	  }
	}
	/**
	 * Parse the igv line-oriented (non json) search results.
	 * Example
	 *    EGFR    chr7:55,086,724-55,275,031    refseq
	 *
	 */


	function parseSearchResults(browser, data) {
	  var linesTrimmed = [];
	  var results = [];
	  var lines = splitLines(data);
	  lines.forEach(function (item) {
	    if ("" === item) ; else {
	      linesTrimmed.push(item);
	    }
	  });
	  linesTrimmed.forEach(function (line) {
	    var tokens = line.split("\t"),
	        source,
	        locusTokens,
	        rangeTokens,
	        obj;

	    if (tokens.length >= 3) {
	      locusTokens = tokens[1].split(":");
	      rangeTokens = locusTokens[1].split("-");
	      source = tokens[2].trim();
	      obj = {
	        gene: tokens[0],
	        chromosome: browser.genome.getChromosomeName(locusTokens[0].trim()),
	        start: parseInt(rangeTokens[0].replace(/,/g, '')),
	        end: parseInt(rangeTokens[1].replace(/,/g, '')),
	        type: "gtex" === source ? "snp" : "gene"
	      };
	      results.push(obj);
	    }
	  });
	  return results;
	} // Export some functions for unit testing

	var multiLocusGapDivWidth = 1;
	var multiLocusGapMarginWidth = 2;
	var multiLocusGapWidth = 2 * multiLocusGapMarginWidth + multiLocusGapDivWidth;
	var leftHandGutterWidth = 50;
	var rightHandGutterWidth = 36;
	var trackManipulationHandleWidth = 12;
	var trackManipulationHandleMarginWidth = 0;
	var trackManipulationHandleShim = trackManipulationHandleWidth + trackManipulationHandleMarginWidth;
	var scrollbarOuterWidth = 14; // igv.scss - $igv-viewport-container-shim-width

	var viewportContainerShimWidth = leftHandGutterWidth + rightHandGutterWidth + trackManipulationHandleShim + scrollbarOuterWidth;

	var Browser = /*#__PURE__*/function () {
	  function Browser(options, parentDiv) {
	    _classCallCheck(this, Browser);

	    this.config = options;
	    this.guid = guid();
	    this.namespace = '.browser_' + this.guid;
	    this.parent = parentDiv;
	    this.$root = $('<div>', {
	      class: 'igv-root'
	    });
	    $(parentDiv).append(this.$root);
	    var $trackContainer = $('<div>', {
	      class: 'igv-track-container'
	    });
	    this.$root.append($trackContainer);
	    Alert.init(this.$root.get(0));
	    this.trackContainer = $trackContainer.get(0);
	    this.initialize(options);
	    this.trackViews = [];
	    this.trackLabelsVisible = true;
	    this.isCenterGuideVisible = false;
	    this.cursorGuideVisible = false;
	    this.constants = {
	      dragThreshold: 3,
	      scrollThreshold: 5,
	      defaultColor: "rgb(0,0,150)",
	      doubleClickDelay: options.doubleClickDelay || 500
	    }; // Map of event name -> [ handlerFn, ... ]

	    this.eventHandlers = {};
	    this.$spinner = $('<div>', {
	      class: 'igv-track-container-spinner'
	    });
	    $trackContainer.append(this.$spinner);
	    this.$spinner.append(createIcon$2("spinner"));
	    this.stopSpinner();
	    this.addMouseHandlers();
	  }

	  _createClass(Browser, [{
	    key: "initialize",
	    value: function initialize(options) {
	      var genomeId;

	      if (options.gtex) {
	        GtexUtils.gtexLoaded = true;
	      }

	      this.flanking = options.flanking;
	      this.crossDomainProxy = options.crossDomainProxy;
	      this.formats = options.formats;
	      this.trackDefaults = options.trackDefaults;
	      this.nucleotideColors = options.nucleotideColors || defaultNucleotideColors;

	      for (var _i = 0, _Object$keys = Object.keys(this.nucleotideColors); _i < _Object$keys.length; _i++) {
	        var key = _Object$keys[_i];
	        this.nucleotideColors[key.toLowerCase()] = this.nucleotideColors[key];
	      }

	      if (options.search) {
	        this.searchConfig = {
	          type: "json",
	          url: options.search.url,
	          coords: options.search.coords === undefined ? 1 : options.search.coords,
	          chromosomeField: options.search.chromosomeField || "chromosome",
	          startField: options.search.startField || "start",
	          endField: options.search.endField || "end",
	          geneField: options.search.geneField || "gene",
	          snpField: options.search.snpField || "snp",
	          resultsField: options.search.resultsField
	        };
	      } else {
	        if (options.reference && options.reference.id) {
	          genomeId = options.reference.id;
	        } else if (options.genome) {
	          genomeId = options.genome;
	        } else {
	          genomeId = "hg19";
	        }

	        this.searchConfig = {
	          // Legacy support -- deprecated
	          type: "plain",
	          url: 'https://igv.org/genomes/locus.php?genome=$GENOME$&name=$FEATURE$',
	          coords: 0,
	          chromosomeField: "chromosome",
	          startField: "start",
	          endField: "end",
	          geneField: "gene",
	          snpField: "snp"
	        };
	      }
	    }
	  }, {
	    key: "startSpinner",
	    value: function startSpinner() {
	      var $spinner = this.$spinner;

	      if ($spinner) {
	        $spinner.addClass("igv-fa5-spin");
	        $spinner.show();
	      }
	    }
	  }, {
	    key: "stopSpinner",
	    value: function stopSpinner() {
	      var $spinner = this.$spinner;

	      if ($spinner) {
	        $spinner.hide();
	        $spinner.removeClass("igv-fa5-spin");
	      }
	    }
	  }, {
	    key: "isMultiLocusMode",
	    value: function isMultiLocusMode() {
	      return this.referenceFrameList && this.referenceFrameList.length > 1;
	    }
	  }, {
	    key: "addTrackToFactory",
	    value: function addTrackToFactory(name, track) {
	      TrackFactory.addTrack(name, track);
	    }
	  }, {
	    key: "isMultiLocusWholeGenomeView",
	    value: function isMultiLocusWholeGenomeView() {
	      if (undefined === this.referenceFrameList || 1 === this.referenceFrameList.length) {
	        return false;
	      }

	      var _iterator = _createForOfIteratorHelper(this.referenceFrameList),
	          _step;

	      try {
	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
	          var referenceFrame = _step.value;

	          if ('all' === referenceFrame.chr.toLowerCase()) {
	            return true;
	          }
	        }
	      } catch (err) {
	        _iterator.e(err);
	      } finally {
	        _iterator.f();
	      }

	      return false;
	    }
	  }, {
	    key: "toSVG",

	    /**
	     * Render browse display as SVG
	     * @returns {string}
	     */
	    value: function toSVG() {
	      var _this$trackContainer$ = this.trackContainer.getBoundingClientRect(),
	          x = _this$trackContainer$.x,
	          y = _this$trackContainer$.y,
	          width = _this$trackContainer$.width,
	          height = _this$trackContainer$.height;

	      var _this$trackViews$0$$v = this.trackViews[0].$viewportContainer.get(0).getBoundingClientRect(),
	          vpx = _this$trackViews$0$$v.x;

	      var w = width + (this.referenceFrameList.length - 1) * multiLocusGapWidth;
	      var h_output = height;
	      var h_render = 8000;
	      var svgContext = new C2S({
	        width: w,
	        height: h_render,
	        backdropColor: 'white',
	        multiLocusGap: multiLocusGapWidth,
	        viewbox: {
	          x: 0,
	          y: 0,
	          width: w,
	          height: h_render
	        }
	      });
	      var dx = vpx - x; // tracks -> SVG

	      var _iterator2 = _createForOfIteratorHelper(this.trackViews),
	          _step2;

	      try {
	        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	          var trackView = _step2.value;
	          trackView.renderSVGContext(svgContext, {
	            deltaX: dx,
	            deltaY: -y
	          });
	        } // reset height to trim away unneeded svg canvas real estate. Yes, a bit of a hack.

	      } catch (err) {
	        _iterator2.e(err);
	      } finally {
	        _iterator2.f();
	      }

	      svgContext.setHeight(h_output);
	      return svgContext.getSerializedSvg(true);
	    }
	  }, {
	    key: "saveSVGtoFile",
	    value: function saveSVGtoFile(config) {
	      var svg = this.toSVG();

	      if (config.$container) {
	        var trackContainerBBox = this.trackContainer.getBoundingClientRect();
	        config.$container.empty();
	        config.$container.width(trackContainerBBox.width);
	        config.$container.append(svg);
	      }

	      var path = config.filename || 'igv.svg';
	      var data = URL.createObjectURL(new Blob([svg], {
	        type: "application/octet-stream"
	      }));
	      download(path, data);
	    }
	    /**
	     * Initialize a session from an object, json, or by loading from a file.
	     *
	     * TODO Really should be split into at least 2 functions, load from file and load from object/json
	     *
	     * @param options
	     * @returns {*}
	     */

	  }, {
	    key: "loadSession",
	    value: function () {
	      var _loadSession = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(options) {
	        var session, loadSessionFile, _loadSessionFile;

	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                _loadSessionFile = function _loadSessionFile3() {
	                  _loadSessionFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(options) {
	                    var urlOrFile, json, filename, knownGenomes, string;
	                    return regeneratorRuntime.wrap(function _callee$(_context) {
	                      while (1) {
	                        switch (_context.prev = _context.next) {
	                          case 0:
	                            urlOrFile = options.url || options.file;

	                            if (!(options.url && (options.url.startsWith("blob:") || options.url.startsWith("data:")))) {
	                              _context.next = 6;
	                              break;
	                            }

	                            json = Browser.uncompressSession(options.url);
	                            return _context.abrupt("return", JSON.parse(json));

	                          case 6:
	                            filename = options.filename;

	                            if (filename) {
	                              _context.next = 16;
	                              break;
	                            }

	                            if (!options.url) {
	                              _context.next = 14;
	                              break;
	                            }

	                            _context.next = 11;
	                            return getFilename$1(options.url);

	                          case 11:
	                            _context.t0 = _context.sent;
	                            _context.next = 15;
	                            break;

	                          case 14:
	                            _context.t0 = options.file.name;

	                          case 15:
	                            filename = _context.t0;

	                          case 16:
	                            if (!filename.endsWith(".xml")) {
	                              _context.next = 24;
	                              break;
	                            }

	                            knownGenomes = GenomeUtils.KNOWN_GENOMES;
	                            _context.next = 20;
	                            return igvxhr.loadString(urlOrFile);

	                          case 20:
	                            string = _context.sent;
	                            return _context.abrupt("return", new XMLSession(string, knownGenomes));

	                          case 24:
	                            if (!filename.endsWith(".json")) {
	                              _context.next = 28;
	                              break;
	                            }

	                            return _context.abrupt("return", igvxhr.loadJson(urlOrFile));

	                          case 28:
	                            return _context.abrupt("return", undefined);

	                          case 29:
	                          case "end":
	                            return _context.stop();
	                        }
	                      }
	                    }, _callee);
	                  }));
	                  return _loadSessionFile.apply(this, arguments);
	                };

	                loadSessionFile = function _loadSessionFile2(_x2) {
	                  return _loadSessionFile.apply(this, arguments);
	                };

	                this.roi = [];

	                if (!(options.url || options.file)) {
	                  _context2.next = 9;
	                  break;
	                }

	                _context2.next = 6;
	                return loadSessionFile(options);

	              case 6:
	                session = _context2.sent;
	                _context2.next = 10;
	                break;

	              case 9:
	                session = options;

	              case 10:
	                return _context2.abrupt("return", this.loadSessionObject(session));

	              case 11:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function loadSession(_x) {
	        return _loadSession.apply(this, arguments);
	      }

	      return loadSession;
	    }()
	    /**
	     * Note:  public API function
	     * @param session
	     * @returns {Promise<void>}
	     */

	  }, {
	    key: "loadSessionObject",
	    value: function () {
	      var _loadSessionObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(session) {
	        var genome, _iterator3, _step3, referenceFrame, _i2, _Object$keys2, s, gene, snp, _iterator4, _step4, r, tracks, pushSequenceTrack;

	        return regeneratorRuntime.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                this.removeAllTracks();
	                _context3.next = 3;
	                return this.loadGenome(session.reference || session.genome, session.locus, false);

	              case 3:
	                genome = _context3.sent;

	                // Create ideogram and ruler track.  Really this belongs in browser initialization, but creation is
	                // deferred because ideogram and ruler are treated as "tracks", and tracks require a reference frame
	                if (undefined === this.ideogram && false !== this.config.showIdeogram) {
	                  this.ideogram = new IdeogramTrack(this);
	                  this.addTrack(this.ideogram);
	                }

	                if (undefined === this.rulerTrack && false !== this.config.showRuler) {
	                  this.rulerTrack = new RulerTrack(this);
	                  this.addTrack(this.rulerTrack);
	                } // Restore gtex selections.


	                if (session.gtexSelections) {
	                  _iterator3 = _createForOfIteratorHelper(this.referenceFrameList);

	                  try {
	                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
	                      referenceFrame = _step3.value;

	                      for (_i2 = 0, _Object$keys2 = Object.keys(session.gtexSelections); _i2 < _Object$keys2.length; _i2++) {
	                        s = _Object$keys2[_i2];
	                        gene = session.gtexSelections[s].gene;
	                        snp = session.gtexSelections[s].snp;
	                        referenceFrame.selection = new GtexSelection(gene, snp);
	                      }
	                    }
	                  } catch (err) {
	                    _iterator3.e(err);
	                  } finally {
	                    _iterator3.f();
	                  }
	                }

	                if (session.roi) {
	                  this.roi = [];
	                  _iterator4 = _createForOfIteratorHelper(session.roi);

	                  try {
	                    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
	                      r = _step4.value;
	                      this.roi.push(new ROI(r, genome));
	                    }
	                  } catch (err) {
	                    _iterator4.e(err);
	                  } finally {
	                    _iterator4.f();
	                  }
	                }

	                tracks = session.tracks || [];
	                pushSequenceTrack = tracks.filter(function (track) {
	                  return track.type === 'sequence';
	                }).length === 0;

	                if (pushSequenceTrack && false !== this.config.showSequence) {
	                  tracks.push({
	                    type: "sequence",
	                    order: defaultSequenceTrackOrder
	                  });
	                }

	                _context3.next = 13;
	                return this.loadTrackList(tracks);

	              case 13:
	                if (this.ideogram) {
	                  this.ideogram.trackView.updateViews();
	                }

	                if (this.rulerTrack) {
	                  this.rulerTrack.trackView.updateViews();
	                }

	                this.updateLocusSearchWidget(this.referenceFrameList[0]);
	                this.windowSizePanel.updateWithReferenceFrame(this.referenceFrameList[0]);

	              case 17:
	              case "end":
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function loadSessionObject(_x3) {
	        return _loadSessionObject.apply(this, arguments);
	      }

	      return loadSessionObject;
	    }()
	  }, {
	    key: "loadGenome",
	    value: function () {
	      var _loadGenome = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(idOrConfig, initialLocus, update) {
	        var genomeConfig, genome, genomeChange, expandReference, _expandReference, getInitialLocus;

	        return regeneratorRuntime.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                getInitialLocus = function _getInitialLocus(locus, genome) {
	                  var loci = [];

	                  if (locus) {
	                    if (Array.isArray(locus)) {
	                      loci = locus.join(' ');
	                    } else {
	                      loci = locus;
	                    }
	                  } else {
	                    loci = genome.getHomeChromosomeName();
	                  }

	                  return loci;
	                };

	                _expandReference = function _expandReference3() {
	                  _expandReference = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(conf) {
	                    var genomeID, knownGenomes, reference;
	                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
	                      while (1) {
	                        switch (_context4.prev = _context4.next) {
	                          case 0:
	                            if (isString(conf)) {
	                              genomeID = conf;
	                            } else if (conf.genome) {
	                              genomeID = conf.genome;
	                            } else if (conf.id !== undefined && conf.fastaURL === undefined) {
	                              // Backward compatibility
	                              genomeID = conf.id;
	                            }

	                            if (!genomeID) {
	                              _context4.next = 8;
	                              break;
	                            }

	                            knownGenomes = GenomeUtils.KNOWN_GENOMES;
	                            reference = knownGenomes[genomeID];

	                            if (!reference) {
	                              Alert.presentAlert(new Error("Unknown genome id: ".concat(genomeID)), undefined);
	                            }

	                            return _context4.abrupt("return", reference);

	                          case 8:
	                            return _context4.abrupt("return", conf);

	                          case 9:
	                          case "end":
	                            return _context4.stop();
	                        }
	                      }
	                    }, _callee4);
	                  }));
	                  return _expandReference.apply(this, arguments);
	                };

	                expandReference = function _expandReference2(_x7) {
	                  return _expandReference.apply(this, arguments);
	                };

	                // idOrConfig might be json
	                if (isString(idOrConfig) && idOrConfig.startsWith("{")) {
	                  try {
	                    idOrConfig = JSON.parse(idOrConfig);
	                  } catch (e) {// Apparently its not json,  just continue
	                  }
	                }

	                _context5.next = 6;
	                return expandReference.call(this, idOrConfig);

	              case 6:
	                genomeConfig = _context5.sent;
	                _context5.next = 9;
	                return GenomeUtils.loadGenome(genomeConfig);

	              case 9:
	                genome = _context5.sent;
	                genomeChange = this.genome && this.genome.id !== genome.id;
	                this.genome = genome;
	                this.$current_genome.text(genome.id || '');
	                this.$current_genome.attr('title', genome.id || '');
	                this.chromosomeSelectWidget.update(genome);

	                if (genomeChange) {
	                  this.removeAllTracks();
	                }

	                this.genome = genome;
	                _context5.prev = 17;
	                _context5.next = 20;
	                return this.search(getInitialLocus(initialLocus, genome), true);

	              case 20:
	                this.referenceFrameList = _context5.sent;
	                _context5.next = 30;
	                break;

	              case 23:
	                _context5.prev = 23;
	                _context5.t0 = _context5["catch"](17);

	                // Couldn't find initial locus
	                _context5.t0.message();

	                Alert.presentAlert(new Error("Unrecognized locus ".concat(initialLocus)), undefined);
	                _context5.next = 29;
	                return this.search(this.genome.getHomeChromosomeName());

	              case 29:
	                this.referenceFrameList = _context5.sent;

	              case 30:
	                if (!genomeConfig.tracks) {
	                  _context5.next = 33;
	                  break;
	                }

	                _context5.next = 33;
	                return this.loadTrackList(genomeConfig.tracks);

	              case 33:
	                if (update !== false) {
	                  this.updateViews();
	                }

	                return _context5.abrupt("return", this.genome);

	              case 35:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this, [[17, 23]]);
	      }));

	      function loadGenome(_x4, _x5, _x6) {
	        return _loadGenome.apply(this, arguments);
	      }

	      return loadGenome;
	    }()
	  }, {
	    key: "updateUIWithReferenceFrameListChange",
	    //
	    value: function updateUIWithReferenceFrameListChange(referenceFrameList) {
	      var isWGV = this.isMultiLocusWholeGenomeView() || GenomeUtils.isWholeGenomeView(referenceFrameList[0].chr);

	      if (isWGV || this.isMultiLocusMode()) {
	        this.centerGuide.forcedHide();
	      } else {
	        this.centerGuide.forcedShow();
	      }

	      this.navbarManager.navbarDidResize(this.$navigation.width(), isWGV);
	      toggleTrackLabels(this.trackViews, this.trackLabelsVisible);
	    }
	  }, {
	    key: "setTrackLabelName",
	    // track labels
	    value: function setTrackLabelName(trackView, name) {
	      trackView.viewports.forEach(function (viewport) {
	        viewport.setTrackLabel(name);
	      });
	    }
	  }, {
	    key: "hideTrackLabels",
	    value: function hideTrackLabels() {
	      this.trackLabelsVisible = false;
	      toggleTrackLabels(this.trackViews, this.trackLabelsVisible);
	    }
	  }, {
	    key: "showTrackLabels",
	    value: function showTrackLabels() {
	      this.trackLabelsVisible = true;
	      toggleTrackLabels(this.trackViews, this.trackLabelsVisible);
	    }
	  }, {
	    key: "hideCursorGuide",
	    // cursor guide
	    value: function hideCursorGuide() {
	      this.cursorGuide.$guide.hide();
	      this.cursorGuideVisible = false;
	    }
	  }, {
	    key: "showCursorGuide",
	    value: function showCursorGuide() {
	      this.cursorGuide.$guide.show();
	      this.cursorGuideVisible = true;
	    }
	  }, {
	    key: "setCustomCursorGuideMouseHandler",
	    value: function setCustomCursorGuideMouseHandler(mouseHandler) {
	      this.cursorGuide.customMouseHandler = mouseHandler;
	    }
	  }, {
	    key: "hideCenterGuide",
	    // center guide
	    value: function hideCenterGuide() {
	      this.centerGuide.$container.hide();
	      this.isCenterGuideVisible = false;
	    }
	  }, {
	    key: "showCenterGuide",
	    value: function showCenterGuide() {
	      this.centerGuide.$container.show();
	      this.centerGuide.resize();
	      this.isCenterGuideVisible = true;
	    }
	  }, {
	    key: "loadTrackList",
	    value: function () {
	      var _loadTrackList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(configList) {
	        var promises, _iterator5, _step5, config, noSpinner, loadedTracks, groupAutoscaleViews;

	        return regeneratorRuntime.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                _context6.prev = 0;
	                this.startSpinner();
	                promises = [];
	                _iterator5 = _createForOfIteratorHelper(configList);

	                try {
	                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
	                    config = _step5.value;
	                    noSpinner = true;
	                    promises.push(this.loadTrack(config, noSpinner));
	                  }
	                } catch (err) {
	                  _iterator5.e(err);
	                } finally {
	                  _iterator5.f();
	                }

	                _context6.next = 7;
	                return Promise.all(promises);

	              case 7:
	                loadedTracks = _context6.sent;
	                groupAutoscaleViews = this.trackViews.filter(function (trackView) {
	                  return trackView.track.autoscaleGroup;
	                });

	                if (groupAutoscaleViews.length > 0) {
	                  this.updateViews(this.referenceFrameList[0], groupAutoscaleViews);
	                }

	                return _context6.abrupt("return", loadedTracks);

	              case 11:
	                _context6.prev = 11;
	                this.stopSpinner();
	                return _context6.finish(11);

	              case 14:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this, [[0,, 11, 14]]);
	      }));

	      function loadTrackList(_x8) {
	        return _loadTrackList.apply(this, arguments);
	      }

	      return loadTrackList;
	    }()
	  }, {
	    key: "loadROI",
	    value: function () {
	      var _loadROI = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(config) {
	        var _iterator6, _step6, c;

	        return regeneratorRuntime.wrap(function _callee7$(_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                if (!this.roi) {
	                  this.roi = [];
	                }

	                if (Array.isArray(config)) {
	                  _iterator6 = _createForOfIteratorHelper(config);

	                  try {
	                    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
	                      c = _step6.value;
	                      this.roi.push(new ROI(c, this.genome));
	                    }
	                  } catch (err) {
	                    _iterator6.e(err);
	                  } finally {
	                    _iterator6.f();
	                  }
	                } else {
	                  this.roi.push(new ROI(config, this.genome));
	                }

	                _context7.next = 4;
	                return this.updateViews(undefined, undefined, true);

	              case 4:
	              case "end":
	                return _context7.stop();
	            }
	          }
	        }, _callee7, this);
	      }));

	      function loadROI(_x9) {
	        return _loadROI.apply(this, arguments);
	      }

	      return loadROI;
	    }()
	  }, {
	    key: "removeROI",
	    value: function removeROI(roiToRemove) {
	      for (var i = 0; i < this.roi.length; i++) {
	        if (this.roi[i].name === roiToRemove.name) {
	          this.roi.splice(i, 1);
	          break;
	        }
	      }

	      var _iterator7 = _createForOfIteratorHelper(this.trackViews),
	          _step7;

	      try {
	        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
	          var tv = _step7.value;
	          tv.updateViews(undefined, undefined, true);
	        }
	      } catch (err) {
	        _iterator7.e(err);
	      } finally {
	        _iterator7.f();
	      }
	    }
	  }, {
	    key: "clearROIs",
	    value: function clearROIs() {
	      this.roi = [];

	      var _iterator8 = _createForOfIteratorHelper(this.trackViews),
	          _step8;

	      try {
	        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
	          var tv = _step8.value;
	          tv.updateViews(undefined, undefined, true);
	        }
	      } catch (err) {
	        _iterator8.e(err);
	      } finally {
	        _iterator8.f();
	      }
	    }
	    /**
	     * Return a promise to load a track
	     *
	     * @param config
	     * @returns {*}
	     */

	  }, {
	    key: "loadTrack",
	    value: function () {
	      var _loadTrack = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(config, noSpinner) {
	        var newTrack, httpMessages, msg;
	        return regeneratorRuntime.wrap(function _callee8$(_context8) {
	          while (1) {
	            switch (_context8.prev = _context8.next) {
	              case 0:
	                // config might be json
	                if (isString(config)) {
	                  config = JSON.parse(config);
	                }

	                _context8.prev = 1;
	                if (!noSpinner) this.startSpinner();
	                _context8.next = 5;
	                return this.createTrack(config);

	              case 5:
	                newTrack = _context8.sent;

	                if (!(undefined === newTrack)) {
	                  _context8.next = 9;
	                  break;
	                }

	                Alert.presentAlert(new Error("Unknown file type: ".concat(config.url || config)), undefined);
	                return _context8.abrupt("return", newTrack);

	              case 9:
	                // Set order field of track here.  Otherwise track order might get shuffled during asynchronous load
	                if (undefined === newTrack.order) {
	                  newTrack.order = this.trackViews.length;
	                }

	                if (!(typeof newTrack.postInit === 'function')) {
	                  _context8.next = 13;
	                  break;
	                }

	                _context8.next = 13;
	                return newTrack.postInit();

	              case 13:
	                if (!config.sync) {
	                  _context8.next = 18;
	                  break;
	                }

	                _context8.next = 16;
	                return this.addTrack(newTrack);

	              case 16:
	                _context8.next = 19;
	                break;

	              case 18:
	                this.addTrack(newTrack);

	              case 19:
	                return _context8.abrupt("return", newTrack);

	              case 22:
	                _context8.prev = 22;
	                _context8.t0 = _context8["catch"](1);
	                httpMessages = {
	                  "401": "Access unauthorized",
	                  "403": "Access forbidden",
	                  "404": "Not found"
	                };
	                console.error(_context8.t0);
	                msg = _context8.t0.message || _context8.t0.error || _context8.t0.toString();

	                if (httpMessages.hasOwnProperty(msg)) {
	                  msg = httpMessages[msg];
	                }

	                msg += ": " + config.url;
	                Alert.presentAlert(new Error(msg), undefined);

	              case 30:
	                _context8.prev = 30;

	                if (!noSpinner) {
	                  this.stopSpinner();
	                }

	                return _context8.finish(30);

	              case 33:
	              case "end":
	                return _context8.stop();
	            }
	          }
	        }, _callee8, this, [[1, 22, 30, 33]]);
	      }));

	      function loadTrack(_x10, _x11) {
	        return _loadTrack.apply(this, arguments);
	      }

	      return loadTrack;
	    }()
	  }, {
	    key: "createTrack",
	    value: function () {
	      var _createTrack = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(config) {
	        var url, filename, type, featureSource, trackType, settings, property, track, _iterator9, _step9, r;

	        return regeneratorRuntime.wrap(function _callee9$(_context9) {
	          while (1) {
	            switch (_context9.prev = _context9.next) {
	              case 0:
	                _context9.next = 2;
	                return resolveURL(config.url);

	              case 2:
	                url = _context9.sent;

	                if (isString(url)) {
	                  url = url.trim();
	                }

	                if (!url) {
	                  _context9.next = 15;
	                  break;
	                }

	                if (!config.format) {
	                  _context9.next = 9;
	                  break;
	                }

	                config.format = config.format.toLowerCase();
	                _context9.next = 15;
	                break;

	              case 9:
	                filename = config.filename;

	                if (filename) {
	                  _context9.next = 14;
	                  break;
	                }

	                _context9.next = 13;
	                return getFilename$1(url);

	              case 13:
	                filename = _context9.sent;

	              case 14:
	                config.format = inferFileFormat(filename);

	              case 15:
	                type = config.type;

	                if (!(type && "bedtype" !== type)) {
	                  _context9.next = 20;
	                  break;
	                }

	                type = type.toLowerCase();
	                _context9.next = 29;
	                break;

	              case 20:
	                type = inferTrackType(config);

	                if (!("bedtype" === type)) {
	                  _context9.next = 29;
	                  break;
	                }

	                // Bed files must be read to determine track type
	                featureSource = FeatureSource(config, this.genome);
	                config._featureSource = featureSource; // This is a temp variable, bit of a hack

	                _context9.next = 26;
	                return featureSource.trackType();

	              case 26:
	                trackType = _context9.sent;

	                if (trackType) {
	                  type = trackType;
	                } else {
	                  type = "annotation";
	                } // Record in config to make type persistent in session


	                config.type = type;

	              case 29:
	                // Set defaults if specified
	                if (this.trackDefaults && type) {
	                  settings = this.trackDefaults[type];

	                  if (settings) {
	                    for (property in settings) {
	                      if (settings.hasOwnProperty(property) && config[property] === undefined) {
	                        config[property] = settings[property];
	                      }
	                    }
	                  }
	                }

	                _context9.t0 = type;
	                _context9.next = _context9.t0 === "annotation" ? 33 : _context9.t0 === "genes" ? 33 : _context9.t0 === "fusionjuncspan" ? 33 : _context9.t0 === "junctions" ? 33 : _context9.t0 === "splicejunctions" ? 33 : _context9.t0 === "snp" ? 33 : 35;
	                break;

	              case 33:
	                track = TrackFactory.getTrack("feature")(config, this);
	                return _context9.abrupt("break", 36);

	              case 35:
	                if (TrackFactory.tracks.hasOwnProperty(type)) {
	                  track = TrackFactory.getTrack(type)(config, this);
	                } else {
	                  track = undefined;
	                }

	              case 36:
	                if (config.roi && track) {
	                  track.roi = [];
	                  _iterator9 = _createForOfIteratorHelper(config.roi);

	                  try {
	                    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
	                      r = _step9.value;
	                      track.roi.push(new ROI(r, this.genome));
	                    }
	                  } catch (err) {
	                    _iterator9.e(err);
	                  } finally {
	                    _iterator9.f();
	                  }
	                }

	                return _context9.abrupt("return", track);

	              case 38:
	              case "end":
	                return _context9.stop();
	            }
	          }
	        }, _callee9, this);
	      }));

	      function createTrack(_x12) {
	        return _createTrack.apply(this, arguments);
	      }

	      return createTrack;
	    }()
	    /**
	     * Add a new track.  Each track is associated with the following DOM elements
	     *
	     *      leftHandGutter  - div on the left for track controls and legend
	     *      contentDiv  - a div element wrapping all the track content.  Height can be > viewportDiv height
	     *      viewportDiv - a div element through which the track is viewed.  This might have a vertical scrollbar
	     *      canvas     - canvas element upon which the track is drawn.  Child of contentDiv
	     *
	     * The width of all elements should be equal.  Height of the viewportDiv is controlled by the user, but never
	     * greater than the contentDiv height.   Height of contentDiv and canvas are equal, and governed by the data
	     * loaded.
	     *
	     * @param track
	     */

	  }, {
	    key: "addTrack",
	    value: function () {
	      var _addTrack = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(track) {
	        var trackView;
	        return regeneratorRuntime.wrap(function _callee10$(_context10) {
	          while (1) {
	            switch (_context10.prev = _context10.next) {
	              case 0:
	                trackView = new TrackView(this, $(this.trackContainer), track);
	                this.trackViews.push(trackView);
	                toggleTrackLabels(this.trackViews, this.trackLabelsVisible);
	                this.reorderTracks();

	                if (track.autoscaleGroup) {
	                  _context10.next = 6;
	                  break;
	                }

	                return _context10.abrupt("return", trackView.updateViews());

	              case 6:
	              case "end":
	                return _context10.stop();
	            }
	          }
	        }, _callee10, this);
	      }));

	      function addTrack(_x13) {
	        return _addTrack.apply(this, arguments);
	      }

	      return addTrack;
	    }()
	  }, {
	    key: "reorderTracks",
	    value: function reorderTracks() {
	      this.trackViews.sort(function (a, b) {
	        var firstSortOrder = function firstSortOrder(tv) {
	          return 'ideogram' === tv.track.id ? 1 : 'ruler' === tv.track.id ? 2 : 3;
	        };

	        var aOrder1 = firstSortOrder(a);
	        var bOrder1 = firstSortOrder(b);

	        if (aOrder1 === bOrder1) {
	          var aOrder2 = a.track.order || 0;
	          var bOrder2 = b.track.order || 0;
	          return aOrder2 - bOrder2;
	        } else {
	          return aOrder1 - bOrder1;
	        }
	      }); // Reattach the divs to the dom in the correct order

	      $(this.trackContainer).children("igv-track").detach();

	      var _iterator10 = _createForOfIteratorHelper(this.trackViews),
	          _step10;

	      try {
	        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
	          var trackView = _step10.value;
	          this.trackContainer.appendChild(trackView.trackDiv);
	        }
	      } catch (err) {
	        _iterator10.e(err);
	      } finally {
	        _iterator10.f();
	      }
	    }
	  }, {
	    key: "removeTrackByName",
	    value: function removeTrackByName(name) {
	      var copy = this.trackViews.slice();

	      var _iterator11 = _createForOfIteratorHelper(copy),
	          _step11;

	      try {
	        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
	          var trackView = _step11.value;

	          if (name === trackView.track.name) {
	            this.removeTrack(trackView.track);
	          }
	        }
	      } catch (err) {
	        _iterator11.e(err);
	      } finally {
	        _iterator11.f();
	      }
	    }
	  }, {
	    key: "removeTrack",
	    value: function removeTrack(track) {
	      // Find track panel
	      var trackPanelRemoved;

	      for (var i = 0; i < this.trackViews.length; i++) {
	        if (track === this.trackViews[i].track) {
	          trackPanelRemoved = this.trackViews[i];
	          break;
	        }
	      }

	      if (trackPanelRemoved) {
	        this.trackViews.splice(i, 1);
	        $(trackPanelRemoved.trackDiv).remove();
	        this.fireEvent('trackremoved', [trackPanelRemoved.track]);
	        trackPanelRemoved.dispose();
	      }
	    }
	  }, {
	    key: "removeAllTracks",

	    /**
	     * API function
	     */
	    value: function removeAllTracks() {
	      var newTrackViews = [];

	      var _iterator12 = _createForOfIteratorHelper(this.trackViews),
	          _step12;

	      try {
	        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
	          var trackView = _step12.value;
	          var trackId = trackView.track.id;

	          if (trackId !== 'ruler' && trackId !== 'ideogram') {
	            this.trackContainer.removeChild(trackView.trackDiv);
	            this.fireEvent('trackremoved', [trackView.track]);
	            trackView.dispose();
	          } else {
	            newTrackViews.push(trackView);
	          }
	        }
	      } catch (err) {
	        _iterator12.e(err);
	      } finally {
	        _iterator12.f();
	      }

	      this.trackViews = newTrackViews;
	    }
	    /**
	     *
	     * @param property
	     * @param value
	     * @returns {Array}  tracks with given property value.  e.g. findTracks("type", "annotation")
	     */

	  }, {
	    key: "findTracks",
	    value: function findTracks(property, value) {
	      var f = typeof property === 'function' ? function (trackView) {
	        return property(trackView.track);
	      } : function (trackView) {
	        return value === trackView.track[property];
	      };
	      return this.trackViews.filter(f).map(function (tv) {
	        return tv.track;
	      });
	    }
	  }, {
	    key: "setTrackHeight",
	    value: function setTrackHeight(newHeight) {
	      this.trackHeight = newHeight;
	      this.trackViews.forEach(function (trackView) {
	        trackView.setTrackHeight(newHeight);
	      });
	    }
	  }, {
	    key: "visibilityChange",
	    value: function () {
	      var _visibilityChange = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
	        var status, viewportWidth, _iterator13, _step13, referenceFrame, isWGV;

	        return regeneratorRuntime.wrap(function _callee11$(_context11) {
	          while (1) {
	            switch (_context11.prev = _context11.next) {
	              case 0:
	                status = this.referenceFrameList.find(function (referenceFrame) {
	                  return referenceFrame.bpPerPixel < 0;
	                });

	                if (status) {
	                  viewportWidth = this.calculateViewportWidth(this.referenceFrameList.length);
	                  _iterator13 = _createForOfIteratorHelper(this.referenceFrameList);

	                  try {
	                    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
	                      referenceFrame = _step13.value;
	                      referenceFrame.bpPerPixel = (referenceFrame.initialEnd - referenceFrame.start) / viewportWidth;
	                    }
	                  } catch (err) {
	                    _iterator13.e(err);
	                  } finally {
	                    _iterator13.f();
	                  }
	                }

	                if (this.referenceFrameList) {
	                  isWGV = this.isMultiLocusWholeGenomeView() || GenomeUtils.isWholeGenomeView(this.referenceFrameList[0].chr);

	                  if (isWGV || this.isMultiLocusMode()) {
	                    this.centerGuide.forcedHide();
	                  } else {
	                    this.centerGuide.forcedShow();
	                  }

	                  this.navbarManager.navbarDidResize(this.$navigation.width(), isWGV);
	                }

	                _context11.next = 5;
	                return this.resize();

	              case 5:
	              case "end":
	                return _context11.stop();
	            }
	          }
	        }, _callee11, this);
	      }));

	      function visibilityChange() {
	        return _visibilityChange.apply(this, arguments);
	      }

	      return visibilityChange;
	    }()
	  }, {
	    key: "resize",
	    value: function () {
	      var _resize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
	        var _iterator14, _step14, trackView, _iterator15, _step15, _step15$value, viewports, $viewportContainer;

	        return regeneratorRuntime.wrap(function _callee12$(_context12) {
	          while (1) {
	            switch (_context12.prev = _context12.next) {
	              case 0:
	                if (this.centerGuide) this.centerGuide.resize();
	                _iterator14 = _createForOfIteratorHelper(this.trackViews);

	                try {
	                  for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
	                    trackView = _step14.value;
	                    trackView.resize();
	                  }
	                } catch (err) {
	                  _iterator14.e(err);
	                } finally {
	                  _iterator14.f();
	                }

	                if (this.referenceFrameList && this.referenceFrameList.length > 0) {
	                  this.updateLocusSearchWidget(this.referenceFrameList[0]);
	                  this.windowSizePanel.updateWithReferenceFrame(this.referenceFrameList[0]);
	                }

	                _context12.next = 6;
	                return this.updateViews();

	              case 6:
	                _iterator15 = _createForOfIteratorHelper(this.trackViews);

	                try {
	                  for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
	                    _step15$value = _step15.value, viewports = _step15$value.viewports, $viewportContainer = _step15$value.$viewportContainer;
	                    updateViewportShims(viewports, $viewportContainer);
	                  }
	                } catch (err) {
	                  _iterator15.e(err);
	                } finally {
	                  _iterator15.f();
	                }

	              case 8:
	              case "end":
	                return _context12.stop();
	            }
	          }
	        }, _callee12, this);
	      }));

	      function resize() {
	        return _resize.apply(this, arguments);
	      }

	      return resize;
	    }()
	  }, {
	    key: "updateViews",
	    value: function () {
	      var _updateViews = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(referenceFrame, views, force) {
	        var _iterator16, _step16, trackView, groupAutoscaleTracks, otherTracks, _iterator17, _step17, _trackView4, _group, l, keys, _i3, _keys, group, groupTrackViews, promises, _iterator18, _step18, _trackView, featureArray, allFeatures, dataRange, _iterator19, _step19, features, _iterator20, _step20, _trackView2, _i4, _otherTracks, _trackView3;

	        return regeneratorRuntime.wrap(function _callee13$(_context13) {
	          while (1) {
	            switch (_context13.prev = _context13.next) {
	              case 0:
	                if (!views) {
	                  views = this.trackViews;
	                }

	                if (!referenceFrame && this.referenceFrameList && 1 === this.referenceFrameList.length) {
	                  referenceFrame = this.referenceFrameList[0];
	                }

	                if (referenceFrame) {
	                  this.updateLocusSearchWidget(referenceFrame);
	                  this.windowSizePanel.updateWithReferenceFrame(referenceFrame);
	                }

	                if (this.centerGuide) {
	                  this.centerGuide.repaint();
	                } // Don't autoscale while dragging.


	                if (!this.dragObject) {
	                  _context13.next = 24;
	                  break;
	                }

	                _iterator16 = _createForOfIteratorHelper(views);
	                _context13.prev = 6;

	                _iterator16.s();

	              case 8:
	                if ((_step16 = _iterator16.n()).done) {
	                  _context13.next = 14;
	                  break;
	                }

	                trackView = _step16.value;
	                _context13.next = 12;
	                return trackView.updateViews(force);

	              case 12:
	                _context13.next = 8;
	                break;

	              case 14:
	                _context13.next = 19;
	                break;

	              case 16:
	                _context13.prev = 16;
	                _context13.t0 = _context13["catch"](6);

	                _iterator16.e(_context13.t0);

	              case 19:
	                _context13.prev = 19;

	                _iterator16.f();

	                return _context13.finish(19);

	              case 22:
	                _context13.next = 73;
	                break;

	              case 24:
	                // Group autoscale
	                groupAutoscaleTracks = {};
	                otherTracks = [];
	                _iterator17 = _createForOfIteratorHelper(views);

	                try {
	                  for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
	                    _trackView4 = _step17.value;
	                    _group = _trackView4.track.autoscaleGroup;

	                    if (_group) {
	                      l = groupAutoscaleTracks[_group];

	                      if (!l) {
	                        l = [];
	                        groupAutoscaleTracks[_group] = l;
	                      }

	                      l.push(_trackView4);
	                    } else {
	                      otherTracks.push(_trackView4);
	                    }
	                  }
	                } catch (err) {
	                  _iterator17.e(err);
	                } finally {
	                  _iterator17.f();
	                }

	                keys = Object.keys(groupAutoscaleTracks);
	                _i3 = 0, _keys = keys;

	              case 30:
	                if (!(_i3 < _keys.length)) {
	                  _context13.next = 65;
	                  break;
	                }

	                group = _keys[_i3];
	                groupTrackViews = groupAutoscaleTracks[group];
	                promises = [];
	                _iterator18 = _createForOfIteratorHelper(groupTrackViews);

	                try {
	                  for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
	                    _trackView = _step18.value;
	                    promises.push(_trackView.getInViewFeatures());
	                  }
	                } catch (err) {
	                  _iterator18.e(err);
	                } finally {
	                  _iterator18.f();
	                }

	                _context13.next = 38;
	                return Promise.all(promises);

	              case 38:
	                featureArray = _context13.sent;
	                allFeatures = [];
	                _iterator19 = _createForOfIteratorHelper(featureArray);

	                try {
	                  for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
	                    features = _step19.value;
	                    allFeatures = allFeatures.concat(features);
	                  }
	                } catch (err) {
	                  _iterator19.e(err);
	                } finally {
	                  _iterator19.f();
	                }

	                if (typeof groupTrackViews[0].track.doAutoscale === 'function') {
	                  dataRange = groupTrackViews[0].track.doAutoscale(allFeatures);
	                } else {
	                  dataRange = doAutoscale(allFeatures);
	                }

	                _iterator20 = _createForOfIteratorHelper(groupTrackViews);
	                _context13.prev = 44;

	                _iterator20.s();

	              case 46:
	                if ((_step20 = _iterator20.n()).done) {
	                  _context13.next = 54;
	                  break;
	                }

	                _trackView2 = _step20.value;
	                _trackView2.track.dataRange = dataRange;
	                _trackView2.track.autoscale = false;
	                _context13.next = 52;
	                return _trackView2.updateViews(force);

	              case 52:
	                _context13.next = 46;
	                break;

	              case 54:
	                _context13.next = 59;
	                break;

	              case 56:
	                _context13.prev = 56;
	                _context13.t1 = _context13["catch"](44);

	                _iterator20.e(_context13.t1);

	              case 59:
	                _context13.prev = 59;

	                _iterator20.f();

	                return _context13.finish(59);

	              case 62:
	                _i3++;
	                _context13.next = 30;
	                break;

	              case 65:
	                _i4 = 0, _otherTracks = otherTracks;

	              case 66:
	                if (!(_i4 < _otherTracks.length)) {
	                  _context13.next = 73;
	                  break;
	                }

	                _trackView3 = _otherTracks[_i4];
	                _context13.next = 70;
	                return _trackView3.updateViews(force);

	              case 70:
	                _i4++;
	                _context13.next = 66;
	                break;

	              case 73:
	              case "end":
	                return _context13.stop();
	            }
	          }
	        }, _callee13, this, [[6, 16, 19, 22], [44, 56, 59, 62]]);
	      }));

	      function updateViews(_x14, _x15, _x16) {
	        return _updateViews.apply(this, arguments);
	      }

	      return updateViews;
	    }()
	  }, {
	    key: "loadInProgress",
	    value: function loadInProgress() {
	      var i;

	      for (i = 0; i < this.trackViews.length; i++) {
	        if (this.trackViews[i].isLoading()) return true;
	      }

	      return false;
	    }
	  }, {
	    key: "updateLocusSearchWidget",
	    value: function updateLocusSearchWidget(referenceFrame) {
	      var self = this,
	          ss,
	          ee,
	          str,
	          end,
	          chromosome;

	      if (this.rulerTrack) {
	        this.rulerTrack.updateLocusLabel();
	      }

	      if (0 === this.referenceFrameList.indexOf(referenceFrame) && 1 === this.referenceFrameList.length) {
	        if (referenceFrame.locusSearchString && 'all' === referenceFrame.locusSearchString.toLowerCase()) {
	          this.$searchInput.val(referenceFrame.locusSearchString);
	          this.chromosomeSelectWidget.$select.val('all');
	        } else {
	          this.chromosomeSelectWidget.$select.val(referenceFrame.chr);

	          if (this.$searchInput) {
	            end = referenceFrame.start + referenceFrame.bpPerPixel * self.viewportWidth();

	            if (this.genome) {
	              chromosome = this.genome.getChromosome(referenceFrame.chr);

	              if (chromosome) {
	                end = Math.min(end, chromosome.bpLength);
	              }
	            }

	            ss = numberFormatter(Math.floor(referenceFrame.start + 1));
	            ee = numberFormatter(Math.floor(end));
	            str = referenceFrame.chr + ":" + ss + "-" + ee;
	            this.$searchInput.val(str);
	          }

	          this.fireEvent('locuschange', [{
	            chr: referenceFrame.chr,
	            start: ss,
	            end: ee,
	            label: str
	          }]);
	        }
	      } else {
	        this.$searchInput.val('');
	        this.chromosomeSelectWidget.$select.val('');
	      }
	    }
	  }, {
	    key: "viewportContainerWidth",

	    /**
	     * Return the visible width of a track.  All tracks should have the same width.
	     */
	    value: function viewportContainerWidth() {
	      var ww;

	      if (this.trackViews && this.trackViews.length > 0) {
	        ww = this.trackViews[0].$viewportContainer.width();
	      } else {
	        var _this$trackContainer$2 = this.trackContainer.getBoundingClientRect(),
	            width = _this$trackContainer$2.width;

	        ww = width - viewportContainerShimWidth;
	      }

	      return ww;
	    }
	  }, {
	    key: "calculateViewportWidth",
	    value: function calculateViewportWidth(referenceFrameListLength) {
	      if (1 === referenceFrameListLength) {
	        return this.viewportContainerWidth();
	      } else {
	        return Math.floor((this.viewportContainerWidth() - (referenceFrameListLength - 1) * multiLocusGapWidth) / referenceFrameListLength);
	      }
	    }
	  }, {
	    key: "viewportWidth",
	    value: function viewportWidth() {
	      return this.trackViews[0].viewports[0].$viewport.width();
	    }
	  }, {
	    key: "minimumBases",
	    value: function minimumBases() {
	      return this.config.minimumBases;
	    }
	  }, {
	    key: "updateZoomSlider",
	    value: function updateZoomSlider($slider) {
	      var viewport = this.trackViews[0].viewports[0];
	      var referenceFrame = viewport.referenceFrame;
	      var window = viewport.$viewport.width() * referenceFrame.bpPerPixel;
	      var maxWindow = referenceFrame.getChromosome().bpLength;
	      var minWindow = this.minimumBases();
	      var v = (maxWindow - window) / (maxWindow - minWindow);
	      var value = Math.round(100 * v);
	      $slider.val(value);
	    }
	  }, {
	    key: "zoom",
	    value: function zoom(scaleFactor) {
	      this.zoomWithScaleFactor(scaleFactor);
	    }
	  }, {
	    key: "zoomIn",
	    // Zoom in by a factor of 2, keeping the same center location
	    value: function zoomIn() {
	      this.zoomWithScaleFactor(0.5);
	    }
	  }, {
	    key: "zoomOut",
	    // Zoom out by a factor of 2, keeping the same center location if possible
	    value: function zoomOut() {
	      this.zoomWithScaleFactor(2.0);
	    }
	  }, {
	    key: "zoomWithRangePercentage",
	    value: function zoomWithRangePercentage(percentage) {
	      if (this.loadInProgress()) {
	        return;
	      }

	      var viewports = this.trackViews[0].viewports;

	      var _iterator21 = _createForOfIteratorHelper(viewports),
	          _step21;

	      try {
	        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
	          var viewport = _step21.value;
	          var referenceFrame = viewport.referenceFrame;
	          var centerBP = referenceFrame.start + referenceFrame.toBP(viewport.$viewport.width() / 2.0);
	          var chromosome = referenceFrame.getChromosome();
	          var bpp = lerp((chromosome.bpLength - chromosome.bpStart) / viewport.$viewport.width(), this.minimumBases() / viewport.$viewport.width(), percentage);
	          var viewportWidthBP = bpp * viewport.$viewport.width();
	          referenceFrame.start = centerBP - viewportWidthBP / 2;
	          referenceFrame.bpPerPixel = bpp;
	          referenceFrame.clamp(viewport.$viewport.width());
	          this.updateViews(viewport.referenceFrame);

	          function lerp(v0, v1, t) {
	            return (1 - t) * v0 + t * v1;
	          }
	        }
	      } catch (err) {
	        _iterator21.e(err);
	      } finally {
	        _iterator21.f();
	      }
	    }
	  }, {
	    key: "zoomWithScaleFactor",
	    value: function zoomWithScaleFactor(scaleFactor, centerBPOrUndefined, viewportOrUndefined) {
	      var viewports = viewportOrUndefined ? [viewportOrUndefined] : this.trackViews[0].viewports;

	      var _iterator22 = _createForOfIteratorHelper(viewports),
	          _step22;

	      try {
	        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
	          var viewport = _step22.value;
	          var referenceFrame = viewport.referenceFrame;
	          var chromosome = referenceFrame.getChromosome();
	          var start = referenceFrame.start;
	          var bpPerPixel = referenceFrame.bpPerPixel;
	          var chromosomeLengthBP = chromosome.bpLength - chromosome.bpStart;
	          var bppThreshold = scaleFactor < 1.0 ? this.minimumBases() / viewport.$viewport.width() : chromosomeLengthBP / viewport.$viewport.width();
	          var centerBP = undefined === centerBPOrUndefined ? referenceFrame.start + referenceFrame.toBP(viewport.$viewport.width() / 2.0) : centerBPOrUndefined;
	          var bpp = void 0;

	          if (scaleFactor < 1.0) {
	            bpp = Math.max(referenceFrame.bpPerPixel * scaleFactor, bppThreshold);
	          } else {
	            bpp = Math.min(referenceFrame.bpPerPixel * scaleFactor, bppThreshold);
	          }

	          var viewportWidthBP = bpp * viewport.$viewport.width();
	          referenceFrame.start = centerBP - viewportWidthBP / 2;
	          referenceFrame.bpPerPixel = bpp;
	          referenceFrame.clamp(viewport.$viewport.width());
	          var viewChanged = start !== referenceFrame.start || bpPerPixel !== referenceFrame.bpPerPixel;

	          if (viewChanged) {
	            this.updateViews(viewport.referenceFrame);
	          }
	        }
	      } catch (err) {
	        _iterator22.e(err);
	      } finally {
	        _iterator22.f();
	      }
	    }
	  }, {
	    key: "presentSplitScreenMultiLocusPanel",
	    value: function presentSplitScreenMultiLocusPanel(alignment, leftMatePairReferenceFrame) {
	      // account for reduced viewport width as a result of adding right mate pair panel
	      var viewportWidth = this.calculateViewportWidth(1 + this.referenceFrameList.length);
	      adjustReferenceFrame(leftMatePairReferenceFrame, viewportWidth, alignment.start, alignment.lengthOnRef); // create right mate pair reference frame

	      var mateChrName = this.genome.getChromosomeName(alignment.mate.chr);
	      var rightMatePairReferenceFrame = createReferenceFrameWithAlignment(this.genome, mateChrName, leftMatePairReferenceFrame.bpPerPixel, viewportWidth, alignment.mate.position, alignment.lengthOnRef); // add right mate panel beside left mate panel

	      this.addMultiLocusPanelWithReferenceFrameIndex(rightMatePairReferenceFrame, 1 + this.referenceFrameList.indexOf(leftMatePairReferenceFrame), viewportWidth);
	    }
	  }, {
	    key: "selectMultiLocusPanelWithReferenceFrame",
	    value: function selectMultiLocusPanelWithReferenceFrame(referenceFrame) {
	      var _this = this;

	      var removable = this.referenceFrameList.filter(function (r) {
	        return referenceFrame !== r;
	      });
	      removable.forEach(function (r) {
	        return _this.removeMultiLocusPanelWithReferenceFrame(r, false);
	      });
	      this.resize();
	    }
	  }, {
	    key: "removeMultiLocusPanelWithReferenceFrame",
	    value: function removeMultiLocusPanelWithReferenceFrame(referenceFrame, doResize) {
	      var _iterator23 = _createForOfIteratorHelper(this.trackViews),
	          _step23;

	      try {
	        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
	          var trackView = _step23.value;
	          trackView.removeViewportForReferenceFrame(referenceFrame);
	        }
	      } catch (err) {
	        _iterator23.e(err);
	      } finally {
	        _iterator23.f();
	      }

	      var index = this.referenceFrameList.indexOf(referenceFrame);
	      this.referenceFrameList.splice(index, 1);
	      this.updateUIWithReferenceFrameListChange(this.referenceFrameList);

	      if (true === doResize) {
	        this.resize();
	      } else {
	        var _iterator24 = _createForOfIteratorHelper(this.trackViews),
	            _step24;

	        try {
	          for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
	            var _step24$value = _step24.value,
	                viewports = _step24$value.viewports,
	                $viewportContainer = _step24$value.$viewportContainer;
	            updateViewportShims(viewports, $viewportContainer);
	          }
	        } catch (err) {
	          _iterator24.e(err);
	        } finally {
	          _iterator24.f();
	        }
	      }
	    }
	  }, {
	    key: "addMultiLocusPanelWithReferenceFrameIndex",
	    value: function addMultiLocusPanelWithReferenceFrameIndex(referenceFrame, index, viewportWidth) {
	      if (index === this.referenceFrameList.length) {
	        this.referenceFrameList.push(referenceFrame);

	        var _iterator25 = _createForOfIteratorHelper(this.trackViews),
	            _step25;

	        try {
	          for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
	            var trackView = _step25.value;
	            var viewport = createViewport(trackView, this.referenceFrameList, index, viewportWidth);
	            trackView.viewports.push(viewport);
	          }
	        } catch (err) {
	          _iterator25.e(err);
	        } finally {
	          _iterator25.f();
	        }
	      } else {
	        this.referenceFrameList.splice(index, 0, referenceFrame);

	        var _iterator26 = _createForOfIteratorHelper(this.trackViews),
	            _step26;

	        try {
	          for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
	            var _trackView5 = _step26.value;

	            var _viewport = createViewport(_trackView5, this.referenceFrameList, index, viewportWidth);

	            _trackView5.viewports.splice(index, 0, _viewport); // The viewport constructor always appends. Reorder here.


	            var $detached = _viewport.$viewport.detach();

	            $detached.insertAfter(_trackView5.viewports[index - 1].$viewport);
	          }
	        } catch (err) {
	          _iterator26.e(err);
	        } finally {
	          _iterator26.f();
	        }
	      }

	      var _iterator27 = _createForOfIteratorHelper(this.trackViews),
	          _step27;

	      try {
	        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
	          var _trackView6 = _step27.value;

	          _trackView6.updateViewportForMultiLocus(); // trackView.attachScrollbar($(trackView.trackDiv), trackView.$viewportContainer, trackView.viewports);

	        }
	      } catch (err) {
	        _iterator27.e(err);
	      } finally {
	        _iterator27.f();
	      }

	      if (this.rulerTrack) {
	        this.rulerTrack.updateLocusLabel();
	      }

	      this.updateUIWithReferenceFrameListChange(this.referenceFrameList);
	      this.resize();
	    }
	  }, {
	    key: "getViewportWithGUID",
	    value: function getViewportWithGUID(guid) {
	      var result = undefined;

	      var _iterator28 = _createForOfIteratorHelper(this.trackViews),
	          _step28;

	      try {
	        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
	          var trackView = _step28.value;

	          var _iterator29 = _createForOfIteratorHelper(trackView.viewports),
	              _step29;

	          try {
	            for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
	              var viewport = _step29.value;

	              if (guid === viewport.guid) {
	                result = viewport;
	              }
	            }
	          } catch (err) {
	            _iterator29.e(err);
	          } finally {
	            _iterator29.f();
	          }
	        }
	      } catch (err) {
	        _iterator28.e(err);
	      } finally {
	        _iterator28.f();
	      }

	      return result;
	    }
	  }, {
	    key: "goto",

	    /**
	     * @deprecated  This is a deprecated method with no known usages.  To be removed in a future release.
	     */
	    value: function () {
	      var _goto = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(chr, start, end) {
	        return regeneratorRuntime.wrap(function _callee14$(_context14) {
	          while (1) {
	            switch (_context14.prev = _context14.next) {
	              case 0:
	                return _context14.abrupt("return", this.search(chr + ":" + start + "-" + end));

	              case 1:
	              case "end":
	                return _context14.stop();
	            }
	          }
	        }, _callee14, this);
	      }));

	      function goto(_x17, _x18, _x19) {
	        return _goto.apply(this, arguments);
	      }

	      return goto;
	    }()
	  }, {
	    key: "search",
	    value: function () {
	      var _search2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(string, init) {
	        var locusObjects, referenceFrameList, _iterator30, _step30, trackView;

	        return regeneratorRuntime.wrap(function _callee15$(_context15) {
	          while (1) {
	            switch (_context15.prev = _context15.next) {
	              case 0:
	                _context15.next = 2;
	                return search(this, string);

	              case 2:
	                locusObjects = _context15.sent;
	                _context15.t0 = locusObjects;

	                if (!_context15.t0) {
	                  _context15.next = 9;
	                  break;
	                }

	                _context15.next = 7;
	                return locusObjects;

	              case 7:
	                _context15.t1 = _context15.sent.length;
	                _context15.t0 = _context15.t1 > 0;

	              case 9:
	                if (!_context15.t0) {
	                  _context15.next = 20;
	                  break;
	                }

	                referenceFrameList = createReferenceFrameList(this, locusObjects);
	                this.referenceFrameList = referenceFrameList;
	                emptyViewportContainers(this.trackViews);
	                _iterator30 = _createForOfIteratorHelper(this.trackViews);

	                try {
	                  for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
	                    trackView = _step30.value;
	                    populateViewportContainer(this, referenceFrameList, trackView);
	                  }
	                } catch (err) {
	                  _iterator30.e(err);
	                } finally {
	                  _iterator30.f();
	                }

	                this.updateUIWithReferenceFrameListChange(referenceFrameList);

	                if (!init) {
	                  this.updateViews();
	                }

	                return _context15.abrupt("return", referenceFrameList);

	              case 20:
	                throw new Error("Unrecognized locus ".concat(string));

	              case 21:
	              case "end":
	                return _context15.stop();
	            }
	          }
	        }, _callee15, this);
	      }));

	      function search$1(_x20, _x21) {
	        return _search2.apply(this, arguments);
	      }

	      return search$1;
	    }()
	  }, {
	    key: "loadSampleInformation",
	    value: function () {
	      var _loadSampleInformation = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(url) {
	        var name, ext;
	        return regeneratorRuntime.wrap(function _callee16$(_context16) {
	          while (1) {
	            switch (_context16.prev = _context16.next) {
	              case 0:
	                name = url;

	                if (url instanceof File) {
	                  name = url.name;
	                }

	                ext = name.substr(name.lastIndexOf('.') + 1);

	                if (!(ext === 'fam')) {
	                  _context16.next = 7;
	                  break;
	                }

	                _context16.next = 6;
	                return loadPlinkFile(url);

	              case 6:
	                this.sampleInformation = _context16.sent;

	              case 7:
	              case "end":
	                return _context16.stop();
	            }
	          }
	        }, _callee16, this);
	      }));

	      function loadSampleInformation(_x22) {
	        return _loadSampleInformation.apply(this, arguments);
	      }

	      return loadSampleInformation;
	    }()
	  }, {
	    key: "on",
	    // EVENTS
	    value: function on(eventName, fn) {
	      if (!this.eventHandlers[eventName]) {
	        this.eventHandlers[eventName] = [];
	      }

	      this.eventHandlers[eventName].push(fn);
	    }
	  }, {
	    key: "un",

	    /**
	     * @deprecated use off()
	     * @param eventName
	     * @param fn
	     */
	    value: function un(eventName, fn) {
	      if (!this.eventHandlers[eventName]) {
	        return;
	      }

	      var callbackIndex = this.eventHandlers[eventName].indexOf(fn);

	      if (callbackIndex !== -1) {
	        this.eventHandlers[eventName].splice(callbackIndex, 1);
	      }
	    }
	  }, {
	    key: "off",
	    value: function off(eventName, fn) {
	      if (!eventName) {
	        this.eventHandlers = {}; // Remove all event handlers
	      } else if (!fn) {
	        this.eventHandlers[eventName] = []; // Remove all eventhandlers matching name
	      } else {
	        // Remove specific event handler
	        var callbackIndex = this.eventHandlers[eventName].indexOf(fn);

	        if (callbackIndex !== -1) {
	          this.eventHandlers[eventName].splice(callbackIndex, 1);
	        }
	      }
	    }
	  }, {
	    key: "fireEvent",
	    value: function fireEvent(eventName, args, thisObj) {
	      var scope,
	          results,
	          eventHandler = this.eventHandlers[eventName];

	      if (undefined === eventHandler || eventHandler.length === 0) {
	        return undefined;
	      }

	      scope = thisObj || window;
	      results = eventHandler.map(function (event) {
	        return event.apply(scope, args);
	      });
	      return results[0];
	    }
	  }, {
	    key: "dispose",
	    value: function dispose() {
	      $(window).off(this.namespace);
	      $(document).off(this.namespace);
	      this.eventHandlers = undefined;
	      this.trackViews.forEach(function (tv) {
	        tv.dispose();
	      });
	    }
	  }, {
	    key: "toJSON",
	    value: function toJSON() {
	      var json = {
	        "version": version$2()
	      };
	      json["reference"] = this.genome.toJSON();

	      if (isFilePath(json.reference.fastaURL)) {
	        throw new Error("Error. Sessions cannot include local file references ".concat(json.reference.fastaURL.name, "."));
	      } else if (isFilePath(json.reference.indexURL)) {
	        throw new Error("Error. Sessions cannot include local file references ".concat(json.reference.indexURL.name, "."));
	      } // Build locus array (multi-locus view).  Use the first track to extract the loci, any track could be used.


	      var locus = [];
	      var gtexSelections = {};
	      var anyTrackView = this.trackViews[0];

	      var _iterator31 = _createForOfIteratorHelper(anyTrackView.viewports),
	          _step31;

	      try {
	        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
	          var viewport = _step31.value;
	          var referenceFrame = viewport.referenceFrame;
	          var pixelWidth = viewport.$viewport[0].clientWidth;
	          var locusString = referenceFrame.presentLocus(pixelWidth);
	          locus.push(locusString);

	          if (referenceFrame.selection) {
	            var selection = {
	              gene: referenceFrame.selection.gene,
	              snp: referenceFrame.selection.snp
	            };
	            gtexSelections[locusString] = selection;
	          }
	        }
	      } catch (err) {
	        _iterator31.e(err);
	      } finally {
	        _iterator31.f();
	      }

	      json["locus"] = locus.length === 1 ? locus[0] : locus;
	      var gtexKeys = Object.getOwnPropertyNames(gtexSelections);

	      if (gtexKeys.length > 0) {
	        json["gtexSelections"] = gtexSelections;
	      }

	      var trackJson = [];
	      var errors = [];

	      var _iterator32 = _createForOfIteratorHelper(this.trackViews),
	          _step32;

	      try {
	        for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
	          var track = _step32.value.track;

	          try {
	            var config = void 0;

	            if (typeof track.getState === "function") {
	              config = track.getState();
	            } else {
	              config = track.config;
	            }

	            if (config) {
	              // null backpointer to browser
	              if (config.browser) {
	                delete config.browser;
	              }

	              config.order = track.order; //order++;

	              trackJson.push(config);
	            }
	          } catch (e) {
	            errors.push(e);
	          }
	        }
	      } catch (err) {
	        _iterator32.e(err);
	      } finally {
	        _iterator32.f();
	      }

	      if (errors.length > 0) {
	        var n = 1;
	        var message = 'Errors encountered saving session:';

	        var _iterator33 = _createForOfIteratorHelper(errors),
	            _step33;

	        try {
	          for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
	            var e = _step33.value;
	            message += " (".concat(n++, ") ").concat(e.toString(), ".");
	          }
	        } catch (err) {
	          _iterator33.e(err);
	        } finally {
	          _iterator33.f();
	        }

	        throw Error(message);
	      }

	      var locaTrackFiles = trackJson.filter(function (track) {
	        track.url && isFilePath(track.url);
	      });

	      if (locaTrackFiles.length > 0) {
	        throw new Error("Error. Sessions cannot include local file references.");
	      }

	      json["tracks"] = trackJson;
	      return json; // This is an object, not a json string
	    }
	  }, {
	    key: "compressedSession",
	    value: function compressedSession() {
	      var json = JSON.stringify(this.toJSON());
	      return compressString(json);
	    }
	  }, {
	    key: "sessionURL",
	    value: function sessionURL() {
	      var path = window.location.href.slice();
	      var idx = path.indexOf("?");
	      var surl = (idx > 0 ? path.substring(0, idx) : path) + "?sessionURL=blob:" + this.compressedSession();
	      return surl;
	    }
	  }, {
	    key: "currentLoci",
	    value: function currentLoci() {
	      var loci = [];
	      var anyTrackView = this.trackViews[0];

	      var _iterator34 = _createForOfIteratorHelper(anyTrackView.viewports),
	          _step34;

	      try {
	        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
	          var viewport = _step34.value;
	          var referenceFrame = viewport.referenceFrame;
	          var pixelWidth = viewport.$viewport[0].clientWidth;
	          var locusString = referenceFrame.presentLocus(pixelWidth);
	          loci.push(locusString);
	        }
	      } catch (err) {
	        _iterator34.e(err);
	      } finally {
	        _iterator34.f();
	      }

	      return loci;
	    }
	    /**
	     * Record a mouse click on a specific viewport.   This might be the start of a drag operation.   Dragging
	     * (panning) is handled here so that the mouse can move out of a specific viewport (e.g. stray into another
	     * track) without halting the drag.
	     *
	     * @param e
	     * @param viewport
	     */

	  }, {
	    key: "mouseDownOnViewport",
	    value: function mouseDownOnViewport(e, viewport) {
	      var coords;
	      coords = pageCoordinates$1(e);
	      this.vpMouseDown = {
	        viewport: viewport,
	        lastMouseX: coords.x,
	        mouseDownX: coords.x,
	        lastMouseY: coords.y,
	        mouseDownY: coords.y,
	        referenceFrame: viewport.referenceFrame
	      };
	    }
	  }, {
	    key: "cancelTrackPan",
	    value: function cancelTrackPan() {
	      var dragObject = this.dragObject;
	      this.dragObject = undefined;
	      this.isScrolling = false;
	      this.vpMouseDown = undefined;

	      if (dragObject && dragObject.viewport.referenceFrame.start !== dragObject.start) {
	        this.updateViews();
	        this.fireEvent('trackdragend');
	      }
	    }
	  }, {
	    key: "startTrackDrag",
	    value: function startTrackDrag(trackView) {
	      this.dragTrack = trackView;
	    }
	  }, {
	    key: "updateTrackDrag",
	    value: function updateTrackDrag(dragDestination) {
	      if (dragDestination && this.dragTrack) {
	        var dragged = this.dragTrack;
	        var indexDestination = this.trackViews.indexOf(dragDestination);
	        var indexDragged = this.trackViews.indexOf(dragged);
	        var trackViews = this.trackViews;
	        trackViews[indexDestination] = dragged;
	        trackViews[indexDragged] = dragDestination;
	        var newOrder = this.trackViews[indexDestination].track.order;
	        this.trackViews[indexDragged].track.order = newOrder;
	        var nTracks = trackViews.length;
	        var lastOrder = newOrder;

	        if (indexDestination < indexDragged) {
	          // Displace tracks below
	          for (var i = indexDestination + 1; i < nTracks; i++) {
	            var track = trackViews[i].track;

	            if (track.order <= lastOrder) {
	              track.order = Math.min(Number.MAX_SAFE_INTEGER, lastOrder + 1);
	              lastOrder = track.order;
	            } else {
	              break;
	            }
	          }
	        } else {
	          // Displace tracks above.  First track (index 0) is "ruler"
	          for (var _i5 = indexDestination - 1; _i5 > 0; _i5--) {
	            var _track = trackViews[_i5].track;

	            if (_track.order >= lastOrder) {
	              _track.order = Math.max(-Number.MAX_SAFE_INTEGER, lastOrder - 1);
	              lastOrder = _track.order;
	            } else {
	              break;
	            }
	          }
	        }

	        this.reorderTracks();
	      }
	    }
	  }, {
	    key: "endTrackDrag",
	    value: function endTrackDrag() {
	      if (this.dragTrack) {
	        this.dragTrack.$trackDragScrim.hide();
	      }

	      this.dragTrack = undefined;
	    }
	    /**
	     * Mouse handlers to support drag (pan)
	     */

	  }, {
	    key: "addMouseHandlers",
	    value: function addMouseHandlers() {
	      var _this2 = this;

	      var self = this;
	      $(window).on('resize' + this.namespace, function () {
	        _this2.resize();
	      });
	      $(this.root).on('mouseup', mouseUpOrLeave);
	      $(this.root).on('mouseleave', mouseUpOrLeave);
	      $(this.trackContainer).on('mousemove', handleMouseMove);
	      $(this.trackContainer).on('touchmove', handleMouseMove);
	      $(this.trackContainer).on('mouseleave', mouseUpOrLeave);
	      $(this.trackContainer).on('mouseup', mouseUpOrLeave);
	      $(this.trackContainer).on('touchend', mouseUpOrLeave);

	      function handleMouseMove(e) {
	        var coords, viewport, viewportWidth, referenceFrame;
	        e.preventDefault();

	        if (self.loadInProgress()) {
	          return;
	        }

	        coords = pageCoordinates$1(e);

	        if (self.vpMouseDown) {
	          // Determine direction,  true == horizontal
	          var horizontal = Math.abs(coords.x - self.vpMouseDown.mouseDownX) > Math.abs(coords.y - self.vpMouseDown.mouseDownY);
	          viewport = self.vpMouseDown.viewport;
	          viewportWidth = viewport.$viewport.width();
	          referenceFrame = viewport.referenceFrame;

	          if (!self.dragObject && !self.isScrolling) {
	            if (horizontal) {
	              if (self.vpMouseDown.mouseDownX && Math.abs(coords.x - self.vpMouseDown.mouseDownX) > self.constants.dragThreshold) {
	                self.dragObject = {
	                  viewport: viewport,
	                  start: referenceFrame.start
	                };
	              }
	            } else {
	              if (self.vpMouseDown.mouseDownY && Math.abs(coords.y - self.vpMouseDown.mouseDownY) > self.constants.scrollThreshold) {
	                self.isScrolling = true;
	                var trackView = viewport.trackView;
	                var viewportContainerHeight = trackView.$viewportContainer.height();
	                var contentHeight = maxViewportContentHeight(trackView.viewports);
	                self.vpMouseDown.r = viewportContainerHeight / contentHeight;
	              }
	            }
	          }

	          if (self.dragObject) {
	            var viewChanged = referenceFrame.shiftPixels(self.vpMouseDown.lastMouseX - coords.x, viewportWidth);

	            if (viewChanged) {
	              self.updateLocusSearchWidget(self.vpMouseDown.referenceFrame);
	              self.updateViews();
	            }

	            self.fireEvent('trackdrag');
	          }

	          if (self.isScrolling) {
	            var delta = self.vpMouseDown.r * (self.vpMouseDown.lastMouseY - coords.y);
	            self.vpMouseDown.viewport.trackView.scrollBy(delta);
	          }

	          self.vpMouseDown.lastMouseX = coords.x;
	          self.vpMouseDown.lastMouseY = coords.y;
	        }
	      }

	      function mouseUpOrLeave(e) {
	        self.cancelTrackPan();
	        self.endTrackDrag();
	      }
	    }
	  }, {
	    key: "getDriveFileInfo",
	    value: function () {
	      var _getDriveFileInfo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(googleDriveURL) {
	        var id, endPoint;
	        return regeneratorRuntime.wrap(function _callee17$(_context17) {
	          while (1) {
	            switch (_context17.prev = _context17.next) {
	              case 0:
	                id = getGoogleDriveFileID(googleDriveURL);
	                endPoint = "https://www.googleapis.com/drive/v3/files/" + id + "?supportsTeamDrives=true";
	                return _context17.abrupt("return", igvxhr.loadJson(endPoint, buildOptions({})));

	              case 3:
	              case "end":
	                return _context17.stop();
	            }
	          }
	        }, _callee17);
	      }));

	      function getDriveFileInfo(_x23) {
	        return _getDriveFileInfo.apply(this, arguments);
	      }

	      return getDriveFileInfo;
	    }()
	  }], [{
	    key: "uncompressSession",
	    value: function uncompressSession(url) {
	      var bytes;

	      if (url.indexOf('/gzip;base64') > 0) {
	        //Proper dataURI
	        bytes = decodeDataURI(url);
	        var json = '';

	        var _iterator35 = _createForOfIteratorHelper(bytes),
	            _step35;

	        try {
	          for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
	            var b = _step35.value;
	            json += String.fromCharCode(b);
	          }
	        } catch (err) {
	          _iterator35.e(err);
	        } finally {
	          _iterator35.f();
	        }

	        return json;
	      } else {
	        var enc = url.substring(5);
	        return uncompressString(enc);
	      }
	    }
	  }]);

	  return Browser;
	}();

	function toggleTrackLabels(trackViews, isVisible) {
	  var _iterator36 = _createForOfIteratorHelper(trackViews),
	      _step36;

	  try {
	    for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
	      var trackView = _step36.value;

	      var _iterator37 = _createForOfIteratorHelper(trackView.viewports),
	          _step37;

	      try {
	        for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
	          var viewport = _step37.value;

	          if (viewport.$trackLabel) {
	            if (0 === trackView.viewports.indexOf(viewport) && true === isVisible) {
	              viewport.$trackLabel.show();
	            } else {
	              viewport.$trackLabel.hide();
	            }
	          }
	        }
	      } catch (err) {
	        _iterator37.e(err);
	      } finally {
	        _iterator37.f();
	      }
	    }
	  } catch (err) {
	    _iterator36.e(err);
	  } finally {
	    _iterator36.f();
	  }
	}

	var WindowSizePanel = /*#__PURE__*/function () {
	  function WindowSizePanel($parent, browser) {
	    _classCallCheck(this, WindowSizePanel);

	    this.$container = $('<div>', {
	      class: 'igv-windowsize-panel-container'
	    });
	    $parent.append(this.$container);
	    this.browser = browser;
	  }

	  _createClass(WindowSizePanel, [{
	    key: "show",
	    value: function show() {
	      this.$container.show();
	    }
	  }, {
	    key: "hide",
	    value: function hide() {
	      this.$container.hide();
	    }
	  }, {
	    key: "updateWithReferenceFrame",
	    value: function updateWithReferenceFrame(referenceFrame) {
	      this.$container.text(prettyBasePairNumber(Math.round(this.browser.viewportWidth() * referenceFrame.bpPerPixel)));
	    }
	  }]);

	  return WindowSizePanel;
	}();

	function prettyBasePairNumber(raw) {
	  var denom, units, value, floored;

	  if (raw > 1e7) {
	    denom = 1e6;
	    units = " mb";
	  } else if (raw > 1e4) {
	    denom = 1e3;
	    units = " kb";
	    value = raw / denom;
	    floored = Math.floor(value);
	    return numberFormatter(floored) + units;
	  } else {
	    return numberFormatter(raw) + " bp";
	  }

	  value = raw / denom;
	  floored = Math.floor(value);
	  return floored.toString() + units;
	}

	var DataRangeDialog = /*#__PURE__*/function () {
	  function DataRangeDialog($parent, alert) {
	    var _this = this;

	    _classCallCheck(this, DataRangeDialog);

	    // dialog container
	    this.$container = $("<div>", {
	      class: 'igv-generic-dialog-container'
	    });
	    $parent.append(this.$container);
	    this.$container.offset({
	      left: 0,
	      top: 0
	    }); // dialog header

	    var $header = $("<div>", {
	      class: 'igv-generic-dialog-header'
	    });
	    this.$container.append($header);
	    attachDialogCloseHandlerWithParent$1($header[0], function () {
	      _this.$minimum_input.val(undefined);

	      _this.$maximum_input.val(undefined);

	      _this.$container.offset({
	        left: 0,
	        top: 0
	      });

	      _this.$container.hide();
	    }); // minimun

	    this.$minimum = $("<div>", {
	      class: 'igv-generic-dialog-label-input'
	    });
	    this.$container.append(this.$minimum);
	    var $mindiv = $('<div>');
	    $mindiv.text('Minimum');
	    this.$minimum.append($mindiv);
	    this.$minimum_input = $("<input>");
	    this.$minimum.append(this.$minimum_input); // maximum

	    this.$maximum = $("<div>", {
	      class: 'igv-generic-dialog-label-input'
	    });
	    this.$container.append(this.$maximum);
	    var $maxdiv = $('<div>');
	    $maxdiv.text('Maximum');
	    this.$maximum.append($maxdiv);
	    this.$maximum_input = $("<input>");
	    this.$maximum.append(this.$maximum_input); // ok | cancel

	    var $buttons = $("<div>", {
	      class: 'igv-generic-dialog-ok-cancel'
	    });
	    this.$container.append($buttons); // ok

	    this.$ok = $("<div>");
	    $buttons.append(this.$ok);
	    this.$ok.text('OK'); // cancel

	    this.$cancel = $("<div>");
	    $buttons.append(this.$cancel);
	    this.$cancel.text('Cancel');
	    this.$cancel.on('click', function () {
	      _this.$minimum_input.val(undefined);

	      _this.$maximum_input.val(undefined);

	      _this.$container.offset({
	        left: 0,
	        top: 0
	      });

	      _this.$container.hide();
	    }); //this.$container.draggable({ handle:$header.get(0) });

	    makeDraggable$1(this.$container.get(0), $header.get(0));
	    this.$container.hide();
	  }

	  _createClass(DataRangeDialog, [{
	    key: "configure",
	    value: function configure(config) {
	      var _this2 = this;

	      var dataRange = config.trackView.dataRange();
	      var min;
	      var max;

	      if (dataRange) {
	        min = dataRange.min;
	        max = dataRange.max;
	      } else {
	        min = 0;
	        max = 100;
	      }

	      this.$minimum_input.val(min);
	      this.$maximum_input.val(max);
	      this.$minimum_input.unbind();
	      this.$minimum_input.on('keyup', function (e) {
	        if (13 === e.keyCode) {
	          _this2.processResults(config);
	        }
	      });
	      this.$maximum_input.unbind();
	      this.$maximum_input.on('keyup', function (e) {
	        if (13 === e.keyCode) {
	          _this2.processResults(config);
	        }
	      });
	      this.$ok.unbind();
	      this.$ok.on('click', function (e) {
	        _this2.processResults(config);
	      });
	    }
	  }, {
	    key: "processResults",
	    value: function processResults(config) {
	      var min = parseFloat(this.$minimum_input.val());
	      var max = parseFloat(this.$maximum_input.val());

	      if (isNaN(min) || isNaN(max)) {
	        Alert.presentAlert(new Error('Must input numeric values'), undefined);
	      } else {
	        config.trackView.setDataRange(min, max);
	      }

	      this.$minimum_input.val(undefined);
	      this.$maximum_input.val(undefined);
	      this.$container.offset({
	        left: 0,
	        top: 0
	      });
	      this.$container.hide();
	    }
	  }, {
	    key: "present",
	    value: function present($parent) {
	      var offset_top = $parent.offset().top;
	      var scroll_top = $('body').scrollTop();
	      this.$container.offset({
	        left: $parent.width() - this.$container.width(),
	        top: offset_top + scroll_top
	      });
	      this.$container.show();
	    }
	  }]);

	  return DataRangeDialog;
	}();

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2014 Broad Institute
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var UserFeedback = function UserFeedback($parent) {
	  this.$container = $('<div class="igv-user-feedback">');
	  $parent.append(this.$container); // header

	  var $header = $('<div>');
	  this.$container.append($header); // alert

	  var $exclamation = $('<div>');
	  $header.append($exclamation);
	  var $a = createIcon$2("exclamation-triangle", 'red');
	  $exclamation.append($a); // dismiss

	  var $dismiss = $('<div>');
	  $header.append($dismiss);
	  var $b = createIcon$2("times-circle", 'grey');
	  $dismiss.append($b); // body copy

	  var $bodyCopyContainer = $('<div>');
	  this.$container.append($bodyCopyContainer);
	  var $bodyCopy = $('<div>');
	  $bodyCopyContainer.append($bodyCopy);
	  $bodyCopy.text('i am user feedback');
	  var self;
	  $dismiss.click(function () {
	    $bodyCopy.html('');
	    self.$container.hide();
	  });
	};

	UserFeedback.prototype.show = function () {
	  this.$container.show();
	};

	UserFeedback.prototype.hide = function () {
	  this.$container.hide();
	};

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2016 University of California San Diego
	 * Author: Jim Robinson
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var SVGSaveControl = function SVGSaveControl($parent, browser) {
	  var $button = $('<div class="igv-navbar-button">');
	  $parent.append($button);
	  $button.text('Save SVG');
	  $button.on('click.svg-save-control', function () {
	    // browser.renderSVG({ $container: $('#igv-svg-container') })
	    browser.saveSVGtoFile({});
	  });
	};

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2016 University of California San Diego
	 * Author: Jim Robinson
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var ZoomWidget = function ZoomWidget(browser, $parent) {
	  var $div;
	  this.$zoomContainer = $('<div class="igv-zoom-widget">');
	  $parent.append(this.$zoomContainer); // zoom out

	  $div = $('<div>');
	  this.$zoomContainer.append($div);
	  $div.append(createIcon$2("minus-circle"));
	  $div.on('click', function () {
	    browser.zoomOut();
	  }); // Range slider

	  $div = $('<div>');
	  this.$zoomContainer.append($div);
	  this.$slider = $('<input type="range"/>');
	  $div.append(this.$slider);
	  this.$slider.on('change', function (e) {
	    browser.zoomWithRangePercentage(e.target.value / 100.0);
	  }); // zoom in

	  $div = $('<div>');
	  this.$zoomContainer.append($div);
	  $div.append(createIcon$2("plus-circle"));
	  $div.on('click', function () {
	    browser.zoomIn();
	  });
	  this.currentChr = undefined;
	  var self = this;
	  browser.on('locuschange', function () {
	    browser.updateZoomSlider(self.$slider);
	  });
	};

	ZoomWidget.prototype.hide = function () {
	  this.$zoomContainer.hide();
	};

	ZoomWidget.prototype.show = function () {
	  this.$zoomContainer.show();
	};

	ZoomWidget.prototype.hideSlider = function () {
	  this.$slider.hide();
	};

	ZoomWidget.prototype.showSlider = function () {
	  this.$slider.show();
	};

	var ChromosomeSelectWidget = function ChromosomeSelectWidget(browser, $parent) {
	  this.showAllChromosomes = browser.config.showAllChromosomes !== false; // i.e. default to true

	  this.$container = $('<div>', {
	    class: 'igv-chromosome-select-widget-container'
	  });
	  $parent.append(this.$container);
	  this.$select = $('<select>', {
	    'name': 'chromosome-select-widget'
	  });
	  this.$container.append(this.$select);
	  this.$select.on('change', function () {
	    var value = $(this).val();

	    if (value !== '') {
	      browser.search($(this).val());
	      $(this).blur();
	    }
	  });
	};

	ChromosomeSelectWidget.prototype.update = function (genome) {
	  this.$select.empty();
	  var list = this.showAllChromosomes ? genome.chromosomeNames.slice() : genome.wgChromosomeNames.slice(); // slice used to copy list

	  if (genome.showWholeGenomeView()) {
	    list.unshift('all');
	    list.unshift('');
	  }

	  var _iterator = _createForOfIteratorHelper(list),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var name = _step.value;
	      var $o;
	      $o = $('<option>', {
	        'value': name
	      });
	      this.$select.append($o);
	      $o.text(name);
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }
	};

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2016 University of California San Diego
	 * Author: Jim Robinson
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var TrackLabelControl = function TrackLabelControl($parent, browser) {
	  var self = this;
	  this.browser = browser;
	  this.$button = $('<div class="igv-navbar-button">');
	  $parent.append(this.$button);
	  this.$button.text('track labels');
	  this.$button.on('click', function () {
	    if (true === browser.trackLabelsVisible) {
	      self.doHide();
	    } else {
	      self.doShow();
	    }
	  });
	};

	TrackLabelControl.prototype.doHide = function () {
	  this.$button.removeClass('igv-navbar-button-clicked');
	  this.browser.hideTrackLabels();
	};

	TrackLabelControl.prototype.doShow = function () {
	  this.$button.addClass('igv-navbar-button-clicked');
	  this.browser.showTrackLabels();
	};

	TrackLabelControl.prototype.setState = function (trackLabelsVisible) {
	  if (true === trackLabelsVisible) {
	    this.$button.addClass('igv-navbar-button-clicked');
	  } else {
	    this.$button.removeClass('igv-navbar-button-clicked');
	  }
	};

	TrackLabelControl.prototype.disable = function () {
	  this.doHide();
	  this.$button.hide();
	};

	TrackLabelControl.prototype.enable = function () {
	  this.$button.show();
	};

	var CenterGuide = /*#__PURE__*/function () {
	  function CenterGuide($guideParent, $controlParent, config, browser) {
	    _classCallCheck(this, CenterGuide);

	    var self = this;
	    this.browser = browser;
	    this.$container = $('<div class="igv-center-guide igv-center-guide-thin">');
	    $guideParent.append(this.$container);

	    if (true === config.showCenterGuideButton) {
	      this.$centerGuideToggle = $('<div class="igv-navbar-button">');
	      $controlParent.append(this.$centerGuideToggle);
	      this.$centerGuideToggle.text('center line');
	      this.$centerGuideToggle.on('click', function () {
	        if (true === browser.isCenterGuideVisible) {
	          self.doHide();
	        } else {
	          self.doShow();
	        }
	      });
	    }
	  }

	  _createClass(CenterGuide, [{
	    key: "doHide",
	    value: function doHide() {
	      if (this.$centerGuideToggle) {
	        this.$centerGuideToggle.removeClass('igv-navbar-button-clicked');
	      }

	      this.browser.hideCenterGuide();
	    }
	  }, {
	    key: "doShow",
	    value: function doShow() {
	      if (this.$centerGuideToggle) {
	        this.$centerGuideToggle.addClass('igv-navbar-button-clicked');
	      }

	      this.browser.showCenterGuide();
	    }
	  }, {
	    key: "setState",
	    value: function setState(isCenterGuideVisible) {
	      if (this.$centerGuideToggle) {
	        if (true === isCenterGuideVisible) {
	          this.$centerGuideToggle.addClass('igv-navbar-button-clicked');
	        } else {
	          this.$centerGuideToggle.removeClass('igv-navbar-button-clicked');
	        }
	      }
	    }
	  }, {
	    key: "forcedHide",
	    value: function forcedHide() {
	      if (this.$centerGuideToggle) {
	        this.$centerGuideToggle.hide();
	      }

	      if (true === this.browser.isCenterGuideVisible) {
	        this.$container.hide();
	      }
	    }
	  }, {
	    key: "forcedShow",
	    value: function forcedShow() {
	      if (this.$centerGuideToggle) {
	        this.$centerGuideToggle.show();
	      }

	      if (true === this.browser.isCenterGuideVisible) {
	        this.$container.show();
	      }
	    }
	  }, {
	    key: "repaint",
	    value: function repaint() {
	      var ppb, xy, halfWidth, width, left, ls, ws, center, referenceFrame;

	      if (this.browser.referenceFrameList) {
	        referenceFrame = this.browser.referenceFrameList[0];
	        ppb = 1.0 / referenceFrame.bpPerPixel;

	        if (ppb > 1) {
	          xy = this.browser.trackViews[0].$viewportContainer.position();
	          halfWidth = Math.round(this.browser.trackViews[0].$viewportContainer.width() / 2);
	          center = xy.left + halfWidth;
	          width = referenceFrame.toPixels(1);
	          left = center - 0.5 * width;
	          ls = Math.round(left).toString() + 'px';
	          ws = Math.round(width).toString() + 'px';
	          this.$container.css({
	            left: ls,
	            width: ws
	          });
	          this.$container.removeClass('igv-center-guide-thin');
	          this.$container.addClass('igv-center-guide-wide');
	        } else {
	          this.$container.css({
	            left: '50%',
	            width: '1px'
	          });
	          this.$container.removeClass('igv-center-guide-wide');
	          this.$container.addClass('igv-center-guide-thin');
	        }
	      }
	    }
	  }, {
	    key: "resize",
	    value: function resize() {
	      this.repaint();
	    }
	  }]);

	  return CenterGuide;
	}();

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2016 University of California San Diego
	 * Author: Jim Robinson
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var CursorGuide = function CursorGuide($cursorGuideParent, $controlParent, config, browser) {
	  var _this = this;

	  var self = this;
	  this.browser = browser;
	  this.$guide = $('<div class="igv-cursor-tracking-guide">');
	  $cursorGuideParent.append(this.$guide); // Guide line is bound within track area, and offset by 5 pixels so as not to interfere mouse clicks.

	  $cursorGuideParent.on('mousemove.cursor-guide', function (e) {
	    e.preventDefault();
	    var $child = $(document.elementFromPoint(e.clientX, e.clientY));
	    var $parent = $child.parent();
	    var $viewport = undefined;

	    if ($parent.hasClass('igv-viewport-content')) {
	      $viewport = $parent.parent();
	    } else if ($parent.hasClass('igv-viewport') && $child.hasClass('igv-viewport-content')) {
	      $viewport = $parent;
	    } else if ($parent.hasClass('igv-viewport-container') && $child.hasClass('igv-viewport')) {
	      $viewport = $child;
	    }

	    var childClass = $child.attr('class') || 'noclass',
	        parentClass = $parent.attr('class') || 'noclass';

	    if ($viewport) {
	      // console.log(`target class ${ $viewport.attr('class') } parent ${ parentClass } child ${ childClass }`);
	      var result = mouseHandler(e, $viewport, _this.$guide, $cursorGuideParent, browser);

	      if (result) {
	        var bp = result.bp,
	            start = result.start,
	            end = result.end,
	            interpolant = result.interpolant;

	        if (_this.customMouseHandler) {
	          _this.customMouseHandler({
	            bp: bp,
	            start: start,
	            end: end,
	            interpolant: interpolant
	          });
	        }
	      }
	    }
	  });

	  if (true === config.showCursorTrackingGuideButton) {
	    this.$button = $('<div class="igv-navbar-button">');
	    $controlParent.append(this.$button);
	    this.$button.text('cursor guide');
	    this.$button.on('click', function () {
	      if (true === browser.cursorGuideVisible) {
	        self.doHide();
	      } else {
	        self.doShow();
	      }
	    });
	  }
	};

	var mouseHandler = function mouseHandler(event, $viewport, $guideLine, $guideParent, browser) {
	  // pixel location of guide line
	  var parent = $guideParent.get(0);

	  var _DOMUtils$translateMo = translateMouseCoordinates$1(event, parent),
	      xParent = _DOMUtils$translateMo.x;

	  var left = "".concat(xParent, "px");
	  $guideLine.css({
	    left: left
	  }); // base-pair location of guide line

	  var _DOMUtils$translateMo2 = translateMouseCoordinates$1(event, $viewport.get(0)),
	      x = _DOMUtils$translateMo2.x,
	      xNormalized = _DOMUtils$translateMo2.xNormalized,
	      width = _DOMUtils$translateMo2.width;

	  var guid = $viewport.data('viewportGUID');
	  var viewport = browser.getViewportWithGUID(guid);

	  if (undefined === viewport) {
	    return undefined;
	  }

	  var _viewport$referenceFr = viewport.referenceFrame,
	      start = _viewport$referenceFr.start,
	      bpPerPixel = _viewport$referenceFr.bpPerPixel; // TODO: Can we make use of this in the custom mouse handler (ie: Tracing3D)

	  var $trackContainer = $viewport.closest('.igv-track-container');
	  return {
	    $host: $trackContainer,
	    host_css_left: left,
	    // units: bp = bp + (pixel * (bp / pixel))
	    bp: Math.round(start + x * bpPerPixel),
	    start: start,
	    end: 1 + start + width * bpPerPixel,
	    interpolant: xNormalized
	  };
	};

	CursorGuide.prototype.doHide = function () {
	  if (this.$button) {
	    this.$button.removeClass('igv-navbar-button-clicked');
	  }

	  this.browser.hideCursorGuide();
	};

	CursorGuide.prototype.doShow = function () {
	  this.$button.addClass('igv-navbar-button-clicked');
	  this.browser.showCursorGuide();
	};

	CursorGuide.prototype.setState = function (cursorGuideVisible) {
	  if (this.$button) {
	    if (true === cursorGuideVisible) {
	      this.$button.addClass('igv-navbar-button-clicked');
	    } else {
	      this.$button.removeClass('igv-navbar-button-clicked');
	    }
	  }
	};

	CursorGuide.prototype.disable = function () {
	  this.doHide();
	  this.$guide.hide();
	};

	CursorGuide.prototype.enable = function () {
	  if (this.$button) {
	    this.$button.show();
	  }
	};

	/*
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2014 Broad Institute
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var NavbarManager = /*#__PURE__*/function () {
	  function NavbarManager(browser) {
	    _classCallCheck(this, NavbarManager);

	    this.browser = browser;
	  }

	  _createClass(NavbarManager, [{
	    key: "navbarDidResize",
	    value: function navbarDidResize(width, isWholeGenomeView) {
	      this.updateNavbar(this.createResponsiveClassSchedule(width, isWholeGenomeView));
	    }
	  }, {
	    key: "updateNavbar",
	    value: function updateNavbar(responsiveClassSchedule) {
	      this.browser['$toggle_button_container'].removeClass();
	      this.browser['$toggle_button_container'].addClass(responsiveClassSchedule['$toggle_button_container']);
	      this.browser.zoomWidget['$zoomContainer'].removeClass();
	      this.browser.zoomWidget['$zoomContainer'].addClass(responsiveClassSchedule['$zoomContainer']);
	    }
	  }, {
	    key: "createResponsiveClassSchedule",
	    value: function createResponsiveClassSchedule(navbarWidth, isWholeGenomeView) {
	      var candidates = {};

	      if (isWholeGenomeView) {
	        this.browser.windowSizePanel.hide();
	      } else {
	        this.browser.windowSizePanel.show();
	      }

	      if (navbarWidth > 990) {
	        candidates['$toggle_button_container'] = 'igv-navbar-toggle-button-container';
	        candidates['$zoomContainer'] = 'igv-zoom-widget';
	      } else if (navbarWidth > 860) {
	        candidates['$toggle_button_container'] = 'igv-navbar-toggle-button-container';
	        candidates['$zoomContainer'] = 'igv-zoom-widget-900';
	      } else if (navbarWidth > 540) {
	        candidates['$toggle_button_container'] = 'igv-navbar-toggle-button-container-750';
	        candidates['$zoomContainer'] = 'igv-zoom-widget-900';
	      } else {
	        candidates['$toggle_button_container'] = 'igv-navbar-toggle-button-container-750';
	        candidates['$zoomContainer'] = 'igv-zoom-widget-900';
	        this.browser.windowSizePanel.hide();
	      }

	      if (isWholeGenomeView) {
	        candidates['$zoomContainer'] = 'igv-zoom-widget-hidden';
	      }

	      return candidates;
	    }
	  }]);

	  return NavbarManager;
	}();

	var allBrowsers = [];
	/**
	 * Create an igv.browser instance.  This object defines the public API for interacting with the genome browser.
	 *
	 * @param parentDiv - DOM tree root
	 * @param config - configuration options.
	 *
	 */

	function createBrowser(_x, _x2) {
	  return _createBrowser.apply(this, arguments);
	}

	function _createBrowser() {
	  _createBrowser = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(parentDiv, config) {
	    var browser, isWGV;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            if (undefined === config) config = {}; // Initialize pre-defined genomes.  The genome list is shared among all browser instances

	            if (GenomeUtils.KNOWN_GENOMES) {
	              _context.next = 4;
	              break;
	            }

	            _context.next = 4;
	            return GenomeUtils.initializeGenomes(config);

	          case 4:
	            setDefaults(config);

	            if (config.queryParametersSupported !== false) {
	              extractQuery(config);
	            }

	            if (config.apiKey) {
	              igvxhr.setApiKey(config.apiKey);
	            }

	            if (config.oauthToken) {
	              oauth.setToken(config.oauthToken);
	            }

	            if (!(config.clientId && !isInitialized())) {
	              _context.next = 11;
	              break;
	            }

	            _context.next = 11;
	            return init$1({
	              clientId: config.clientId,
	              apiKey: config.apiKey,
	              scope: 'https://www.googleapis.com/auth/userinfo.profile'
	            });

	          case 11:
	            // Set track order explicitly. Otherwise they will be ordered randomly as each completes its async load
	            setTrackOrder(config); // Initial browser configuration -- settings that are independent of session

	            browser = new Browser(config, parentDiv);
	            allBrowsers.push(browser);
	            setControls(browser, config);
	            browser.userFeedback = new UserFeedback($(browser.trackContainer));
	            browser.userFeedback.hide();
	            browser.inputDialog = new InputDialog(browser.$root.get(0));
	            browser.dataRangeDialog = new DataRangeDialog(browser.$root);

	            if (false === config.showTrackLabels) {
	              browser.hideTrackLabels();
	            } else {
	              browser.showTrackLabels();

	              if (browser.trackLabelControl) {
	                browser.trackLabelControl.setState(browser.trackLabelsVisible);
	              }
	            }

	            if (false === config.showCursorTrackingGuide) {
	              browser.cursorGuide.doHide();
	            } else {
	              browser.cursorGuide.doShow();
	            }

	            if (false === config.showCenterGuide) {
	              browser.centerGuide.doHide();
	            } else {
	              browser.centerGuide.doShow();
	            } // Load initial session


	            if (!config.sessionURL) {
	              _context.next = 27;
	              break;
	            }

	            _context.next = 25;
	            return browser.loadSession({
	              url: config.sessionURL
	            });

	          case 25:
	            _context.next = 29;
	            break;

	          case 27:
	            _context.next = 29;
	            return browser.loadSessionObject(config);

	          case 29:
	            // Session dependent settings
	            isWGV = browser.isMultiLocusWholeGenomeView() || GenomeUtils.isWholeGenomeView(browser.referenceFrameList[0].chr);

	            if (browser.isMultiLocusMode() || isWGV) {
	              browser.centerGuide.forcedHide();
	            } else {
	              browser.centerGuide.forcedShow();
	            }

	            browser.navbarManager.navbarDidResize(browser.$navigation.width(), isWGV);
	            return _context.abrupt("return", browser);

	          case 33:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));
	  return _createBrowser.apply(this, arguments);
	}

	function removeBrowser(browser) {
	  browser.dispose();
	  browser.$root.remove();
	  allBrowsers = allBrowsers.filter(function (item) {
	    return item !== browser;
	  });
	}

	function removeAllBrowsers() {
	  var _iterator = _createForOfIteratorHelper(allBrowsers),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var browser = _step.value;
	      browser.dispose();
	      browser.$root.remove();
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }

	  allBrowsers = [];
	}
	/**
	 * This function provided so clients can inform igv of a visibility change, typically when an igv instance is
	 * made visible from a tab, accordion, or similar widget.
	 */


	function visibilityChange() {
	  return _visibilityChange.apply(this, arguments);
	}

	function _visibilityChange() {
	  _visibilityChange = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
	    var _iterator2, _step2, browser;

	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            _iterator2 = _createForOfIteratorHelper(allBrowsers);
	            _context2.prev = 1;

	            _iterator2.s();

	          case 3:
	            if ((_step2 = _iterator2.n()).done) {
	              _context2.next = 9;
	              break;
	            }

	            browser = _step2.value;
	            _context2.next = 7;
	            return browser.visibilityChange();

	          case 7:
	            _context2.next = 3;
	            break;

	          case 9:
	            _context2.next = 14;
	            break;

	          case 11:
	            _context2.prev = 11;
	            _context2.t0 = _context2["catch"](1);

	            _iterator2.e(_context2.t0);

	          case 14:
	            _context2.prev = 14;

	            _iterator2.f();

	            return _context2.finish(14);

	          case 17:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2, null, [[1, 11, 14, 17]]);
	  }));
	  return _visibilityChange.apply(this, arguments);
	}

	function setTrackOrder(conf) {
	  var trackOrder = 1;

	  if (conf.tracks) {
	    conf.tracks.forEach(function (track) {
	      if (track.order === undefined) {
	        track.order = trackOrder++;
	      }
	    });
	  }
	}

	function setControls(browser, conf) {
	  var $navBar = createStandardControls(browser, conf);
	  $navBar.insertBefore($(browser.trackContainer));

	  if (false === conf.showControls) {
	    $navBar.hide();
	  }
	}

	function createStandardControls(browser, config) {
	  browser.navbarManager = new NavbarManager(browser);
	  var $navBar = $('<div>', {
	    class: 'igv-navbar'
	  });
	  browser.$navigation = $navBar;
	  var $navbarLeftContainer = $('<div>', {
	    class: 'igv-navbar-left-container'
	  });
	  $navBar.append($navbarLeftContainer); // IGV logo

	  var $logo = $('<div>', {
	    class: 'igv-logo'
	  });
	  $navbarLeftContainer.append($logo);
	  var logoSvg = logo();
	  logoSvg.css("width", "34px");
	  logoSvg.css("height", "32px");
	  $logo.append(logoSvg);
	  browser.$current_genome = $('<div>', {
	    class: 'igv-current-genome'
	  });
	  $navbarLeftContainer.append(browser.$current_genome);
	  browser.$current_genome.text('');
	  var $genomicLocation = $('<div>', {
	    class: 'igv-navbar-genomic-location'
	  });
	  $navbarLeftContainer.append($genomicLocation); // chromosome select widget

	  browser.chromosomeSelectWidget = new ChromosomeSelectWidget(browser, $genomicLocation);

	  if (undefined === config.showChromosomeWidget) {
	    config.showChromosomeWidget = true; // Default to true
	  }

	  if (true === config.showChromosomeWidget) {
	    browser.chromosomeSelectWidget.$container.show();
	  } else {
	    browser.chromosomeSelectWidget.$container.hide();
	  }

	  var $locusSizeGroup = $('<div>', {
	    class: 'igv-locus-size-group'
	  });
	  $genomicLocation.append($locusSizeGroup);
	  var $searchContainer = $('<div>', {
	    class: 'igv-search-container'
	  });
	  $locusSizeGroup.append($searchContainer); // browser.$searchInput = $('<input type="text" placeholder="Locus Search">');

	  browser.$searchInput = $('<input>', {
	    class: 'igv-search-input',
	    type: 'text',
	    placeholder: 'Locus Search'
	  });
	  $searchContainer.append(browser.$searchInput);
	  browser.$searchInput.change(function (e) {
	    browser.search($(this).val()).catch(function (error) {
	      Alert.presentAlert(error);
	    });
	  });
	  var $searchIconContainer = $('<div>', {
	    class: 'igv-search-icon-container'
	  });
	  $searchContainer.append($searchIconContainer);
	  $searchIconContainer.append(createIcon$2("search"));
	  $searchIconContainer.on('click', function () {
	    return browser.search(browser.$searchInput.val());
	  });
	  browser.windowSizePanel = new WindowSizePanel($locusSizeGroup, browser);
	  var $navbarRightContainer = $('<div>', {
	    class: 'igv-navbar-right-container'
	  });
	  $navBar.append($navbarRightContainer);
	  var $toggle_button_container = $('<div class="igv-navbar-toggle-button-container">');
	  $navbarRightContainer.append($toggle_button_container);
	  browser.$toggle_button_container = $toggle_button_container;
	  browser.cursorGuide = new CursorGuide($(browser.trackContainer), $toggle_button_container, config, browser);
	  browser.centerGuide = new CenterGuide($(browser.trackContainer), $toggle_button_container, config, browser);

	  if (true === config.showTrackLabelButton) {
	    browser.trackLabelControl = new TrackLabelControl($toggle_button_container, browser);
	  }

	  if (config.showSVGButton) {
	    browser.svgSaveControl = new SVGSaveControl($toggle_button_container, browser);
	  }

	  browser.zoomWidget = new ZoomWidget(browser, $navbarRightContainer);

	  if (false === config.showNavigation) {
	    browser.$navigation.hide();
	  }

	  return $navBar;
	}

	function setDefaults(config) {
	  if (undefined === config.promisified) {
	    config.promisified = false;
	  }

	  if (undefined === config.minimumBases) {
	    config.minimumBases = 40;
	  }

	  if (undefined === config.showIdeogram) {
	    config.showIdeogram = true;
	  }

	  if (undefined === config.showCursorTrackingGuideButton) {
	    config.showCursorTrackingGuideButton = true;
	  }

	  if (undefined === config.showCenterGuideButton) {
	    config.showCenterGuideButton = true;
	  }

	  if (undefined === config.showSVGButton) {
	    config.showSVGButton = true;
	  }

	  if (undefined === config.showTrackLabelButton) {
	    config.showTrackLabelButton = true;
	  }

	  if (undefined === config.showCursorTrackingGuide) {
	    config.showCursorTrackingGuide = false;
	  }

	  if (undefined === config.showCenterGuide) {
	    config.showCenterGuide = false;
	  }

	  if (undefined === config.showTrackLabels) {
	    config.showTrackLabels = true;
	  }

	  if (config.showControls === undefined) {
	    config.showControls = true;
	  }

	  if (config.showNavigation === undefined) {
	    config.showNavigation = true;
	  }

	  if (config.showRuler === undefined) {
	    config.showRuler = true;
	  }

	  if (config.flanking === undefined) {
	    config.flanking = 1000;
	  }

	  if (config.pairsSupported === undefined) {
	    config.pairsSupported = true;
	  }

	  if (!config.tracks) {
	    config.tracks = [];
	  }
	}

	function extractQuery(config) {
	  var i1, i2, i, j, s, query, tokens, uri, key, value;
	  uri = window.location.href;
	  query = {};
	  i1 = uri.indexOf("?");
	  i2 = uri.lastIndexOf("#");
	  var files;
	  var indexURLs;

	  if (i1 >= 0) {
	    if (i2 < 0) i2 = uri.length;

	    for (i = i1 + 1; i < i2;) {
	      j = uri.indexOf("&", i);
	      if (j < 0) j = i2;
	      s = uri.substring(i, j);
	      tokens = s.split("=", 2);

	      if (tokens.length === 2) {
	        key = tokens[0];
	        value = decodeURIComponent(tokens[1]);

	        if ('file' === key) {
	          // IGV desktop style file parameter
	          files = value.split(',');
	        } else if ('index' === key) {
	          // IGV desktop style index parameter
	          indexURLs = value.split(',');
	        } else {
	          config[key] = value;
	        }

	        i = j + 1;
	      }
	    }
	  }

	  if (files) {
	    if (!config.tracks) config.tracks = [];

	    for (var _i = 0; _i < files.length; _i++) {
	      if (files[_i].endsWith(".xml") || files[_i].endsWith(".json")) {
	        config.sessionURL = files[_i];
	        break;
	      }

	      var trackConfig = {
	        url: files[_i]
	      };

	      if (indexURLs && indexURLs.length > _i) {
	        trackConfig.indexURL = indexURLs[_i];
	      }

	      config.tracks.push(trackConfig);
	    }
	  }

	  return query;
	}

	function logo() {
	  return $('<svg width="690px" height="324px" viewBox="0 0 690 324" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">' + '<title>IGV</title>' + '<g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">' + '<g id="IGV" fill="#666666">' + '<polygon id="Path" points="379.54574 8.00169252 455.581247 8.00169252 515.564813 188.87244 532.884012 253.529506 537.108207 253.529506 554.849825 188.87244 614.833392 8.00169252 689.60164 8.00169252 582.729511 320.722144 486.840288 320.722144"></polygon>' + '<path d="M261.482414,323.793286 C207.975678,323.793286 168.339046,310.552102 142.571329,284.069337 C116.803612,257.586572 103.919946,217.158702 103.919946,162.784513 C103.919946,108.410325 117.437235,67.8415913 144.472217,41.0770945 C171.507199,14.3125977 212.903894,0.930550071 268.663545,0.930550071 C283.025879,0.930550071 298.232828,1.84616386 314.284849,3.6774189 C330.33687,5.50867394 344.839793,7.97378798 357.794056,11.072835 L357.794056,68.968378 C339.48912,65.869331 323.578145,63.5450806 310.060654,61.9955571 C296.543163,60.4460336 284.574731,59.6712835 274.154998,59.6712835 C255.850062,59.6712835 240.502308,61.4320792 228.111274,64.9537236 C215.720241,68.4753679 205.793482,74.2507779 198.330701,82.2801269 C190.867919,90.309476 185.587729,100.87425 182.48997,113.974767 C179.392212,127.075284 177.843356,143.345037 177.843356,162.784513 C177.843356,181.942258 179.251407,198.000716 182.067551,210.960367 C184.883695,223.920018 189.671068,234.41436 196.429813,242.443709 C203.188559,250.473058 212.059279,256.178037 223.042241,259.558815 C234.025202,262.939594 247.683295,264.629958 264.01693,264.629958 C268.241146,264.629958 273.098922,264.489094 278.590403,264.207362 C284.081883,263.925631 289.643684,263.50304 295.275972,262.939577 L295.275972,159.826347 L361.595831,159.826347 L361.595831,308.579859 C344.698967,313.087564 327.239137,316.750019 309.215815,319.567334 C291.192494,322.38465 275.281519,323.793286 261.482414,323.793286 L261.482414,323.793286 L261.482414,323.793286 Z" id="Path"></path>;' + '<polygon id="Path" points="0.81355666 5.00169252 73.0472883 5.00169252 73.0472883 317.722144 0.81355666 317.722144"></polygon>' + '</g> </g> </svg>');
	}

	function embedCSS$1() {
	  var css = '.igv-generic-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 2048;\n  background-color: white;\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  align-items: center; }\n  .igv-generic-container div:first-child {\n    cursor: move;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-end;\n    align-items: center;\n    height: 24px;\n    width: 100%;\n    background-color: #dddddd; }\n    .igv-generic-container div:first-child i {\n      display: block;\n      color: #5f5f5f;\n      cursor: pointer;\n      width: 14px;\n      height: 14px;\n      margin-right: 8px;\n      margin-bottom: 4px; }\n\n.igv-generic-dialog-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 300px;\n  height: 200px;\n  border-color: #7F7F7F;\n  border-radius: 4px;\n  border-style: solid;\n  border-width: thin;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  z-index: 2048;\n  background-color: white;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center; }\n  .igv-generic-dialog-container .igv-generic-dialog-header {\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-end;\n    align-items: center;\n    width: 100%;\n    height: 24px;\n    cursor: move;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n    border-bottom-color: #7F7F7F;\n    border-bottom-style: solid;\n    border-bottom-width: thin;\n    background-color: #eee; }\n    .igv-generic-dialog-container .igv-generic-dialog-header div {\n      margin-right: 4px;\n      margin-bottom: 2px;\n      height: 12px;\n      width: 12px;\n      color: #7F7F7F; }\n    .igv-generic-dialog-container .igv-generic-dialog-header div:hover {\n      cursor: pointer;\n      color: #444; }\n  .igv-generic-dialog-container .igv-generic-dialog-one-liner {\n    color: #373737;\n    width: 95%;\n    height: 24px;\n    line-height: 24px;\n    text-align: left;\n    margin-top: 8px;\n    padding-left: 8px;\n    overflow-wrap: break-word;\n    background-color: white; }\n  .igv-generic-dialog-container .igv-generic-dialog-label-input {\n    margin-top: 8px;\n    width: 95%;\n    height: 24px;\n    color: #373737;\n    line-height: 24px;\n    padding-left: 8px;\n    background-color: white;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n    align-items: center; }\n    .igv-generic-dialog-container .igv-generic-dialog-label-input div {\n      width: 30%;\n      height: 100%;\n      font-size: 16px;\n      text-align: right;\n      padding-right: 8px;\n      background-color: white; }\n    .igv-generic-dialog-container .igv-generic-dialog-label-input input {\n      display: block;\n      height: 100%;\n      width: 100%;\n      padding-left: 4px;\n      font-family: \"Open Sans\", sans-serif;\n      font-weight: 400;\n      color: #373737;\n      text-align: left;\n      outline: none;\n      border-style: solid;\n      border-width: thin;\n      border-color: #7F7F7F;\n      background-color: white; }\n    .igv-generic-dialog-container .igv-generic-dialog-label-input input {\n      width: 50%;\n      font-size: 16px; }\n  .igv-generic-dialog-container .igv-generic-dialog-input {\n    margin-top: 8px;\n    width: calc(100% - 16px);\n    height: 24px;\n    color: #373737;\n    line-height: 24px;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: space-around;\n    align-items: center; }\n    .igv-generic-dialog-container .igv-generic-dialog-input input {\n      display: block;\n      height: 100%;\n      width: 100%;\n      padding-left: 4px;\n      font-family: \"Open Sans\", sans-serif;\n      font-weight: 400;\n      color: #373737;\n      text-align: left;\n      outline: none;\n      border-style: solid;\n      border-width: thin;\n      border-color: #7F7F7F;\n      background-color: white; }\n    .igv-generic-dialog-container .igv-generic-dialog-input input {\n      font-size: 16px; }\n  .igv-generic-dialog-container .igv-generic-dialog-ok-cancel {\n    width: 100%;\n    height: 28px;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: space-around;\n    align-items: center; }\n    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel div {\n      margin-top: 32px;\n      color: white;\n      font-family: \"Open Sans\", sans-serif;\n      font-size: 14px;\n      font-weight: 400;\n      width: 75px;\n      height: 28px;\n      line-height: 28px;\n      text-align: center;\n      border-color: transparent;\n      border-style: solid;\n      border-width: thin;\n      border-radius: 2px; }\n    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:first-child {\n      margin-left: 32px;\n      margin-right: 0;\n      background-color: #5ea4e0; }\n    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:last-child {\n      margin-left: 0;\n      margin-right: 32px;\n      background-color: #c4c4c4; }\n    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:first-child:hover {\n      cursor: pointer;\n      background-color: #3b5c7f; }\n    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:last-child:hover {\n      cursor: pointer;\n      background-color: #7f7f7f; }\n  .igv-generic-dialog-container .igv-generic-dialog-ok {\n    width: 100%;\n    height: 36px;\n    margin-top: 32px;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: space-around;\n    align-items: center; }\n    .igv-generic-dialog-container .igv-generic-dialog-ok div {\n      width: 98px;\n      height: 36px;\n      line-height: 36px;\n      text-align: center;\n      color: white;\n      font-family: \"Open Sans\", sans-serif;\n      font-size: medium;\n      font-weight: 400;\n      border-color: white;\n      border-style: solid;\n      border-width: thin;\n      border-radius: 4px;\n      background-color: #2B81AF; }\n    .igv-generic-dialog-container .igv-generic-dialog-ok div:hover {\n      cursor: pointer;\n      background-color: #25597f; }\n\n.igv-menu-popup {\n  position: absolute;\n  top: 0;\n  left: 0;\n  min-width: 132px;\n  z-index: 4096;\n  cursor: pointer;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: small;\n  font-weight: 400;\n  color: #4b4b4b;\n  background: white;\n  border-radius: 4px;\n  border-color: #7F7F7F;\n  border-style: solid;\n  border-width: thin;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: flex-end;\n  text-align: left; }\n  .igv-menu-popup > div:not(:first-child) {\n    width: 100%; }\n    .igv-menu-popup > div:not(:first-child) > div {\n      background: white; }\n    .igv-menu-popup > div:not(:first-child) > div.context-menu {\n      padding-left: 4px;\n      padding-right: 4px; }\n    .igv-menu-popup > div:not(:first-child) > div:last-child {\n      border-bottom-left-radius: 4px;\n      border-bottom-right-radius: 4px;\n      border-bottom-color: transparent;\n      border-bottom-style: solid;\n      border-bottom-width: thin; }\n    .igv-menu-popup > div:not(:first-child) > div:hover {\n      background: #efefef; }\n\n.igv-menu-popup-shim {\n  padding-left: 8px;\n  padding-right: 8px; }\n\n.igv-menu-popup-header {\n  position: relative;\n  width: 100%;\n  height: 24px;\n  cursor: move;\n  border-top-color: transparent;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-color: #7F7F7F;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n  background-color: #eee;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  align-items: center; }\n  .igv-menu-popup-header div {\n    margin-right: 4px;\n    height: 12px;\n    width: 12px;\n    color: #7F7F7F; }\n  .igv-menu-popup-header div:hover {\n    cursor: pointer;\n    color: #444; }\n\n.igv-menu-popup-check-container {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  height: 20px;\n  background-color: transparent; }\n  .igv-menu-popup-check-container div {\n    padding-top: 2px;\n    padding-left: 8px; }\n  .igv-menu-popup-check-container div:first-child {\n    position: relative;\n    width: 12px;\n    height: 12px; }\n    .igv-menu-popup-check-container div:first-child svg {\n      position: absolute;\n      width: 12px;\n      height: 12px; }\n\n.igv-user-feedback {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 512px;\n  height: 360px;\n  z-index: 2048;\n  background-color: white;\n  border-color: #a2a2a2;\n  border-style: solid;\n  border-width: thin;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  color: #444;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center; }\n  .igv-user-feedback div:first-child {\n    position: relative;\n    height: 24px;\n    width: 100%;\n    background-color: white;\n    border-bottom-color: #a2a2a2;\n    border-bottom-style: solid;\n    border-bottom-width: thin; }\n    .igv-user-feedback div:first-child div {\n      position: absolute;\n      top: 2px;\n      width: 16px;\n      height: 16px;\n      background-color: transparent; }\n    .igv-user-feedback div:first-child div:first-child {\n      left: 8px; }\n    .igv-user-feedback div:first-child div:last-child {\n      cursor: pointer;\n      right: 8px; }\n  .igv-user-feedback div:last-child {\n    width: 100%;\n    height: calc(100% - 24px);\n    border-width: 0; }\n    .igv-user-feedback div:last-child div {\n      width: auto;\n      height: auto;\n      margin: 8px; }\n\n.igv-root {\n  position: relative;\n  padding-top: 4px;\n  margin-left: 10px;\n  margin-right: 10px;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: stretch; }\n  .igv-root .igv-navbar {\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: space-between;\n    align-items: center;\n    color: #444;\n    font-size: 12px;\n    font-family: \"Open Sans\", sans-serif;\n    font-weight: 400;\n    line-height: 32px;\n    padding-left: 8px;\n    padding-right: 8px;\n    margin-top: 2px;\n    margin-bottom: 4px;\n    height: 32px;\n    border-style: solid;\n    border-radius: 3px;\n    border-width: thin;\n    border-color: #bfbfbf;\n    background-color: #f3f3f3; }\n    .igv-root .igv-navbar .igv-navbar-left-container {\n      display: flex;\n      flex-flow: row;\n      flex-wrap: nowrap;\n      justify-content: space-between;\n      align-items: center;\n      height: 32px;\n      line-height: 32px; }\n      .igv-root .igv-navbar .igv-navbar-left-container .igv-logo {\n        width: 34px;\n        height: 32px;\n        margin-right: 8px; }\n      .igv-root .igv-navbar .igv-navbar-left-container .igv-current-genome {\n        height: 32px;\n        margin-left: 4px;\n        margin-right: 4px;\n        user-select: none;\n        line-height: 32px;\n        vertical-align: middle;\n        text-align: center; }\n      .igv-root .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location {\n        display: flex;\n        flex-flow: row;\n        flex-wrap: nowrap;\n        justify-content: space-between;\n        align-items: center;\n        height: 100%; }\n        .igv-root .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-chromosome-select-widget-container {\n          display: flex;\n          flex-flow: column;\n          flex-wrap: nowrap;\n          justify-content: space-around;\n          align-items: center;\n          height: 100%;\n          width: 125px;\n          margin-right: 4px; }\n          .igv-root .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-chromosome-select-widget-container select {\n            display: block;\n            cursor: pointer;\n            width: 100px;\n            height: 75%;\n            outline: none;\n            font-size: 12px;\n            font-family: \"Open Sans\", sans-serif;\n            font-weight: 400; }\n        .igv-root .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-locus-size-group {\n          display: flex;\n          flex-flow: row;\n          flex-wrap: nowrap;\n          justify-content: space-between;\n          align-items: center;\n          margin-left: 8px;\n          height: 22px; }\n          .igv-root .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-locus-size-group .igv-search-container {\n            display: flex;\n            flex-flow: row;\n            flex-wrap: nowrap;\n            justify-content: flex-start;\n            align-items: center;\n            width: 200px;\n            height: 22px;\n            line-height: 22px; }\n            .igv-root .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-locus-size-group .igv-search-container input.igv-search-input {\n              cursor: text;\n              width: 85%;\n              height: 22px;\n              line-height: 22px;\n              font-size: 12px;\n              font-family: \"Open Sans\", sans-serif;\n              font-weight: 400;\n              text-align: left;\n              padding-left: 8px;\n              margin-right: 8px;\n              outline: none;\n              border-style: solid;\n              border-radius: 3px;\n              border-width: thin;\n              border-color: #bfbfbf;\n              background-color: white; }\n            .igv-root .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-locus-size-group .igv-search-container .igv-search-icon-container {\n              cursor: pointer;\n              height: 16px;\n              width: 16px; }\n          .igv-root .igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-locus-size-group .igv-windowsize-panel-container {\n            margin-left: 4px;\n            user-select: none; }\n    .igv-root .igv-navbar .igv-navbar-right-container {\n      display: flex;\n      flex-flow: row;\n      flex-wrap: nowrap;\n      justify-content: space-between;\n      align-items: center;\n      height: 32px;\n      line-height: 32px; }\n      .igv-root .igv-navbar .igv-navbar-right-container .igv-navbar-toggle-button-container {\n        display: flex;\n        flex-flow: row;\n        flex-wrap: nowrap;\n        justify-content: space-between;\n        align-items: center;\n        height: 100%; }\n        .igv-root .igv-navbar .igv-navbar-right-container .igv-navbar-toggle-button-container div {\n          margin-left: 0;\n          margin-right: 4px; }\n        .igv-root .igv-navbar .igv-navbar-right-container .igv-navbar-toggle-button-container div:last-child {\n          margin-left: 0;\n          margin-right: 0; }\n      .igv-root .igv-navbar .igv-navbar-right-container .igv-navbar-toggle-button-container-750 {\n        display: none; }\n      .igv-root .igv-navbar .igv-navbar-right-container .igv-zoom-widget {\n        color: #737373;\n        font-size: 18px;\n        height: 32px;\n        line-height: 32px;\n        margin-left: 8px;\n        user-select: none;\n        display: flex;\n        flex-flow: row;\n        flex-wrap: nowrap;\n        justify-content: flex-end;\n        align-items: center; }\n        .igv-root .igv-navbar .igv-navbar-right-container .igv-zoom-widget div {\n          cursor: pointer;\n          margin-left: unset;\n          margin-right: unset; }\n        .igv-root .igv-navbar .igv-navbar-right-container .igv-zoom-widget div:first-child {\n          height: 24px;\n          width: 24px;\n          margin-left: unset;\n          margin-right: 8px; }\n        .igv-root .igv-navbar .igv-navbar-right-container .igv-zoom-widget div:last-child {\n          height: 24px;\n          width: 24px;\n          margin-left: 8px;\n          margin-right: unset; }\n        .igv-root .igv-navbar .igv-navbar-right-container .igv-zoom-widget div:nth-child(even) {\n          display: block;\n          height: fit-content; }\n        .igv-root .igv-navbar .igv-navbar-right-container .igv-zoom-widget input {\n          display: block;\n          width: 125px; }\n        .igv-root .igv-navbar .igv-navbar-right-container .igv-zoom-widget svg {\n          display: block; }\n      .igv-root .igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 {\n        color: #737373;\n        font-size: 18px;\n        height: 32px;\n        line-height: 32px;\n        margin-left: 8px;\n        user-select: none;\n        display: flex;\n        flex-flow: row;\n        flex-wrap: nowrap;\n        justify-content: flex-end;\n        align-items: center; }\n        .igv-root .igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 div {\n          cursor: pointer;\n          margin-left: unset;\n          margin-right: unset; }\n        .igv-root .igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 div:first-child {\n          height: 24px;\n          width: 24px;\n          margin-left: unset;\n          margin-right: 8px; }\n        .igv-root .igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 div:last-child {\n          height: 24px;\n          width: 24px;\n          margin-left: 8px;\n          margin-right: unset; }\n        .igv-root .igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 div:nth-child(even) {\n          width: 0;\n          height: 0;\n          display: none; }\n        .igv-root .igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 input {\n          width: 0;\n          height: 0;\n          display: none; }\n        .igv-root .igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 svg {\n          display: block; }\n      .igv-root .igv-navbar .igv-navbar-right-container .igv-zoom-widget-hidden {\n        display: none; }\n  .igv-root .igv-ideogram-container {\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n    align-items: center;\n    margin-top: 10px;\n    height: 16px;\n    width: 100%; }\n    .igv-root .igv-ideogram-container .igv-ideogram-content {\n      height: 100%;\n      background-color: white; }\n    .igv-root .igv-ideogram-container .igv-ideogram-content:first-child {\n      margin-left: 50px; }\n    .igv-root .igv-ideogram-container .igv-ideogram-content-border-right {\n      border-right-color: #292929;\n      border-right-style: solid;\n      border-right-width: 1px; }\n  .igv-root .igv-track-container {\n    position: relative; }\n\n.igv-multi-locus-separator {\n  pointer-events: none;\n  user-select: none;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  z-index: 2;\n  width: 1px;\n  background-color: gray; }\n\n.igv-track-container-spinner {\n  position: absolute;\n  top: 90%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1024;\n  width: 24px;\n  height: 24px;\n  pointer-events: none;\n  color: #737373; }\n\n.igv-track {\n  position: relative;\n  width: 100%;\n  margin-top: 4px;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: stretch; }\n\n.igv-left-hand-gutter {\n  width: 50px;\n  height: 100%; }\n\n.igv-right-hand-gutter {\n  position: relative;\n  width: 36px;\n  height: 100%;\n  background: white; }\n\n.igv-viewport-container {\n  position: relative;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: stretch;\n  width: calc(100% - 112px);\n  height: 100%; }\n  .igv-viewport-container .igv-viewport {\n    position: relative;\n    height: 100%;\n    overflow-x: hidden;\n    overflow-y: hidden;\n    background-color: white; }\n  .igv-viewport-container .igv-viewport-multi-locus-gap-shim {\n    height: 100%;\n    width: 1px;\n    margin-left: 2px;\n    margin-right: 2px;\n    background-color: transparent; }\n\n.igv-viewport-content {\n  position: relative;\n  width: 100%; }\n\n.igv-canvas {\n  position: relative;\n  display: block; }\n\n.igv-scrollbar-shim {\n  position: relative;\n  width: 14px;\n  height: 100%;\n  background-color: white; }\n\n.igv-scrollbar-outer-div {\n  position: relative;\n  width: 14px;\n  height: 100%;\n  background-color: white; }\n  .igv-scrollbar-outer-div > div {\n    cursor: pointer;\n    position: absolute;\n    top: 0;\n    left: 2px;\n    width: 8px;\n    border-width: 1px;\n    border-style: solid;\n    border-color: #c4c4c4;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n    border-bottom-left-radius: 4px;\n    border-bottom-right-radius: 4px;\n    background-color: transparent; }\n  .igv-scrollbar-outer-div > div:hover {\n    background-color: #c4c4c4; }\n\n.igv-viewport-border-right {\n  border-right-color: #292929;\n  border-right-style: solid;\n  border-right-width: 1px; }\n\n.igv-viewport-ruler {\n  cursor: pointer;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: 10px;\n  font-weight: 200;\n  text-align: center; }\n  .igv-viewport-ruler > div {\n    height: 100%; }\n\n.igv-track-manipulation-handle {\n  position: relative;\n  cursor: pointer;\n  width: 12px;\n  height: 100%;\n  margin-left: 0;\n  font-size: medium;\n  border-color: #c4c4c4;\n  border-style: solid;\n  border-width: 0;\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n  z-index: 512;\n  background-color: #c4c4c4; }\n\n.igv-track-manipulation-handle:hover,\n.igv-track-manipulation-handle:focus,\n.igv-track-manipulation-handle:active {\n  border-color: #7e7e7e;\n  background-color: #7e7e7e; }\n\n.igv-multi-locus-panel-border {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 1px;\n  background-color: green;\n  border-right-color: #ff0000;\n  border-right-style: solid;\n  border-right-width: 1px; }\n\n.igv-navbar-button {\n  box-sizing: unset;\n  padding-left: 6px;\n  padding-right: 6px;\n  height: 18px;\n  text-transform: capitalize;\n  user-select: none;\n  line-height: 18px;\n  text-align: center;\n  vertical-align: middle;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: 11px;\n  font-weight: 200;\n  color: #737373;\n  background-color: #f3f3f3;\n  border-color: #737373;\n  border-style: solid;\n  border-width: thin;\n  border-radius: 6px; }\n\n.igv-navbar-button-clicked {\n  color: white;\n  background-color: #737373; }\n\n.igv-navbar-button:hover {\n  cursor: pointer; }\n\n.igv-logo-nonav {\n  margin-left: 4px;\n  margin-top: 12px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 34px;\n  height: 16px; }\n\n.igv-search-results {\n  position: absolute;\n  top: 32px;\n  left: 2px;\n  height: 320px;\n  width: 213px;\n  background-color: white;\n  border-color: #7F7F7F;\n  border-style: solid;\n  border-width: thin;\n  overflow-x: hidden;\n  overflow-y: auto;\n  z-index: 9999; }\n  .igv-search-results tr {\n    font-family: \"Open Sans\", sans-serif;\n    font-size: small;\n    font-weight: 400;\n    color: #444; }\n  .igv-search-results tr:hover,\n  .igv-search-results tr:focus,\n  .igv-search-results tr:active {\n    cursor: pointer;\n    font-weight: 700;\n    color: #141414; }\n\n.igv-viewport-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: rgba(0, 0, 0, 0.15);\n  font-family: \"Open Sans\", sans-serif;\n  font-size: 25px;\n  font-weight: bold;\n  user-select: none; }\n\n.igv-whole-genome-container {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  width: 100%;\n  height: 100%;\n  background-color: white; }\n  .igv-whole-genome-container div {\n    font-family: \"Open Sans\", sans-serif;\n    font-size: 10px;\n    font-weight: 400;\n    color: #444;\n    height: 100%;\n    text-align: center;\n    border-right-color: #bfbfbf;\n    border-right-style: solid;\n    border-right-width: thin; }\n    .igv-whole-genome-container div span {\n      display: block;\n      padding-top: 6px;\n      text-overflow: ellipsis; }\n  .igv-whole-genome-container div:last-child {\n    border-right-color: transparent; }\n  .igv-whole-genome-container div:hover,\n  .igv-whole-genome-container div:focus,\n  .igv-whole-genome-container div:active {\n    cursor: pointer;\n    background-color: #efefef; }\n\n.igv-multi-locus-panel-close-container {\n  position: absolute;\n  top: 4px;\n  right: 4px;\n  width: 16px;\n  height: 16px;\n  color: #666666;\n  z-index: 1000; }\n\n.igv-multi-locus-panel-close-container:hover {\n  cursor: pointer;\n  color: #434343; }\n\n.igv-multi-locus-panel-label-div {\n  position: absolute;\n  left: 50%;\n  top: 15%;\n  transform: translate(-50%, -25%);\n  font-family: \"Open Sans\", sans-serif;\n  font-size: 12px;\n  font-weight: 400;\n  text-align: center;\n  min-width: 16px;\n  z-index: 64;\n  color: #373737;\n  background-color: white;\n  padding: 1px; }\n\n.igv-multi-locus-panel-label-div:hover {\n  cursor: pointer; }\n\n.igv-viewport-spinner {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1024;\n  width: 24px;\n  height: 24px;\n  pointer-events: none;\n  color: #737373; }\n\n.igv-ruler-sweeper-div {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 0;\n  height: 100%;\n  z-index: 99999;\n  background-color: rgba(68, 134, 247, 0.25); }\n\n.igv-track-menu-border-top {\n  border-top-color: #a2a2a2;\n  border-top-style: solid;\n  border-top-width: thin; }\n\n.igv-track-menu-category {\n  padding-left: 4px;\n  font-weight: 400; }\n\n.igv-track-drag-scrim {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 256;\n  background-color: rgba(68, 134, 247, 0.25); }\n\n.igv-trackgear-container {\n  position: relative;\n  width: 20px;\n  height: 20px;\n  margin-left: 4px;\n  color: #7F7F7F; }\n\n.igv-trackgear-container:hover {\n  cursor: pointer;\n  color: #444; }\n\n.igv-track-label {\n  position: absolute;\n  left: 8px;\n  top: 8px;\n  width: auto;\n  height: auto;\n  max-width: 200px;\n  padding-left: 4px;\n  padding-right: 4px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: small;\n  font-weight: 400;\n  text-align: center;\n  user-select: none;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  border-color: #444;\n  border-radius: 2px;\n  border-style: solid;\n  border-width: thin;\n  background-color: white;\n  z-index: 128;\n  cursor: pointer; }\n\n.igv-track-label:hover,\n.igv-track-label:focus,\n.igv-track-label:active {\n  background-color: rgba(0, 0, 0, 0.05); }\n\n.zoom-in-notice-container {\n  position: absolute;\n  top: 10px;\n  left: 50%; }\n  .zoom-in-notice-container div {\n    position: relative;\n    left: -50%;\n    font-family: \"Open Sans\", sans-serif;\n    font-size: medium;\n    font-weight: 400;\n    color: #3f3f3f;\n    background-color: rgba(255, 255, 255, 0.51);\n    z-index: 64; }\n\n.igv-center-guide {\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 50%;\n  width: 8px;\n  z-index: 8;\n  display: none;\n  user-select: none;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  border-left-style: dashed;\n  border-left-width: thin;\n  border-right-style: dashed;\n  border-right-width: thin; }\n\n.igv-center-guide-wide {\n  background-color: rgba(0, 0, 0, 0);\n  border-left-color: rgba(127, 127, 127, 0.51);\n  border-right-color: rgba(127, 127, 127, 0.51); }\n\n.igv-center-guide-thin {\n  left: 50%;\n  width: 1px;\n  background-color: rgba(0, 0, 0, 0);\n  border-left-color: rgba(127, 127, 127, 0.51);\n  border-right-color: rgba(0, 0, 0, 0);\n  /*background-color: rgba(127, 127, 127, 0.51);*/\n  /*border-left-color: rgba(0,0,0,0);*/\n  /*border-right-color: rgba(0,0,0,0);*/ }\n\n.igv-cursor-tracking-guide {\n  pointer-events: none;\n  user-select: none;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 50%;\n  width: 1px;\n  z-index: 1;\n  border-left-style: dotted;\n  border-left-width: thin;\n  border-left-color: rgba(127, 127, 127, 0.76);\n  display: none; }\n\n.igv-clickable {\n  cursor: pointer;\n  background-color: white; }\n\n#color-by-tag {\n  color: #444; }\n\n#color-by-tag:hover,\n#color-by-tag:focus,\n#color-by-tag:active {\n  cursor: pointer;\n  padding-left: 2px;\n  padding-right: 2px;\n  color: white;\n  border-color: #444;\n  border-radius: 2px;\n  border-style: solid;\n  border-width: thin;\n  background-color: #7f7f7f; }\n\n.igv-ellipsis {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis; }\n\n.igv-spinner-container {\n  color: #3f3f3f;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  padding-top: 8px;\n  font-size: 24px;\n  z-index: 512; }\n\n.igv-fa-check-visible {\n  color: inherit;\n  padding-right: 2px; }\n\n.igv-fa-check-hidden {\n  color: transparent;\n  padding-right: 2px; }\n\n.validateTips {\n  border: 1px solid transparent;\n  padding: 0.3em; }\n  .validateTips fieldset {\n    border: 0; }\n\n.igv-spacer-10 {\n  height: 10px;\n  width: 100%;\n  font-size: 0;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  display: block; }\n\n.igv-fa5-spin {\n  -webkit-animation: igv-fa5-spin 2s infinite linear;\n  animation: igv-fa5-spin 2s infinite linear; }\n\n@-webkit-keyframes igv-fa5-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg); } }\n@keyframes igv-fa5-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg); } }\n\n/*# sourceMappingURL=igv.css.map */\n';
	  var style = document.createElement('style');
	  style.setAttribute('type', 'text/css');
	  style.innerHTML = css;
	  document.head.insertBefore(style, document.head.childNodes[document.head.childNodes.length - 1]);
	}

	// Defines the top-level API for the igv module
	var xhr = igvxhr;
	var setApiKey = igvxhr.setApiKey;
	embedCSS$1();

	function setGoogleOauthToken(accessToken) {
	  return oauth.setToken(accessToken);
	}

	var index$1 = {
	  createBrowser: createBrowser,
	  removeBrowser: removeBrowser,
	  removeAllBrowsers: removeAllBrowsers,
	  visibilityChange: visibilityChange,
	  setGoogleOauthToken: setGoogleOauthToken,
	  oauth: oauth,
	  version: version$2,
	  xhr: xhr,
	  setApiKey: setApiKey
	};

	return index$1;

})));
